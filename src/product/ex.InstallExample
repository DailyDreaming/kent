#!/bin/sh
#
#	Typical sequence of commands for an install
#
#	$Id: ex.InstallExample,v 1.6 2005/03/07 20:57:56 hiram Exp $
#
#	The following example sequence assumes everything works
#	perfectly.  There is no error checking on these commands to
#	verify they are functioning OK.
#
#	The script must have the environment variables:
#	WEBROOT  CDROM  GBDB
#	defined.
#
if [ -z "${WEBROOT}" ]; then
	echo "ERROR: Need to set WEBROOT"
	echo -e "\tIt is typically /var/www or /usr/local/apache"
	exit 255
fi

if [ -z "${CDROM}" ]; then
	echo "ERROR: Need to set CDROM, the mount directory of the CD"
	echo -e "\tIt is typically /mnt/cdrom"
	exit 255
fi

if [ -z "${GBDB}" ]; then
	echo "ERROR: Need to set GBDB, a directory with 200 Mb of free space"
	echo -e "\tIf you expect to load the entire UCSC Genome Browser"
	echo -e "\texpect to use more than 400 Gb of data here."
	exit 255
fi

if [ ! -d ${CDROM}/webrootHTML ]; then
	echo "ERROR: Can not find data at ${CDROM}"
	echo -e "\tIs the CD mounted there ?"
	exit 255
fi

#	Establish MySQL user permissions
${CDROM}/example/MySQLUserPerms.sh

#	Verify that those MySQL permissions are working

mysql -u browser -pgenome -e "show tables;" mysql

if [ "$?" -ne 0 ]; then
    echo "ERROR: problem with MySQL permissions for MySQL user 'browser'"
    echo "using the password 'genome'.  This was expected to have been"
    echo "set up with the MySQLUserPerms.sh script."
    exit 255
fi

#	Create directories for the browser html and cgi binaries
mkdir -p ${WEBROOT}/html
mkdir -p ${WEBROOT}/cgi-bin
chmod 755 ${WEBROOT}/cgi-bin
mkdir -p ${WEBROOT}/trash
chmod 777 ${WEBROOT}/trash
ln -s ${WEBROOT}/trash  ${WEBROOT}/html/trash

#	Copy static HTML pages and CGI binaries
cp -Rp ${CDROM}/webrootHTML/* ${WEBROOT}/html
cp -p ${CDROM}/built_CGI-BIN/* ${WEBROOT}/cgi-bin

#	Create hgcentral database
mysql -u browser -pgenome -e "DROP DATABASE hgcentral;" mysql
mysql -u browser -pgenome -e "CREATE DATABASE hgcentral;" mysql
if [ "$?" -ne 0 ]; then
    echo "ERROR: mysql create database hgcentral not functioning"
    exit 255;
fi

mysql -u browser -pgenome hgcentral < ${CDROM}/example/hgcentral.sql
if [ "$?" -ne 0 ]; then
    echo "ERROR: mysql loading database hgcentral not functioning"
    exit 255;
fi

#	Set cgi-bin/hg.conf for CGI binaries to access MySQL
cp ${CDROM}/example/hg.conf ${WEBROOT}/cgi-bin

#	Copy goldenPath data
cp -Rp ${CDROM}/goldenPath ${WEBROOT}/html

#	Copy the /gbdb data
cp -Rp ${CDROM}/gbdb ${GBDB}

#	Create hgFixed and cb1 databases and load their data.
#	cb1 was named before systematic naming was in effect,
#		fixup its name to work in the loop below
cd ${WEBROOT}/html/goldenPath
ln -s cbJul2002 cb1

for DIR_NAME in cb1 hgFixed proteinDB/proteins040315
do
    DB=`basename ${DIR_NAME}`
    #	Create the cb1 database and load its data
    mysql -u browser -pgenome -e "DROP DATABASE ${DB};" mysql
    mysql -u browser -pgenome -e "CREATE DATABASE ${DB};" mysql
    if [ "$?" -ne 0 ]; then
	echo "ERROR: mysql create database ${DB} not functioning"
	exit 255;
    fi
    cd ${WEBROOT}/html/goldenPath/${DIR_NAME}/database
    for SQL in *.sql
    do
	T_NAME=${SQL%%.sql}
	echo "loading table ${DB}.${T_NAME} from ${SQL} and ${T_NAME}.txt.gz"
	mysql -u browser -pgenome ${DB} -e "DROP TABLE ${T_NAME};" 2> /dev/null
	mysql -u browser -pgenome ${DB} < ${SQL}
	zcat "${T_NAME}.txt.gz" | mysql -u browser -pgenome ${DB} \
	    --local-infile=1 -e \
	    "LOAD DATA LOCAL INFILE \"/dev/stdin\" INTO TABLE ${T_NAME};"
    done
done
#
#	An alternative to loading the database tables from text files,
#	is to directly rsync the MySQL tables themselves and place them
#	in your MySQL /var/ directory.  These tables are much larger
#	than the text files due to the sizes of indexes created during a
#	table load, but it can save a lot of time since the data loading
#	step is quite compute intensive.  A typical rsync command for an
#	entire database would be something like:
#	rsync -avzP --delete --max-delete=20 \
#		rsync://hgdownload.cse.ucsc.edu/mysql/hg17/ \
#		/var/lib/mysql/hg17/
#
