v03 - Adding nil as a constant that can be used to initialize
      anything (numbers to 0, objects to nil object).
--------------------------------------------------------------------
version 02 - April 23, 2005.   It's about a month into ParaFlow
development now.  (I started the tokenizer on the plane to Penn State U
on March 22, and worked on it a little bit while at PSU.)  

The system has gotten a bit more robust now, though some syntax errors
and stuff involving 'var' data may still crash it.  The tests are now
run automatically with 'make test'.  

Along with a lot of debugging, the following new features are in
  - Allowing print to go to file.
  - Adding scan (to go with print).
  - Making print not die on circular links.
  - Allowing static variables inside of a function.
  - Adding default parameters to class initialization.
  - Adding default parameters to function calls.  
  - Implement += for strings and arrays.
  - Make array of var work.
  - Make sure that assigning a typed variable from a var variable
    does the right thing.
  - Get the quote to markers to work.
  - Make foreach where the collection is a member variable work.
  - Decided against letting assignments return a value, since
    the foreach var in funcCall() removes most of the need.  
  - Make foreach result in funcCall work.
  - make L work in numerical constants,
  - Make it ok to have extra trailing comma in an initialization
    before a ).
  - Making virtual functions happen.
  - Yank out constant type optimization in pfType, particularly
    in coerceType routine.
  - Sort the _pf_base_info table before writing it.
  - Make it so that during runtime the typeId's of subparts
    of collected ID's are filled in.  Currently they are often
    zero, which results in memory leakage when freeing arrays
    of objects.  This might be best accomplished by some
    sort of transitive closure either when the compiler
    writes out the type table, or when the runtime reads it
    in.
  - Put command line arguments into an array of strings the
    user can access.  Call it args[]?
  - Make foreach work on dirs.
  - Implementing dir objects.  (Collection keyed by strings.) 
--------------------------------------------------------------------
I'm writing this doc about 3 weeks into the serious development of
ParaFlow.  Currently the compiler has the following major phases:
    Tokenizer - Strips comments.  Recognizes boundaries of numbers,
    	names, strings, and punctuation.  Turns free text into tokens.
    Parser - Converts token stream to a parse tree.
    Name binding - associates a particular scope with each name, and
        complains about names used but never defined.
    Type checking - assigns a type (string, float, object, etc) to
        nodes in the parse tree.  Inserts cast nodes where necessary
	to get types to agree in binary operations and to get
	the input parameters of function calls to agree with the
	types in the function declaration.  Does some other small
	rearrangements of the parse tree.
    Code generation - generate C code.  The expression evaluation and
        function i/o is all done through a stack that's type as a big
	union.   
    Run time - reads type tables.  Allocates and frees objects.
	Prints things in a type-aware manner.  Implements string
	operations.
The program will call gcc on the C code and try to execute the result
if gcc manages to compile it.  

ParaFlow does bounds checking on arrays and automatically cleans
up objects that fall out of scope using a reference counting
mechanism.

Currently quite a bit of this is working.  There's about 70 test programs
that it handles ok.  There's about 20 more that it doesn't.  Some things
that still need doing are
  - Implementing polymorphic functions.
  - Doing parallel checking for para and flow statements.
  - Implement "para into" statement.
  - Enriching strings and arrays and files.
  - Working on multiple modules.
  - Implementing red-blue trees as a collection type.
The parser itself is written fairly permissively.  Currently a lot
of syntax errors will just crash the compiler.  Still enough is working
you can get an idea of the potential of the system.
