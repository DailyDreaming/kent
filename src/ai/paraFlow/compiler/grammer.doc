
program: statementList

statementList: 
	| statementList statement
	| statementList statement ';'

statement:  compoundStatement
	| assignment
	| ifStatement
	| whileStatement
	| forStatement
	| foreachStatement
	| classDec
	| varDec
	| toDec
	| flowDec
	| paraDec
	| call
	| 'break'	# only allowed in while/for

compoundStatement: '{' statementList '}'

assignment: gangAssignment
    expression '+=' expression
    expression '-=' expression
    expression '/=' expression
    expression '*=' expression
    expression '%=' expression

gangAssignment: expression '=' expression
	| gangAssignment '=' expression

ifStatement: 'if' expression statement ['else' statement]

whileStatement: 'while' expression statement

forStatement: for '(' statement ';' statement ';' statement ')'

foreachStatement: 'foreach' varName 'in' varName statement

classDec:  'class' varName [extends varName] compoundStatement

varDec:	typeName varName ['=' expression]

toDec: 'to' varName typedVarTuple ['into' typedVarTuple] statement

flowDec: 'flow' varName typedVarTuple ['into' typedVarTuple] statement

paraDec: 'para' varName typedVarTuple statement

call: expression expTuple

expression: constant
	| varName
	| call
	| '(' expression ')'
	| expression '[' expression ']'
	| expression '+' expression
	| expression '-' expression
	| expression '*' expression
	| expression '/' expression
	| expression '%' expression
	| expression '&' expression
	| expression '|' expression
	| expression ',' expression
	| expression '==' expression # only allowed in if/while
	| expression '!=' expression # only allowed in if/while
	| '-' expression

expTuple: '(' expList ')'

expList: expression
	| expList ',' expression

typedVarTuple:  type varName
	| type varName ',' typedVarTuple

baseType: 'var' | 'string' | 'bit' | 'byte' | 'short' | 'int' | 'long'
	| class varName | collection varName

composition: 'array' : 'list' : 'tree' : 'dir'

composedTypes: baseType
