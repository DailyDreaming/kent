// lib - A fledgling library in paraFlow

class lib
    {
    int version = 1;	// Library version number.  Should change very slowly.

    to randomIx(int size) into int ix
    /* Return a random number in range 0 <= num < size */
        {
	ix = randNum() * size;
	if (ix == size)
	    ix = 0;
	}

    to getEnv() into dir of string env
    /* Get a dir containing the environment strings passed
     * into program. */
        {
	static dir of string cached;
	if (!cached)
	    {
	    array of string envArray = getEnvArray();
	    env = ();
	    foreach string s in envArray
		{
		int eqPos = s.find("=");
		string key = s.start(eqPos);
		string val = s.rest(eqPos+1);
		env[key] = val;
		}
	    cached = env;
	    }
	env = cached;
	}

    to countChars(string s, byte c) into int count
    /* Count the number of times c is in s. */
        {
	foreach byte b in s
	    if (c == b)
	        count += 1;
	}

    to getPathArray() into array of string paths
        {
	dir of string env = lib.getEnv();
	string path = env["PATH"];
	int startPos, endPos = 0;
	int colonCount = lib.countChars(path, ':');
	array[colonCount+1] of string results;
	// Might be nice to express this instead as
	//    paths = [colonCount+1] 
	// and dispense with the results variable.
	for (int i=0; i<colonCount; i += 1)
	    {
	    endPos = path.findNext(":", startPos);
	    if (endPos < 0)
	        break;
	    results[i] = path.middle(startPos, endPos-startPos);
	    startPos = endPos + 1;
	    }
	results[colonCount] = path.rest(startPos);
	paths = results;
	}

    to countSpacedWords(string s) into int count
        {
	foreach (string w,int pos) in s.nextSpaced(pos)
	    count += 1;
	}

    to countWords(string s) into int count
        {
	foreach (string w,int pos) in s.nextWord(pos)
	    count += 1;
	}

    to splitSpaced(string s) into array of string result
        {
	array[lib.countSpacedWords(s)] of string a;
	int wordIx;
	foreach (string w,int pos) in s.nextSpaced(pos)
	    {
	    a[wordIx] = w;
	    wordIx += 1;
	    }
	result = a;
	}

    to splitWords(string s) into array of string result
        {
	array[lib.countWords(s)] of string a;
	int wordIx;
	foreach (string w,int pos) in s.nextWord(pos)
	    {
	    a[wordIx] = w;
	    wordIx += 1;
	    }
	result = a;
	}

    to findLastUseOfChar(string s, byte c) into int pos
    // Return position in string of last occurence of char,
    // or -1 if none
        {
	for (pos = s.size-1; pos >= 0; pos -= 1)
	    if (s[pos] == c)
	        return;
	pos = -1;
	}

    to findFirstUseOfChar(string x, byte c) into int pos
    // Return first occurence of c in string or -1 if none.
        {
	for (pos=0; pos < s.size; pos += 1)
	    if (s[pos] == c)
	        return;
	pos = -1;
	}

    to subChar(string s, byte oldChar, byte newChar)
    // Substitute newChar for oldChar throughout string s
        {
	for (int i=0; i<s.size; i += 1)
	    if (s[i] == oldChar)
	        s[i] = newChar;
	}

    to splitPath(string path) into (string dir, string name, string extension)
    // Split "some/dirs/and/file.ext" into "some/dirs/and/" "file" ".ext"
        {
	int dirEnd = lib.findLastUseOfChar(path, '/');
	if (dirEnd >= 0)
	     {
	     dir = path.start(dirEnd);
	     path = path.rest(dirEnd);
	     }
	else
	     {
	     dir = "";
	     }
	int extStart = lib.findLastUseOfChar(path, '.');
	if (extStart >= 0)
	     {
	     name = path.start(extStart);
	     extension = path.rest(extStart);
	     }
	else
	     {
	     name = path;
	     extension = "";
	     }
	}
    }

lib lib = ();
