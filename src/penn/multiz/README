	The source code in this directory makes a program called "multiz",
which reads human-mouse and mouse-rat maf files and writes a human-centric maf
file that contains both human-mouse and human-mouse-rat entries.  The command
syntax is simply:
		multiz hm.maf mr.maf > hmr.maf

	The program reads all of mr.maf, then walks through hm.maf reading
each human-mouse alignment, finding all mouse-rat alignments that overlap its
mouse component, writing a human-mouse-rat alignment for each overlap, and
writing a human-mouse alignment between two overlaps.  In regions where a
human-mouse alignment shares a mouse component with a mouse-rat alignment,
multiz calls the procedure row_yama to align the human segment with the
"sequence" consisting of the mouse-rat alignment, using dynamic programming.
The alignment takes place within a narrowly confined region of the dynamic
programming grid; the region is centered around a path derived from the
human-mouse alignment.
	The dynamic programming phase optimizes the sum of the human-mouse
and human-rat scores.  Substitution scores are those of blastz, and gaps are 
penalized with the quasi-natural gap costs developed by Stephen Altschul
with gap-open = 400, gap-extend = 30.
