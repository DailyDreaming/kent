#!/usr/bin/perl -w
$ENV{'PATH'} = '/usr/local/bin:/bin';

use strict;

#PAH uses HGVS nomenclature except 3' end, where numbers just continue
#CHECK compound entries to see if need type to be complex (1)
my $genomeVarFile = 'gvPah.txt';
my $posFile = 'gvPosPah.txt';
my $linkFile = 'gvLinkPah.txt'; 
my $attrFile = 'gvAttrPah.txt'; 
my $badFile = 'unparsedPah.txt';
my $converter = '../convert_coors genesPAHhg17.txt';
my $script = '../parseHgvsName genesPAHhg17.txt';

my $fh;
my $fh2;
my $fh3;
my $fh4;
my $bfh;
open($fh, ">", $genomeVarFile) or die "Couldn't open output file, $!\n";
open($fh2, ">", $posFile) or die "Couldn't open output file2, $!\n";
open($fh3, ">", $attrFile) or die "Couldn't open output file3, $!\n";
open($fh4, ">", $linkFile) or die "Couldn't open output file4, $!\n";
open($bfh, ">", $badFile) or die "Couldn't open output fileb, $!\n";
my $fcnt = 0;
my $bcnt = 0;

print "Writing files $genomeVarFile, $posFile, $attrFile and $badFile\n";
#genomeVar format
#chrom start stop name mutId srcId baseChangeType location accuracy
my $srcId = 'PAHdb';

my %names;  #parse data from hgvs style name
my $r = 0;
while (<>) {
   chomp;
   my $line = $_;
   if (!defined $line or $line eq '' or $line =~ /^\s*#/) { next; } 
   #had 2 different file formats, comment/uncomment depending on format
   #if ($line =~ /\*\d+\*/) { $r = 1; next; }
   $r++;
   #if ($r == 3) { 
      #$line =~ s/^\s+//;
      parseDataLine($line);
   #}   
}

close $fh or die "Couldn't close outfile, $!\n";
close $fh2 or die "Couldn't close outfile2, $!\n";
close $fh3 or die "Couldn't close outfile3, $!\n";
close $fh4 or die "Couldn't close outfile4, $!\n";
close $bfh or die "Couldn't close outfileb, $!\n";

print "found numbers for $fcnt entries\n",
      "found $bcnt entries that couldn't parse\n";
exit;

#this calls the script that parses by hgvs name
sub parse_hgvs_name {
   my $name = shift;
   my $chr;
   my $st;
   my $end;
   my $type;
   my $fh2;
   my $n = $name; #escape for shell
   $n =~ s/'/\\'/;
   open ($fh2, "$script '$n' 2>&1 |") 
      or die "Couldn't run parseHgvsName, $!\n";
   while (<$fh2>) {
      chomp;
      if (/ERROR/) { $chr = $_; next; }
      my $t; #extra throw out
      if (!$chr) {
         ($chr, $st, $end, $t, $type) = split(/\t/);
      }
   }
   close $fh2 or die "Couldn't finish parseHgvsName run for $name, $!\n";
   $st--; #switch to ucsc numbers
   return ($chr, $st, $end, $name, $type);
}
####End 

#this guesses the location based on the name
sub loc_from_name {
   my $name = shift @_;
   my $loc = 'unknown';
   if ($name =~ /c\.(\-?\d+[+-]?\d*)/) {
      my $pos = $1;
      if ($pos =~ /\d+[+-]\d+/) { 
         $loc = 'intron';
      }elsif ($pos < -472) { 
         $loc = 'not within known transcription unit';
      }elsif ($pos < 0) {
         $loc = '5\' UTR';
      }elsif ($pos <= 1359) {
         $loc = 'exon';
      }elsif ($pos <= 2202) {
         $loc = '3\' UTR';
      }else {
         $loc = 'not within known transcription unit';
      }
   }
   return $loc;
}
####End 

sub loc_from_region {
   my $reg = shift @_;
   my $loc;
   if (!$reg) { return; }
   if ($reg =~ /^E\d+$/) {
      $loc = 'exon';
   }elsif ($reg =~ /^I\d+$/) {
      $loc = 'intron';
   }elsif ($reg =~ /5' UTR/) {
      $loc = '5\' UTR';
   }elsif ($reg =~ /3' UTR/) {
      $loc = '3\' UTR';
   }
   return $loc;
}
####End 

#this parses a data line with fields
#Mutation ID, Systematic Name, Mutation Name, Other Name, Region, Mutation Type
sub parseDataLine {
   my $line = shift @_;
   my @f = split(/\t/, $line);
   #shift around file format 2 to match first part of file format 1
   shift @f; #remove count
   shift @f; #remove reference ID
   splice(@f, 1, 1); #remove Nucleotide No.
   splice(@f, 2, 1); #remove Amino Acid
   #end of shifting list around
   my @chr;
   my $loc;
   $f[1] =~ s/^\s+//;
   $f[1] =~ s/\s+$//;
   if ($f[1] !~ /;/) { 
      @chr = parse_hgvs_name($f[1]);
      if (@chr && $chr[0] !~ /ERROR/) {
         $loc = loc_from_region($f[4]);
         if (!$loc) { $loc = loc_from_name($f[1]); }
         print $fh2 "$chr[0]\t$chr[1]\t$chr[2]\tPAH_$f[1]\n";
         print $fh "PAH_$f[1]\tPAH $chr[3]\t$srcId\t$chr[4]\t$loc\t1\n";
         #print aliases to a file also
         $f[2] =~ s/^\s+//;
         $f[2] =~ s/\s+$//;
         $f[3] =~ s/^\s+//;
         $f[3] =~ s/\s+$//;
         $f[0] =~ s/^\s+//;
         $f[0] =~ s/\s+$//;
         print $fh3 "PAH_$f[1]\tcommonName\t$f[2]\n";
         print $fh3 "PAH_$f[1]\talias\t$f[3]\n";
         print $fh4 "PAH_$f[1]\tlinks\tPAHdb\t$f[0]\t\n";
         if ($f[5] && $f[5] ne '') {
            $f[5] =~ s/^\s+//;
            $f[5] =~ s/\s+$//;
            print $fh3 "PAH_$f[1]\tmutType\t$f[5]\n";
            #status based on type? check intersect with conserved later?
            if ($f[5] =~ /missense|nonsense|splice/i or
                ($f[5] =~ /deletion|insertion/i && $chr[4] eq 'exon')) {
                print $fh3 "PAH_$f[1]\tdisease\tlikely to be phenotype-associated\n";
            }
         }
         if ($f[5] && $f[5] =~ /missense|nonsense/i) {
            my $t = $f[2];
            $t =~ s/^p.//;
            print $fh3 "PAH_$f[1]\tprotEffect\t$t\n";
         }
         #spID P00439 is PAH gene (omimID 261600)
         #provide link to OMIM gene
         print $fh4 "PAH_$f[1]\tgeneVarsDis\tomimTitle2\t261600\t\n";
         $fcnt++;
      }else {
         print $bfh $line, "\n";
         $bcnt++;
      }
   }else { #compound
      my @t = split(/;/, $f[1]);
      my $do_alias = 0;
      #only print once for gv file
      $loc = loc_from_region($f[4]);
      if (!$loc) { $loc = loc_from_name($f[1]); }
      print $fh "PAH_$f[1]\t$f[1]\t$srcId\t$f[1]\t$loc\t1\n";
      foreach my $t (@t) {
         @chr = parse_hgvs_name($t);
         if (@chr && $chr[0] !~ /ERROR/) {
            print $fh2 "$chr[0]\t$chr[1]\t$chr[2]\tPAH_$f[1]\n";
            #print aliases to a file also
            $do_alias = 1;
         }else {
            print $bfh $line, "\n";
            #$do_alias = 0;
            $bcnt++;
            last;
         }
      }
      #only print aliases once
      if ($do_alias) {
         $fcnt++;
         if (!$f[2] or !$f[3] or !$f[0]) { die "ERROR in $f[1]\n"; }
         $f[2] =~ s/^\s+//;
         $f[2] =~ s/\s+$//;
         $f[3] =~ s/^\s+//;
         $f[3] =~ s/\s+$//;
         $f[0] =~ s/^\s+//;
         $f[0] =~ s/\s+$//;
         print $fh3 "PAH_$f[1]\tcommonName\t$f[2]\n";
         print $fh3 "PAH_$f[1]\talias\t$f[3]\n";
         print $fh4 "PAH_$f[1]\tlinks\tPAHdb\t$f[0]\t\n";
         if ($f[5] && $f[5] ne '') {
            $f[5] =~ s/^\s+//;
            $f[5] =~ s/\s+$//;
            print $fh3 "PAH_$f[1]\tmutType\t$f[5]\n";
            #status based on type? check intersect with conserved later?
            if ($f[5] =~ /missense|nonsense|splice/i or
                ($f[5] =~ /deletion|insertion/i && $chr[4] eq 'exon')) {
                print $fh3 "PAH_$f[1]\tdisease\tlikely to be phenotype-associated\
n";
            }
         }
         if ($f[5] && $f[5] =~ /missense|nonsense/) {
            print $fh3 "PAH_$f[1]\tprotEffect\t$f[2]\n";
         }
         #spID P00439 is PAH gene (omimID 261600)
         #provide link to OMIM gene
         print $fh4 "PAH_$f[1]\tgeneVarsDis\tomimTitle2\t261600\t\n";
      }
   }
}
####End 

#how to do links:
#by id (per author?)
#http://www.pahdb.mcgill.ca/cgi-bin/pahdb/pahdbsearch.cgi?Field=id_mut&OrderedField=nucl_no&Value=554&SortType=Asc&Search=Mutation&Go=1&ToShowFrom=0&F2S1=id_mut&F2S2=nucl_no&F2S3=syst_name&F2S5=amino_acid&F2S6=mut_name&F2S7=other_name&F2S17=Mutation.comment

#by name
#http://www.pahdb.mcgill.ca/cgi-bin/pahdb/pahdbsearch.cgi?Field=mut_name&OrderedField=mut_name&Value=p.I38fsX19&SortType=ASC&F2S2=nucl_no&F2S7=syst_name&F2S8=mut_name&F2S9=other_name&F2S15=Mutation.comment&ToShow=1000&ToShowFrom=0&Search=Mutation&Go=1

#table hgMutSrc
#insert into hgMutSrc values (7, 'LSDB', 'PAHdb');
#insert into gvSrc values ('PAHdb', 'LSDB', 'Phe...');
