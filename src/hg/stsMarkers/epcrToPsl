#!/usr/bin/env perl


# File: epcrToPsl
# Author: Terry Furey
# Date: 7/17/2002
# Description:  Convert an output file from ePCR to a psl file

# $Id: epcrToPsl,v 1.2 2006/09/08 19:02:05 hiram Exp $

use strict;
use warnings;

# USAGE message
if ($#ARGV < 3) {
  print STDERR "USAGE: epcrToPsl [-mouse -rat -clones <sequence.inf>] <epcr file> <primers file> <accession_info.rdb> <fa dir>\n";
  exit(1);
}
my $clones = 0;
my $rat = 0;
my $mouse = 0;
my $inf = "";
while ($#ARGV > 3) {
  my $arg = shift(@ARGV);
  if ($arg eq "-clones") {
    $inf = shift(@ARGV);
    open(INF, "$inf") || die("Could not open $inf");
    $clones = 1;
  } elsif ($arg eq "-rat") {
    $rat = 1;
  } elsif ($arg eq "-mouse") {
    $mouse = 1;
  }
}
my $file = shift(@ARGV);
open(FILE, "$file") || die("Could not open $file");
my $primers = shift(@ARGV);
open(PRIMERS, "$primers") || die("Could not open $primers");
my $info = shift(@ARGV);
open(INFO, "$info") || die("Could not open $info");
my $dir = shift(@ARGV);

my %chr;

# Get chrom for each ctg
print STDERR "Getting chromosome info from $info\n";
my $line = <INFO>;
$line = <INFO>;
while ($line = <INFO>) {
  chomp($line);
  my @fields = split("\t",$line);
  my ($chr,$random) = split("_",$fields[0]);
  $chr = substr($chr,3);
  $chr{$fields[5]} = $chr;
}

my %phase;

# Get phase for each clone
if ($clones) {
  print STDERR "Reading clone phases from $inf\n";
  while ($line=<INF>) {
    chomp($line);
    my ($acc,$gi,$size,$phase,@rest) = split("\t",$line);
    $phase{$acc} = $phase;
  }
  close(INF);
}

my %primerleft;
my %primerright;
my %primerleftsize;
my %primerrightsize;
my %rightstart;
my %size;

# Read in the primers file
print STDERR "Reading primer info from $primers\n";
while ($line = <PRIMERS>) {
  chomp($line);
  my ($primerid, $left, $right, $distance, $id) = split('\t',$line);
    if ((length($left) < 1) || (length($right) < 1)) {
    print STDERR "ERROR: bad primer $primerid at line $. in $primers\n";
    next;
    }
  $primerleft{$primerid} = substr($left,0,7);
  $primerright{$primerid} = substr($right,0,7);
  my @left = split(//,$left);
  $primerleftsize{$primerid}=$#left + 1;
  my @right = split(//,$right);
  $primerrightsize{$primerid} = $#right + 1;
  if ($distance =~ /-/) {
    my ($start,$end) = split("-",$distance);
     $size{$primerid} = int(($end - $start)/2) + $start;
  } else {
    $size{$primerid} = $distance;
  }
  $rightstart{$primerid} = $size{$primerid} - $primerrightsize{$primerid};
}
close(PRIMERS);

# Read in epcr file and output psl file
print STDERR "Creating psl file\n";
open(OUT, ">${file}.psl");
open(ERR, ">${file}.nomatch");
my %ratname;
while ($line = <FILE>) {
  chomp($line);
  my ($ctg, $place, $dbsts, $ucsc) = split(' ',$line);
  if (($rat) || ($mouse)) {
    $ratname{$ucsc} = $dbsts;
    $dbsts = $ucsc;
  }
    my $chrom = $ctg;
    $chrom =~ s/^chr//;
  my ($start, $end) = split(/\.\./,$place);
  $start--;
  my $match = $primerleftsize{$dbsts} + $primerrightsize{$dbsts};
  my $tsize = $end - $start;
  my $tgap = 1;
  my $tgapsize = $tsize - $match;
  my $qgap = 1;
  my $qgapsize = $size{$dbsts} - $match;
  my $leftstart = $start;
  my $rightstart = $end -  $primerrightsize{$dbsts};

  my $strand = "";
  # Determine strand
  if ($clones) {
    $strand = "+";
  } else {
    my $to = $start + 7;
#    printf STDERR "/cluster/bin/i386/twoBitToFa $dir/mm8.2bit:${ctg}:$start-$to out.fa\n";
    `/cluster/bin/i386/twoBitToFa $dir/mm8.2bit:${ctg}:$start-$to out.fa`;

    open(FA, "out.fa") || die("out.fa does not exist - $dir/$chr{$chrom}/$ctg.fa");
    my $find = <FA>;
    $find = <FA>;
    chomp($find);
    $find =~ tr/a-z/A-Z/;
    if ($find eq $primerleft{$dbsts}) {
      $strand = "+";
    } elsif ($find eq $primerright{$dbsts}) {
      $strand = "-";
    } else {
      my @chars = split(//,$find);
      my @left = split(//,$primerleft{$dbsts});
      my @right = split(//,$primerright{$dbsts});
      my $r = 0;
      my $l = 0;
      for (my $i = 0; $i < 7; $i++) {
	if ($chars[$i] eq $left[$i]) {
	  $l++;
	}
	if ($chars[$i] eq $right[$i]) {
	  $r++;
	}
      }
      if ($l > 5) {
	$strand = "+";
      } elsif ($r > 5) {
	$strand = "-";
      } else {
	$strand = "";
	print ERR "Could not determine strand for $line - $find ($primerleft{$dbsts}-$l,$primerright{$dbsts}-$r)\n";
      }
    }
    close(FA);
    `rm out.fa`;
  }
  # Print out record
  if ($strand) {
    print OUT "$match\t0\t0\t0\t$qgap\t$qgapsize\t$tgap\t$tgapsize\t$strand\t";
    if (($rat) || ($mouse)) {
      print OUT "$ratname{$dbsts}\t$size{$dbsts}\t0\t$size{$dbsts}\t$ctg\t0\t$start\t$end\t";
    } else {
      print OUT "dbSTS_$dbsts\t$size{$dbsts}\t0\t$size{$dbsts}\t$ctg\t0\t$start\t$end\t";
    }
    print OUT "2\t$primerleftsize{$dbsts},$primerrightsize{$dbsts},\t0,$rightstart{$dbsts},\t";
    print OUT "$leftstart,$rightstart,\n";
  }
}
close(FILE);
close(OUT);
