#!/usr/local/bin/perl
# File: extractPslInfo
# Author: Terry Furey
# Date: 10/2001
# Description: Extracts essential placement info from a psl file

# $Id: extractPslInfo,v 1.1 2006/09/08 19:03:10 hiram Exp $

# Usage mesage
if ($#ARGV < 0) {
  print stderr "USAGE extractPslInfo [-h -be -mrna -gb -cds <file>] <psl file>\n";
  exit(1);
}

# Read parameters
$header = 0;
$bacends = 0;
$mrna = 0;
$gb = 0;
$cds = 0;
while ($#ARGV > 0) {
  $arg = shift(@ARGV);
  if ($arg eq "-h") {
    $header = 1;
  } elsif ($arg eq "-be") {
    $bacends = 1;
  } elsif ($arg eq "-mrna") {
    $mrna = 1;
  } elsif ($arg eq "-gb") {
    $gb = 1;
  } elsif ($arg eq "-cds") {
    $cds = 1;
    $cdsFile = shift(@ARGV);
    open(CDS, "$cdsFile") || die("Could not open $cdsFile\n");
  }
}
$file = shift(@ARGV);
open(FILE, "<$file") || die("Could not open $file\n");

# If cds file provided, read it in
if ($cds) {
    while ($line = <CDS>) {
	chomp($line);
	($acc, $start, $end) = split("\t",$line);
	$start =~ s/\>//;
	$cdsStart{$acc} = $start;
	$cdsEnd{$acc} = $end;
    }
    close(CDS);
}

# If header present, discard lines
if ($header) {
  for ($i = 0; $i < 5; $i++) {
    $line = <FILE>;
  }
}

# Read in and print out info
open(TEMP, ">$$.temp");
print TEMP "chr\tstart\tend\tname\t";
if ($bacends) {
    print TEMP "orien\t";
} elsif ($mrna) {
    print TEMP "qsize\tqstart\tqend\t";
}
print TEMP "cov\tid";
if ($cds) {
    print TEMP "\tcdsS\tcdsE";
}
print TEMP "\n";
print TEMP "10S\t10N\t10N\t10S\t";
if ($bacends) {
    print TEMP "10\t";
} elsif ($mrna) {
    print TEMP "10N\t10N\t10N\t";
}
print TEMP "10N\t10N";
if ($cds) {
    print TEMP "\t10N\t10N";
}
print TEMP "\n";
while ($line = <FILE>) {
  chomp($line);
  @fields = split("\t",$line);
  # Percent covered by the alignment
  if ($fields[10]) {
      $cov = ($fields[12] - $fields[11] - $fields[5])/$fields[10];
  } else {
      $cov = 0;
  }
  # Percent identity of the alignment
  if ($fields[12]-$fields[11]-$fields[5]-$fields[3]) {
      $id = ($fields[0] + $fields[2])/($fields[12] - $fields[11] - $fields[5] - $fields[3]);
  } else {
      $id = 0;
  }
  if ($gb) {
    @names = split(/\|/,$fields[13]);
    ($fields[13],$vers) = split(/\./,$names[$#names]);
  }
  print TEMP "$fields[13]\t$fields[15]\t$fields[16]\t$fields[9]\t";
  if ($bacends) {
    print TEMP "$fields[8]\t";
  } elsif ($mrna) {
    print TEMP "$fields[10]\t$fields[11]\t$fields[12]\t";
  }
  printf (TEMP "%.4f\t%.4f",$cov,$id);
  if ($cds) {
      $acc = $fields[9];
      $blocks = $fields[17];
      @sizes = split(",",$fields[18]);
      @qStarts = split(",",$fields[19]);
      @tStarts = split(",",$fields[20]);
      $start = "";
      $end = "";
      if ($fields[8] eq "-") {
	  for ($i = 0; $i < $blocks; $i++) {
	      $qStarts[$i] = $fields[10] - $qStarts[$i] - $sizes[$i];
	  }
      }
      if (!$cdsStart{$acc}) {
	  $cdsStart{$acc} = 1;
      }
      if (!$cdsEnd{$acc}) {
	  $cdsEnd{$acc} = $fields[10];
      }
      for ($i = 0; $i < $blocks; $i++) {
	  if (($cdsStart{$acc} <= ($qStarts[$i] + $sizes[$i])) && 
	      ($cdsStart{$acc} >= $qStarts[$i])) {
	      if ($fields[8] eq "-") {
		  $start = $tStarts[$i] + $sizes[$i] - $cdsStart{$acc} + $qStarts[$i] + 1;
	      } else {
		  $start = $tStarts[$i] + $cdsStart{$acc} - $qStarts[$i] + 1;
	      }
	  }
	  if (($cdsStart{$acc} < $qStarts[$i]) && ($start eq "")) {
	      $start = $tStarts[$i];
	  }
	  if (($cdsEnd{$acc} <= ($qStarts[$i] + $sizes[$i])) && 
	      ($cdsEnd{$acc} >= $qStarts[$i])) {
	      if ($fields[8] eq "-") {
		  $end = $tStarts[$i] + $sizes[$i] - $cdsEnd{$acc} + $qStarts[$i];
	      } else {
		  $end = $tStarts[$i] + $cdsEnd{$acc} - $qStarts[$i];
	      }
	  }
	  if (($cdsEnd{$acc} < $qStarts[$i]) && (($end eq "") || ($end > ($tStarts[$i-1] + $sizes[$i-1])))) {
	      $end = $tStarts[$i-1] + $sizes[$i-1];
	  }
      }
      if ($cdsStart{$acc} <= $fields[11]) {
	  if ($fields[8] eq "-") {
	      $start = $fields[16];
	  } else {
	      $start = $fields[15] + 1;
	  }
      }
      if ($cdsEnd{$acc} >= $fields[12]) {
	  if ($fields[8] eq "-") {
	      $end = $fields[15] + 1;
	  } else {
	      $end = $fields[16];
	  }
      }
      if ((($start eq "") || ($end eq "")) && ($acc)) {
	  print stderr "$acc ($fields[9]) Bad cds $start-$end $fields[8]\n";
      }
      if ($fields[8] eq "-") {
	  print TEMP "\t$end\t$start";
      } else {
	  print TEMP "\t$start\t$end";
      }
      print TEMP "\t$fields[18]\t$fields[20]";
  }
  print TEMP "\n";
}
close(FILE);
close(TEMP);
if ($cds) {
    print `sorttbl chr start name < $$.temp | uniqtbl chr start name | sorttbl chr cdsS name | headchg -del > $file.initial`;
} else {
    print `sorttbl chr start name < $$.temp | uniqtbl chr start name | headchg -del > $file.initial`;
}
`rm $$.temp`;
