This file describes how we made the browser database on the mouse
genome,November 2001 build.


PROCESSING MOUSE MRNA FROM GENBANK INTO DATABASE.

o - Create the mouseRNA and mouseEST fasta files.
    ssh kkstore
    cd /cluster/store1/genbank.127
    gunzip -c gbrod*.gz | gbToFaRa /projects/compbio/experiments/hg/h/mouseRna.fil ../mrna.127/mouseRna.fa ../mrna.127/mouseRna.ra ../mrna.127/mouseRna.ta stdin
    gunzip -c gbest*.gz | gbToFaRa /projects/compbio/experiments/hg/h/mouseRna.fil ../mrna.127/mouseEst.fa ../mrna.127/mouseEst.ra ../mrna.127/mouseEst.ta stdin


CREATING DATABASE AND STORING mRNA/EST SEQUENCE AND AUXILIARY INFO (done)

o - Create the database.
     - ssh hgwdev
     - Enter mysql via:
           mysql -u hgcat -pbigsecret
     - At mysql prompt type:
	create database mm1;
	quit
     - make a semi-permanent read-only alias:
        alias mm1 "mysql -u hguser -phguserstuff -A mm1"
o - Use df to ake sure there is at least 5 gig free on hgwdev:/usr/local/mysql 
o - Store the mRNA (non-alignment) info in database.
     hgLoadRna new mm1
     hgLoadRna add mm1 /cluster/store1/mrna.127/mouseRna.fa /cluster/store1/mrna.127/mouseRna.ra
     hgLoadRna add mm1 /cluster/store1/mrna.127/mouseEst.fa /cluster/store1/mrna.127/mouseEst.ra
    The last line will take quite some time to complete.  It will count up to
    about 3,800,000 before it is done.


BREAK UP THE MOUSE SEQUENCE INTO 1 MB CHUNKS AT NON_BRIDGED CONTIGS

o - This version of the mouse sequence data is in /cluster/store2/mm.2001.11/mm1/assembly
  - The files are mouse.oo.03.agp and mouse.oo.03.agp.fasta
o - cd into your CVS source tree under kent/src/hg/splitFaIntoContigs
    - Type make
    - Run splitFaIntoContigs /cluster/store2/mm.2001.11/mm1/assembly/mouse.oo.03.agp /cluster/store2/mm.2001.11/mm1/assembly/mouse.oo.03.agp.fasta /cluster/store2/mm.2001.11/mm1 1000000
    - This will split the mouse sequence into approx. 1Mbase supercontigs between non-bridged clone contigs and drop the resulting dir structure in /cluster/store2/mm.2001.11/mm1.
    - The resulting dir structure will include 1 dir for each chromosome, each of which has a set of subdirectories, one subdir per supercontig.    


COPY THE MOUSE SEQUENCE DATA TO THE CLUSTER
o - ssh kkstore
o - Copy the mouseRNA and mouseEst data to the cluster
    - cp /cluster/store1/mrna.127/mouseRna.fa /scratch/hg/mrna.127
    - cp /cluster/store1/mrna.127/mouseEst.fa /scratch/hg/mrna.127
o - Copy the mouse sequence supercontigs to the cluster
    - mkdir /scratch/hg/mm1/
    - mkdir /scratch/hg/mm1/contigs
    - cp /cluster/store2/mm.2001.11/mm1/*/chr*/chr*.fa /scratch/hg/mm1/contigs

REPEAT MASKING (todo)

For the NCBI assembly we repeat mask on the sensitive mode setting.
Patrick Gavin did this, and perhaps will fill in the details later.
Overall the process was to break the NT contigs into pieces of
1000000 bases each with
    cd NTXXX
    mkdir split
    cd split
    faSplit size ../NTXXX.fa 1000000 NTXXX -maxN=1000001 -lift=../NTXXX.lft
and then arrange to do a cluster run that generates NTXXX_X.fa.out files
in the split directory.   After this lift up the .out files to whole contig
coordinates with
    liftUp NTXXX.fa.out NTXXX.lft warn split/*.fa.out
Then lift these up to chromosome coordinates with
    cd ~/oo
    tcsh jkStuff/liftOut2.sh
Then load the .out files into the database with:
    ssh hgwdev
    cd ~/oo
    hgLoadOut hg10 ?/*.fa.out ??/*.fa.out

STORING O+O SEQUENCE AND ASSEMBLY INFORMATION 

Create packed chromosome sequence files 
     ssh kkstore
     cd ~/oo
     tcsh jkStuff/makeNib.sh

Load chromosome sequence info into database
     ssh hgwdev
     mysql -A -u hgcat -pbigsecret hg10  < ~/src/hg/lib/chromInfo.sql
     cd ~/oo
     hgNibSeq -preMadeNib hg10 /cluster/store1/gs.11/build28/nib ?/chr*.fa ??/chr*.fa

Store o+o info in database.
     cd /cluster/store1/gs.11/build28
     jkStuff/liftGl.sh contig.gl
     hgGoldGapGl hg10 /cluster/store1/gs.11 build28 
     cd /cluster/store1/gs.11
     hgClonePos hg10 build28 ffa/sequence.inf /cluster/store1/gs.11
(Ignore warnings about missing clones - these are in chromosomes 21 and 22)
     # hgCtgPos hg10 build28  - NCBI has no physical map.

Make and load GC percent table
     ssh hgwdev
     cd /cluster/store1/gs.11/build28/bed
     mkdir gcPercent
     cd gcPercent
     mysql -A -u hgcat -pbigsecret hg10  < ~/src/hg/lib/gcPercent.sql
     hgGcPercent hg10 ../../nib



MAKING AND STORING mRNA AND EST ALIGNMENTS 

o - Load up the local disks of the cluster with refSeq.fa, mrna.fa and est.fa
    from /cluster/store1/mrna.127  into /var/tmp/hg/h/mrna

o - Use BLAT to generate refSeq, mRNA and EST alignments as so:
      Make sure that /scratch/hg/gs.11/build28/contigs is loaded
      with NT_*.fa and pushed to the cluster nodes.
	  cd ~/oo/bed
	  foreach i (refSeq mrna est)
	      mkdir $i
	      cd $i
	      echo /scratch/hg/gs.11/build28/contigs | wordLine stdin > genome.lst
	      ls -1 /scratch/hg/mrna.127/$i.fa > mrna.lst
	      mkdir psl
	      gensub2 genome.lst mrna.lst gsub spec
	      jabba make hut spec
	      jabba push hut
	  end 
    check on progress with jabba check hut in mrna, est, and refSeq
    directories.

      
o - Process refSeq mRNA and EST alignments into near best in genome.
      cd ~/oo/bed

      cd refSeq
      pslSort dirs raw.psl /cluster/fast1/temp psl
      pslReps -minCover=0.2 -sizeMatters -minAli=0.98 -nearTop=0.002 raw.psl contig.psl /dev/null
      liftUp -nohead all_refSeq.psl ../../jkStuff/liftAll.lft carry contig.psl
      pslSortAcc nohead chrom /cluster/fast1/temp all_refSeq.psl
      cd ..

      cd mrna
      pslSort dirs raw.psl /cluster/fast1/temp psl
      pslReps -minAli=0.96 -nearTop=0.01 raw.psl contig.psl /dev/null
      liftUp -nohead all_mrna.psl ../../jkStuff/liftAll.lft carry contig.psl
      pslSortAcc nohead chrom /cluster/fast1/temp chrom.psl
      cd ..

      cd est
      pslSort dirs raw.psl /cluster/fast1/temp psl
      pslReps -minAli=0.93 -nearTop=0.01 raw.psl contig.psl /dev/null
      liftUp -nohead all_est.psl ../../jkStuff/liftAll.lft carry contig.psl
      pslSortAcc nohead chrom /cluster/fast1/temp all_est.psl
      cd ..

o - Load mRNA alignments into database.
      ssh hgwdev
      cd /cluster/store1/gs.11/build28/bed/mrna/chrom
      foreach i (*.psl)
          mv $i $i:r_mrna.psl
      end
      hgLoadPsl hg10 *.psl
      cd ..
      hgLoadPsl hg10 all_mrna.psl -nobin

o - Load EST alignments into database.
      ssh hgwdev
      cd /cluster/store1/gs.11/build28/bed/est/chrom
      foreach i (*.psl)
            mv $i $i:r_est.psl
      end
      hgLoadPsl hg10 *.psl
      cd ..
      hgLoadPsl hg10 all_est.psl -nobin

o - Create subset of ESTs with introns and load into database.
      - ssh kkstore
      cd ~/oo
      tcsh jkStuff/makeIntronEst.sh
      - ssh hgwdev
      cd ~/oo/bed/est/intronEst
      hgLoadPsl hg10 *.psl

PRODUCING KNOWN GENES 

o - Download everything from ftp://ncbi.nlm.nih.gov/refseq/H_sapiens/mRNA_Prot/
    into /cluster/store1/mrna.127/refSeq.
o - Unpack this into fa files and get extra info with:
       cd /cluster/store1/mrna.127/refSeq
       gunzip hs.gbff
       gunzip hs.faa.gz
       gbToFaRa ~/hg/h/mrna.fil ../refSeq.fa ../refSeq.ra ../refSeq.ta
o - Align refSeq.fa to genome as described under mRNA/EST alignments above.
o - Get extra info from NCBI and produce refGene table as so:
       ssh hgwdev
       cd ~/oo/bed/refSeq
       wget ftp://ncbi.nlm.nih.gov/refseq/LocusLink/loc2acc 
       wget ftp://ncbi.nlm.nih.gov/refseq/LocusLink/mim2loc
o - Similarly download refSeq proteins in fasta format to refSeq.pep
o - Align these by processes described under mRNA/EST alignments above.
o - Produce refGene, refPep, refMrna, and refLink tables as so:
       ssh hgwdev
       cd ~/oo/bed/refSeq
       ln -s /cluster/store1/mrna.127 mrna
       hgRefSeqMrna hg10 mrna/refSeq.fa mrna/refSeq.ra all_refSeq.psl loc2acc mrna/refSeq/hs.faa mim2loc
o - Add Jackson labs info
     cd ~/oo/bed
     mkdir jaxOrtholog
     cd jaxOrtholog
     ftp ftp://ftp.informatics.jax.org/pub/informatics/reports/HMD_Human3.rpt
     awk -f filter.awk *.rpt > jaxOrtholog.tab
    Load this into mysql with something like:
     mysql -u hgcat -pBIGSECRET hg10 < ~/src/hg/lib/jaxOrtholog.sql
     mysql -u hgcat -pBIGSECRET -A hg10
    and at the mysql> prompt
     load data local infile 'jaxOrtholog.tab' into table jaxOrtholog;


SIMPLE REPEAT TRACK 

o - Create cluster jabba job like so:
        ssh kkstore
	cd ~/oo/bed
	mkdir simpleRepeat
	cd simpleRepeat
	cp ~/lastOo/bed/simpleRepeat/gsub
	mkdir trf
	echo single > single.lst
        echo /scratch/hg/gs.11/build28/contigs | wordLine stdin > genome.lst
	gensub2 genome.lst single.lst gsub spec
	jabba make hut spec
        jabba push hut
     Do jabba push huts until it is done.   This one is getting
     erratic errors, requiring multiple runs on some jobs currently.
     I'm not sure if the problem lies in the cluster, in trfBig, or trf.
     Jorge suggested it might have been because some of the local
     disks were full.
        liftUp simpleRepeat.bed ~/oo/jkStuff/liftAll.lft warn trf/*.bed

o - Load this into the database as so
        ssh hgwdev
	cd ~/oo/bed/simpleRepeat
	hgLoadBed hg10 simpleRepeat simpleRepeat.bed -sqlTable=$HOME/src/hg/lib/simpleRepeat.sql


PRODUCING GENSCAN PREDICTIONS (todo)
    
o - Produce contig genscan.gtf genscan.pep and genscanExtra.bed files like so:
     ssh roar
     cd ~/build28
     source jkStuff/gsBig.sh &
    Wait about 3 1/2 days for these to finish.
     started 11:00 am Oct 5.
     finished by 9:00 pm Oct 8.

o - Convert these to chromosome level files as so:
     cd ~/build28
     mkdir bed/genscan
     liftUp bed/genscan/genscan.gtf jkStuff/liftAll.lft warn ?/ctg*/genscan.gtf ??/ctg*/genscan.gtf
     liftUp bed/genscan/genscanSubopt.bed jkStuff/liftAll.lft warn ?/ctg*/genscanSub.bed ??/ctg*/genscanSub.bed
     cat ?/ctg*/genscan.pep ??/ctg*/genscan.pep > bed/genscan/genscan.pep

o - Load into the database as so:
     ssh hgwdev
     cd ~/build28/bed/genscan
     ldHgGene hg10 genscan genscan.gtf
     hgPepPred hg10 generic genscanPep genscan.pep
     hgLoadBed hg10 genscanSubopt genscanSubopt.bed


PREPARING SEQUENCE FOR CROSS SPECIES ALIGNMENTS 

Make sure that the NT*.fa files are lower-case repeat masked, and that
the simpleRepeat track is made.  Then put doubly (simple & interspersed)
repeat mask files onto /cluster local drive as so.
    ssh kkstore
    tcsh
    mkdir /scratch/hg/gs.11/build28/trfFa
    cd ~/oo
    foreach i (? ??)
	cd $i
        foreach j (NT*)
	    maskOutFa $j/$j.fa ../bed/simpleRepeat/trf/$j.bed -softAdd /scratch/hg/gs.11/build28/trfFa/$j.fa.trf
	echo done $i/$j
	end
	cd ..
    end
Then ask admins to do a binrsync.


DOING HUMAN/MOUSE ALIGMENTS (todo)

o - Download the lower-case-masked assembly and put it in
    kkstore:/cluster/store1/a2ms.
   
o - Mask simple repeats in addition to normal repeats with:
        mkdir ~/oo/jkStuff/trfCon
	cd ~/oo/allctgs
	/bin/ls -1 | grep -v '\.' > ~/oo/jkStuff/trfCon/ctg.lst
        cd ~/oo/jkStuff/trfCon
	mkdir err log out
    edit ~/oo/jkStuff/trf.gsub to update gs and oo version
	gensub ctg.lst ~/oo/jkStuff/trf.gsub
	mv gensub.out trf.con
	condor_submit trf.con
    wait for this to finish.  Check as so
        cd ~/oo
	source jkStuff/checkTrf.sh
    there should be no output.
o - Copy the RepeatMasked and trf masked genome to
    kkstore:/scratch/hg/gs.8/build28/contigTrf, and ask
    Jorge and all to binrsync to propagate the data
    across the new cluster.
o - Download the assembled mouse genome in lower-case
    masked form to /cluster/store1/arachne.3/whole.  
    Execute the script splitAndCopy.csh to chop it
    into roughly 50M pieces in arachne.3/parts
o - Set up the jabba job to do the alignment as so:
       ssh kkstore
       cd /cluster/store1/gs.8/build28
       mkdir blatMouse.phusion
       cd blatMouse.phusion
       ls -1S /scratch/hg/gs.3/build28/contigTrf/* > human.lst
       ls -1 /cluster/store1/arachne.3/parts/* > mouse.lst
    Make a file 'gsub' with the following three lines in it
#LOOP
/cluster/home/kent/bin/i386/blat -q=dnax -t=dnax {check in line+ $(path2)} {check in line+ $(path1)}  {check out line+ psl/$(root2)_$(root1).psl} -minScore=20 -minIdentity=20 -tileSize=4 -minMatch=2 -oneOff=0 -ooc={check in exists /scratch/hg/h/4.pooc} -qMask=lower -mask=lower
#ENDLOOP
    Process this into a jabba file and launch the first set
    of jobs (10,000 out of 70,000) as so:
        gensub2 mouse.lst human.lst gsub spec
	jabba make hut spec
	jabba push hut
    Do a 'jabba check hut' after about 20 minutes and make sure
    everything is right.  After that make a little script that
    does a "jabba push hut" followed by a "sleep 30" about 50
    times.  Interrupt script when you see jabba push say it's
    not pushing anything.

o - Sort alignments as so 
       ssh kkstore
       cd /cluster/store1/gs.8/build28/blatMouse
       pslCat -dir -check psl | liftUp -type=.psl stdout ../liftAll.lft warn stdin | pslSortAcc nohead chrom /cluster/store2/temp stdin
o - Get rid of big pile-ups due to contamination as so:
       cd chrom
       foreach i (*.psl)
           echo $i
           mv $i xxx
           pslUnpile -maxPile=600 xxx $i
       rm xxx
       end
o - Remove long redundant bits from read names by making a file
    called subs.in with the following line:
        gnl|ti^ti
        contig_^tig_
    and running the commands
        cd ~/mouse/vsOo33/blatMouse.phusion/chrom
	subs -e -c ^ *.psl > /dev/null
o - Copy over to network where database is:
        ssh kks00
	cd ~/oo/bed
	mkdir blatMouse
	mkdir blatMouse/ph.chrom600
	cd !$
        cp /cluster/store1/gs.8/build28/blatMouse.phusion/chrom/*.psl .
o - Rename to correspond with tables as so and load into database:
       ssh hgwdev
       cd ~/oo/bed/blatMouse/ph.chrom600
       foreach i (*.psl)
	   set r = $i:r
           mv $i ${r}_blatMouse.psl
       end
       hgLoadPsl hg10 *.psl
o - load sequence into database as so:
	ssh kks00
	faSplit about /projects/hg3/mouse/arachne.3/whole/Unplaced.mfa 1200000000 /projects/hg3/mouse/arachne.3/whole/unplaced
	ssh hgwdev
	hgLoadRna addSeq '-abbr=gnl|' hg10 /projects/hg3/mouse/arachne.3/whole/unpla*.fa
	hgLoadRna addSeq '-abbr=con' hg10 /projects/hg3/mouse/arachne.3/whole/SET*.mfa
    This will take quite some time.  Perhaps an hour .

o - Produce 'best in genome' filtered version:
        ssh kks00
	cd ~/mouse/vsOo33
	pslSort dirs blatMouseAll.psl temp blatMouse
	pslReps blatMouseAll.psl bestMouseAll.psl /dev/null -singleHit -minCover=0.3 -minIdentity=0.1
	pslSortAcc nohead bestMouse temp bestMouseAll.psl
	cd bestMouse
        foreach i (*.psl)
	   set r = $i:r
           mv $i ${r}_bestMouse.psl
        end
o - Load best in genome into database as so:
	ssh hgwdev
	cd ~/mouse/vsOo33/bestMouse
        hgLoadPsl hg10 *.psl

PRODUCING CROSS_SPECIES mRNA ALIGMENTS (in progress)

Here you align vertebrate mRNAs against the masked genome on the
cluster you set up during the previous step.

o - Make sure that gbpri, gbmam, gbrod, and gbvert are downloaded from Genbank into
    /cluster/store1/genbank.127

o - Process these out of genbank flat files as so:
       ssh kkstore
       cd /cluster/store1/genbank.127
       mkdir ../mrna.127
       gunzip -c gbpri*.gz gbmam*.gz gbrod*.gz gbvrt*.gz gbinv*.gz | gbToFaRa ~/hg/h/xenoRna.fil ../mrna.127/xenoRna.fa ../mrna.127/xenoRna.ra ../mrna.127/xenoRna.ta stdin
       cd ../mrna.127
       faSplit sequence xenoRna.fa 2 xenoRna
       ssh kks00
       cd /projects/hg2
       mkdir mrna.127
       cp /cluster/store1/mrna.127/xenoRna.* mrna.127

Set up cluster run.  First make sure genome is in kks00:/scratch/hg/gs.8/build28/contigTrf
in RepeatMasked + trf form.  (This is probably done already in mouse alignment
stage).  Also make sure /scratch/hg/mrna.127 is loaded with xenoRna.fa Then do:
       ssh kkstore
       cd /cluster/store1/gs.8/build28/oo/bed
       mkdir xenoMrna
       cd xenoMrna
       mkdir psl
       ls -1S /scratch/hg/gs.11/build28/trfFa > human.lst
       ls -1S /scratch/hg/mrna.127/xenoRna?*.fa > mrna.lst
       cp ~/lastOo/bed/xenoMrna/gsub .
       gensub2 human.lst mrna.lst gsub spec
       jabba make hut spec
       jabba push hut
Do jabba check hut until the run is done, doing jabba push hut if
necessary on occassion.

Sort xeno mRNA alignments as so:
       ssh kkstore
       cd ~/oo/bed/xenoMrna
       pslSort dirs raw.psl /cluster/store2/temp psl
       pslReps raw.psl cooked.psl /dev/null -minAli=0.25
       liftUp chrom.psl ../../jkStuff/liftAll.lft warn cooked.psl
       pslSortAcc nohead chrom /cluster/store2/temp chrom.psl
       pslCat -dir chrom > xenoMrna.psl
       rm -r chrom raw.psl cooked.psl chrom.psl

Load into database as so:
       ssh hgwdev
       cd ~/oo/bed/xenoMrna
       hgLoadPsl hg10 xenoMrna.psl -tNameIx
       cd /cluster/store1/mrna.127
       hgLoadRna add hg10 /cluster/store1/mrna.127/xenoRna.fa xenoRna.ra

Similarly do xenoEst aligments:
       ssh kkstore
       cd /cluster/store1/gs.8/build28/oo/bed
       mkdir xenoEst
       cd xenoEst
       mkdir psl
       ls -1S /scratch/hg/gs.11/build28/trfFa/*.fa > human.lst
       ls -1S /scratch/hg/mrna.127/xenoEst?*.fa > mrna.lst
       cp ~/lastOo/bed/xenoEst/gsub .
       gensub2 human.lst mrna.lst gsub spec
       jabba make hut spec
       jabba shove hut

Sort xenoEst alignments:
       ssh kkstore
       cd ~/oo/bed/xenoEst
       pslSort dirs raw.psl /cluster/store2/temp psl
       pslReps raw.psl cooked.psl /dev/null -minAli=0.10
       liftUp chrom.psl ../../jkStuff/liftAll.lft warn cooked.psl
       pslSortAcc nohead chrom /cluster/store2/temp chrom.psl
       pslCat -dir chrom > xenoEst.psl
       rm -r chrom raw.psl cooked.psl chrom.psl

Load into database as so:
       ssh hgwdev
       cd ~/oo/bed/xenoEst
       hgLoadPsl hg10 xenoEst.psl -tNameIx
       cd /cluster/store1/mrna.127
       foreach i (xenoEst*.fa)
	   echo processing $i
	   hgLoadRna add hg10 /cluster/store1/mrna.127/$i $i:r.ra
       end


PRODUCING FISH ALIGNMENTS (todo)

o - Download sequence from ... and put it in 
	ssh kks00
       /projects/hg3/fish/seq15jun2001/bqcnstn_0106151510.fa
    then
	ln -s /projects/hg3/fish ~/fish
    split this into multiple files and compress original with
	cd ~/fish/seq15jun2001
        faSplit sequence bq* 100 fish
	compress bq*
	copy over to kkstore:/cluster/store2/fish/seq15jun2001
o - Do fish/human alignments.
       ssh kkstore
       cd /cluster/store2/fish
       mkdir vsOo33
       cd vsOo33
       mkdir psl
       ls -1S /var/tmp/hg/gs.8/build28/tanMaskNib/*.fa.trf > human.lst
       ls -1S /projects/hg3/fish/seq15jun2001/*.fa > fish.lst
     Copy over gsub from previous version and edit paths to
     point to current assembly.
       gensub2 fish.lst human.lst gsub spec
       jabba make hut spec
       jabba try hut
     Make sure jobs are going ok.  Then
       jabba push hut
     wait about 2 hours and do another
       jabba push hut
     do a jabba check hut, and if necessary another push hut.
o - Sort alignments as so 
       pslCat -dir psl | liftUp -type=.psl stdout ~/oo/jkStuff/liftAll.lft warn stdin | pslSortAcc nohead chrom temp stdin
o - Copy to hgwdev:/scratch.  Rename to correspond with tables as so and 
    load into database:
       ssh hgwdev
       cd ~/fish/vsOo33/chrom
       foreach i (*.psl)
	   set r = $i:r
           mv $i ${r}_blatFish.psl
       end
       hgLoadPsl hg10 *.psl



TIGR GENE INDEX (todo)

  o - Download ftp://ftp.tigr.org/private/HGI_ren/*aug.tgz into
      ~/oo.29/bed/tgi and then execute the following commands:
          cd ~/oo.29/bed/tgi
	  mv cattleTCs_aug.tgz cowTCs_aug.tgz
	  foreach i (mouse cow human pig rat)
	      mkdir $i
	      cd $i
	      gtar -zxf ../${i}*.tgz
	      gawk -v animal=$i -f ../filter.awk * > ../$i.gff
	      cd ..
	  end
	  mv human.gff human.bak
	  sed s/THCs/TCs/ human.bak > human.gff
	  ldHgGene -exon=TCs hg7 tigrGeneIndex *.gff


      
LOAD STS MAP 
     - login to hgwdev
      cd ~/oo/bed
      hg10 < ~/src/hg/lib/stsMap.sql
      mkdir stsMap
      cd stsMap
      bedSort /projects/cc/hg/mapplots/data/tracks/build28/stsMap.bed stsMap.bed
      - Enter database with "hg10" command.
      - At mysql> prompt type in:
          load data local infile 'stsMap.bed' into table stsMap;
      - At mysql> prompt type
          quit


LOAD CHROMOSOME BANDS
      - login to hgwdev
      cd /cluster/store1/gs.11/build28/bed
      mkdir cytoBands
      cp /projects/cc/hg/mapplots/data/tracks/build28/cytobands.bed cytoBands
      hg10 < ~/src/hg/lib/cytoBand.sql
      Enter database with "hg10" command.
      - At mysql> prompt type in:
          load data local infile 'cytobands.bed' into table cytoBand;
      - At mysql> prompt type
          quit

LOAD MOUSEREF TRACK (todo)
    First copy in data from kkstore to ~/oo/bed/mouseRef.  
    Then substitute 'genome' for the appropriate chromosome 
    in each of the alignment files.  Finally do:
       hgRefAlign webb hg10 mouseRef *.alignments

LOAD AVID MOUSE TRACK (todo)
      ssh cc98
      cd ~/oo/bed
      mkdir avidMouse
      cd avidMouse
      wget http://pipeline.lbl.gov/tableCS-LBNL.txt
      hgAvidShortBed *.txt avidRepeat.bed avidUnique.bed
      hgLoadBed avidRepeat avidRepeat.bed
      hgLoadBed avidUnique avidUnique.bed


LOAD SNPS (todo)
      - ssh hgwdev
      - cd ~/oo/bed
      - mkdir snp
      - cd snp
      - Download SNPs from ftp://ftp.ncbi.nlm.nih.gov/pub/sherry/gp.oo33.gz
      - Unpack.
        grep RANDOM gp.oo33 > snpTsc.txt
        grep MIXED  gp.oo33 >> snpTsc.txt
        grep BAC_OVERLAP  gp.oo33 > snpNih.txt
        grep OTHER  gp.oo33 >> snpNih.txt
        awk -f filter.awk snpTsc.txt > snpTsc.contig.bed
        awk -f filter.awk snpNih.txt > snpNih.contig.bed
        liftUp snpTsc.bed ../../jkStuff/liftAll.lft warn snpTsc.contig.bed
        liftUp snpNih.bed ../../jkStuff/liftAll.lft warn snpNih.contig.bed
	hgLoadBed hg10 snpTsc snpTsc.bed
	hgLoadBed hg10 snpNih snpNih.bed

LOAD CPGISSLANDS (todo)
     - login to hgwdev
     - cd /cluster/store1/gs.11/build28/bed
     - mkdir cpgIsland
     - cd cpgIsland
     - hg10 < ~kent/src/hg/lib/cpgIsland.sql
     - wget http://genome.wustl.edu:8021/pub/gsc1/achinwal/MapAccessions/cpg_aug.oo33.tar
     - tar -xf cpg*.tar
     - awk -f filter.awk */ctg*/*.cpg > contig.bed
     - liftUp cpgIsland.bed ../../jkStuff/liftAll.lft warn contig.bed
     - Enter database with "hg10" command.
     - At mysql> prompt type in:
          load data local infile 'cpgIsland.bed' into table cpgIsland

LOAD ENSEMBLE GENES (todo)
     cd ~/oo/bed
     mkdir ensembl
     cd ensembl
     wget http://www.sanger.ac.uk/~birney/all_april_ctg.gtf.gz
     gunzip all*.gz
     liftUp ensembl110.gtf ~/oo/jkStuff/liftAll.lft warn all*.gtf
     ldHgGene hg10 ensGene en*.gtf
o - Load Ensembl peptides:
     (poke around ensembl to get their peptide files as ensembl.pep)
     (substitute ENST for ENSP in ensemble.pep with subs)
     wget ftp://ftp.ensembl.org/pub/current/data/fasta/pep/ensembl.pep.gz
     gunzip ensembl.pep.gz
   edit subs.in to read: ENSP|ENST
     subs -e ensembl.pep
     hgPepPred hg10 generic ensPep ensembl.pep

LOAD SANGER22 GENES (todo)
      - cd ~/oo/bed
      - mkdir sanger22
      - cd sanger22
      - not sure where these files were downloaded from
      - grep -v Pseudogene Chr22*.genes.gff | hgSanger22 hg10 stdin Chr22*.cds.gff *.genes.dna *.cds.pep 0
          | ldHgGene hg10 sanger22pseudo stdin
         - Note: this creates sanger22extras, but doesn't currently create
           a correct sanger22 table, which are replaced in the next steps
      - sanger22-gff-doctor Chr22.3.1x.cds.gff Chr22.3.1x.genes.gff \
          | ldHgGene hg10 sanger22 stdin
      - sanger22-gff-doctor -pseudogenes Chr22.3.1x.cds.gff Chr22.3.1x.genes.gff \
          | ldHgGene hg10 sanger22pseudo stdin

      - hgPepPred hg10 generic sanger22pep *.pep

LOAD SANGER 20 GENES (todo)
     First download files from James Gilbert's email to ~/oo/bed/sanger20 and
     go to that directory while logged onto hgwdev.  Then:
        grep -v Pseudogene chr_20*.gtf | ldHgGene hg10 sanger20 stdin
	hgSanger20 hg10 *.gtf *.info


LOAD RNAGENES (todo)
      - login to hgwdev
      - cd ~kent/src/hg/lib
      - hg10 < rnaGene.sql
      - cd /cluster/store1/gs.11/build28/bed
      - mkdir rnaGene
      - cd rnaGene
      - download data from ftp.genetics.wustl.edu/pub/eddy/pickup/ncrna-oo27.gff.gz
      - gunzip *.gz
      - liftUp chrom.gff ../../jkStuff/liftAll.lft carry ncrna-oo27.gff
      - hgRnaGenes hg10 chrom.gff

LOAD EXOFISH (todo)
     - login to hgwdev
     - cd /cluster/store1/gs.11/build28/bed
     - mkdir exoFish
     - cd exoFish
     - hg10 < ~kent/src/hg/lib/exoFish.sql
     - Put email attatchment from Olivier Jaillon (ojaaillon@genoscope.cns.fr)
       into /cluster/store1/gs.11/build28/bed/exoFish/all_maping_ecore
     - awk -f filter.awk all_maping_ecore > exoFish.bed
     - hgLoadBed hg10 exoFish exoFish.bed

LOAD MOUSE SYNTENY (todo)
     - login to hgwdev.
     - cd ~/kent/src/hg/lib
     - hg10 < mouseSyn.sql
     - mkdir ~/oo/bed/mouseSyn
     - cd ~/oo/bed/mouseSyn
     - Put Dianna Church's (church@ncbi.nlm.nih.gov) email attatchment as
       mouseSyn.txt
     - awk -f format.awk *.txt > mouseSyn.bed
     - delete first line of mouseSyn.bed
     - Enter database with "hg10" command.
     - At mysql> prompt type in:
          load data local infile 'mouseSyn.bed' into table mouseSyn


LOAD GENIE (todo)
     - cat */ctg*/ctg*.affymetrix.gtf > predContigs.gtf
     - liftUp predChrom.gtf ../../jkStuff/liftAll.lft warn predContigs.gtf
     - ldHgGene hg10 genieAlt predChrom.gtf

     - cat */ctg*/ctg*.affymetrix.aa > pred.aa
     - hgPepPred hg10 genie pred.aa 

     - hg10
         mysql> delete * from genieAlt where name like 'RS.%';
         mysql> delete * from genieAlt where name like 'C.%';

LOAD SOFTBERRY GENES (todo)
     - cd ~/oo/bed
     - mkdir softberry
     - cd softberry
     - get ftp://www.softberry.com/pub/SC_AUG01/*
     ldHgGene hg10 softberryGene chr*.gff
     hgPepPred hg10 softberry *.pro
     hgSoftberryHom hg10 *.pro

LOAD ACEMBLY
    - Get acembly*gene.gff from Jean and Michelle Thierry-Miegs and
      place in ~/oo/bed/acembly
    - Replace c_chr with chr in acembly*.gff
    - Replace G_t1_chr with chr and likewise
      G_t2_chr with chr, etc.
    - cd ~/oo/bed/acembly
    - # The step directly below is not necessary since the files were already lifted
      #  liftUp ./aceChrom.gff /cluster/store1/gs.11/build28/jkStuff/liftHs.lft warn acemblygenes*.gff
    - Use /cluster/store1/gs.11/build28/mattStuff/filterFiles.pl to prepend "chr" to the
    start of every line in the gene.gff files and to concat them into the aceChrom.gff
    gile. Read the script to see what it does. It's tiny and simple.
    - Concatenate all the protein.fasta files into a single acembly.pep file
    - Load into database as so:
        ldHgGene hg10 acembly aceChrom.gff
        hgPepPred hg10 generic acemblyPep acembly.pep

LOAD GENOMIC DUPES (todo)
o - Load genomic dupes
    ssh hgwdev
    cd ~/oo/bed
    mkdir genomicDups
    cd genomicDups
    wget http://codon/jab/web/takeoff/oo33_dups_for_kent.zip
    unzip *.zip
    awk -f filter.awk oo33_dups_for_kent > genomicDups.bed
    mysql -u hgcat -pbigSECRET hg10 < ~/src/hg/lib/genomicDups.sql
    hgLoadBed hg10 -oldTable genomicDups genomicDupes.bed

FAKING DATA FROM PREVIOUS VERSION
(This is just for until proper track arrives.  Rescues about
97% of data  Just an experiment, not really followed through on).

o - Rescuing STS track:
     - log onto hgwdev
     - mkdir ~/oo/rescue
     - cd !$
     - mkdir sts
     - cd sts
     - bedDown hg3 mapGenethon sts.fa sts.tab
     - echo ~/oo/sts.fa > fa.lst
     - pslOoJobs ~/oo ~/oo/rescue/sts/fa.lst ~/oo/rescue/sts g2g
     - log onto cc01
     - cc ~/oo/rescue/sts
     - split all.con into 3 parts and condor_submit each part
     - wait for assembly to finish
     - cd psl
     - mkdir all
     - ln ?/*.psl ??/*.psl *.psl all
     - pslSort dirs raw.psl temp all
     - pslReps raw.psl contig.psl /dev/null
     - rm raw.psl
     - liftUp chrom.psl ../../../jkStuff/liftAll.lft carry contig.psl
     - rm contig.psl
     - mv chrom.psl ../convert.psl


