# BUILD KNOWN GENES TABLES (Started 3/19/05, in process, to be refined. Fan)

# First build protein databases, sp050315 and proteins050315
# See makeProteins050315.doc for details.

# Create working subdirectories and temporary databases

  ssh hgwdev
  cd /cluster/store10/kg
  mkdir kgMm6A  
  ln -s /cluster/store10/kg/kgMm6A /cluster/store6/kgDB/bed/kgMm6A
  ln -s /cluster/store10/kg/kgMm6A /cluster/data/mm6/bed/kgMm6A
   
  hgsql mm6 -e "create database kgMm6ATemp"

  mkdir /cluster/bluearc/kgDB/kgMm6A
  mkdir /cluster/bluearc/kgDB/kgMm6A/protBlat
  ln -s /cluster/bluearc/kgDB/kgMm6A/protBlat /cluster/store10/kg/kgMm6A/protBlat
  cd /cluster/store10/kg/kgMm6A/protBlat

# Get all mouse protein sequences

  hgsql -N sp050315 -e \
  'select proteins050315.spXref3.accession,protein.val from proteins050315.spXref3,protein where division="10090" and acc=accession' \
  |awk '{print ">" $1;print $2}' >mouseProt.fa

# Prepare and perform cluster run for protein/genome alignment

  ssh kk
  cd /cluster/data/mm6/bed/kgMm6A/protBlat
  mkdir prot
  faSplit sequence mouseProt.fa 1000 prot/prot

  ls /cluster/bluearc/kgDB/kgMm6A/protBlat/prot/* > prot.lis
  hgsql mm6 -N -e 'select chrom from chromInfo'   > chrom.lis

  cat << '_EOF_' > gsub
#LOOP
/cluster/bin/i386/blat -noHead -t=dnax -q=prot /panasas/store/mm6/nib/$(path1).nib $(path2) {check out line+ /cluster/bluearc/kgDB/kgMm6A/protBlat/result/$(root1)_$(root2).psl}
#ENDLOOP
'_EOF_'

  mkdir result
  gensub2 chrom.lis prot.lis gsub jobList

  para create jobList
  para check
  para push
  para check ...

# This cluster run takes about two days.  Crashed jobs are due to empty BLAT result.  It is OK.
Completed: 31081 of 39600 jobs
Crashed: 8519 jobs
CPU time in finished jobs:   28671747s  477862.45m  7964.37h  331.85d  0.909 y
IO & Wait Time:               1469964s   24499.40m   408.32h   17.01d  0.047 y
Average job time:                 970s      16.16m     0.27h    0.01d
Longest running job:                0s       0.00m     0.00h    0.00d
Longest finished job:           39632s     660.53m    11.01h    0.46d
Submission to last job:        124276s    2071.27m    34.52h    1.44d

# collect BLAT results

   ssh hgwdev
   cd /cluster/data/mm6/bed/kgMm6A/protBlat

   mkdir result2
   mkdir result3

   cat chrom.lis |sed -e 's/chr/do1 chr/g' >doall

   cat << '_EOF_' > do1.1
echo processing $1
cat result/$1_prot*.psl >result2/$1.psl
'_EOF_'

   cat << '_EOF_' > do1.1
echo processing $1
pslReps -nohead -minCover=0.80 -minAli=0.80 -nearTop=0.002 result2/$1.psl result4/$1.psl /dev/null >>j.out
'_EOF_'

   chmod +x do*

   cp do1.1 do1
   doall
   cp do1.2 do1
   doall

   cat result3/*.psl >protBlat.psl
   hgLoadPsl mm6 protBlat.psl

# Remember to remove result2 and result3 when KG is built and validated.

   cd /cluster/data/mm6/bed/kgMm6A

# create all_mrna.psl and tight_mrna.psl
   hgsql mm6 -N -e "select * from all_mrna" |cut -f 2-22 >all_mrna.psl

   pslReps -minCover=0.40 -minAli=0.97 -nearTop=0.002 \
           all_mrna.psl tight_mrna.psl /dev/null

# Use overlapSelect to get protein and mRNA alignment overlaps   
   overlapSelect  -statsOutput  -dropped=protOut.psl -overlapThreshold=0.90 \
   -selectFmt=psl -inFmt=psl tight_mrna.psl  protBlat/protBlat.psl protMrna.stat

   overlapSelect  -mergeOutput  -dropped=protOut.psl -overlapThreshold=0.90 -selectFmt=psl \
   -inFmt=psl tight_mrna.psl  protBlat/protBlat.psl protMrna.out

# Create protein/mRNA pair and protein lists
   cut -f 10,31 protMrna.out|sort -u >spMrna.tab
   cut -f 10    protMrna.out|sort -u >protein.lis

# Load spMrna.tab into spMrna table in temp DB.
   hgsql kgMm6ATemp < ~/src/hg/lib/spMrna.sql
   hgsql kgMm6ATemp -e 'load data local infile "spMrna.tab" into table spMrna'
   hgsql kgMm6ATemp -e 'create index mrnaID on spMrna(mrnaID)'

# Prepare and perform cluster run of protein/mRNA alignment

# Get mRNA fa file.
   /cluster/data/genbank/bin/i386/gbGetSeqs -native -db=mm6 \
   -gbRoot=/cluster/data/genbank genbank mrna mrna.fa

# Create mrnaSeq table in kgMm6ATemp DB.

   hgFaToTab mrna.fa mrnaSeq.tab

   hgsql kgMm6ATemp <~/src/hg/lib/mrnaSeq.sql
   hgsql kgMm6ATemp -e "load data local infile "mrnaSeq.tab" into table mrnaSeq"

# Prepare files for cluster run
   ~/src/hg/protein/KG2.sh kgMm6A mm6 050315

# Perform cluster run of protein/mRNA alignment
   ~/src/hg/protein/KG3.sh kgMm6A mm6 050315

# Collect cluster run results
   cd kgBestMrna

   ls out | sed -e 's/prot/do1 prot/g' >doall

# create do1 with the following 2 lines:
   cat << '_EOF_' > do1
echo processing $1
cat out/$1/*.out >>protMrnaRaw.psl
'_EOF_'

   chmod +x do*
   doall

# Filter out low quality alignments
   pslReps -nohead -singleHit -minAli=0.9 protMrnaRaw.psl protMrnaBlat.psl /dev/null
   cut -f 10,14 protMrnaBlat.psl |sort -u >protMrna.lis
   wc protMrna.lis

# Load BLAT results into temp DB.
   hgsql kgMm6ATemp < ~/src/hg/lib/protMrnaBlat.sql
   hgsql kgMm6ATemp -e 'load data local infile "protMrnaBlat.psl" into table protMrnaBlat'
   hgsql kgMm6ATemp -e 'create index tName on protMrnaBlat(tName)'

# Create CDS files from protein/mRNA alignment results.
   hgsql kgMm6ATemp -N -e \
   'select qName,"_",tName,tStart+1,":",tEnd+3 from protMrnaBlat order by qName,tName,tEnd-tStart desc'\
   |sed 's/\t_\t/_/g'|sed 's/\t:\t/../g' >protMrna.cds

# Create protMrna.psl with proteinID_mrnaID as query ID.
   cut -f 22-30 ../protMrna.out > j1.tmp
   cut -f 32-42 ../protMrna.out > j2.tmp
   cut -f 10,31 ../protMrna.out|sed -e 's/\t/_/g' >j3.tmp
   paste j1.tmp j3.tmp j2.tmp >protMrna.psl
   rm j1.tmp j2.tmp j3.tmp

# Run mrnaToGene to create protMrna.gp
   bash
   mrnaToGene -cdsFile=protMrna.cds protMrna.psl protMrna.gp 2>protMrna.err >protMrna.log
   exit

# Prepare refGene and all_mrna gp files.

   cd ..
   hgsql mm6 -N -e 'select * from refGene' >ref.gp

   hgsql mm6 -N -e \
   'select gbCdnaInfo.acc,cds.name from gbCdnaInfo,cds,all_mrna where all_mrna.qName=gbCdnaInfo.acc and   gbCdnaInfo.cds=cds.id' \
   |sort -u > all_mrna.cds

   bash
   mrnaToGene -cdsFile=all_mrna.cds all_mrna.psl all_mrna.gp 2>all_mrna.err > all_mrna.log
   exit

# Align proteins to RefSeq.

   overlapSelect -inCds -statsOutput -overlapThreshold=0.90 -selectFmt=psl -inFmt=genePred\
   protBlat/protBlat.psl ref.gp ref.stat
   overlapSelect -inCds -dropped=refOut1.gp -overlapThreshold=0.90 -selectFmt=psl -inFmt=genePred\
   protBlat/protBlat.psl ref.gp kgRef.gp

   overlapSelect -mergeOutput -selectCds -dropped=protOut1.psl -overlapThreshold=0.90 -inFmt=psl\
   -selectFmt=genePred ref.gp protBlat/protBlat.psl protRef.out

   cut -f 10,22 protRef.out | sort -u >spRef.tab
   cut -f 10 protRef.out    | sort -u >protRef.lis

   hgsql kgMm6ATemp <~/src/hg/lib/spRef.sql
   hgsql kgMm6ATemp -e 'load data local infile "spRef.tab" into table spRef'

# Prepare and perform cluster runs for protein/RefSeq alignments

   ~/src/hg/protein/KGRef2.sh kgMm6A mm6 050315
   ~/src/hg/protein/KGRef3.sh kgMm6A mm6 050315

   cd kgBestRef
   ls out | sed -e 's/prot/do1 prot/g' >doall

   cat << '_EOF_' > do1
echo processing $1
cat out/$1/*.out >>protRefRaw.psl
'_EOF_'

   chmod +x do*
   doall

# Filter out low quality alignments.
   pslReps -nohead -singleHit -minAli=0.9 protRefRaw.psl protRefBlat.psl /dev/null
   cut -f 10,14 protRefBlat.psl |sort -u >protRef.lis
   wc protRef.lis

   hgsql kgMm6ATemp < ~/src/hg/lib/protRefBlat.sql
   hgsql kgMm6ATemp -e 'load data local infile "protRefBlat.psl" into table protRefBlat'
   hgsql kgMm6ATemp -e 'create index tName on protRefBlat(tName)'

# Run gene-check to filter out invalid gp entries

   gene-check -cds-only -no-splice-check -ok-genepred-out all_mrnaLoose.gp \
   -nib-dir /cluster/store10/mm6/nib \
   all_mrna.gp all_mrnaLoose.check

   gene-check -cds-only -no-splice-check -ok-genepred-out protMrnaLoose.gp \
   -nib-dir /cluster/store10/mm6/nib \
   kgBestMrna/protMrna.gp protMrnaLoose.check

   gene-check -cds-only -no-splice-check -ok-genepred-out refGeneLoose.gp \
   -nib-dir /cluster/store10/mm6/nib ref.gp refGeneLoose.check

# Combine filtered refGene, all_mrna, and protMrna gp entries together as kgCandidate

   cat refGeneLoose.gp all_mrnaLoose.gp protMrnaLoose.gp >kgCandidate.gp
   hgsql kgMm6ATemp < ~/src/hg/lib/kgCandidate.sql
   hgsql kgMm6ATemp -e 'load data local infile "kgCandidate.gp" into table kgCandidate'

# Update and clean up kgResultBestMrna2.c and then check it in.

# Score protein/mRna and protein/RefSeq alignments

   kgResultBestMrna2 050201 kgMm6ATemp mm6|sort -u >protMrnaScore.tab
   kgResultBestRef2  050315 kgMm6ATemp mm6|sort -u >protRefScore.tab

# Combine scoring results and load them into temp DB.
   cat protMrnaScore.tab protRefScore.tab >protMrnaScoreBoth.tab
   hgsql kgMm6ATemp < ~/src/hg/lib/protMrnaScore.sql
   hgsql kgMm6ATemp -e 'load data local infile "protMrnaScoreBoth.tab" into table protMrnaScore'
   hgsql kgMm6ATemp -e 'create index mrnaAcc on protMrnaScore(mrnaAcc)'

# Run kgSelect to select highest scoring mRNA or RefSeq for each protein.
 
   kgSelect kgMm6ATemp kgTemp2.gp
   hgsql kgMm6ATemp < ~/src/hg/lib/kgTemp2.sql
   hgsql kgMm6ATemp -e 'load data local infile "kgTemp2.gp" into table kgTemp2'

# Create sorted file to get entries with identical CDS regions group together. 
   hgsql kgMm6ATemp -N -e \
   'select name,chrom,cdsStart,cdsEnd,score,proteinID from kgTemp2,protMrnaScore where proteinID=protAcc and name=mrnaAcc order by name,cdsStart,cdsEnd,score desc,proteinID' \
   >kgSorted.tab

# Run kgUniq to pick the top mRNA/RefSeq with hightest score for each CDS structure.

   kgUniq kgMm6ATemp kgSorted.tab kg3.gp
   hgsql mm6 <~/src/hg/lib/kg3.sql
   hgsql mm6 -e 'load data local infile "kg3.gp" into table kg3'


# The following are experimental stuff.


hgsql kgMm6ATemp -e 'select protAcc, mrnaAcc, score+100 from protRefScore' >protRefScorePlus.tab
cat protMrnaScore.tab protRefScorePlus.tab >protMrnaScoreBothP.tab
hgsql kgMm6ATemp -e 'delete from protMrnaScore'
hgsql kgMm6ATemp -e 'load data local infile "protMrnaScoreBothP.tab" into table protMrnaScore'

kgSelect kgMm6ATemp kgTemp2.gp
hgsql kgMm6ATemp -e 'load data local infile "kgTemp2.gp" into table kgTemp2'
kgUniq kgMm6ATemp >kg4.gp
