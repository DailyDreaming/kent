#!/bin/csh -f # set emacs mode
exit; # don't actually run this like a script :)

# This file describes how to make the browser database for the
# worm C. briggsae

###########################################################################
# DOWNLOAD SEQUENCE (DONE, 2005-04-29, hiram)
    ssh kkstore02
    mkdir /cluster/store5/worm/cb2
    cd /cluster/store5/worm/cb2
    mkdir wustl
    cd wustl
    wget "ftp://genome.wustl.edu/private/lhillier/old/cb2.tar.gz" .
    tar --strip-path=1 -xvzf cb2.tar.gz
    faSize cb25.agp8mod.fasta
# 108124579 bases (2974785 N's 105149794 real 105149794 upper 0 lower) in
#	607 sequences in 1 files
    faCount cb25.agp8mod.fasta > contigs.faCount.txt
    grep "^>" cb25.agp8mod.fasta > contig.names
    mkdir contigs
    cd contigs
    faSplit byname ../cb25.agp8mod.fasta .

    cd /cluster/store5/worm/cb2
    #	Create chrom fasta records, all upper case
    for A in wustl/chr*.agp
    do
	AGP=`basename $A`
	CHR=${AGP/.agp/}
	echo $AGP $CHR
	mkdir -p ${CHR}
	$HOME/bin/i386/agpToFa -verbose=2 -simpleMulti ${A} ${CHR} \
		stdout wustl/cb25.agp8mod.fasta | \
		tr '[a-z]' '[A-Z]' | \
		sed -e "s/^CHRUN/chrUn/; s/^>CHR/>chr/; s/RANDOM/random/" \
			> ${CHR}/${CHR}.fa 
	rm -f ./${CHR}/${AGP}
	ln -s ../wustl/${AGP} ./${CHR}/${AGP}
    done
#	A single error
#	chrI.agp chrI
#       cb25.fpc0071c start:0 end:1956661 seqSize: 1662314
#	1 illegal coordinates found in agp files.
#	Fragment copy is more than available fragment sequence.
#	Artifically fix this until a corrected agp is delivered:
< broken original chrI.agp
> manually fixed chrI.agp
15,16c15,16
< chrI  3303228 5259888 15      W       cb25.fpc0071c   1       1956661 +
< chrI  5259889 5261888 16      N       2000    contig  no
---
> chrI  3303228 4965541 15      W       cb25.fpc0071c   1       1662314
> +
> chrI  4965542 5261888 16      N       294437  contig  no


    faCount chr*/chr*.fa
# #seq    len     A       C       G       T       N       cpg
# chrI    11066658        3242141 1957686 1962465 3251351 653015  359364
# chrII   14273684        4309027 2591324 2597030 4309946 466357  453226
# chrIII  13311297        4030612 2419456 2407118 4032755 421356  432253
# chrIII_random   1149121 348122  206481  205194  348271  41053   36576
# chrII_random    2403442 717077  420926  420733  716887  127819  72445
# chrI_random     3767006 1139118 682120  683610  1145925 116233  123073
# chrIV   15085352        4579142 2700476 2693260 4578635 533839  473913
# chrIV_random    884002  265220  157795  155141  269484  36362   27411
# chrUn   7825149 2272582 1301502 1301660 2278995 670410  226977
# chrV    15759610        4783092 2884362 2881565 4796302 414289  497767
# chrV_random     2980273 910601  539084  535605  914408  80575   93300
# chrX    20107906        6145898 3698455 3673518 6159052 430983  632930
# chrX_random     530426  165643  98518   99104   165320  1841    16683
# total   109143926       32908275        19658185        19616003        329673313994132 3445918

    faToTwoBit chr*/chr*.fa cb2.2bit

    twoBitInfo cb2.2bit stdout |
        awk '{printf "%s\t%s\t/gbdb/cb2/cb2.2bit\n", $1,$2}' \
        > chromInfo.tab
    twoBitInfo cb2.2bit stdout | sort -rn +1 > chrom.sizes

    #	Back on hgwdev to create cluster data symlinks and start database
    ssh hgwdev
    ln -s /cluster/store5/worm/cb2 /cluster/data/cb2
    mkdir /gbdb/cb2
    ln -s /cluster/data/cb2/cb2.2bit /gbdb/cb2

    cd /cluster/data/cb2

    hgsql -e "create database cb2;" mysql
    hgsql -e "create table grp (PRIMARY KEY(NAME)) select * from hg17.grp;" cb2
    hgsql cb2 < $HOME/kent/src/hg/lib/chromInfo.sql
    hgsql -e 'load data local infile "chromInfo.tab" into table chromInfo;' cb2

     # Enter monDom1 into dbDb and defaultDb so test browser knows about
     # it:
    hgsql -e 'INSERT INTO dbDb (name, description, nibPath, organism, \
        defaultPos, active, orderKey, genome, scientificName, \
        htmlPath, hgNearOk, hgPbOk, sourceName) \
        VALUES("cb2", "Aug 2005", "/gbdb/cb2", "C. briggsae", \
        "chrI:10000-110000", 1, 69, "C. briggsae", \
        "Caenorhabditis briggsae", \
        "/gbdb/cb2/html/description.html", 0, 0, \
        "WUSTL Aug05");' \
        -h localhost hgcentraltest
    #	Don't change the defaultDb entry until ready to make this
    #	sequence be the default.  Will require removing the existing
    #	entry.
    hgsql -e 'INSERT INTO defaultDb (genome, name) \
        VALUES("C. briggsae", "cb2")' -h localhost hgcentraltest

    mkdir html
    ln -s /cluster/data/cb2/html /gbdb/cb2/html

    #	Add cb2 to the trackDb/makefile and an empty directory in
    #	trackDb/worm/cb2
    #	Perform a make in trackDb directory to get the trackDb
    #	initialized for cb2
    ls -d chr* | egrep -v "chromInfo|chromList" >  chromList

###########################################################################
#	Load the gold/gap tables	(DONE - 2005-08-10 - Hiram)
    cat chr*/chr*.agp | $HOME/bin/$MACHTYPE/hgGoldGapGl cb2 stdin
#  !!! *** The indexes do not get built when hgGoldGapGl is run like this
#	To check:
    hgsql -e "show index from gold;" cb2
    hgsql -e "analyze table gold;" cb2
    hgsql -e "show index from gold;" cb2
    hgsql -e "show index from gap;" cb2
    hgsql -e "analyze table gap;" cb2
    hgsql -e "show index from gap;" cb2
    #	The show index after the analyze will show more numbers in the
    #	Cardinality of the index

    featureBits cb2 gap
#	1019347 bases of 108124579 (0.943%) in intersection

###########################################################################
#  Prepare scratch area for cluster runs (DONE, 2005-08-09 - Hiram)
    ssh hgwdev
    mkdir /cluster/bluearc/scratch/hg/cb2
    cd /cluster/bluearc/scratch/hg/cb2
    mkdir chroms
    cp -p /cluster/data/cb2/chr*/chr*.fa ./chroms
    cp -p /cluster/data/cb2/cb2.2bit .

    ###########################################################################
    # PREPARE Split contigs into 100,000 bp chunks for cluster runs
    #	The chroms are split.  The randoms and chrUn simply use their
    #	fragments as is.  Anytime these fragment results need to be put
    #	back together, use the lift files created from the agp via the
    #	perl scrip as used below.
    # (DONE, 2005-08-05, Hiram)
    # next machine
    ssh kkstore02
    cd /cluster/bluearc/scratch/hg/cb2
    mkdir split
for C in I II III IV V X
do
    mkdir split/${C}
    faSplit size chroms/chr${C}.fa 100000 split/${C}/${C} \
	-lift=split/chr${C}.lft
done
for C in I_random II_random III_random IV_random V_random X_random Un
do
    CHR="chr${C}"
    rm -fr split/${C}
    mkdir split/${C}
    grep -v contig /cluster/data/cb2/${CHR}/${CHR}.agp | awk '{print $6}' \
	| while read FN
do
    cp -p /cluster/data/cb2/wustl/contigs/${FN}.fa ./split/${C}
done
    /cluster/data/cb2/scripts/agpToLift.pl \
	/cluster/data/cb2/${CHR}/${CHR}.agp > \
	split/${CHR}.lft
    echo "done with ${CHR}"
done

   cat split/c*I.lft split/c*V.lft split/c*X.lft > liftChroms.lft
   cat split/*_random.lft split/chrUn.lft > liftRandoms.lft
    #	push request this /scratch/hg/cb2/ directory to the kluster

    #	copy the contigs for the randoms back here from the bluearc
    #	for masking and blastz runs
    ssh kkstore02
    cd /cluster/data/cb2
    mkdir randomContigs
    for C in I_random II_random III_random IV_random V_random X_random Un
    do
	rsync -a --progress /cluster/bluearc/scratch/hg/cb2/split/${C}/ \
		`pwd`/randomContigs/${C}/
    done

############################################################################
# Run RepeatMasker on the chromosomes (WORKING, 2005-08-09 - Hiram)
    ssh kk
    cd /cluster/data/cb2
    # make run directory and job list, create the script to use 
    # for the RepeatMasker run
    cat << '_EOF_' > scripts/RMWorm
#!/bin/csh -fe
#
#       This is a slight rearrangement of the
#       RMChicken script used in makeGalGal2.doc
#       The results here need to go to a different location
#       $1 == chrom name: I II III IV V X M
#       $2 == directory where split contig .fa is found
#       $3 == name of contig .fa file
cd $1
pushd .
cd $2
/bin/mkdir -p /tmp/cb2/$3/$1
/bin/cp $3 /tmp/cb2/$3/$1
cd /tmp/cb2/$3/$1
/cluster/bluearc/RepeatMasker050305/RepeatMasker -alignments -s -species elegans $3
popd
/bin/cp /tmp/cb2/$3/$1/$3.out ./
if (-e /tmp/cb2/$3/$1/$3.align) /bin/cp /tmp/cb2/$3/$1/$3.align ./
if (-e /tmp/cb2/$3/$1/$3.tbl) /bin/cp /tmp/cb2/$3/$1/$3.tbl ./
if (-e /tmp/cb2/$3/$1/$3.cat) /bin/cp /tmp/cb2/$3/$1/$3.cat ./
/bin/rm -r /tmp/cb2/$3/$1
/bin/rmdir --ignore-fail-on-non-empty /tmp/cb2/$3
/bin/rmdir --ignore-fail-on-non-empty /tmp/cb2
'_EOF_'
    # emacs happy
    chmod +x scripts/RMWorm
    # create job list
    mkdir RMRun
    rm -f RMRun/jobList
for C in I II III IV V X Un II_random I_random III_random IV_random \
	V_random X_random
do
    mkdir /cluster/data/cb2/RMRun/${C}
    for T in /scratch/hg/cb2/split/$C/*.fa
    do
	D=`dirname $T`
	F=`basename $T`
	echo /cluster/data/cb2/scripts/RMWorm ${C} ${D} ${F} \
'{'check out line+ /cluster/data/cb2/RMRun/$C/${F}.out'}'
    done >> RMRun/jobList
done
    # Do the run
    ssh pk
    cd /cluster/data/cb2/RMRun
    para create jobList
    para try, para check, para check, para push, para check, ...
# Completed: 1367 of 1367 jobs
# CPU time in finished jobs:     712379s   11872.99m   197.88h    8.25d  0.023 y
# IO & Wait Time:                 37347s     622.44m    10.37h    0.43d  0.001 y
# Average job time:                 548s       9.14m     0.15h    0.01d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:           12103s     201.72m     3.36h    0.14d
# Submission to last job:         13708s     228.47m     3.81h    0.16d

    #	Looks like the big contigs are the outliers here.  Most
    #	everything else finishes in about 4 minutes.

    # when they are finished, liftUp and load the .out files into the database:
    # next machine
    ssh kkstore02
    cd /cluster/data/cb2/RMRun
for C in I II III IV V X Un II_random I_random III_random IV_random \
	V_random X_random
do
    liftUp chr${C}.fa.out \
	/cluster/bluearc/scratch/hg/cb2/split/chr${C}.lft warn ${C}/*.fa.out
done

    ssh hgwdev
    cd /cluster/data/cb2/RMRun
    hgLoadOut -verbose=2 cb2 chr*.fa.out
# bad rep range [480, 441] line 6473 of chrI.fa.out 
# bad rep range [330, 281] line 10328 of chrIII.fa.out 
# bad rep range [282, 274] line 10330 of chrIII.fa.out
# bad rep range [333, 268] line 1959 of chrV.fa.out

    featureBits cb2 rmsk
#	14457025 bases of 108124579 (13.371%) in intersection
    featureBits -countGaps cb2 rmsk
#	14457025 bases of 109143926 (13.246%) in intersection

#######################################################################
# SIMPLE REPEAT [TRF] TRACK  (DONE - 2005-08-10 - Hiram)
    ssh kki
    mkdir -p /cluster/data/cb2/bed/simpleRepeat
    cd /cluster/data/cb2/bed/simpleRepeat
    mkdir trf
    ls -1S /cluster/bluearc/scratch/hg/cb2/chroms/chr*.fa > genome.lst
    cat << '_EOF_' > gsub
#LOOP
/cluster/bin/x86_64/trfBig -trf=/cluster/bin/i386/trf {check in line+ $(path1)}  /dev/null -bedAt={check out line trf/$(root1).bed} -tempDir=/tmp
#ENDLOOP
'_EOF_'
    #	happy emacs
                                                                                
    gensub2 genome.lst single gsub jobList
    para create jobList
    para try
# Completed: 13 of 13 jobs
# CPU time in finished jobs:       1062s      17.70m     0.29h    0.01d  0.000 y
# IO & Wait Time:                    72s       1.20m     0.02h    0.00d  0.000 y
# Average job time:                  87s       1.45m     0.02h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:             300s       5.00m     0.08h    0.00d
# Submission to last job:           300s       5.00m     0.08h    0.00d

    #  When cluster run is done, combine into one:
    sort -k1,1 -k2,2n trf/*.bed > simpleRepeat.bed

    # Load into the database:
    # next machine
    ssh hgwdev
    cd /cluster/data/cb2/bed/simpleRepeat
    hgLoadBed -strict cb2 simpleRepeat simpleRepeat.bed \
      -sqlTable=$HOME/src/hg/lib/simpleRepeat.sql
    #	Loaded 32626 elements of size 16

    featureBits cb2 simpleRepeat
    #	3974197 bases of 108124579 (3.676%) in intersection

    #	And run trf on the contigs for the separate masking and blastz runs
    ssh kki
    mkdir /cluster/data/cb2/bed/simpleRepeat/randomContigs
    cd /cluster/data/cb2/bed/simpleRepeat/randomContigs
    mkdir trf
    ls -1S /cluster/bluearc/scratch/hg/cb2/split/*_random/*.fa \
	/cluster/bluearc/scratch/hg/cb2/split/Un/*.fa > contig.lst

    cat << '_EOF_' > gsub
#LOOP
/cluster/bin/x86_64/trfBig -trf=/cluster/bin/i386/trf {check in line+ $(path1)}  /dev/null -bedAt={check out line trf/$(root1).bed} -tempDir=/tmp
#ENDLOOP
'_EOF_'
    #	happy emacs
                                                                                
    gensub2 contig.lst single gsub jobList
    para create jobList
    para try
# Completed: 470 of 470 jobs
# CPU time in finished jobs:        419s       6.99m     0.12h    0.00d  0.000 y
# IO & Wait Time:                  1255s      20.91m     0.35h    0.01d  0.000 y
# Average job time:                   4s       0.06m     0.00h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:              57s       0.95m     0.02h    0.00d
# Submission to last job:           148s       2.47m     0.04h    0.00d
    mkdir -p trfMask
for F in trf/*.bed
do
    T=${F#trf/}
    echo "${F} > trfMask/${T}"
    awk '{if ($5 <= 12) print;}' ${F} > trfMask/${T}
done


#######################################################################
# PROCESS SIMPLE REPEATS AND RMSK INTO MASK (DONE,  2005-08-10 - Hiram)
    # After the simpleRepeats track has been built, make a filtered version
    # of the trf output: keep trf's with period <= 12:
    ssh kkstore02
    cd /cluster/data/cb2/bed/simpleRepeat
    mkdir -p trfMask
for F in trf/*.bed
do
    T=${F#trf/}
    echo "${F} > trfMask/${T}"
    awk '{if ($5 <= 12) print;}' ${F} > trfMask/${T}
done

#  create Soft and Hard masks from RepeatMaster and TRF outputs:
#  and rebuild the 2bit file using the soft masking in the fa.
#	Might need the nibs for something, so make those too.
    # next machine
    ssh kkstore02
    cd /cluster/data/cb2
    mkdir softMask
    mkdir nib
for C in `cat chromList`
do
    echo -n "masking ${C} "
    maskOutFa ${C}/${C}.fa RMRun/${C}.fa.out \
                softMask/${C}.fa -soft
    maskOutFa softMask/${C}.fa
                bed/simpleRepeat/trfMask/${C}.bed \
                softMask/${C}.fa -softAdd
    faToNib -softMask softMask/${C}.fa nib/${C}.nib
done
# masking chrI Writing 11066658 bases in 5533337 bytes
# masking chrII Writing 14273684 bases in 7136850 bytes
# masking chrIII Writing 13311297 bases in 6655657 bytes
# masking chrIII_random Writing 1149121 bases in 574569 bytes
# masking chrII_random Writing 2403442 bases in 1201729 bytes
# masking chrI_random Writing 3767006 bases in 1883511 bytes
# masking chrIV Writing 15085352 bases in 7542684 bytes
# masking chrIV_random Writing 884002 bases in 442009 bytes
# masking chrUn Writing 7825149 bases in 3912583 bytes
# masking chrV Writing 15759610 bases in 7879813 bytes
# masking chrV_random Writing 2980273 bases in 1490145 bytes
# masking chrX Writing 20107906 bases in 10053961 bytes
# masking chrX_random Writing 530426 bases in 265221 bytes

    #	re-create the 2bit file
    rm -f cb2.2bit
    faToTwoBit softMask/chr*.fa cb2.2bit

    # create hard masks 
    mkdir hardMask
for C in `cat chromList`
do
    echo "masking ${C}"
    maskOutFa softMask/${C}.fa hard hardMask/${C}.fa
done

    mkdir randomContigs/softMask
    mkdir randomContigs/hardMask
    for C in I_random II_random III_random IV_random V_random X_random Un
    do
	for F in randomContigs/${C}/*.fa
	do
	    B=`basename ${F}`
	    T=${B/.fa/}
	    echo "${B} ${T}"
	    maskOutFa ${F} RMRun/${C}/${B}.out \
                randomContigs/softMask/${B} -soft
	    maskOutFa randomContigs/softMask/${B} \
                bed/simpleRepeat/randomContigs/trfMask/${T}.bed \
                randomContigs/softMask/${B} -softAdd
	    maskOutFa randomContigs/softMask/${B} hard \
		randomContigs/hardMask/${B}
	done
    done
    faToTwoBit randomContigs/softMask/*.fa randomContigs.2bit

    #	copy to iscratch for cluster runs
    ssh kkr1u00
    cd /cluster/data/cb2/softMask
    mkdir -p /iscratch/i/worms/cb2/chromNib
    mkdir -p /iscratch/i/worms/cb2/randomContigs
    cd /cluster/data/cb2/nib
    cp -p c*I.nib c*V.nib c*X.nib /iscratch/i/worms/cb2/chromNib
    cd  /cluster/data/cb2
    cp -p cb2.2bit /iscratch/i/worms/cb2
    cp -p randomContigs.2bit /iscratch/i/worms/cb2
    rsync -a --progress /cluster/data/cb2/randomContigs/softMask/ \
	/iscratch/i/worms/cb2/randomContigs/softMask/
    rsync -a --progress /cluster/data/cb2/randomContigs/hardMask/ \
	/iscratch/i/worms/cb2/randomContigs/hardMask/

    cd /iscratch/i/worms/cb2
    #	The iSync takes too much time due to the immense size of /iscratch
    #	So just manually rsync this directory directly:
    for i in 2 3 4 5 6 7 8
do
    rsync -a --delete --progress --rsh=rsh /iscratch/i/worms/ \
	kkr${i}u00:/iscratch/i/worms/
done

#######################################################################
# GC5BASE (DONE - 2005-08-10 - Hiram)
    ssh kkstore02
    mkdir /cluster/data/cb2/bed/gc5Base
    cd /cluster/data/cb2/bed/gc5Base
    hgGcPercent -wigOut -doGaps -file=stdout -win=5 cb2 \
        /cluster/data/cb2 | wigEncode stdin gc5Base.wig gc5Base.wib

    ssh hgwdev
    cd /cluster/data/cb2/bed/gc5Base
    mkdir /gbdb/cb2/wib
    ln -s `pwd`/gc5Base.wib /gbdb/cb2/wib
    hgLoadWiggle cb2 gc5Base gc5Base.wig

XXXX - DONE TO HERE 10 August 2005

#######################################################################
# MAKE SANGER GENE (WORM BASE GENES) TRACK (WORKING, 2005-05-02, Hiram)
   ssh kkstore02
   mkdir -p /cluster/data/cb2/bed/sangerGene
   cd /cluster/data/cb2/bed/sangerGene
    # the perl trims these files down to a reasonable size.  As they are
    #   they cause ldHgGene to hangup due to memory size.
    # The sed removes CDS before id e.g. from CDS "Y74C9A.2" and the
    # extra quote ", and finally the comments at the ends of the lines
    # which start with `blank semi-colon blank'
for F in I II III IV V X M
do
    echo -n "${F} "
    zcat ../../WS140/chr${F}.gff.gz | \
    sed -e "s/CHROMOSOME_III/chrIII/g" -e "s/CHROMOSOME_II/chrII/g" \
	-e "s/CHROMOSOME_IV/chrIV/g" -e "s/CHROMOSOME_I/chrI/g" \
	-e "s/CHROMOSOME_X/chrX/g" -e "s/CHROMOSOME_V/chrV/g" \
	-e "s/CHROMOSOME_M/chrM/g" \
	-e 's/Sequence "\(.*\)"$/\1/' -e 's/Transcript "\(.*\)"$/\1/' | \
	    perl -ne '@a=split; print if($a[1] =~ m/curated|DNA|RNA/i &&
$a[2] =~ m/intron|exon|cds|sequence|transcri/i);' | \
	sed -e "s/CDS \"//; s/\"//; s/ ; .*//;" > chr${F}.gff
done
    #  check file sizes, should be reasonable
    ls -ogrt
# -rw-rw-r--    1  3524403 May  2 12:47 chrI.gff
# -rw-rw-r--    1  3732465 May  2 12:48 chrII.gff
# -rw-rw-r--    1  3295374 May  2 12:49 chrIII.gff
# -rw-rw-r--    1  3635497 May  2 12:51 chrIV.gff
# -rw-rw-r--    1  4754926 May  2 12:53 chrV.gff
# -rw-rw-r--    1  3896221 May  2 12:55 chrX.gff
# -rw-rw-r--    1     3881 May  2 12:55 chrM.gff

    # now load database with those transformed gff files
    # next machine
    ssh hgwdev
    cd /cluster/data/cb2/bed/sangerGene
    # 2004-05-10, hartera, Reload sangerGene table using extended GenePred
    # format. 2004-05-11, hartera. Extended format frame information does not
    # look correct. Reload without the extended fields.
    ldHgGene cb2 sangerGene *.gff
# Read 23277 transcripts in 431929 lines in 7 files
#  23277 groups 7 seqs 8 sources 10 feature types
#23277 gene predictions
XXXXX Stopped here 2005-05-02 14:30
    
    # Add proteinID field to sangerGene table, used by Gene Sorter
    ssh hgwdev
    cd /cluster/data/cb2/bed/sangerGene
    hgsql -e 'alter table sangerGene add proteinID varchar(40) NOT NULL;' cb2
    # To add index on this column
    hgsql -e 'alter table sangerGene add index(proteinID);' cb2
    # Add Swiss-Prot protein IDs to this column
    # There are 23076 entries in sangerGene and 21780 of the names 
    # are in sangerLinks as orfName
    hgsql -N -e 'select count(*) from sangerGene as g,sangerLinks as l \
           where g.name = l.orfName;' cb2
    # 21780
    # get names from sangerGene and sangerLinks tables
    hgsql -N -e "select name from sangerGene;" cb2 | sort > name.sangerGene
    hgsql -N -e "select orfName from sangerLinks;" cb2 | sort > orfName.sangerLinks
    # get list of names in sangerGene not in sangerLinks
    comm -23 name.sangerGene orfName.sangerLinks > geneNames.notin.sangerLinks
    # Go to the WS120 WormBase mirror site and check SwissProt IDs
    # http://http://ws120.wormbase.org/db/searches/info_dump
    # Some of these genes are non coding RNAs or have no SwissProt ID BUT
    # others in the geneNames.notin.sangerLinks list do have a Swiss-Prot ID 
    # Download IDs in using batches of about 400 for gene names from 
    # geneNames.notin.sangerLinks and add to file, SPIds.wormPep.WS120
    # Create a perl script to parse out Swiss-Prot IDs for those genes that 
    # have them and create the sql statements to insert them into sangerLinks

#########################################################################
# BLASTZ HUMAN Cb1 (WORKING - 2005-05-02 Hiram)
#	going to try and do this with cb2 chroms vs the cb1 contigs, and
#	then lift to chrUn
    ssh kkstore02
    mkdir /cluster/data/cb2/bed/blastzCb1.2005_05_02
    cd /cluster/data/cb2/bed
    ln -s blastzCb1.2005_05_02 blastz.cb1
    cd blastzCb1.2005_05_02

    cat << '_EOF_' > DEF
# briggsae vs. elegans
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/home/angie/schwartzbin:/cluster/home/kent/bin/i386

ALIGN=blastz-run
BLASTZ=blastz
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=0

# TARGET: elegans cb2
SEQ1_DIR=/iscratch/i/worms/cb2/cb2.2bit
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: briggsae cb1
SEQ2_DIR=/iscratch/i/worms/Cbriggsae/cb1.2bit
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=30000000
SEQ2_LAP=0

BASE=/cluster/data/cb2/bed/blastzCb1.2005_05_02

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << keep emacs coloring happy

    cp /cluster/data/cb2/chrom.sizes ./S1.len
    sort -rn +1 /cluster/data/cb1/chrom.sizes > S2.len
    #	establish a screen to control this job
    screen
    cd /cluster/data/cb2/bed/blastzCb1.2005_05_02
    time /cluster/bin/scripts/doBlastzChainNet.pl `pwd`/DEF > \
	blast.run.out 2>&1 &
    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh kkstore02
    screen -d -r
    #	STARTED - 2005-03-17 21:25

    #	swap results to place cb2 alignments onto cb1
    ssh kkstore02
    cd /cluster/data/cb2/bed/blastzCb1.2005_05_02
    time /cluster/bin/scripts/doBlastzChainNet.pl -swap `pwd`/DEF > \
	swap.run.out 2>&1 &

# BLAT SERVER SETUP (DONE - 2005-06-02 - Hiram)

    hgsql -e 'INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
	VALUES("cb2", "blat15", 17784, 1, 0);' \
	-h localhost hgcentraltest
    hgsql -e 'INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
	VALUES("cb2", "blat15", 17785, 0, 1);' \
	-h localhost hgcentraltest

