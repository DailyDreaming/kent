#!/bin/csh -f # set emacs mode
exit; # don't actually run this like a script :)

# This file describes how we made the browser database on the 
# Dog (Canis familiaris) July 2004 release.


# CREATE BUILD DIRECTORY (DONE 6/1/05 angie)
    ssh kkstore01
    mkdir /cluster/store9/canFam2
    ln -s /cluster/store9/canFam2 /cluster/data/canFam2


# DOWNLOAD MITOCHONDRION GENOME SEQUENCE (DONE 6/1/05 angie)
    mkdir /cluster/data/canFam2/M
    cd /cluster/data/canFam2/M
    # go to http://www.ncbi.nih.gov/ and search Nucleotide for 
    # "canis familiaris mitochondrion genome".  That shows the gi number:
    # 17737322
    # Use that number in the entrez linking interface to get fasta:
    wget -O chrM.fa \
      'http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Text&db=Nucleotide&uid=17737322&dopt=FASTA'
    # Edit chrM.fa: make sure the long fancy header line says it's the 
    # Canis familiaris mitochondrion complete genome, and then replace the 
    # header line with just ">chrM".


# MAKE JKSTUFF AND BED DIRECTORIES (DONE 6/1/05 angie)
    # This used to hold scripts -- better to keep them inline in the .doc 
    # so they're in CVS.  Now it should just hold lift file(s) and 
    # temporary scripts made by copy-paste from this file.  
    mkdir /cluster/data/canFam2/jkStuff
    # This is where most tracks will be built:
    mkdir /cluster/data/canFam2/bed


# DOWNLOAD AGP, FASTA & QUAL (DONE 6/2/05 angie)
    ssh kkstore01
    mkdir /cluster/data/canFam2/broad
    cd /cluster/data/canFam2/broad
    ftp ftp.broad.mit.edu
      prompt
      bin
      cd pub/assemblies/mammals/canFam2
      mget contigs.bases.gz AAEX02.full_AGP Dog2.0.agp supercontigs
      mget assembly.agp assembly.format contigs.quals.gz supercontigs.summary
      bye
    # Jean Chang is going to remove AAEX02.full_AGP to avoid confusion,
    # so make sure we can tell people how to quickly regenerate it from 
    # Dog2.0.agp:
    perl -wpe 'if (/contig_(\d+)/) { \
                 $a = sprintf "AAEX020%05d", $1+1;  s/contig_\d+/$a/; }' \
      Dog2.0.agp > /tmp/1.agp 
    diff /tmp/1.agp AAEX02.full_AGP | wc -l
#0
    # Meanwhile, the AGP has chr01, chr02 instead of chr1, chr2... yecch.
    # Substitute those out:
    sed -e 's/^chr0/chr/' Dog2.0.agp > UCSC_Dog2.0.agp


# BUILD CHROM FA (DONE 6/28/05 angie)
    ssh kkstore01
    cd /cluster/data/canFam2/broad
    awk '{print $1;}' UCSC_Dog2.0.agp | uniq > ../chrom.lst
    nice gunzip contigs.bases.gz 
    foreach chr (`cat ../chrom.lst`)
      set c = `echo $chr | sed -e 's/chr//'`
      mkdir ../$c
      awk '$1 == "'$chr'" {print;}' UCSC_Dog2.0.agp > ../$c/$chr.agp
      agpToFa -simpleMultiMixed ../$c/$chr.agp $chr ../$c/$chr.fa contigs.bases
    end
    faSize ../*/chr*.fa
#2531673953 bases (146677410 N's 2384996543 real 2384996543 upper 0 lower) in 41 sequences in 41 files
#Total size: mean 61748145.2 sd 25246010.8 min 16727 (chrM) max 126883977 (chrX) median 61280721
#N count: mean 3577497.8 sd 1401887.8
#U count: mean 58170647.4 sd 24664411.9
#L count: mean 0.0 sd 0.0
    # checkAgpAndFa prints out way too much info -- keep the end/stderr only:
    cd /cluster/data/canFam2
    foreach agp (?{,?}/chr*.agp)
      set fa = $agp:r.fa
      echo checking consistency of $agp and $fa
      checkAgpAndFa $agp $fa | tail -1
    end
    nice gzip broad/contigs.bases
    echo "chrM" >> chrom.lst


# BREAK UP SEQUENCE INTO 5 MB CHUNKS AT CONTIGS/GAPS (DONE 6/28/05 angie)
    ssh kkstore01
    cd /cluster/data/canFam2
    foreach agp (?{,?}/chr*.agp)
      set fa = $agp:r.fa
      echo splitting $agp and $fa
      cp -p $agp $agp.bak
      cp -p $fa $fa.bak
      nice splitFaIntoContigs $agp $fa . -nSize=5000000
    end
    # No _random's in this assembly, so no need to clean up after them.
    # Make a "pseudo-contig" for processing chrM too:
    mkdir M/chrM_1
    sed -e 's/chrM/chrM_1/' M/chrM.fa > M/chrM_1/chrM_1.fa
    mkdir M/lift
    echo "chrM_1/chrM_1.fa.out" > M/lift/oOut.lst
    echo "chrM_1" > M/lift/ordered.lst
    set msize = `faSize M/chrM.fa | awk '{print $1;}'`
    echo "0\tM/chrM_1\t$msize\tchrM\t$msize" > M/lift/ordered.lft
    foreach f ( ?{,?}/chr*.fa.bak )
      nice faCmp $f $f:r
    end


# MAKE LIFTALL.LFT (DONE 6/28/05 angie)
    ssh kkstore01
    cd /cluster/data/canFam2
    cat */lift/{ordered,random}.lft > jkStuff/liftAll.lft


# CREATING DATABASE (DONE 6/28/05 angie)
    ssh hgwdev
    hgsql '' -e 'create database canFam2'
    # Use df to make sure there is at least 75G free on hgwdev:/var/lib/mysql
    df -h /var/lib/mysql
#/dev/sdc1             1.8T  940G  720G  57% /var/lib/mysql


# CREATING GRP TABLE FOR TRACK GROUPING (DONE 6/28/05 angie)
    ssh hgwdev
    hgsql canFam2 -e \
      "create table grp (PRIMARY KEY(NAME)) select * from hg17.grp"


# MAKE CHROMINFO TABLE WITH (TEMPORARILY UNMASKED) 2BIT (DONE 6/28/05 angie)
    # Make .2bit, unmasked until RepeatMasker and TRF steps are done.
    # Do this now so we can load up RepeatMasker and run featureBits; 
    # can also load up other tables that don't depend on masking.  
    ssh kkstore01
    cd /cluster/data/canFam2
    nice faToTwoBit ?{,?}/chr*.fa canFam2.2bit
    mkdir bed/chromInfo
    twoBitInfo canFam2.2bit stdout \
    | awk '{print $1 "\t" $2 "\t/gbdb/canFam2/canFam2.2bit";}' \
      > bed/chromInfo/chromInfo.tab

    # Make symbolic links from /gbdb/canFam2/ to the real .2bit.
    ssh hgwdev
    mkdir /gbdb/canFam2
    ln -s /cluster/data/canFam2/canFam2.2bit /gbdb/canFam2/
    # Load /gbdb/canFam2/canFam2.2bit paths into database and save size info.
    cd /cluster/data/canFam2
    hgsql canFam2  < $HOME/kent/src/hg/lib/chromInfo.sql
    hgsql canFam2 -e 'load data local infile \
      "/cluster/data/canFam2/bed/chromInfo/chromInfo.tab" \
      into table chromInfo;'
    echo "select chrom,size from chromInfo" | hgsql -N canFam2 > chrom.sizes
    # take a look at chrom.sizes, should be 41 lines
    wc chrom.sizes
#     41      82     603 chrom.sizes


# GOLD AND GAP TRACKS (DONE 6/28/05 angie)
    ssh hgwdev
    cd /cluster/data/canFam2
    hgGoldGapGl -noGl -chromLst=chrom.lst canFam2 /cluster/data/canFam2 .
    # featureBits fails if there's no chrM_gap, so make one:
    # echo "create table chrM_gap like chr1_gap" | hgsql canFam2
    # oops, that won't work until v4.1, so do this for the time being:
    hgsql canFam2 -e "create table chrM_gap select * from chr1_gap where 0=1"


# MAKE HGCENTRALTEST ENTRY AND TRACKDB TABLE FOR CANFAM1 (TODO 6/28/04 angie)
    ssh hgwdev
    # Make trackDb table so browser knows what tracks to expect:
    ssh hgwdev
    cd $HOME/kent/src/hg/makeDb/trackDb
    cvs up -d -P
    # Edit that makefile to add canFam2 in all the right places and do
    make update
    cvs commit makefile
    mkdir -p dog/canFam2
    cvs add dog dog/canFam2
    cvs ci -m "trackDb dir for dog genome(s)" dog/canFam2
    make alpha

    # Add dbDb and defaultDb entries:
    echo 'insert into dbDb (name, description, nibPath, organism,  \
          defaultPos, active, orderKey, genome, scientificName,  \
          htmlPath, hgNearOk, hgPbOk, sourceName)  \
          values("canFam2", "Jul. 2004", \
          "/gbdb/canFam2/nib", "Dog", "chr14:10666612-10673232", 1, \
          18, "Dog", "Canis familiaris", \
          "/gbdb/canFam2/html/description.html", 0, 0, \
          "Broad Institute v. 1.0");' \
    | hgsql -h genome-testdb hgcentraltest
    # If there's another dog assembly, this will be an update not insert:
    echo 'insert into defaultDb (genome, name) values("Dog", "canFam2");' \
    | hgsql -h genome-testdb hgcentraltest


# REPEAT MASKING (IN PROGRESS 6/29/05 angie)
    #- Split contigs into 500kb chunks, at gaps if possible:
    ssh kkstore01
    cd /cluster/data/canFam2
    foreach chr (`cat chrom.lst`)
      set c = `echo $chr | sed -e 's/chr//'`
      foreach d ($c/chr${c}*_?{,?})
        cd $d
        echo "splitting $d"
        set contig = $d:t
        faSplit gap $contig.fa 500000 ${contig}_ -lift=$contig.lft \
          -minGapSize=100
        cd ../..
      end
    end

    #- Make the run directory and job list:
    cd /cluster/data/canFam2
    cat << '_EOF_' > jkStuff/RMDog
#!/bin/csh -fe

cd $1
pushd .
/bin/mkdir -p /tmp/canFam2/$2
/bin/cp $2 /tmp/canFam2/$2/
cd /tmp/canFam2/$2
/cluster/bluearc/RepeatMasker/RepeatMasker -s -spec dog $2
popd
/bin/cp /tmp/canFam2/$2/$2.out ./
if (-e /tmp/canFam2/$2/$2.align) /bin/cp /tmp/canFam2/$2/$2.align ./
if (-e /tmp/canFam2/$2/$2.tbl) /bin/cp /tmp/canFam2/$2/$2.tbl ./
if (-e /tmp/canFam2/$2/$2.cat) /bin/cp /tmp/canFam2/$2/$2.cat ./
/bin/rm -fr /tmp/canFam2/$2/*
/bin/rmdir --ignore-fail-on-non-empty /tmp/canFam2/$2
/bin/rmdir --ignore-fail-on-non-empty /tmp/canFam2
'_EOF_'
    # << this line makes emacs coloring happy
    chmod +x jkStuff/RMDog
    mkdir RMRun
    cp /dev/null RMRun/RMJobs
    foreach chr (`cat chrom.lst`)
      set c = `echo $chr | sed -e 's/chr//'`
      foreach d ($c/chr${c}_?{,?})
          set ctg = $d:t
          foreach f ( $d/${ctg}_?{,?}.fa )
            set f = $f:t
            echo /cluster/data/canFam2/jkStuff/RMDog \
                 /cluster/data/canFam2/$d $f \
               '{'check out line+ /cluster/data/canFam2/$d/$f.out'}' \
              >> RMRun/RMJobs
          end
      end
    end

    #- Do the run
    ssh kk
    cd /cluster/data/canFam2/RMRun
    para create RMJobs
    para try, para check, para check, para push, para check,...
#TODO
#Completed: 6373 of 6373 jobs
#CPU time in finished jobs:   24949716s  415828.60m  6930.48h  288.77d  0.791 y
#IO & Wait Time:                220014s    3666.90m    61.12h    2.55d  0.007 y
#Average job time:                3949s      65.82m     1.10h    0.05d
#Longest job:                     6389s     106.48m     1.77h    0.07d
#Submission to last job:         31173s     519.55m     8.66h    0.36d

    #- Lift up the 500KB chunk .out's to 5MB ("pseudo-contig") level
    ssh kkstore01
    cd /cluster/data/canFam2
    foreach d (*/chr*_?{,?})
      set contig = $d:t
      echo $contig
      liftUp $d/$contig.fa.out $d/$contig.lft warn $d/${contig}_*.fa.out \
        > /dev/null
    end

    #- Lift pseudo-contigs to chromosome level
    foreach c (`cat chrom.lst`)
      echo lifting $c
      cd $c
      liftUp chr$c.fa.out lift/ordered.lft warn `cat lift/oOut.lst` > /dev/null
      cd ..
    end

    #- Load the .out files into the database with:
    ssh hgwdev
    cd /cluster/data/canFam2
    hgLoadOut canFam2 */chr*.fa.out


# VERIFY REPEATMASKER RESULTS (TODO 6/29/05 angie)
    # Eyeball some repeat annotations in the browser, compare to lib seqs.
    # Run featureBits on canFam2 and on a comparable genome build, and compare:
    ssh hgwdev
    featureBits canFam2 rmsk
#896773874 bases of 2359845093 (38.001%) in intersection
    # Good, 35-40% seems typical for mammals...


# SIMPLE REPEATS (TRF) (TODO 6/29/05 angie)
    ssh kkstore01
    mkdir /cluster/data/canFam2/bed/simpleRepeat
    cd /cluster/data/canFam2/bed/simpleRepeat
    mkdir trf
    cp /dev/null jobs.csh
    foreach d (/cluster/data/canFam2/*/chr*_?{,?})
      set ctg = $d:t
      foreach f ($d/${ctg}.fa)
        set fout = $f:t:r.bed
        echo $fout
        echo "/cluster/bin/i386/trfBig -trf=/cluster/bin/i386/trf $f /dev/null -bedAt=trf/$fout -tempDir=/tmp" \
        >> jobs.csh
      end
    end
    csh -ef jobs.csh >&! jobs.log &
    # check on this with
    tail -f jobs.log
    wc -l jobs.csh
    ls -1 trf | wc -l
    endsInLf trf/*
    # When job is done do:
    liftUp simpleRepeat.bed /cluster/data/canFam2/jkStuff/liftAll.lft warn \
      trf/*.bed

    # Load into the database:
    ssh hgwdev
    hgLoadBed canFam2 simpleRepeat \
      /cluster/data/canFam2/bed/simpleRepeat/simpleRepeat.bed \
      -sqlTable=$HOME/src/hg/lib/simpleRepeat.sql
    featureBits canFam2 simpleRepeat
#36509895 bases of 2359845093 (1.547%) in intersection


# PROCESS SIMPLE REPEATS INTO MASK (TODO 6/29/05/ angie)
    # After the simpleRepeats track has been built, make a filtered version 
    # of the trf output: keep trf's with period <= 12:
    ssh kkstore01
    cd /cluster/data/canFam2/bed/simpleRepeat
    mkdir -p trfMask
    foreach f (trf/chr*.bed)
      awk '{if ($5 <= 12) print;}' $f > trfMask/$f:t
    end
    # Lift up filtered trf output to chrom coords as well:
    cd /cluster/data/canFam2
    mkdir bed/simpleRepeat/trfMaskChrom
    foreach c (`cat chrom.lst`)
      if (-e $c/lift/ordered.lst) then
        perl -wpe 's@(\S+)@bed/simpleRepeat/trfMask/$1.bed@' \
          $c/lift/ordered.lst > $c/lift/oTrf.lst
        liftUp bed/simpleRepeat/trfMaskChrom/chr$c.bed \
          jkStuff/liftAll.lft warn `cat $c/lift/oTrf.lst`
      endif
    end
    # Here's the coverage for the filtered TRF:
    ssh hgwdev
    cat /cluster/data/canFam2/bed/simpleRepeat/trfMaskChrom/*.bed \
      > /tmp/filtTrf.bed
    featureBits canFam2 /tmp/filtTrf.bed
#23017541 bases of 2359845093 (0.975%) in intersection
    featureBits canFam2 /tmp/filtTrf.bed \!rmsk
#1275941 bases of 2359845093 (0.054%) in intersection


# MASK SEQUENCE WITH REPEATMASKER AND SIMPLE REPEAT/TRF (TODO 6/29/05 angie)
    ssh kkstore01
    cd /cluster/data/canFam2
    # Soft-mask (lower-case) the contig and chr .fa's, 
    # then make hard-masked versions from the soft-masked.  
    set trfCtg=bed/simpleRepeat/trfMask
    set trfChr=bed/simpleRepeat/trfMaskChrom
    foreach f (*/chr*.fa)
      echo "repeat- and trf-masking $f"
      maskOutFa -soft $f $f.out $f
      set chr = $f:t:r
      maskOutFa -softAdd $f $trfChr/$chr.bed $f
      echo "hard-masking $f"
      maskOutFa $f hard $f.masked
    end
    # Tons of warnings like this, mostly for L1M*:
#WARNING: negative rEnd: -189 chrX:117586389-117586475 L1M3e
    foreach c (`cat chrom.lst`)
      echo "repeat- and trf-masking contigs of chr$c"
      foreach d ($c/chr*_?{,?})
        set ctg=$d:t
        set f=$d/$ctg.fa
        maskOutFa -soft $f $f.out $f
        maskOutFa -softAdd $f $trfCtg/$ctg.bed $f
        maskOutFa $f hard $f.masked
      end
    end
    #- Rebuild the nib files, using the soft masking in the fa:
    foreach f (*/chr*.fa)
      faToNib -softMask $f nib/$f:t:r.nib
    end
    # Make one big 2bit file as well, and make a link to it in 
    # /gbdb/canFam2/nib because hgBlat looks there:
    faToTwoBit */chr*.fa canFam2.2bit
    ssh hgwdev
    ln -s /cluster/data/canFam2/canFam2.2bit /gbdb/canFam2/nib/


# MAKE HGCENTRALTEST BLATSERVERS ENTRY FOR CANFAM1 (TODO 7/13/04 angie)
    ssh hgwdev
    echo 'insert into blatServers values("canFam2", "blat9", "17778", 1, 0); \
          insert into blatServers values("canFam2", "blat9", "17779", 0, 1);' \
      | hgsql -h genome-testdb hgcentraltest


# MAKE DESCRIPTION/SAMPLE POSITION HTML PAGE (TODO 7/6/04 angie)
    ssh hgwdev
    mkdir /gbdb/canFam2/html
    # Write ~/kent/src/hg/makeDb/trackDb/dog/canFam2/description.html 
    # with a description of the assembly and some sample position queries.  
    chmod a+r $HOME/kent/src/hg/makeDb/trackDb/dog/canFam2/description.html
    # Check it in and copy (ideally using "make alpha" in trackDb) to 
    # /gbdb/canFam2/html


# PUT MASKED SEQUENCE OUT FOR CLUSTER RUNS (TODO 6/29/05 angie)
    ssh kkr1u00
    # Chrom-level mixed nibs that have been repeat- and trf-masked:
    rm -rf /iscratch/i/canFam2/nib
    mkdir /iscratch/i/canFam2/nib
    cp -p /cluster/data/canFam2/nib/chr*.nib /iscratch/i/canFam2/nib
    # Pseudo-contig fa that have been repeat- and trf-masked:
    rm -rf /iscratch/i/canFam2/maskedContigs
    mkdir /iscratch/i/canFam2/maskedContigs
    foreach d (/cluster/data/canFam2/*/chr*_?{,?})
      cp $d/$d:t.fa /iscratch/i/canFam2/maskedContigs
    end
    cp -p /cluster/data/canFam2/canFam2.2bit /iscratch/i/canFam2/
    du -sh /iscratch/i/canFam2/*
#631M    /iscratch/i/canFam2/canFam2.2bit
#2.5G    /iscratch/i/canFam2/maskedContigs
#1.2G    /iscratch/i/canFam2/nib
    iSync
    # Put nibs and rmsk files in /scratch for big cluster blastz.
    mkdir /cluster/bluearc/scratch/hg/canFam2
    cp -pR /iscratch/i/canFam2/nib /cluster/bluearc/scratch/hg/canFam2
    ssh kkstore01
    mkdir /cluster/bluearc/scratch/hg/canFam2/rmsk
    cp -p /cluster/data/canFam2/*/chr*.fa.out \
       /cluster/bluearc/scratch/hg/canFam2/rmsk
    # Ask cluster-admin for an rsync after the next step.  


# MAKE LINEAGE-SPECIFIC REPEATS VS. HUMAN, MOUSE (TODO 6/29/05 angie)
    ssh kkstore01
    cd /cluster/bluearc/scratch/hg/canFam2/rmsk
    # Run Arian's DateRepsinRMoutput.pl to add extra columns telling 
    # whether repeats in -query are also expected in -comp species.  
    # Human in extra column 1, Mouse in extra column 2
    foreach outfl ( *.out )
        echo "$outfl"
        /cluster/bluearc/RepeatMasker/DateRepsinRMoutput.pl \
          ${outfl} -query dog -comp human -comp mouse
    end
    # Now extract human (extra column 1), mouse (extra column).
    cd /cluster/bluearc/scratch/hg/canFam2
    mkdir linSpecRep.notInHuman
    mkdir linSpecRep.notInMouse
    foreach f (rmsk/*.out_hum_mus)
        set base = $f:t:r:r
        echo $base.out.spec
        /cluster/bin/scripts/extractLinSpecReps 1 $f > \
                        linSpecRep.notInHuman/$base.out.spec
        /cluster/bin/scripts/extractLinSpecReps 2 $f > \
                        linSpecRep.notInMouse/$base.out.spec
    end
    wc -l rmsk/*.out
#4337285 total
    wc -l linSpecRep.notInHuman/*
#1333452 total
    wc -l linSpecRep.notInMouse/*
#1333452 total
    # The linSpecReps.notIn{Human,Mouse} files are the same.  I asked Arian 
    # if that's a bad thing last week (human vs. {dog,mouse} -> same).  
    # Haven't heard back yet, but hey, we're all mammals here...
    foreach f (linSpecRep.notInHuman/*)
      echo $f:t
      diff $f linSpecRep.notInMouse/$f:t | wc -l | g -vw 0
    end
    # Clean up.
    rm /cluster/bluearc/scratch/hg/canFam2/rmsk/*.out_hum_mus
    # Ask cluster-admin for an rsync.


# MAKE 10.OOC, 11.OOC FILES FOR BLAT (TODO 6/29/05 angie)
    # Use -repMatch=843 (based on size -- for human we use 1024, and 
    # dog size is 2359845093 / 2866216770 = ~82.3% of human judging by 
    # gapless genome size from featureBits)
    ssh kolossus
    mkdir /cluster/data/canFam2/bed/ooc
    cd /cluster/data/canFam2/bed/ooc
    ls -1 /cluster/data/canFam2/nib/chr*.nib > nib.lst
    blat nib.lst /dev/null /dev/null -tileSize=11 \
      -makeOoc=/cluster/bluearc/canFam2/11.ooc -repMatch=843
#Wrote 26268 overused 11-mers to /cluster/bluearc/canFam2/11.ooc
    blat nib.lst /dev/null /dev/null -tileSize=10 \
      -makeOoc=/cluster/bluearc/canFam2/10.ooc -repMatch=843
#Wrote 143003 overused 10-mers to /cluster/bluearc/canFam2/10.ooc
    ssh kkr1u00
    cp -p /cluster/bluearc/canFam2/*.ooc /iscratch/i/canFam2/
    iSync


# AUTO UPDATE GENBANK MRNA RUN  (TODO 6/29/05 angie)
    ssh hgwdev
    # Update genbank config and source in CVS:
    cd ~/kent/src/hg/makeDb/genbank
    cvsup .
    # See if /cluster/data/genbank/etc/genbank.conf has had any un-checked-in
    # edits, check them in if necessary:
    diff /cluster/data/genbank/etc/genbank.conf etc/genbank.conf

    # Edit etc/genbank.conf and add these lines:
# canFam2 (dog)
canFam2.genome = /iscratch/i/canFam2/nib/chr*.nib
canFam2.lift = /cluster/data/canFam2/jkStuff/liftAll.lft
canFam2.refseq.mrna.native.load = no
canFam2.refseq.mrna.xeno.load = yes
canFam2.refseq.mrna.xeno.pslReps = -minCover=0.15 -minAli=0.75 -nearTop=0.005
canFam2.genbank.mrna.xeno.load = yes
canFam2.genbank.est.xeno.load = no
canFam2.downloadDir = canFam2

    cvs ci etc/genbank.conf
    # Since dog is a new species for us, edit src/lib/gbGenome.c.  
    # Pick some other browser species, & monkey-see monkey-do.  
    cvs diff src/lib/gbGenome.c
    make
    cvs ci src/lib/gbGenome.c

    # Edit src/align/gbBlat to add /iscratch/i/canFam2/11.ooc
    cvs diff src/align/gbBlat
    make
    cvs ci src/align/gbBlat
    # Install to /cluster/data/genbank:
    make install-server

    ssh eieio
    cd /cluster/data/genbank
    # This is an -initial run, (xeno) refseq only:
    nice bin/gbAlignStep -srcDb=refseq -type=mrna -initial canFam2 &
    # Load results:
    ssh hgwdev
    cd /cluster/data/genbank
    nice bin/gbDbLoadStep -verbose=1 -drop -initialLoad canFam2
    featureBits canFam2 xenoRefGene
#39066569 bases of 2359845093 (1.655%) in intersection
    # Clean up:
    rm -r work/initial.canFam2

    ssh eieio
    cd /cluster/data/genbank
    # This is an -initial run, mRNA only:
    nice bin/gbAlignStep -srcDb=genbank -type=mrna -initial canFam2 &
    # Load results:
    ssh hgwdev
    cd /cluster/data/genbank
    nice bin/gbDbLoadStep -verbose=1 -drop -initialLoad canFam2
    featureBits canFam2 mrna
#1850373 bases of 2359845093 (0.078%) in intersection
    featureBits canFam2 xenoMrna
#62236255 bases of 2359845093 (2.637%) in intersection
    # Clean up:
    rm -r work/initial.canFam2

    ssh eieio
    # -initial for ESTs:
    nice bin/gbAlignStep -srcDb=genbank -type=est -initial canFam2 &
    # Load results:
    ssh hgwdev
    cd /cluster/data/genbank
    nice bin/gbDbLoadStep -verbose=1 canFam2 &
    featureBits canFam2 intronEst
#4090352 bases of 2359845093 (0.173%) in intersection
    featureBits canFam2 est
#10958036 bases of 2359845093 (0.464%) in intersection
    # Clean up:
    rm -r work/initial.canFam2


