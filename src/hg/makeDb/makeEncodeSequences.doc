#!/bin/csh 

exit;

############################################################
# make metadata file - not automated yet.  
# This file was put together in pieces from multiple sources
#    - hgcentral.dbDb
#    - http://www.nisc.nih.gov/open_page.html?/projects/encode/index.cgi
#    - http://www.ncbi.nlm.nih.gov/IEB/Research/Schuler/ENCODE/ENCODE_seqids.txt

############################################################
# get sequences

rm -rf makeLists.pl >& /dev/null
cat > makeLists.pl <<EOF
#!/usr/bin/perl -W

%libOptions = 
    (
     "armadillo" => "-mammal ",
     "baboon"    => "        ",
     "cat"       => "-cat    ",
     "chicken"   => "-chicken",
     "chimp"     => "        ",
     "cow"       => "-cow    ",
     "dog"       => "-dog    ",
     "fugu"      => "-fugu   ",
     "galago"    => "        ",
     "human"     => "        ",
     "marmoset"  => "        ",
     "mouse"     => "-mus    ",
     "pig"       => "-pig    ",
     "platypus"  => "-mammal ",
     "rat"       => "-rat    ",
     "ratb"      => "-rat    ",
     "tetraodon" => "-danio  ",
     "zebrafish" => "-danio  ",
     "zfish"     => "-danio  "
     );

$efetchURL  = "http://www.ncbi.nih.gov/entrez/eutils/efetch.fcgi?db=nucleotide&rettype=fasta";
$bluearc    = "/cluster/bluearc/encode";
$msaDir     = "/usr/local/apache/htdocs/encode/downloads/msa";
$freezeDate = shift;
$metadata   = "${msaDir}/${freezeDate}/metadata.txt";
$wgetList   = "/cluster/bluearc/encode/wgetList";
$maskList   = "/cluster/bluearc/encode/para/maskList";

open(METADATA, " < $metadata") or die "can't open $metadata for reading.\n";
open(WGETLIST, " > $wgetList") or die "can't open $wgetList";
open(MASKLIST, " > $maskList") or die "can't open $maskList";

print(WGETLIST, "cd /cluster/bluearc/encode\n");

while (<METADATA>)
{
    if (/niscOrganism/) { next; }
    @fields  = split /\t/;
    $species = $fields[0];
    $acc     = $fields[10];

    print(WGETLIST "wget -O $bluearc/$acc \"${efetchURL}&id=$acc\"\n");
    if (defined $libOptions{lc($species)})
	{
	print(MASKLIST "/cluster/bin/scripts/maskOne.csh $acc $libOptions{lc($species)}\n");
	}
    else
	{
	print "Missing species: ". lc($species) . "\n";
	}
} 
EOF
# 

chmod ug+x makeLists.pl
./makeLists.pl
chmod ug+x /cluster/bluearc/encode/wgetList /cluster/bluearc/encode/para/maskList
/cluster/bluearc/encode/wgetList

############################################################
# update metadata file with correct seq lengths, N count
# This is still done manually and needs to be updated

rm -rf getLengths.pl >& /dev/null
cat > getLengths.pl <<EOF
#!/usr/bin/perl -W

opendir(DIR,".");
@files= grep /NT/, readdir DIR;
closedir(DIR);
foreach $file (@files)
{
    $seq="";
    open(FASTA,$file) or die "Ha!";
    <FASTA>; # ignore header line;
    while (<FASTA>) { $seq .= $_; }
    close(FASTA);
    $a = ($seq =~ tr/aA//);
    $c = ($seq =~ tr/cC//);
    $g = ($seq =~ tr/gG//);
    $t = ($seq =~ tr/tT//);
    $n = ($seq =~ tr/nN//);
    print "$file\t" . ($a+$c+$g+$t+$n) . "\t$n\n";
}
EOF
#
chmod ug+x getLengths.pl
./getLengths.pl < metadata.txt > lengths

############################################################
# mask sequences

cat > /cluster/bin/scripts/maskOne.csh <<EOF
#!/bin/csh

if ( $#argv < 1 ) then
    echo "usage: $0 <accession> [<species option>]"
    exit 1
endif
set acc = $1
set specOpt = " "
if ( $#argv >= 2  ) then
    set specOpt = $2
end

cd /tmp
/bin/cp -f /cluster/bluearc/encode/original/$acc .

/cluster/bluearc/RepeatMasker031217/RepeatMasker -nocut $specOpt $acc
/cluster/bin/i386/trfBig $acc $acc.TRF -bed -trf=/cluster/bin/i386/trf

/cluster/bin/i386/maskOutFa $acc $acc.out $acc.RM -soft
/cluster/bin/i386/maskOutFa $acc.RM $acc.bed $acc -softAdd

/bin/mv -f $acc     /cluster/bluearc/encode/masked
/bin/mv -f $acc.out /cluster/bluearc/encode/RepeatMasker
/bin/mv -f $acc.bed /cluster/bluearc/encode/trf
/bin/rm -f $acc*

EOF
#
chmod ug+x /cluster/bin/scripts/maskOne.csh

ssh kk
cd /cluster/bluearc/encode/para
para create maskList
para push, para check, ...

############################################################
# rewrite files with new headers

rm -rf writeEncodeFasta.pl >& /dev/null
cat > writeEncodeFasta.pl <<EOF
#!/usr/bin/perl -W

# echo "select * from encodeOrthology where release_date='releaseDate'"|mysql $database > metadata
if ( $#ARGV < 1 ) {die "usage: writeEncodeFasta.pl OCT-2004 metadata.txt";}
$releaseDate = shift;
$metadata = shift;

open(HEADERLIST," < $metadata") or die "Can't open $metadata";
while (<HEADERLIST>)
{
    if ( /niscOrganism/ ) { next; } # ignore header
    @row     = split;
    if ( $#row < 14 ) { die "Bad input format: $_"; }
    $header  = ">";
    $header .= join "|", @row;
    $org     = $row[0];
    $region  = $row[1];
    $acc     = $row[10];
    $source  = "/cluster/bluearc/encode/masked/$acc";
    open (SOURCE, " < $source") or die ("Can't open $source");
    $outDir  = "/cluster/bluearc/encode/$releaseDate/$region";
    $outFile = "$outDir/$org.$region.fa";
    system ("mkdir -p $outDir"); # or die ("Failed: mkdir $outDir");
    system ("touch $outFile");
    open (DEST, " >> $outFile") or die "Can't open $outFile";
    print DEST "$header\n";
    <SOURCE>; # ignore header
    while (<SOURCE>) { print DEST; }
    close(SOURCE);
    close(DEST);
}
EOF
#

set downloadDir = /usr/local/apache/htdocs/encode/downloads/msa
set releaseDate  = OCT-2004
set releaseDir   = $downloadDir/$releaseDate

chmod ug+x writeEncodeFasta.pl
./writeEncodeFasta.pl $releaseDate metadata.txt

ssh hgwdev
rm -rf $releaseDir/EN*
cp -rf metadata.txt /cluster/bluearc/encode/$releaseDate/EN* $releaseDir

chmod 775 $downloadDir $releaseDir $releaseDir/EN* $releaseDir/RepeatMasker $releaseDir/trf
chmod 664 $releaseDir/EN*/* $dreezeDir/RepeatMasker/* $releaseDir/trf/*  $releaseDir/metadata.txt

# update htdocs/encode/orthoAll.html
