#!/bin/csh -f # set emacs mode
exit; # don't actually run this like a script :)

# CREATE BUILD DIRECTORY (DONE 4/17/06 angie)
    # df -h /cluster/store*, choose the one with the most space...
    ssh kkstore04
    mkdir /cluster/store8/xenTro2
    ln -s /cluster/store8/xenTro2 /cluster/data/xenTro2


# DOWNLOAD SEQUENCE (DONE 4/17/06 angie)
    ssh kkstore04
    mkdir /cluster/data/xenTro2/downloads
    cd /cluster/data/xenTro2/downloads

    wget --timestamp ftp://ftp.jgi-psf.org/pub/JGI_data/Frog/v4.1/Xentr4.fasta.gz
    faSize Xentr4.fasta.gz
#1513925492 bases (154525475 N's 1359400017 real 1193882410 upper 165517607 lower) in 19759 sequences in 1 files
#Total size: mean 76619.5 sd 381240.5 min 2001 (scaffold_20095) max 7817814 (scaffold_1) median 7909
#N count: mean 7820.5 sd 19478.8
#U count: mean 60422.2 sd 323863.1
#L count: mean 8376.8 sd 44842.2


# MAKE JKSTUFF AND BED DIRECTORIES (DONE 4/17/06 angie)
    # This used to hold scripts -- better to keep them inline here so 
    # they're in CVS.  Now it should just hold lift file(s) and 
    # temporary scripts made by copy-paste from this file.  
    mkdir /cluster/data/xenTro2/jkStuff
    # This is where most tracks will be built:
    mkdir /cluster/data/xenTro2/bed


# REPEATMASKER (DONE 4/17/06 angie)
    ssh kkstore04
    mkdir /cluster/data/xenTro2/RMRun
    cd /cluster/data/xenTro2/RMRun
    # Record RM version used:
    ls -l /cluster/bluearc/RepeatMasker
#lrwxrwxrwx  1 angie protein 18 Mar 20 16:50 /cluster/bluearc/RepeatMasker -> RepeatMasker060320/
    grep RELEASE /cluster/bluearc/RepeatMasker/Libraries/RepeatMaskerLib.embl
#CC   RELEASE 20060315;                                            *
    # Run RepeatMasker on a dummy input, just to make it initialize its 
    # species libraries once before the cluster run:
    /cluster/bluearc/RepeatMasker/RepeatMasker -spec "xenopus tropicalis" \
      /dev/null
#Building species libraries in: /cluster/bluearc/RepeatMasker060320/Libraries/20060315/xenopus_tropicalis

    # Apparently RepeatMasker's default lib is smaller than the lib that 
    # was provided along with assembly version 3 (our xenTro1), so we will 
    # run with both the default lib and JGI's lib.
    faSize /cluster/bluearc/RepeatMasker060320/Libraries/20060315/xenopus_tropicalis/specieslib
#84811 bases (92 N's 84719 real 0 upper 84719 lower) in 85 sequences in 1 files
    faSize /cluster/data/xenTro1/downloads/xt3.lib1.fasta
#505033 bases (113 N's 504920 real 504920 upper 0 lower) in 367 sequences in 1 files
    mkdir /cluster/bluearc/xenTro2
    cp -p /cluster/data/xenTro1/downloads/xt3.lib1.fasta \
      /cluster/bluearc/xenTro2/
    /cluster/bluearc/RepeatMasker/RepeatMasker \
      -lib /cluster/bluearc/xenTro2/xt3.lib1.fasta /dev/null

    #- Split sequence into 500kb chunks, at gaps if possible:
    mkdir /cluster/data/xenTro2/scaffoldsSplit500k
    cd /cluster/data/xenTro2/scaffoldsSplit500k
    faSplit -outDirDepth=2 -lift=ss500k.lft \
      gap ../downloads/Xentr4.fasta.gz 500000 ss500k
#22243 pieces of 22243 written


    #- Make the run directory and job list:
    # Run RepeatMasker twice, once with default xenopus lib and once 
    # with the larger lib that was distributed with xenTro1...
    cd /cluster/data/xenTro2
    cat << '_EOF_' > jkStuff/RMXenopus
#!/bin/csh -fe

set tmpDir = /scratch/tmp
/bin/mkdir -p $tmpDir/xenTro2/$2
/bin/cp $1/$2 $tmpDir/xenTro2/$2/
cd $tmpDir/xenTro2/$2
/cluster/bluearc/RepeatMasker/RepeatMasker -s -lib /cluster/bluearc/xenTro2/xt3.lib1.fasta $2
/bin/cp $tmpDir/xenTro2/$2/$2.out $3.jgi
/bin/rm -fr $tmpDir/xenTro2/$2/*
/bin/cp $1/$2 $tmpDir/xenTro2/$2/
/cluster/bluearc/RepeatMasker/RepeatMasker -s -spec "xenopus tropicalis" $2
/bin/cp $tmpDir/xenTro2/$2/$2.out $3
/bin/rm -fr $tmpDir/xenTro2/$2/*
/bin/rmdir --ignore-fail-on-non-empty $tmpDir/xenTro2/$2
/bin/rmdir --ignore-fail-on-non-empty $tmpDir/xenTro2
'_EOF_'
    # << this line makes emacs coloring happy
    chmod +x jkStuff/RMXenopus
    mkdir RMRun RMOut
    cp /dev/null RMRun/RMJobs
    foreach i (0 1 2 3 4 5 6 7 8 9)
      mkdir RMOut/$i
      foreach j (0 1 2 3 4 5 6 7 8 9)
        mkdir RMOut/$i/$j
        foreach f (/cluster/data/xenTro2/scaffoldsSplit500k/$i/$j/ss500k*.fa)
          echo /cluster/data/xenTro2/jkStuff/RMXenopus \
               $f:h $f:t \
             '{'check out line+ /cluster/data/xenTro2/RMOut/$i/$j/$f:t.out'}' \
            >> RMRun/RMJobs
        end
      end
    end
    wc -l RMRun/RMJobs 
#22243 RMRun/RMJobs

    #- Do the run
    ssh pk
    cd /cluster/data/xenTro2/RMRun
    para make RMJobs; para time | mail -s 'RM cluster run finished' $USER
    para time
#Completed: 22243 of 22243 jobs
#CPU time in finished jobs:    6136121s  102268.68m  1704.48h   71.02d  0.195 y
#IO & Wait Time:                 66562s    1109.37m    18.49h    0.77d  0.002 y
#Average job time:                 279s       4.65m     0.08h    0.00d
#Longest finished job:            2325s      38.75m     0.65h    0.03d
#Submission to last job:         23238s     387.30m     6.46h    0.27d

    #- Lift up the 500KB chunk .out's
    # Also, remove the individual .out file headers and remove duplicate 
    # items found by the two runs (too bad there's no -libOnly).  The 
    # duplicate items are unique for the first 97-105ish characters (up to 
    # the sequential ID field which we ignore anyway).
    ssh kkstore04
    cd /cluster/data/xenTro2/RMOut
    head -3 0/0/ss500k000.fa.out > scaffolds.out
    foreach i (0 1 2 3 4 5 6 7 8 9)
      foreach j (0 1 2 3 4 5 6 7 8 9)
        echo $i/$j/
        foreach f ($i/$j/*.fa.out)
          liftUp -type=.out stdout \
            /cluster/data/xenTro2/scaffoldsSplit500k/ss500k.lft warn \
            $f $f.jgi \
          | tail +4 \
          | sort -k 5,5 -k 6n,6n \
          | uniq -w 97 \
          >> scaffolds.out
        end  
      end
    end
    wc -l scaffolds.out
#2001365 scaffolds.out

    #- Load the .out files into the database with:
    ssh hgwdev
    cd /cluster/data/xenTro2/RMOut
    hgLoadOut xenTro2 -nosplit scaffolds.out
    featureBits -chrom=scaffold_1 xenTro2 rmsk
#1222207 bases of 7578677 (16.127%) in intersection
    featureBits -chrom=scaffold_1 xenTro1 rmsk
#704506 bases of 7406505 (9.512%) in intersection

    # Clean up unmasked split scaffolds.
    ssh kkstore04
    rm -r /cluster/data/xenTro2/scaffoldsSplit500k


# CREATING DATABASE (DONE 4/17/06 angie)
    ssh hgwdev
    hgsql '' -e 'create database xenTro2'
    # Use df to make sure there is at least 75G free on hgwdev:/var/lib/mysql
    df -h /var/lib/mysql
#/dev/sdc1             1.8T  1.5T  168G  90% /var/lib/mysql


# CREATING GRP TABLE FOR TRACK GROUPING (DONE 4/17/06 angie) 
    ssh hgwdev
    hgsql xenTro2 -e "create table grp (PRIMARY KEY(NAME)) select * from rn4.grp"


# CREATE AGP FILES AND GAP/GOLD TABLES (DONE 4/17/06 angie)
    ssh kkstore04
    cd /cluster/data/xenTro2
    # Look for overrepresented round-number run-of-N sizes:
    faGapSizes -niceSizes=5,10,20,25,50,100,200,500,1000,2000,5000,10000,20000,50000,100000 downloads/Xentr4.fasta.gz
    # Of those, 50 is the only overwhelmingly overrepresented round number.
    # Use that as the -minContigGap (instead of the default 25).
    # There are 65 gaps > 50000 (none exactly 50k or 100k) but I don't see 
    # any other obvious threshold to use for -minScaffoldGap and 65 is pretty 
    # few in the grand scheme of things (all we have are scaffolds though).
    hgFakeAgp -minContigGap=50 downloads/Xentr4.fasta.gz xenTro2.agp

    ssh hgwdev
    cd /cluster/data/xenTro2
    hgGoldGapGl -noGl xenTro2 xenTro2.agp


# SIMPLE REPEATS (TRF) (DONE 4/17/06 angie)
    ssh kkr8u00
    mkdir /cluster/data/xenTro2/bed/simpleRepeat
    cd /cluster/data/xenTro2/bed/simpleRepeat
    trfBig -trf=/cluster/bin/i386/trf ../../downloads/Xentr4.fasta.gz \
      /dev/null -bedAt=simpleRepeat.bed -tempDir=/scratch/tmp
    # Took just over 5 hours.

    # Load into the database:
    ssh hgwdev
    hgLoadBed xenTro2 simpleRepeat \
      /cluster/data/xenTro2/bed/simpleRepeat/simpleRepeat.bed \
      -sqlTable=$HOME/kent/src/hg/lib/simpleRepeat.sql
    nice featureBits -chrom=scaffold_1 xenTro2 simpleRepeat
#138459 bases of 7578677 (1.827%) in intersection
    # Compare to rn3:
    nice featureBits -chrom=scaffold_1 xenTro1 simpleRepeat
#123690 bases of 7406505 (1.670%) in intersection


# PROCESS SIMPLE REPEATS INTO MASK (DONE 4/17/06 angie)
    # After the simpleRepeats track has been built, make a filtered version 
    # of the trf output: keep trf's with period <= 12:
    ssh kkstore04
    cd /cluster/data/xenTro2/bed/simpleRepeat
    awk '{if ($5 <= 12) print;}' simpleRepeat.bed > trfMask.bed


# MASK SEQUENCE WITH REPEATMASKER AND SIMPLE REPEAT/TRF (DONE 4/17/06 angie)
    ssh kkstore04
    cd /cluster/data/xenTro2
    # Soft-mask scaffolds with RepeatMasker and filtered TRF:
    maskOutFa -soft downloads/Xentr4.fasta.gz bed/simpleRepeat/trfMask.bed \
      xenTro2.fa
    maskOutFa -softAdd xenTro2.fa RMOut/scaffolds.out xenTro2.fa
    # See how many bases are lower-cased now:
    faSize xenTro2.fa
#1513925492 bases (154525475 N's 1359400017 real 1092281194 upper 267118823 lower) in 19759 sequences in 1 files
    # ~19.6% of non-N bases are lower-cased, sounds reasonable.
    # Hard-mask scaffolds:
    maskOutFa xenTro2.fa hard xenTro2.fa.masked
    # Make 2bit (for hgBlat, browser):
    faToTwoBit xenTro2.fa xenTro2.2bit


# PUT 2BIT ON /SCRATCH (DONE 4/17/06 angie)
    ssh kkstore04
    mkdir /cluster/bluearc/scratch/hg/xenTro2
    cp -p /cluster/data/xenTro2/xenTro2.2bit \
      /cluster/bluearc/scratch/hg/xenTro2/
    # Ask cluster-admin to distribute to /scratch on big & small cluster


# MAKE GCPERCENT (DONE 4/17/06 angie)
    ssh kkr7u00
    mkdir /cluster/data/xenTro2/bed/gc5Base
    cd /cluster/data/xenTro2/bed/gc5Base
    hgGcPercent -wigOut -doGaps -file=stdout -win=5 -verbose=2 xenTro2 \
       /cluster/data/xenTro2 \
    | wigEncode stdin gc5Base.wig gc5Base.wib
    ssh hgwdev
    mkdir /gbdb/xenTro2/wib
    cd /cluster/data/xenTro2/bed/gc5Base
    ln -s `pwd`/gc5Base.wib /gbdb/xenTro2/wib
    hgLoadWiggle -pathPrefix=/gbdb/xenTro2/wib xenTro2 gc5Base gc5Base.wig


# MAKE CHROMINFO TABLE WITH 2BIT (DONE 4/17/06 angie)
    ssh kkstore04
    cd /cluster/data/xenTro2
    mkdir bed/chromInfo
    twoBitInfo xenTro2.2bit stdout \
    | awk '{print $1 "\t" $2 "\t/gbdb/xenTro2/xenTro2.2bit";}' \
      > bed/chromInfo/chromInfo.tab

    # Link to 2bit from /gbdb/xenTro2/:
    ssh hgwdev
    cd /cluster/data/xenTro2
    mkdir /gbdb/xenTro2
    ln -s /cluster/data/xenTro2/xenTro2.2bit /gbdb/xenTro2/
    # Load /gbdb/xenTro2/xenTro2.2bit paths into database and save size info.
    hgLoadSqlTab xenTro2 chromInfo $HOME/kent/src/hg/lib/chromInfo.sql \
      /cluster/data/xenTro2/bed/chromInfo/chromInfo.tab
    echo "select chrom,size from chromInfo" | hgsql -N xenTro2 > chrom.sizes
    # take a look at chrom.sizes size
    wc chrom.sizes
#  19759   39518  392532 chrom.sizes


# MAKE HGCENTRALTEST ENTRY AND TRACKDB TABLE (DONE 4/17/06 angie)
    # Make trackDb table so browser knows what tracks to expect:
    ssh hgwdev
    cd ~/kent/src/hg/makeDb/trackDb
    cvsup

    # Add trackDb directories and a description.html
    mkdir xenTro/xenTro2
    cvs add xenTro/xenTro2
    cvs add xenTro/xenTro2/description.html
    cvs ci xenTro/xenTro2
    # Edit that makefile to add xenTro2 in all the right places and do
    make update DBS=xenTro2

    mkdir /gbdb/xenTro2/html
    cvs ci makefile
    # Go public on genome-test.  In a clean tree (no mods, up-to-date):
    cvs up makefile
    make alpha
    # Note: hgcentral*.genome values must correspond
    # with defaultDb.genome values
    hgsql -h genome-testdb hgcentraltest \
      -e 'INSERT INTO dbDb \
        (name, description, nibPath, organism, \
                defaultPos, active, orderKey, genome, scientificName, \
                htmlPath, hgNearOk, hgPbOk, sourceName) values \
        ("xenTro2", "Aug. 2005", "/gbdb/xenTro2/xenTro2.2bit", "X. tropicalis", \
               "scaffold_19", 1, 36, "X. tropicalis", \
                "Xenopus tropicalis", "/gbdb/xenTro2/html/description.html", \
                0, 0, "JGI v4.1");'


# MAKE DOWNLOADABLE SEQUENCE FILES (DONE 4/17/06 angie)
    ssh kkr8u00
    cd /cluster/data/xenTro2
    #- Build the .tar.gz files -- no genbank for now.
    mkdir bigZips
    gzip -c xenTro2.fa > bigZips/xenTro2.fa.gz
    gzip -c xenTro2.fa.masked > bigZips/xenTro2.hardmasked.fa.gz
    gzip -c RMOut/scaffolds.out > bigZips/xenTro2.rmsk.out.gz
    gzip -c bed/simpleRepeat/simpleRepeat.bed > bigZips/xenTro2.trf.bed.gz
    cd bigZips
    md5sum *.gz > md5sum.txt
    # Make a README.txt

    #- Link the .gz and .txt files to hgwdev:/usr/local/apache/...
    ssh hgwdev
    set gp = /usr/local/apache/htdocs/goldenPath/xenTro2
    mkdir -p $gp/bigZips
    ln -s /cluster/data/xenTro2/bigZips/*.{gz,txt} $gp/bigZips
    # Take a look at bigZips/*
    mkdir $gp/database
    # Create README.txt file in database/ to explain the files.


# MAKE 11.OOC (DONE 4/17/06 angie)
    # Use -repMatch=540 as in makeXenTro1.doc (roughly scaled from human 
    # repMatch by ratio of frog size to human size)
    ssh kkr7u00
    cd /cluster/data/xenTro2
    mkdir /cluster/bluearc/xenTro2
    blat xenTro2.2bit /dev/null /dev/null \
      -tileSize=11 -makeOoc=/cluster/bluearc/xenTro2/11.ooc -repMatch=540
#Wrote 25734 overused 11-mers to /cluster/bluearc/xenTro2/11.ooc


# GENSCAN GENE PREDICTIONS (DONE 4/17/06 angie)
    ssh hgwdev
    mkdir /cluster/data/xenTro2/bed/genscan
    cd /cluster/data/xenTro2/bed/genscan
    # Check out hg3rdParty/genscanlinux to get latest genscan:
    cvs co hg3rdParty/genscanlinux

    # create hard masked .fa files
    ssh kkstore04
    cd /cluster/data/xenTro2
    mkdir hardMasked
    faSplit about xenTro2.fa.masked 5000000 hardMasked/
    # Generate a list file, genome.list, of all the hard-masked contig chunks:
    ls -1S /cluster/data/xenTro2/hardMasked/* > bed/genscan/genome.list
    wc -l bed/genscan/genome.list
#262 bed/genscan/genome.list

    # Run on small cluster (more mem than big cluster).
    ssh kki
    cd /cluster/data/xenTro2/bed/genscan
    # Make 3 subdirectories for genscan to put their output files in
    mkdir gtf pep subopt
    # Create template file, gsub, for gensub2.  For example (3-line file):
    cat << '_EOF_' > gsub
#LOOP
/cluster/bin/x86_64/gsBig {check in line+ $(path1)} {check out line gtf/$(root1).gtf} -trans={check out line pep/$(root1).pep} -subopt={check out line subopt/$(root1).bed} -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=2400000
#ENDLOOP
'_EOF_'
    # << emacs
    gensub2 genome.list single gsub jobList
    para make jobList
    para time
#Completed: 261 of 262 jobs
#Crashed: 1 jobs
#CPU time in finished jobs:      33758s     562.63m     9.38h    0.39d  0.001 y
#IO & Wait Time:                   905s      15.08m     0.25h    0.01d  0.000 y
#Average job time:                 133s       2.21m     0.04h    0.00d
#Longest finished job:             320s       5.33m     0.09h    0.00d
#Submission to last job:          3605s      60.08m     1.00h    0.04d

    # If there are crashes, diagnose with "para problems" and "para crashed".  
    # If a job crashes due to genscan running out of memory, re-run it 
    # manually with "-window=1200000" instead of "-window=2400000".
    ssh kkr8u00
    cd /cluster/data/xenTro2/bed/genscan
    /cluster/bin/x86_64/gsBig /cluster/data/xenTro2/hardMasked/30.fa gtf/30.gtf -trans=pep/30.pep -subopt=subopt/30.bed -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=1200000

    ls -1 gtf | wc -l
#262
    endsInLf gtf/*

    # Concatenate results:
    ssh kkstore04
    cd /cluster/data/xenTro2/bed/genscan
    cat gtf/*.gtf > genscan.gtf
    cat pep/*.pep > genscan.pep
    cat subopt/*.bed > genscanSubopt.bed

    # Load into the database (without -genePredExt because no frame info):
    # Don't load the Pep anymore -- redundant since it's from genomic.
    ssh hgwdev
    cd /cluster/data/xenTro2/bed/genscan
    ldHgGene -gtf xenTro2 genscan genscan.gtf
    hgLoadBed xenTro2 genscanSubopt genscanSubopt.bed
    featureBits -chrom=scaffold_1 xenTro2 genscan
#249658 bases of 7578677 (3.294%) in intersection
    featureBits -chrom=scaffold_1 xenTro1 genscan
#275145 bases of 7406505 (3.715%) in intersection
    # Strange that the coverage dropped a bit.  Well, more seq is masked...?


# GENBANK AUTO UPDATE (DONE 4/18/06 angie)
    # align with revised genbank process. drop xeno ESTs.
    cd ~/kent/src/makeDb/genbank
    cvsup
    # edit etc/genbank.conf to add xenTro2

# xenTro2 (X. tropicalis) 19579 scaffolds
xenTro2.serverGenome = /cluster/data/xenTro2/xenTro2.2bit
xenTro2.clusterGenome = /scratch/hg/xenTro2/xenTro2.2bit
xenTro2.ooc = /cluster/bluearc/xenTro2/11.ooc
xenTro2.lift = no
xenTro2.refseq.mrna.native.pslCDnaFilter  = ${lowCover.refseq.mrna.native.pslCDnaFilter}
xenTro2.refseq.mrna.xeno.pslCDnaFilter    = ${lowCover.refseq.mrna.xeno.pslCDnaFilter}
xenTro2.genbank.mrna.native.pslCDnaFilter = ${lowCover.genbank.mrna.native.pslCDnaFilter}
xenTro2.genbank.mrna.xeno.pslCDnaFilter   = ${lowCover.genbank.mrna.xeno.pslCDnaFilter}
xenTro2.genbank.est.native.pslCDnaFilter  = ${lowCover.genbank.est.native.pslCDnaFilter}
xenTro2.refseq.mrna.native.load = no
xenTro2.genbank.mrna.xeno.load = no
xenTro2.downloadDir = xenTro2
xenTro2.perChromTables = no
xenTro2.mgcTables.default = full
xenTro2.mgcTables.mgc = all

    cvs ci etc/genbank.conf
    # update /cluster/data/genbank/
    make etc-update

    ssh kkstore02
    cd /cluster/data/genbank
    nice bin/gbAlignStep -initial xenTro2 &
    # load database when finished
    ssh hgwdev
    cd /cluster/data/genbank
    nice ./bin/gbDbLoadStep -drop -initialLoad xenTro2 &

    # enable daily alignment and update of hgwdev
    cd ~/kent/src/makeDb/genbank
    cvsup
    # add xenTro2 to:
        etc/align.dbs
        etc/hgwdev.dbs 
    cvs commit
    make etc-update


# CPGISSLANDS (WUSTL) (DONE 4/18/06 angie)
    ssh hgwdev
    mkdir -p /cluster/data/xenTro2/bed/cpgIsland
    cd /cluster/data/xenTro2/bed/cpgIsland
    # Build software from Asif Chinwalla (achinwal@watson.wustl.edu)
    cvs co hg3rdParty/cpgIslands
    cd hg3rdParty/cpgIslands
    make
    mv cpglh.exe /cluster/data/xenTro2/bed/cpgIsland/
    
    ssh kkr8u00
    cd /cluster/data/xenTro2/bed/cpgIsland
    ./cpglh.exe ../../xenTro2.fa > xenTro2.cpg

    # Transform cpglh output to bed +
    cat << '_EOF_' > filter.awk
/* Input columns: */
/* chrom, start, end, len, CpG: cpgNum, perGc, cpg:gpc, observed:expected */
/* chr1\t 41776\t 42129\t 259\t CpG: 34\t 65.8\t 0.92\t 0.94 */
/* Output columns: */
/* chrom, start, end, name, length, cpgNum, gcNum, perCpg, perGc, obsExp */
/* chr1\t41775\t42129\tCpG: 34\t354\t34\t233\t19.2\t65.8\to0.94 */
{
$2 = $2 - 1;
width = $3 - $2;
printf("%s\t%d\t%s\t%s %s\t%s\t%s\t%0.0f\t%0.1f\t%s\t%s\n",
       $1, $2, $3, $5,$6, width,
       $6, width*$7*0.01, 100.0*2*$6/width, $7, $9);
}
'_EOF_'
    # << this line makes emacs coloring happy
    awk -f filter.awk *.cpg > cpgIsland.bed
    wc -l cpgIsland.bed 
#  42984 cpgIsland.bed

    # load into database:
    ssh hgwdev
    cd /cluster/data/xenTro2/bed/cpgIsland
    hgLoadBed xenTro2 cpgIslandExt -tab \
      -sqlTable=$HOME/kent/src/hg/lib/cpgIslandExt.sql cpgIsland.bed
    featureBits -chrom=scaffold_1 xenTro2 cpgIslandExt
#54127 bases of 7578677 (0.714%) in intersection
    featureBits -chrom=scaffold_1 xenTro1 cpgIslandExt
#48512 bases of 7406505 (0.655%) in intersection
    featureBits xenTro1 cpgIslandExt
#19279778 bases of 1381238994 (1.396%) in intersection


# CPGISLANDS (ANDY LAW) (DONE 4/18/06 angie)
    # See notes in makeGalGal2.doc
    ssh kr8u00
    mkdir /cluster/data/xenTro2/bed/cpgIslandGgfAndy
    cd /cluster/data/xenTro2/bed/cpgIslandGgfAndy
    #	Build the preProcGgfAndy program in
    #	kent/src/oneShot/preProcGgfAndy into your ~/bin/$MACHTYPE
    # Use soft-masked sequence since this is not a mammal...
    ~/bin/x86_64/preProcGgfAndy ../../xenTro2.fa \
    | /cluster/home/angie/ggf-andy-cpg-island-ucsc.pl \
      > cpgIslandGgfAndy.bed
    wc -l ../cpgIsland/cpgIsland.bed *bed
#   42984 ../cpgIsland/cpgIsland.bed
#  184980 cpgIslandGgfAndy.bed

    # load into database:
    ssh hgwdev
    cd /cluster/data/xenTro2/bed/cpgIslandGgfAndy
    sed -e 's/cpgIslandExt/cpgIslandGgfAndy/g' \
      $HOME/kent/src/hg/lib/cpgIslandExt.sql > cpgIslandGgfAndy.sql
    hgLoadBed xenTro2 cpgIslandGgfAndy -tab \
      -sqlTable=cpgIslandGgfAndy.sql cpgIslandGgfAndy.bed
    featureBits -chrom=scaffold_1 xenTro2 cpgIslandExt
#54127 bases of 7578677 (0.714%) in intersection
    featureBits -chrom=scaffold_1 xenTro2 cpgIslandGgfAndy
#251543 bases of 7578677 (3.319%) in intersection


# ENSEMBL is on 4.0 not 4.1... do the coords mostly carry over???
# COMPARATIVE: chicken, opossum, human, mouse, zebrafish


