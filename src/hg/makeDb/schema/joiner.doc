The .joiner file describes relationships between tables.
In particular it groups together fields in different tables
that refer to the same identifier.  The first field in the group
normally contains all instances of that identifier, while subsequent
fields may contain only a subset.  In relational database terms
the first field in the group is the primary key, and other fields
are foreign keys.

The joiner file is somewhat more flexible than foreign keys in
a relational database.  It allows fields that contain comma separated
(or other simply-separated) lists of identifiers.  It allows an
identifier to contain a constant prefix or suffix in one field,
and not in another.  It allows tables to be split up for performance
reasons (such as the per-chromosome tables common at UCSC) but still
to be viewed logically as the same table.  It allows you to specify
the identifier relationships in multiple databases simultatiously.
It also can describe cases where it can be worthwhile to do a join
on two fields, but where both fields contain some of their own unique
identifiers.

The program 'joinerCheck' performs some automatic checking on joiner
files.  Joiner files are also intended to be used in generating automatic
documentation and database browsing tools.

The joiner file is a line-oriented format.  In some cases blank lines
are also significant.  Lines starting with # are treated as comments
and ignored.  There are two primary types of record in a joiner file -
a 'set' statement which creates a variable, and an identifier statement.

The set statement is quite simple:
   set varName value
Here varName should start with a letter, and can be followed by any
number of letters and numbers.  The value extends to the end of the
line.  Once a variable is defined this way, $varName afterwards
will be replaced with the value from the set line.  Variable can
be defined in terms of other variables.

The identifier statement defines an identifier shared across tables.
The basic format is one line containing the identifier name and attributes,
a quoted comment line, a line for the field that serves as the primary
key for the identifier, and then a line for each other field that shares
the identifier.  The field lines describe the field in database.table.field
format, and then attributes if any of the field.  The database component
may be a comma separated list if the field is in more than one database.
A blank line indicates the end of the identifier statement.
Here's an example

   identifier customerId typeOf=personId
   "This is the id of someone who has bought something from us."
        sales.customer.id
	sales.sale.customer
	sales.return.customer
	corperate.customer.id chopBefore=CID:
	legal2004,legal2003.liability.plaintiff chopBefore=CID: chopAfter=.
	legal2004,legal2003.recall.notified chopBefore=CID: chopAfter=. comma

Identifier Line Attributes:
  typeOf - indicates this is a subset of a parent type of identifier.
           Joins between fields in this identifier and preceding generations 
	   of identifiers are often fruitful.  
     value: parent identifier.  
  external - indicates this identifier is defined outside of our own databases
     value: name of organization that defines identifier
  fuzzy - indicates that while in many cases the identifier will be shared
          between the listed fields, the relationship is informal. In 
	  particular the first field is not expected to contain all 
	  instances of the identifier.  
     value: n/a

Field Line Attributes:
  comma - the field contains a comma separated list of the identifier.
     value: n/a
  separator - the field contains a list of the identifier.
     value: a single character list separator.
  chopBefore - the field contains some prefix that needs to be chopped off
               before it is considered as an identifier.  If the prefix
	       is missing then no chopping occurs.
     value: a search string. Everything before the first instance of
            this search string (including the search string itself) is
	    considered prefix, and is removed before joining.
  chopAfter - the field contains some suffix that needs to be chopped off
              before it is considered as an identifier
     value: a search string. Everything after the last instance of
            this search string (including the search string itself) is
	    considered suffix, and is removed before joining.
  indexOf - valid only for lists.  This indicates that the identifier
            is actually the position (zero based) of the item in the list
	    rather than item itself.
     value: n/a
  dupeOk - used to indicate that duplicate identifiers are allowed in the
           first field.
     value: n/a
  minCheck - used to allow some identifiers not to be in primary key.
     value: A number between 0.0 and 1.0 that indicates the minimum ratio of
            identifiers in the field that are in the primary key.
  splitPrefix - used to lump together tables that share a common prefix
                into a single logical table.
     value: Prefix string that may include SQL wildcard characters.  A
            popular one at UCSC is "chr%_".
  splitSuffix - used to lump together tables that share a common suffix
                into a single logical table.  May be used with splitPrefix.
     value: Suffix string that may include SQL wildcard characters.  
  exclude - used to exclude a particular identifier from having to be in
            primary key.  There may be multiple exclude attributes for a field.
     value: identifier to exclude.  The empty string may be excluded with
            a exclude= (that is following the equal immediately with a space).
