# This file describes how we made the browser database on the mouse
# genome, October 2003 build. - Mm4
#
#
#	NOTE:  There is a new chrMT sequence in the build 32
#	>gi|34538597|ref|NC_005089.1| Mus musculus mitochondrion
#
#   Will have to beware of this NC_ contig in the processing since
#	all previous builds had only NT_ contigs
#
# NOTE: The README_PREBUILD file for this assembly mentions several
# differences from the previous release (build 30):
# 1. seq_contig.md - new first line is a comment containing column name
#       Also, last two columns (group label and weight, have been swapped)
#       Also, some lines have id with CONTIG: prepended, and upper-case
#               feature type (CONTIG)
# 2. contig.idmap - has an additional column "contig label"
# This required changing the jkStuff ncbi* utilities (7/1/03 KRR)
#
# DOWNLOAD THE MOUSE SEQUENCE FROM NCBI (DONE - 2003-10-16 - Hiram)
    ssh kksilo
    mkdir -p /cluster/store6/mm4/ncbi
    ln -s /cluster/store6/mm4 /cluster/data
    cd /cluster/data/mm4/ncbi
    mkdir chrfasta contigfasta
    ftp ftp.ncbi.nih.gov
      # user hgpguest, password from /cse/guests/kent/buildHg6.doc
      cd mouse_32
      prompt
      bin
      mget *
      quit
    gunzip *.agp.gz

# Check chromosome files  (DONE - 2003-10-19 - Hiram)
    cd chrfasta
    foreach f (*.fa.gz)
        echo $f:r >> faSize.out
	gunzip $f
        /cluster/bin/i386/faSize $f:r >> faSize.out
	echo $f:r done
    end
   /cluster/bin/i386/faSize *.fa >> faSize.out
   grep "^>" *.fa > ../chrfasta.all.fa.headers
   gzip *.fa
   cd ../contigfasta
   gunzip *.fa.gz
   grep "^>" *.fa > ../contigfasta.all.fa.headers
   gzip *.fa


# BREAK UP SEQUENCE INTO 5 MB CHUNKS AT NON-BRIDGED CONTIGS
#					(DONE - 2003-10-16 - Hiram)

    ssh kksilo
    cd /cluster/data/mm4
    gunzip ncbi/allrefcontig.chr.agp.gz
    # splitFaIntoContigs doesn't do right with agp lines arriving in a 
    # different order than fasta chrom sequences.  so split up the agp 
    # into one per chrom.
    foreach c ( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 X Y MT Un)
      mkdir $c
      perl -we "while(<>){if (/^chr$c\t/) {print;}}" \
        ./ncbi/allrefcontig.chr.agp \
        > $c/chr$c.agp
      gunzip -c ./ncbi/chrfasta/chr$c.fa.gz \
        | perl -wpe 's/^>lcl\|(chr\w+)\.fa.*/>$1/' \
        | splitFaIntoContigs $c/chr$c.agp \
          stdin /cluster/data/mm4 -nSize=5000000
    end
    gzip ncbi/chrfasta/chr*.fa

# CREATE CHROM-LEVEL AGP AND FASTA FOR _RANDOMS (DONE 2003-10-17 - Hiram)
    ssh kksilo
    cd /cluster/data/mm4/ncbi

    gunzip seq_contig.md.gz

    # reorder random contigs in allrefcontig agp file to match seq_contig.md
    # this is required by the ncbiToRandomAgps scripts
    # had to fixup ncbiToRandomAgps from previous use to match the
    #	lines better, and to do the MT/NC_ mitochondrion thing
    ../jkStuff/ncbiFixAgp allrefcontig.chr.agp > \
                        allrefcontig.chr.ordered.agp
    ../jkStuff/ncbiToRandomAgps seq_contig.md allrefcontig.chr.ordered.agp \
                        contig.idmap ..
        # creating ../mm4/1/chr1_random.agp...
        # ... creating ../mm4/Un/chrUn_random.agp...
    #  The chrUn_random.agp created by this is too large with the 5000
    #  gaps.  it will work with 1000 gaps, so fixup the chrUn_random agp:
    ../jkStuff/ncbiToRandomAgps -gapLen 1000 -chrom Un \
      seq_contig.md allrefcontig.chr.ordered.agp contig.idmap ..

    ssh kksilo
    cd /cluster/data/mm4
    foreach c (?{,?})
      if (-e $c/chr${c}_random.ctg.agp) then
        echo building $c/chr${c}_random.fa
        gunzip -c ./ncbi/contigfasta/chr$c.fa.gz \
          | perl -wpe 's/^>lcl\|(Mm\w+)\s+.*$/>$1/' \
          > ./tmp.fa
        agpToFa -simpleMulti $c/chr${c}_random.ctg.agp chr${c}_random \
          $c/chr${c}_random.fa ./tmp.fa
        rm tmp.fa
      endif
    end
    # building 1/chr1_random.fa
    # ... etc ...
    # building Un/chrUn_random.fa
    # Writing 85112544 bases to Un/chrUn_random.fa


    # Clean these up to avoid confusion later... they're easily rebuilt
    #	with the ncbiToRandomAgps script above
    rm ?/*.ctg.agp ??/*.ctg.agp

# BREAK UP _RANDOMS INTO 5 MB CHUNKS AT NON-BRIDGED CONTIGS (2003-10-20 - Hiram)
    ssh kksilo
    cd /cluster/data/mm4
    foreach c (?{,?})
      if (-e $c/chr${c}_random.agp) then
        splitFaIntoContigs $c/chr${c}_random.agp $c/chr${c}_random.fa . \
          -nSize=5000000
        mkdir -p $c/lift
        mv ${c}_random/lift/oOut.lst $c/lift/rOut.lst
        mv ${c}_random/lift/ordered.lft $c/lift/random.lft
        mv ${c}_random/lift/ordered.lst $c/lift/random.lst
        rmdir ${c}_random/lift
        rm ${c}_random/chr${c}_random.{agp,fa}
        mv ${c}_random/* $c
        rmdir ${c}_random
      endif
    end
    #  This has a lot of output.  It is difficult to see if anything
    #	goes wrong.

#  Fixup chrMT name to be chrM (DONE - 2003-10-21 - Hiram)
    ssh kksilo
    cd /cluster/data/mm4
    mv MT MT.ncbi
    mkdir M
    mkdir M/chrM_1
    mkdir M/lift
    cd MT.ncbi
    find . -type f | while read FN
    do
	NF=`echo $FN | sed -e "s/MT/M/g"`
	sed -e "s/chrMT/chrM/g" $FN > ../M/$NF
    done
#	The RepeatMasker for this was re-run separately since RM was
#	already done by the time this was renamed.

# MAKE LIFTALL.LFT (DONE - 2003-10-20 - Hiram)

    cd /cluster/data/mm4
    cat ?{,?}/lift/{ordered,random}.lft > jkStuff/liftAll.lft


# CREATING DATABASE (DONE - 2003-10-20 - Hiram)

o - Create the database.
    ssh hgwdev
    hgsql -e 'create database mm4;' ''
    # if you need to delete this database:  !!! WILL DELETE EVERYTHING !!!
    #	hgsql -e "drop database mm4;" mm4
o - Use df to make sure there is at least 5 gig free on hgwdev:/var/lib/mysql
    # [hiram@hgwdev /] df -h /var/lib/mysql
    #	Filesystem            Size  Used Avail Use% Mounted on
    #	/dev/sda1             472G  414G   34G  93% /var/lib/mysql

# CREATING GRP TABLE FOR TRACK GROUPING (DONE - 2003-10-20 - Hiram)
    #	Use any of the newest databases to ensure that the organization
    #	of the grp table is up to date
    ssh hgwdev
    hgsql -e "create table grp (PRIMARY KEY(NAME)) select * from hg16.grp" mm4


# STORING O+O SEQUENCE AND ASSEMBLY INFORMATION  (DONE - 2003-10-20 - Hiram)
    # Create (unmasked) nib files 
    ssh kksilo
    cd /cluster/data/mm4
    mkdir -p unmaskedNib
    foreach f (?{,?}/chr?{,?}{,_random}.fa)
      echo $f:t:r
      faToNib $f unmaskedNib/$f:t:r.nib
    end
    # Create symbolic links from /gbdb/mm4/nib to real nib files
    #	These unmasked Nib files are temporary just to get the browser
    #	up an running immediately.  After the masking is done and masked
    #	sequence is created, these nibs will be replaced with the masked
    #	nibs
    ssh hgwdev
    mkdir -p /gbdb/mm4/nib
    cd /gbdb/mm4/nib
    ln -s /cluster/data/mm4/unmaskedNib/chr*.nib .

    # Load /gbdb nib paths into database and save size info.
    ssh hgwdev
    cd /cluster/data/mm4
    hgsql mm4  < ~/kent/src/hg/lib/chromInfo.sql
    hgNibSeq -preMadeNib mm4 /gbdb/mm4/nib ?{,?}/chr?{,?}{,_random}.fa
    #	2952612207 total bases
    # NOTE: mm3 was 2708220133, an increase of 244 Mb (~9%)
    hgsql -N -e "select chrom,size from chromInfo;" mm4 > chrom.sizes
    # check the resulting file chrom.sizes

    # Store o+o info in database.
    cd /cluster/data/mm4/ncbi
    gunzip sequence.inf
    cd /cluster/data/mm4
    ln -s ncbi fft
    # remove so as not to confuse hgGoldGap -- they are easily regenerated
    rm */chr*.ctg.agp
    # to undo/redo: 
    #     jkStuff/dropSplitTable.csh gap
    #     jkStuff/dropSplitTable.csh gold
    /cluster/bin/i386/hgGoldGapGl mm4 /cluster/data/mm4 .
    featureBits mm4 gold
    # 2627444668 bases of 2627444668 (100.000%) in intersection
    featureBits mm3 gold
    # 2505900260 bases of 2505900260 (100.000%) in intersection

    featureBits mm4 gap
    # 325167539 bases of 2627444668 (12.376%) in intersection
    featureBits mm3 gap
    # 202319873 bases of 2505900260 (8.074%) in intersection


# Make and load GC percent table	(DONE - 2003-10-20 - Hiram)
     ssh hgwdev
     mkdir -p /cluster/data/mm4/bed/gcPercent
     cd /cluster/data/mm4/bed/gcPercent
     hgsql mm4  < ~/kent/src/hg/lib/gcPercent.sql
     hgGcPercent mm4 ../../unmaskedNib


# MAKE HGCENTRALTEST ENTRY AND TRACKDB TABLE FOR MM4 (DONE - 2003-10-20 - Hiram)
    # Enter mm4 into hgcentraltest.dbDb so test browser knows about it:
    hgsql -e 'INSERT INTO dbDb \
        (name, description, nibPath, organism, defaultPos, \
         active, orderKey, genome, scientificName, htmlPath, hgNearOK) \
      VALUES(
        "mm4", "Oct. 2003", "/gbdb/mm4/nib", "Mouse", \
	"chr6:135181700-135238301", \
         1, 20, "Mouse", "Mus musculus", "/gbdb/mm4/html/description.html",
	0);' \
	-h genome-testdb hgcentraltest
    #	If you need to delete that entry:
    	hgsql -e 'delete from dbDb where name="mm4";' \
	-h genome-testdb hgcentraltest

    # Make trackDb table so browser knows what tracks to expect:
    ssh hgwdev
    cd ~kent/src/hg/makeDb/trackDb
    cvs up -d -P
    # Edit that makefile to add mm4 in all the right places and do
    make update
    make alpha
    cvs commit makefile

# MAKE HGCENTRALTEST BLATSERVERS ENTRY FOR MM4 (DONE - 2003-07-13 kate)
    ssh hgwdev
    hgsql -e 'INSERT INTO blatServers (db, host, port, isTrans) \
	    VALUES ("mm4", "blat10", "17778", "1"); \
	INSERT INTO blatServers (db, host, port, isTrans) \
	    VALUES ("mm4", "blat10", "17779", "0");' \
	-h genome-testdb hgcentraltest

# REPEAT MASKING (DONE 2003-10-21 Hiram)  
    #	TRF simpleRepeat below can be run at the same time
    # Split contigs, run RepeatMasker, lift results
    # * Contigs (*/chr*_*/chr*_*.fa) are split into 500kb chunks to make 
    #   RepeatMasker runs manageable on the cluster ==> results need lifting.
    # * For the NCBI assembly we repeat mask on the sensitive mode setting
    #  (RepeatMasker -m -s -ali)

    #- Split contigs into 500kb chunks:
    ssh kksilo
    cd /cluster/data/mm4
    foreach d ( */chr?{,?}{,_random}_?{,?} )
	cd $d
	set contig = $d:t
	faSplit size $contig.fa 500000 ${contig}_ -lift=$contig.lft \
	    -maxN=500000
	cd ../..
    end
    #	...
    #	11 pieces of 11 written
    #	1 pieces of 1 written
    #	...

    #- Make the run directory and job list:

    cd /cluster/data/mm4
    cat << '_EOF_' > jkStuff/RMMouse
#!/bin/csh -fe

cd $1
pushd .
/bin/mkdir -p /tmp/mm4/$2
/bin/cp $2 /tmp/mm4/$2
cd /tmp/mm4/$2
/scratch/hg/RepeatMasker/RepeatMasker -ali -s -species mus $2   
popd
/bin/cp /tmp/mm4/$2/$2.out ./
if (-e /tmp/mm4/$2/$2.align) /bin/cp /tmp/mm4/$2/$2.align ./
if (-e /tmp/mm4/$2/$2.tbl) /bin/cp /tmp/mm4/$2/$2.tbl ./
if (-e /tmp/mm4/$2/$2.cat) /bin/cp /tmp/mm4/$2/$2.cat ./
/bin/rm -fr /tmp/mm4/$2/*
/bin/rmdir --ignore-fail-on-non-empty /tmp/mm4/$2
/bin/rmdir --ignore-fail-on-non-empty /tmp/mm4
'_EOF_'
    chmod +x jkStuff/RMMouse

    mkdir -p RMRun
    rm -f RMRun/RMJobs
    foreach d ( ?{,?}/chr*_?{,?} )
	foreach f ( $d/chr*_?{,?}_?{,?}.fa )
	    set f = $f:t
	    echo /cluster/data/mm4/jkStuff/RMMouse \
		/cluster/data/mm4/$d $f \
		'{'check out line+ /cluster/data/mm4/$d/$f.out'}' \
		>> RMRun/RMJobs
	end
    end

    #- Do the run
    ssh kk
    cd /cluster/data/mm4/RMRun
    para create RMJobs
    para try, para check, para check, para push, para check,...
# Completed: 6429 of 6429 jobs
# CPU time in finished jobs:   39351255s  655854.25m 10930.90h  455.45d  1.248 y
# IO & Wait Time:                185895s    3098.25m    51.64h    2.15d  0.006 y
# Average job time:                6150s     102.50m     1.71h    0.07d
# Longest job:                    18075s     301.25m     5.02h    0.21d
# Submission to last job:         56648s     944.13m    15.74h    0.66d

    #- Lift up the split-contig .out's to contig-level .out's
    ssh kksilo
    cd /cluster/data/mm4
    foreach d ( ?{,?}/chr*_?{,?} )
      cd $d
      set contig = $d:t
      liftUp $contig.fa.out $contig.lft warn ${contig}_*.fa.out > /dev/null
      cd ../..
    end

    #- Lift up the contig-level .out's to chr-level
    ssh kksilo
    cd /cluster/data/mm4
    ./jkStuff/liftOut5.csh
    #	This one error is OK
    #	Can not find Un/lift/ordered.lft .

    #- Load the .out files into the database with:
    ssh hgwdev
    cd /cluster/data/mm4
    # to redo:
    #    ./jkStuff/dropSplitTable.csh rmsk  
    # make sure there's no chrUn -- rm Un/chrUn.fa.out
    hgLoadOut mm4 ?/*.fa.out ??/*.fa.out

# VERIFY REPEATMASKER RESULTS (DONE - 2003-10-21 Hiram)

    # Run featureBits on mm4 and on a comparable genome build, and compare:
    ssh hgwdev
    featureBits mm4 rmsk
    # 1130883581 bases of 2627444668 (43.041%) in intersection
    featureBits mm3 rmsk
    # 1080265553 bases of 2505900260 (43.109%) in intersection


# SIMPLE REPEAT TRACK (DONE - 2003-10-20 Hiram)
    # TRF can be run in parallel with RepeatMasker on the file server
    #	since it doesn't require masked input sequence.
    ssh kksilo
    mkdir /cluster/data/mm4/bed/simpleRepeat
    cd /cluster/data/mm4/bed/simpleRepeat
    mkdir trf
    rm -f jobs.csh
    echo '#\!/bin/csh -fe' > jobs.csh
    # create job list of 5MB chunks
    foreach f \
       (/cluster/data/mm4/?{,?}/chr?{,?}_[0-9]*/chr?{,?}_?{,?}.fa \
       /cluster/data/mm4/?{,?}/chr*_random_?{,?}/chr*_random_?{,?}.fa)
      set fout = $f:t:r.bed
      echo "/cluster/bin/i386/trfBig -trf=/cluster/bin/i386/trf $f /dev/null -bedAt=trf/$fout -tempDir=/tmp" \
        >> jobs.csh
    end
    chmod +x jobs.csh
    wc jobs.csh
    #	600    3596   90543 jobs.csh

    ./jobs.csh >&! jobs.log &
    # in bash:  ./jobs.csh > jobs.log 2>&1 &
    tail -f jobs.log

    # When job is done lift output files
    liftUp simpleRepeat.bed /cluster/data/mm4/jkStuff/liftAll.lft warn trf/*.bed

    # Load into the database
    ssh hgwdev
    cd /cluster/data/mm4/bed/simpleRepeat
    hgLoadBed mm4 simpleRepeat simpleRepeat.bed \
      -sqlTable=$HOME/src/hg/lib/simpleRepeat.sql
    # Loaded 1164675 elements of size 16
    featureBits mm4 simpleRepeat
    # 82600648 bases of 2627444668 (3.144%) in intersection
    featureBits mm3 simpleRepeat
    # 75457193 bases of 2505900260 (3.011%) in intersection


# PROCESS SIMPLE REPEATS INTO MASK (DONE - 2003-10-21 - Hiram)

    # After the simpleRepeats track has been built, make a filtered version 
    # of the trf output: keep trf's with period <= 12:
    ssh kksilo
    cd /cluster/data/mm4/bed/simpleRepeat
    mkdir -p trfMask
    foreach f (trf/chr*.bed)
      awk '{if ($5 <= 12) print;}' $f > trfMask/$f:t
    end

    # Lift up filtered trf output to chrom coords
    cd /cluster/data/mm4
    mkdir -p bed/simpleRepeat/trfMaskChrom
    foreach c (?{,?})
      if (-e $c/lift/ordered.lst) then
	perl -wpe 's@(\S+)@bed/simpleRepeat/trfMask/$1.bed@' \
	  $c/lift/ordered.lst > $c/lift/oTrf.lst
	liftUp bed/simpleRepeat/trfMaskChrom/chr$c.bed \
	  jkStuff/liftAll.lft warn `cat $c/lift/oTrf.lst`
      else
	echo "WARNING NO FILE:  $c/lift/ordered.lst"
      endif
      if (-e $c/lift/random.lst) then
        perl -wpe 's@(\S+)@bed/simpleRepeat/trfMask/$1.bed@' \
           $c/lift/random.lst > $c/lift/rTrf.lst
        liftUp bed/simpleRepeat/trfMaskChrom/chr${c}_random.bed \
          jkStuff/liftAll.lft warn `cat $c/lift/rTrf.lst`
      endif
    end
    # NOTE: ignore warning about non-existent Un/Lift/ordered.lift
    # since there is no chrUn

# MASK SEQUENCE WITH BOTH REPEATMASKER AND SIMPLE REPEAT/TRF
#				(DONE - 2003-10-21 Hiram)
    ssh kksilo
    cd /cluster/data/mm4
    #- Soft-mask (lower-case) the contig and chr .fa's
    ./jkStuff/makeFaMasked.csh >&! maskFa.out &
    #	bash:	./jkStuff/makeFaMasked.csh > maskFa.out 2>&1 &
    tail -100f maskFa.out

    #- Make hard-masked .fa.masked files as well:
    ./jkStuff/makeHardMasked.csh

    #- Rebuild the nib, mixedNib, maskedNib files:
    ./jkStuff/makeNib.csh
    # ignore complaints about missing chrUn

    # Redo symbolic links from /gbdb/mm4/nib to 
    #   mixed (RM and TRF) soft-masked nib files
    ssh hgwdev
    rm -fr /gbdb/mm4/nib/*
    ln -s /cluster/data/mm4/mixedNib/chr*.nib /gbdb/mm4/nib

    # Copy data to /cluster/bluearc for cluster runs
    ssh kksilo

    # masked contigs
    rm -fr /cluster/bluearc/mm4/trfFa
    mkdir -p /cluster/bluearc/mm4/trfFa
    cp -p /cluster/data/mm4/?{,?}/chr*_*/chr?{,?}{,_random}_?{,?}.fa \
	/cluster/bluearc/mm4/trfFa

    # masked chrom nibs
    cd /cluster/data/mm4
    rm -fr /cluster/bluearc/mm4/softNib
    mkdir -p /cluster/bluearc/mm4/softNib
    cp -p mixedNib/chr*.nib /cluster/bluearc/mm4/softNib
    rm -fr /cluster/bluearc/mm4/hardNib
    mkdir -p /cluster/bluearc/mm4/hardNib
    cp -p maskedNib/chr*.nib /cluster/bluearc/mm4/hardNib

    # fasta files
    rm -fr /cluster/bluearc/mm4/fasta
    mkdir -p /cluster/bluearc/mm4/fasta
    cp -p ?/*.fa ??/*.fa /cluster/bluearc/mm4/fasta

    # RepeatMasker *.out files
    rm -rf /cluster/bluearc/mm4/rmsk
    mkdir -p /cluster/bluearc/mm4/rmsk
    cp -p ?{,?}/chr?{,?}{,_random}.fa.out /cluster/bluearc/mm4/rmsk

    # lift file, for mrna processing
    cp -p jkStuff/liftAll.lft /cluster/bluearc/mm4

    # also copy to /scratch
    ssh kksilo
    mkdir -p /cluster/bluearc/scratch/mus/mm4
    cp -Rp /cluster/bluearc/mm4/fasta /cluster/bluearc/scratch/mus/mm4
    cp -Rp /cluster/bluearc/mm4/hardNib /cluster/bluearc/scratch/mus/mm4
    cp -Rp /cluster/bluearc/mm4/softNib /cluster/bluearc/scratch/mus/mm4
    cp -Rp /cluster/bluearc/mm4/rmsk /cluster/bluearc/scratch/mus/mm4
    cp -Rp /cluster/bluearc/mm4/trfFa /cluster/bluearc/scratch/mus/mm4
    mkdir -p /cluster/bluearc/scratch/mus/mm4/rmsk.spec
    cp -Rp /cluster/bluearc/mm4/rmsk.spec/* /cluster/bluearc/scratch/mus/mm4/rmsk.spec

    # also copy to iservers
    ssh kkr1u00
    cd ~/mm4
    cp -p liftAll.lft /iscratch/i/mm4
    mkdir -p /iscratch/i/mm4/softNib
    cp -p /cluster/bluearc/mm4/softNib/chr*.nib /iscratch/i/softNib
    mkdir -p /iscratch/i/mm4/trfFa
    cp ?{,?}/chr*_*/chr?{,?}{,_random}_?{,?}.fa /cluster/bluearc/mm4/trfFa
    /cluster/bin/scripts/iSync


# PREPARE CLUSTER FOR BLASTZ RUN (DONE - 2003-10-21 - Hiram)

    ssh kksilo
    mkdir -p /cluster/bluearc/mm4/rmsk.spec
    cd /cluster/bluearc/mm4/rmsk.spec
    ln -s ../rmsk/*.out .
    cat << '_EOF_' > runArian.sh
#!/bin/sh
for FN in *.out
do
    echo ${FN}
    /cluster/bluearc/RepeatMasker030619/DateRepsinRMoutput.pl \
	${FN} -query mouse -comp human -comp rat
done
'_EOF_'
    chmod +x runArian.sh
    ./runArian.sh

    cd /cluster/bluearc/mm4
    mkdir linSpecRep.notInHuman
    mkdir linSpecRep.notInRat
    foreach f (rmsk.spec/*.out_hum_rat)
        set base = $f:t:r:r
        echo $base.out.spec
        /cluster/bin/scripts/extractLinSpecReps 1 $f > \
                        linSpecRep.notInHuman/$base.out.spec
    end
    foreach f (rmsk.spec/*.out_hum_rat)
        set base = $f:t:r:r
        echo $base.out.spec
        /cluster/bin/scripts/extractLinSpecReps 2 $f > \
                        linSpecRep.notInRat/$base.out.spec
    end

    cp -Rp /cluster/bluearc/mm4/linSpecRep.notInHuman /cluster/bluearc/scratch/mus/mm4
    cp -Rp /cluster/bluearc/mm4/linSpecRep.notInRat /cluster/bluearc/scratch/mus/mm4
    #	Request rsync of /scratch to the KiloKluster

# AUTO UPDATE GENBANK MRNA RUN  (IN PROGRESS - 2003-10-21 - Hiram)

    ssh eieio
    cd /cluster/data/genbank/etc
    #	edit genbank.conf to specify
    #	# mm4
    #	mm4.genome = /scratch/mus/mm4/softNib/*.nib
    #	mm4.lift = /cluster/data/mm4/jkStuff/liftAll.lft
    #	mm4.downloadDir = mm4
    #	mm4.genbank.est.xeno.load = yes
    #	mm4.mgcTables.default = full
    #	mm4.mgcTables.mgc = all
    cd /cluster/data/genbank

    nice ./bin/gbAlignStep -initial -type=mrna -verbose=1 \
	-clusterRootDir=/cluster/bluearc/genbank -iserver=no mm4
    nice ./bin/gbAlignStep -initial -type=est -verbose=1 \
	-clusterRootDir=/cluster/bluearc/genbank -iserver=no mm4

# LOAD CPGISSLANDS (DONE 2003-10-21 Hiram)
     ssh kksilo
     mkdir -p /cluster/data/mm4/bed/cpgIsland
     cd /cluster/data/mm4/bed/cpgIsland
     # cpglh requires hard-masked (N) .fa's.  
     # There may be warnings about "bad character" for IUPAC ambiguous 
     # characters like R, S, etc.  Ignore the warnings.  
     foreach f (../../?{,?}/chr?{,?}{,_random}.fa.masked)
       set fout=$f:t:r:r.cpg
       /cluster/bin/cpglh $f > $fout
       echo Done with $fout
     end

    cat << '_EOF_' > filter.awk
/* chr1  1325    3865    754     CpG: 183        64.9    0.7 */
/* Transforms to: */
/* chr1  1325    3865    CpG: 183  754  183 489  64.9  0.7 */
{
width = $3-$2;
printf("%s\t%s\t%s\t%s %s\t%s\t%s\t%0.0f\t%0.1f\t%s\n",
  $1,$2,$3,$5,$6,width,$6,width*$7*0.01,100.0*2*$6/($3-$2),$7);}
'_EOF_'

     awk -f filter.awk chr*.cpg > cpgIsland.bed

     # Load into db
     ssh hgwdev
     cd /cluster/data/mm4/bed/cpgIsland
     /cluster/bin/i386/hgLoadBed mm4 cpgIsland -tab -noBin \
       -sqlTable=$HOME/kent/src/hg/lib/cpgIsland.sql cpgIsland.bed

# BLASTZ Human	(IN PROGRESS - 2003-10-21 - Hiram)

    cat << '_EOF_' > DEF
# mouse vs. human
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/home/angie/schwartzbin:/cluster/home/kent/bin/i386

ALIGN=blastz-run
BLASTZ=blastz
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=1

# TARGET
# Human
SEQ1_DIR=/iscratch/i/gs.17/build34/bothMaskedNibs
SEQ1_RMSK=/iscratch/i/gs.17/build34/rmsk
SEQ1_FLAG=-primate
SEQ1_SMSK=/iscratch/i/gs.17/build34/linSpecRep.notInMouse
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY
# Mouse
SEQ2_DIR=/iscratch/i/mm4/softNib
SEQ2_RMSK=/iscratch/i/mm4/rmsk
SEQ2_FLAG=-rodent
SEQ2_SMSK=/scratch/mus/mm4/linSpecRep.notInHuman
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=30000000
SEQ2_LAP=0

BASE=/cluster/data/mm4/bed/blastz.hg16

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << this line keeps emacs coloring happy
    # run bash shell if you don't already:
    bash
    source DEF
    mkdir run
    ~angie/hummus/make-joblist $DEF > $BASE/run/j
    sh ./xdir.sh
    cd run
    sed -e 's#^#/cluster/home/angie/schwartzbin/#' j > j2
    wc -l j*
    head j2
    mv j2 j
    # cluster run
    ssh kk
    cd /cluster/data/mm4/bed/blastz.hg16/run
    para create j
    para try, check, push, check, ....


# BLASTZ Rat	(IN PROGRESS - 2003-10-21 - Hiram)

    ssh kk
    mkdir -p /cluster/data/mm4/bed/blastz.rn3.2003-10-21
    cd /cluster/data/mm4/bed
    ln -s blastz.rn3.2003-10-21 blastz.rn3
    cd blastz.rn3

    cat << '_EOF_' > DEF
# mouse vs. rat
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/home/angie/schwartzbin:/cluster/home/kent/bin/i386

ALIGN=blastz-run
BLASTZ=blastz
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=1

# TARGET
# Rat
SEQ1_DIR=/iscratch/i/rn3/bothMaskedNibs
SEQ1_RMSK=/cluster/bluearc/rat/rn3/rmsk
SEQ1_FLAG=-rodent
SEQ1_SMSK=/cluster/bluearc/rat/rn3/linSpecRep.notInMouse
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY
# Mouse
SEQ2_DIR=/iscratch/i/mm4/softNib
SEQ2_RMSK=/iscratch/i/mm4/rmsk
SEQ2_FLAG=-rodent
SEQ2_SMSK=/scratch/mus/mm4/linSpecRep.notInRat
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=30000000
SEQ2_LAP=0

BASE=/cluster/data/mm4/bed/blastz.rn3

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << this line keeps emacs coloring happy
    # run bash shell if you don't already:
    bash
    source DEF
    mkdir run
    ~angie/hummus/make-joblist $DEF > $BASE/run/j
    sh ./xdir.sh
    cd run
    sed -e 's#^#/cluster/home/angie/schwartzbin/#' j > j2
    wc -l j*
    head j2
    mv j2 j
    # cluster run
    ssh kk
    cd /cluster/data/mm4/bed/blastz.hg16/run
    para create j
    para try, check, push, check, ....

# MAKE DOWNLOADABLE SEQUENCE FILES (IN PROGRESS 2003-10-21 Hiram)
    ssh kksilo
    cd /cluster/data/mm4

    # Build the .zip files
    jkStuff/zipAll.sh >&! zipAll.log &
    #	bash:	./jkStuff/zipAll.sh > zipAll.log 2>&1 &
XXX
    tail -f zipAll.log
    mkdir zip
    mv *.zip zip
    cd zip
    # Look at zipAll.log to make sure all file lists look reasonable.
    # Check zip file integrity:
    foreach f (*.zip)
      unzip -t $f > $f.test
      tail -1 $f.test
    end
    wc -l *.zip.test
     # 46 chromAgp.zip.test
     # 45 chromFaMasked.zip.test
     # 45 chromFa.zip.test
     # 45 chromOut.zip.test
     # 45 chromTrf.zip.test
     # 604 contigAgp.zip.test
     # 604 contigFaMasked.zip.test
     # 604 contigFa.zip.test
     # 604 contigOut.zip.test
     # 604 contigTrf.zip.test
     # 3246 total

    # Copy the .zip files to hgwdev:/usr/local/apache/...
    ssh hgwdev
    cd ~/mm4/zip
    # edit copy program for mouse
    # TODO: make this generic
    ../jkStuff/cpToWeb.sh
    cd /usr/local/apache/htdocs/goldenPath/mmJun2003
    # Take a look at bigZips/* and chromosomes/*, update their README.txt's

    # Make the upstream sequence files.
    # NOTE: must be redone due to bad gap track
    cd bigZips
    featureBits mm4 refGene:upstream:1000 -fa=upstream1000.fa
    zip upstream1000.zip upstream1000.fa
    rm upstream1000.fa
    featureBits mm4 refGene:upstream:2000 -fa=upstream2000.fa
    zip upstream2000.zip upstream2000.fa
    rm upstream2000.fa
    featureBits mm4 refGene:upstream:5000 -fa=upstream5000.fa
    zip upstream5000.zip upstream5000.fa
    rm upstream5000.fa
    # mrna zips -- how ?

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXX  -----   all below is old data for reference only  XXXXXXXXXX
XXXX	The sections below will be deleted as they are performed above


# ADD MAP CONTIGS TRACK (2003-07-03 Kate)
    ssh hgwdev
    mkdir -p ~/mm4/bed/ctgPos
    cd ~/mm4/bed/ctgPos
    # hgCtgPos uses the lift files... but mouse lift files are for the 
    # 5MB contigs from splitFaIntoContigs, not for the real NT_ contigs 
    # from the assembly.  (In the future, we should go with the NT's!)  
    # So... just for this release, go straight from the seq_contig.md 
    # to the table def'n: contig, size, chrom, chromStart, chromEnd 
    perl -we \
     'while (<>) { \
        if (/^\d+\s+(\w+)\s+(\d+)\s+(\d+)\s+\S+\s+(NT_\d+)\s+.*ref_strain/) { \
          $chr=$1; $start=$2; $start -= 1; $end=$3; $ctg=$4; \
          print "$ctg\t" . ($end-$start) . "\tchr$chr\t$start\t$end\n"; \
        } \
      }' /cluster/store5/mm.2003.06/ncbi/seq_contig.md \
    > ctgPos.tab
    hgsql mm4 < ~/kent/src/hg/lib/ctgPos.sql
    echo "load data local infile 'ctgPos.tab' into table ctgPos" | hgsql mm4
    # Note: the info is there in seq_contig.md to also do the _random's, 
    # but we'd have to do some more work: duplicate the gaps of 50000 between 
    # contigs for all _random's except chrUn_random (1000 between).  

# AUTO UPDATE GENBANK MRNA RUN  (IN PROGRESS - 2003-07-07 - kate)

    ssh eieio
    cd /cluster/data/genbank
    set db = mm4
    # set nibGlob = '/cluster/bluearc/mm4/mixedNib/chr*.nib'
    # set liftFile = /cluster/bluearc/$db/liftAll.lft
    # make sure 'ssh localhost' works before running this:
    # Add mm4 entries for lift file and nib dir to 
    # /cluster/data/genbank/etc/genbank.conf
    # NOTE: initially just align RefSeq, for speed
    # nice bin/gbAlignStep -verbose=1 -initial -iserver=localhost \
    # set nibGlob = '/cluster/bluearc/mm4/mixedNib/chr*.nib'
    # set liftFile = /cluster/bluearc/mm4/liftAll.lft
    #set nibGlob = '/iscratch/i/mm4/mixedNib/chr*.nib'
    #set liftFile = /iscratch/i/$db/liftAll.lft
     nice bin/gbAlignStep -verbose=1 -initial \
         -clusterRootDir=/cluster/bluearc/genbank \
         -iserver=no \
         -srcDb=refseq -type=mrna $db &
    # -omit-iserver=kkr5u00 -omit-iserver=kkr6u00 \

    # To watch the progress of your cluster job, go to machine kk and
    # cd /cluster/store5/genbank/work/initial.mm4/align
    # where the batch file is.  You can now do normal parasol checking
    # operations.  Beware of "para check" it can take quite a bit of time
    # if your batch job is very large.  'parasol list batches' or
    # 'parasol list users' may be quicker to take a look at status.

    #  After that is finished successfully, load the mRNAs:
    #  The drop and load is faster if tables have been loaded before.
    ssh hgwdev
    cd /cluster/data/genbank
    ./bin/i386/gbLoadRna -drop mm4
    nice ./bin/gbDbLoadStep -verbose=1 -initialLoad mm4
    # check log file /cluster/data/genbank/var/build/logs/*mm4*
    # check for para problems in /cluster/bluearc/genbank/work/initial.mm4/align

    # refseq protein ids included version, which caused searches to fail.
    # clean our refseq sequences and reload:
      drop table refFlat,refGene,refLink,refSeqAli,refSeqStatus;
      delete from gbSeq where acc like 'NM_%' or acc like 'NP_%';
      delete from gbStatus where acc like 'NM_%' or acc like 'NP_%';
      delete from mrna where acc like 'NM_%';
      delete from gbLoaded where srcDb='RefSeq';
     nice ./bin/gbDbLoadStep -verbose=1 mm4
    # opps, need to clean out imageClone table too.  going to just rerun
    # gbDbLoadStep, which should clean things up.

    # Align Genbank mrna's
    # Note: next time, probably want to do this in same
    # jobs with refseq (leave out the srcDb arg)
    ssh eieio
    # clean out previous work area
    rm -fr /cluster/bluearc/genbank/work/initial.mm4
    cd /cluster/data/genbank
    nice bin/gbAlignStep -verbose=1 -initial \
         -clusterRootDir=/cluster/bluearc/genbank \
         -iserver=no \
         -srcDb=genbank -type=mrna mm4 &
    # load into database
    ssh hgwdev
    cd /cluster/data/genbank
    nice ./bin/gbDbLoadStep -verbose=1 mm4
    # after checking load, clean out build area
    rm -fr /cluster/bluearc/genbank/work/initial.mm4

    # Align everything else that still needs it (EST's)
    ssh eieio
    cd /cluster/data/genbank
    nice bin/gbAlignStep -verbose=1 -initial \
         -clusterRootDir=/cluster/bluearc/genbank \
         -iserver=no mm4 &
    # load into database
    ssh hgwdev
    cd /cluster/data/genbank
    # drop database and load all at once, for efficiency
    nice ./bin/gbDbLoadStep -drop -initalLoad -verbose=1 mm4
    # after checking load, clean out build area
    rm -fr /cluster/bluearc/genbank/work/initial.mm4

    #NOTE: jobs overdosed the bluearc
    # Recovered by moving mm4 nibs to /scratch, and restarting
    # with directions from markd:
    
    cd /cluster/bluearc/genbank/work/initial.mm4/align/
    rm -rf batch* err pararesults
    sed -e 's|/cluster/bluearc/mm4/mixedNib/|/scratch/hg/mm4/nib/|' align.jobs
    >align.edit.jobs
    para recover align.edit.jobs align.missing.jobs
    para create align.missing.jobs
    para try
    para check
    para push
    etc.

# PRODUCING GENSCAN PREDICTIONS (IN PROGRESS 2003-07-09 - kate)
    
    ssh eieio
    mkdir -p ~/mm4/bed/genscan
    cd ~/mm4/bed/genscan
    # NOTE: next time, make a "run" subdir for para job
    # Make 3 subdirectories for genscan to put their output files in
    mkdir -p gtf pep subopt
       
    # Log into kkr1u00 (not kk!).  kkr1u00 is the driver node for the small
    # cluster (kkr2u00 -kkr8u00. Genscan has problem running on the
    # big cluster, due to limitation of memory and swap space on each
    # processing node).
    # NOTE: running on rack 9
    ssh kkr9u01
    cd ~/mm4/bed/genscan
    ls -1S /cluster/store5/mm.2003.06/mm4/?{,?}/chr*_*/chr*_*.fa.masked \
      > genome.list
    # Create template file, gsub, for gensub2.  For example (3-line file):
    # Note: I changed this to 1800000 in this build because some jobs were
    # taking so long I thought they had crashed.
#LOOP
/cluster/home/kent/bin/i386/gsBig {check in line+ $(path1)} {check out line gtf/$(root1).gtf} -trans={check out line pep/$(root1).pep} -subopt={check out line subopt/$(root1).bed} -exe=/cluster/home/fanhsu/projects/compbio/bin/genscan-linux/genscan -par=/cluster/home/fanhsu/projects/compbio/bin/genscan-linux/HumanIso.smat -tmp=/tmp -window=1800000
#ENDLOOP
    echo "" > dummy.list
    gensub2 genome.list dummy.list gsub jobList
    para create jobList
    para try
    para check
    para push
    # Issue either one of the following two commands to check the
    # status of the cluster and your jobs, until they are done.
    parasol status
    para check
    # If there were out-of-memory problems (run "para problems"), then
    # re-run those jobs by hand but change the -window arg from 2400000
    # to 1200000.
    # chr7_15

    # Convert these to chromosome level files as so:
    ssh eieio
    cd ~/mm4/bed/genscan
    liftUp genscan.gtf ../../liftAll.lft warn gtf/chr*.gtf
    liftUp genscanSubopt.bed ../../liftAll.lft warn subopt/chr*.bed > \
      /dev/null
    cat pep/*.pep > genscan.pep

    # Load into the database as so:
    ssh hgwdev
    cd ~/mm4/bed/genscan
    ldHgGene mm4 genscan genscan.gtf
        # Read 50447 transcripts in 357519 lines in 1 files
          # 50447 groups 43 seqs 1 sources 1 feature types
        # 50447 gene predictions
    hgPepPred mm4 generic genscanPep genscan.pep
    hgLoadBed mm4 genscanSubopt genscanSubopt.bed > /dev/null

