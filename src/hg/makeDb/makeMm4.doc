# This file describes how we made the browser database on the mouse
# genome, October 2003 build. - Mm4
#
#
#	NOTE:  There is a new chrMT sequence in the build 32
#	>gi|34538597|ref|NC_005089.1| Mus musculus mitochondrion
#
#   Will have to beware of this NC_ contig in the processing since
#	all previous builds had only NT_ contigs
#
# NOTE: The README_PREBUILD file for this assembly mentions several
# differences from the previous release (build 30):
# 1. seq_contig.md - new first line is a comment containing column name
#       Also, last two columns (group label and weight, have been swapped)
#       Also, some lines have id with CONTIG: prepended, and upper-case
#               feature type (CONTIG)
# 2. contig.idmap - has an additional column "contig label"
# This required changing the jkStuff ncbi* utilities (7/1/03 KRR)
#
# DOWNLOAD THE MOUSE SEQUENCE FROM NCBI (DONE - 2003-10-16 - Hiram)
    ssh kksilo
    mkdir -p /cluster/store6/mm4/ncbi
    ln -s /cluster/store6/mm4 /cluster/data
    cd /cluster/data/mm4/ncbi
    mkdir chrfasta contigfasta
    ftp ftp.ncbi.nih.gov
      # user hgpguest, password from /cse/guests/kent/buildHg6.doc
      cd mouse_32
      prompt
      bin
      mget *
      quit
    gunzip *.agp.gz

# Check chromosome files  (DONE - 2003-10-19 - Hiram)
    cd chrfasta
    foreach f (*.fa.gz)
        echo $f:r >> faSize.out
	gunzip $f
        /cluster/bin/i386/faSize $f:r >> faSize.out
	echo $f:r done
    end
   /cluster/bin/i386/faSize *.fa >> faSize.out
   grep "^>" *.fa > ../chrfasta.all.fa.headers
   gzip *.fa
   cd ../contigfasta
   gunzip *.fa.gz
   grep "^>" *.fa > ../contigfasta.all.fa.headers
   gzip *.fa


# BREAK UP SEQUENCE INTO 5 MB CHUNKS AT NON-BRIDGED CONTIGS
#					(DONE - 2003-10-16 - Hiram)

    ssh kksilo
    cd /cluster/data/mm4
    gunzip ncbi/allrefcontig.chr.agp.gz
    # splitFaIntoContigs doesn't do right with agp lines arriving in a
    # different order than fasta chrom sequences.  so split up the agp
    # into one per chrom.
    foreach c ( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 X Y MT Un)
      mkdir $c
      perl -we "while(<>){if (/^chr$c\t/) {print;}}" \
        ./ncbi/allrefcontig.chr.agp \
        > $c/chr$c.agp
      gunzip -c ./ncbi/chrfasta/chr$c.fa.gz \
        | perl -wpe 's/^>lcl\|(chr\w+)\.fa.*/>$1/' \
        | splitFaIntoContigs $c/chr$c.agp \
          stdin /cluster/data/mm4 -nSize=5000000
    end
    gzip ncbi/chrfasta/chr*.fa

# CREATE CHROM-LEVEL AGP AND FASTA FOR _RANDOMS (DONE 2003-10-17 - Hiram)
    ssh kksilo
    cd /cluster/data/mm4/ncbi

    gunzip seq_contig.md.gz

    # reorder random contigs in allrefcontig agp file to match seq_contig.md
    # this is required by the ncbiToRandomAgps scripts
    # had to fixup ncbiToRandomAgps from previous use to match the
    #	lines better, and to do the MT/NC_ mitochondrion thing
    ../jkStuff/ncbiFixAgp allrefcontig.chr.agp > \
                        allrefcontig.chr.ordered.agp
    ../jkStuff/ncbiToRandomAgps seq_contig.md allrefcontig.chr.ordered.agp \
                        contig.idmap ..
        # creating ../mm4/1/chr1_random.agp...
        # ... creating ../mm4/Un/chrUn_random.agp...
    #  The chrUn_random.agp created by this is too large with the 5000
    #  gaps.  it will work with 1000 gaps, so fixup the chrUn_random agp:
    ../jkStuff/ncbiToRandomAgps -gapLen 1000 -chrom Un \
      seq_contig.md allrefcontig.chr.ordered.agp contig.idmap ..

    ssh kksilo
    cd /cluster/data/mm4
    foreach c (?{,?})
      if (-e $c/chr${c}_random.ctg.agp) then
        echo building $c/chr${c}_random.fa
        gunzip -c ./ncbi/contigfasta/chr$c.fa.gz \
          | perl -wpe 's/^>lcl\|(Mm\w+)\s+.*$/>$1/' \
          > ./tmp.fa
        agpToFa -simpleMulti $c/chr${c}_random.ctg.agp chr${c}_random \
          $c/chr${c}_random.fa ./tmp.fa
        rm tmp.fa
      endif
    end
    # building 1/chr1_random.fa
    # ... etc ...
    # building Un/chrUn_random.fa
    # Writing 85112544 bases to Un/chrUn_random.fa


    # Clean these up to avoid confusion later... they're easily rebuilt
    #	with the ncbiToRandomAgps script above
    rm ?/*.ctg.agp ??/*.ctg.agp

# BREAK UP _RANDOMS INTO 5 MB CHUNKS AT NON-BRIDGED CONTIGS (2003-10-20 - Hiram)
    ssh kksilo
    cd /cluster/data/mm4
    foreach c (?{,?})
      if (-e $c/chr${c}_random.agp) then
        splitFaIntoContigs $c/chr${c}_random.agp $c/chr${c}_random.fa . \
          -nSize=5000000
        mkdir -p $c/lift
        mv ${c}_random/lift/oOut.lst $c/lift/rOut.lst
        mv ${c}_random/lift/ordered.lft $c/lift/random.lft
        mv ${c}_random/lift/ordered.lst $c/lift/random.lst
        rmdir ${c}_random/lift
        rm ${c}_random/chr${c}_random.{agp,fa}
        mv ${c}_random/* $c
        rmdir ${c}_random
      endif
    end
    #  This has a lot of output.  It is difficult to see if anything
    #	goes wrong.

#  Fixup chrMT name to be chrM (DONE - 2003-10-21 - Hiram)
    ssh kksilo
    cd /cluster/data/mm4
    mv MT MT.ncbi
    mkdir M
    mkdir M/chrM_1
    mkdir M/lift
    cd MT.ncbi
    find . -type f | while read FN
    do
	NF=`echo $FN | sed -e "s/MT/M/g"`
	sed -e "s/chrMT/chrM/g" $FN > ../M/$NF
    done
#	The RepeatMasker for this was re-run separately since RM was
#	already done by the time this was renamed.

# MAKE LIFTALL.LFT (DONE - 2003-10-20 - Hiram)

    cd /cluster/data/mm4
    cat ?{,?}/lift/{ordered,random}.lft > jkStuff/liftAll.lft


# CREATING DATABASE (DONE - 2003-10-20 - Hiram)

o - Create the database.
    ssh hgwdev
    hgsql -e 'create database mm4;' ''
    # if you need to delete this database:  !!! WILL DELETE EVERYTHING !!!
    #	hgsql -e "drop database mm4;" mm4
o - Use df to make sure there is at least 5 gig free on hgwdev:/var/lib/mysql
    # [hiram@hgwdev /] df -h /var/lib/mysql
    #	Filesystem            Size  Used Avail Use% Mounted on
    #	/dev/sda1             472G  414G   34G  93% /var/lib/mysql

# CREATING GRP TABLE FOR TRACK GROUPING (DONE - 2003-10-20 - Hiram)
    #	Use any of the newest databases to ensure that the organization
    #	of the grp table is up to date
    ssh hgwdev
    hgsql -e "create table grp (PRIMARY KEY(NAME)) select * from hg16.grp" mm4


# STORING O+O SEQUENCE AND ASSEMBLY INFORMATION  (DONE - 2003-10-20 - Hiram)
    # Create (unmasked) nib files
    ssh kksilo
    cd /cluster/data/mm4
    mkdir -p unmaskedNib
    foreach f (?{,?}/chr?{,?}{,_random}.fa)
      echo $f:t:r
      faToNib $f unmaskedNib/$f:t:r.nib
    end
    # Create symbolic links from /gbdb/mm4/nib to real nib files
    #	These unmasked Nib files are temporary just to get the browser
    #	up an running immediately.  After the masking is done and masked
    #	sequence is created, these nibs will be replaced with the masked
    #	nibs
    ssh hgwdev
    mkdir -p /gbdb/mm4/nib
    cd /gbdb/mm4/nib
    ln -s /cluster/data/mm4/unmaskedNib/chr*.nib .

    # Load /gbdb nib paths into database and save size info.
    ssh hgwdev
    cd /cluster/data/mm4
    hgsql mm4  < ~/kent/src/hg/lib/chromInfo.sql
    hgNibSeq -preMadeNib mm4 /gbdb/mm4/nib ?{,?}/chr?{,?}{,_random}.fa
    #	2952612207 total bases
    # NOTE: mm3 was 2708220133, an increase of 244 Mb (~9%)
    hgsql -N -e "select chrom,size from chromInfo;" mm4 > chrom.sizes
    # check the resulting file chrom.sizes

    # Store o+o info in database.
    cd /cluster/data/mm4/ncbi
    gunzip sequence.inf
    cd /cluster/data/mm4
    ln -s ncbi fft
    # remove so as not to confuse hgGoldGap -- they are easily regenerated
    rm */chr*.ctg.agp
    # to undo/redo:
    #     jkStuff/dropSplitTable.csh gap
    #     jkStuff/dropSplitTable.csh gold
    /cluster/bin/i386/hgGoldGapGl mm4 /cluster/data/mm4 .
    featureBits mm4 gold
    # 2627444668 bases of 2627444668 (100.000%) in intersection
    featureBits mm3 gold
    # 2505900260 bases of 2505900260 (100.000%) in intersection

    featureBits mm4 gap
    # 325167539 bases of 2627444668 (12.376%) in intersection
    featureBits mm3 gap
    # 202319873 bases of 2505900260 (8.074%) in intersection


# Make and load GC percent table	(DONE - 2003-10-20 - Hiram)
     ssh hgwdev
     mkdir -p /cluster/data/mm4/bed/gcPercent
     cd /cluster/data/mm4/bed/gcPercent
     hgsql mm4  < ~/kent/src/hg/lib/gcPercent.sql
     hgGcPercent mm4 ../../unmaskedNib


# MAKE HGCENTRALTEST ENTRY AND TRACKDB TABLE FOR MM4 (DONE - 2003-10-20 - Hiram)
    #	using the Mm3 position blatted onto Mm4:
    # Enter mm4 into hgcentraltest.dbDb so test browser knows about it:
    hgsql -e 'INSERT INTO dbDb \
        (name, description, nibPath, organism, defaultPos, \
         active, orderKey, genome, scientificName, htmlPath, hgNearOK) \
      VALUES(
        "mm4", "Oct. 2003", "/gbdb/mm4/nib", "Mouse", \
	"chr6:122959016-122974672", \
         1, 20, "Mouse", "Mus musculus", "/gbdb/mm4/html/description.html",
	0);' \
	-h genome-testdb hgcentraltest
    #	If you need to delete that entry:
    	hgsql -e 'delete from dbDb where name="mm4";' \
	-h genome-testdb hgcentraltest

    # Make trackDb table so browser knows what tracks to expect:
    ssh hgwdev
    cd ~kent/src/hg/makeDb/trackDb
    cvs up -d -P
    # Edit that makefile to add mm4 in all the right places and do
    make update
    make alpha
    cvs commit makefile

# MAKE HGCENTRALTEST BLATSERVERS ENTRY FOR MM4 (DONE - 2003-07-13 kate)
    ssh hgwdev
    hgsql -e 'INSERT INTO blatServers (db, host, port, isTrans) \
	    VALUES ("mm4", "blat10", "17778", "1"); \
	INSERT INTO blatServers (db, host, port, isTrans) \
	    VALUES ("mm4", "blat10", "17779", "0");' \
	-h genome-testdb hgcentraltest

# REPEAT MASKING (DONE 2003-10-21 Hiram)
    #	TRF simpleRepeat below can be run at the same time
    # Split contigs, run RepeatMasker, lift results
    # * Contigs (*/chr*_*/chr*_*.fa) are split into 500kb chunks to make
    #   RepeatMasker runs manageable on the cluster ==> results need lifting.
    # * For the NCBI assembly we repeat mask on the sensitive mode setting
    #  (RepeatMasker -m -s -ali)

    #- Split contigs into 500kb chunks:
    ssh kksilo
    cd /cluster/data/mm4
    foreach d ( */chr?{,?}{,_random}_?{,?} )
	cd $d
	set contig = $d:t
	faSplit size $contig.fa 500000 ${contig}_ -lift=$contig.lft \
	    -maxN=500000
	cd ../..
    end
    #	...
    #	11 pieces of 11 written
    #	1 pieces of 1 written
    #	...

    #- Make the run directory and job list:

    cd /cluster/data/mm4
    cat << '_EOF_' > jkStuff/RMMouse
#!/bin/csh -fe

cd $1
pushd .
/bin/mkdir -p /tmp/mm4/$2
/bin/cp $2 /tmp/mm4/$2
cd /tmp/mm4/$2
/scratch/hg/RepeatMasker/RepeatMasker -ali -s -species mus $2
popd
/bin/cp /tmp/mm4/$2/$2.out ./
if (-e /tmp/mm4/$2/$2.align) /bin/cp /tmp/mm4/$2/$2.align ./
if (-e /tmp/mm4/$2/$2.tbl) /bin/cp /tmp/mm4/$2/$2.tbl ./
if (-e /tmp/mm4/$2/$2.cat) /bin/cp /tmp/mm4/$2/$2.cat ./
/bin/rm -fr /tmp/mm4/$2/*
/bin/rmdir --ignore-fail-on-non-empty /tmp/mm4/$2
/bin/rmdir --ignore-fail-on-non-empty /tmp/mm4
'_EOF_'
    chmod +x jkStuff/RMMouse

    mkdir -p RMRun
    rm -f RMRun/RMJobs
    foreach d ( ?{,?}/chr*_?{,?} )
	foreach f ( $d/chr*_?{,?}_?{,?}.fa )
	    set f = $f:t
	    echo /cluster/data/mm4/jkStuff/RMMouse \
		/cluster/data/mm4/$d $f \
		'{'check out line+ /cluster/data/mm4/$d/$f.out'}' \
		>> RMRun/RMJobs
	end
    end

    #- Do the run
    ssh kk
    cd /cluster/data/mm4/RMRun
    para create RMJobs
    para try, para check, para check, para push, para check,...
# Completed: 6429 of 6429 jobs
# CPU time in finished jobs:   39351255s  655854.25m 10930.90h  455.45d  1.248 y
# IO & Wait Time:                185895s    3098.25m    51.64h    2.15d  0.006 y
# Average job time:                6150s     102.50m     1.71h    0.07d
# Longest job:                    18075s     301.25m     5.02h    0.21d
# Submission to last job:         56648s     944.13m    15.74h    0.66d

    #- Lift up the split-contig .out's to contig-level .out's
    ssh kksilo
    cd /cluster/data/mm4
    foreach d ( ?{,?}/chr*_?{,?} )
      cd $d
      set contig = $d:t
      liftUp $contig.fa.out $contig.lft warn ${contig}_*.fa.out > /dev/null
      cd ../..
    end

    #- Lift up the contig-level .out's to chr-level
    ssh kksilo
    cd /cluster/data/mm4
    ./jkStuff/liftOut5.csh
    #	This one error is OK
    #	Can not find Un/lift/ordered.lft .

    #- Load the .out files into the database with:
    ssh hgwdev
    cd /cluster/data/mm4
    # to redo:
    #    ./jkStuff/dropSplitTable.csh rmsk
    # make sure there's no chrUn -- rm Un/chrUn.fa.out
    hgLoadOut mm4 ?/*.fa.out ??/*.fa.out

# VERIFY REPEATMASKER RESULTS (DONE - 2003-10-21 Hiram)

    # Run featureBits on mm4 and on a comparable genome build, and compare:
    ssh hgwdev
    featureBits mm4 rmsk
    # 1130883581 bases of 2627444668 (43.041%) in intersection
    featureBits mm3 rmsk
    # 1080265553 bases of 2505900260 (43.109%) in intersection


# SIMPLE REPEAT TRACK (DONE - 2003-10-20 Hiram)
    # TRF can be run in parallel with RepeatMasker on the file server
    #	since it doesn't require masked input sequence.
    ssh kksilo
    mkdir /cluster/data/mm4/bed/simpleRepeat
    cd /cluster/data/mm4/bed/simpleRepeat
    mkdir trf
    rm -f jobs.csh
    echo '#\!/bin/csh -fe' > jobs.csh
    # create job list of 5MB chunks
    foreach f \
       (/cluster/data/mm4/?{,?}/chr?{,?}_[0-9]*/chr?{,?}_?{,?}.fa \
       /cluster/data/mm4/?{,?}/chr*_random_?{,?}/chr*_random_?{,?}.fa)
      set fout = $f:t:r.bed
      echo "/cluster/bin/i386/trfBig -trf=/cluster/bin/i386/trf $f /dev/null -bedAt=trf/$fout -tempDir=/tmp" \
        >> jobs.csh
    end
    chmod +x jobs.csh
    wc jobs.csh
    #	600    3596   90543 jobs.csh

    ./jobs.csh >&! jobs.log &
    # in bash:  ./jobs.csh > jobs.log 2>&1 &
    tail -f jobs.log

    # When job is done lift output files
    liftUp simpleRepeat.bed /cluster/data/mm4/jkStuff/liftAll.lft warn trf/*.bed

    # Load into the database
    ssh hgwdev
    cd /cluster/data/mm4/bed/simpleRepeat
    hgLoadBed mm4 simpleRepeat simpleRepeat.bed \
      -sqlTable=$HOME/src/hg/lib/simpleRepeat.sql
    # Loaded 1164675 elements of size 16
    featureBits mm4 simpleRepeat
    # 82600648 bases of 2627444668 (3.144%) in intersection
    featureBits mm3 simpleRepeat
    # 75457193 bases of 2505900260 (3.011%) in intersection


# PROCESS SIMPLE REPEATS INTO MASK (DONE - 2003-10-21 - Hiram)

    # After the simpleRepeats track has been built, make a filtered version
    # of the trf output: keep trf's with period <= 12:
    ssh kksilo
    cd /cluster/data/mm4/bed/simpleRepeat
    mkdir -p trfMask
    foreach f (trf/chr*.bed)
      awk '{if ($5 <= 12) print;}' $f > trfMask/$f:t
    end

    # Lift up filtered trf output to chrom coords
    cd /cluster/data/mm4
    mkdir -p bed/simpleRepeat/trfMaskChrom
    foreach c (?{,?})
      if (-e $c/lift/ordered.lst) then
	perl -wpe 's@(\S+)@bed/simpleRepeat/trfMask/$1.bed@' \
	  $c/lift/ordered.lst > $c/lift/oTrf.lst
	liftUp bed/simpleRepeat/trfMaskChrom/chr$c.bed \
	  jkStuff/liftAll.lft warn `cat $c/lift/oTrf.lst`
      else
	echo "WARNING NO FILE:  $c/lift/ordered.lst"
      endif
      if (-e $c/lift/random.lst) then
        perl -wpe 's@(\S+)@bed/simpleRepeat/trfMask/$1.bed@' \
           $c/lift/random.lst > $c/lift/rTrf.lst
        liftUp bed/simpleRepeat/trfMaskChrom/chr${c}_random.bed \
          jkStuff/liftAll.lft warn `cat $c/lift/rTrf.lst`
      endif
    end
    # NOTE: ignore warning about non-existent Un/Lift/ordered.lift
    # since there is no chrUn

# MASK SEQUENCE WITH BOTH REPEATMASKER AND SIMPLE REPEAT/TRF
#				(DONE - 2003-10-21 Hiram)
    ssh kksilo
    cd /cluster/data/mm4
    #- Soft-mask (lower-case) the contig and chr .fa's
    ./jkStuff/makeFaMasked.csh >&! maskFa.out &
    #	bash:	./jkStuff/makeFaMasked.csh > maskFa.out 2>&1 &
    tail -100f maskFa.out

    #- Make hard-masked .fa.masked files as well:
    ./jkStuff/makeHardMasked.csh

    #- Rebuild the nib, mixedNib, maskedNib files:
    ./jkStuff/makeNib.csh
    # ignore complaints about missing chrUn

    # Redo symbolic links from /gbdb/mm4/nib to
    #   mixed (RM and TRF) soft-masked nib files
    ssh hgwdev
    rm -fr /gbdb/mm4/nib/*
    ln -s /cluster/data/mm4/mixedNib/chr*.nib /gbdb/mm4/nib

    # Copy data to /cluster/bluearc for cluster runs
    ssh kksilo

    # masked contigs
    rm -fr /cluster/bluearc/mm4/trfFa
    mkdir -p /cluster/bluearc/mm4/trfFa
    cp -p /cluster/data/mm4/?{,?}/chr*_*/chr?{,?}{,_random}_?{,?}.fa \
	/cluster/bluearc/mm4/trfFa

    # masked chrom nibs
    cd /cluster/data/mm4
    rm -fr /cluster/bluearc/mm4/softNib
    mkdir -p /cluster/bluearc/mm4/softNib
    cp -p mixedNib/chr*.nib /cluster/bluearc/mm4/softNib
    rm -fr /cluster/bluearc/mm4/hardNib
    mkdir -p /cluster/bluearc/mm4/hardNib
    cp -p maskedNib/chr*.nib /cluster/bluearc/mm4/hardNib

    # fasta files
    rm -fr /cluster/bluearc/mm4/fasta
    mkdir -p /cluster/bluearc/mm4/fasta
    cp -p ?/*.fa ??/*.fa /cluster/bluearc/mm4/fasta

    # RepeatMasker *.out files
    rm -rf /cluster/bluearc/mm4/rmsk
    mkdir -p /cluster/bluearc/mm4/rmsk
    cp -p ?{,?}/chr?{,?}{,_random}.fa.out /cluster/bluearc/mm4/rmsk

    # lift file, for mrna processing
    cp -p jkStuff/liftAll.lft /cluster/bluearc/mm4

    # also copy to /scratch
    ssh kksilo
    mkdir -p /cluster/bluearc/scratch/mus/mm4
    cp -Rp /cluster/bluearc/mm4/fasta /cluster/bluearc/scratch/mus/mm4
    cp -Rp /cluster/bluearc/mm4/hardNib /cluster/bluearc/scratch/mus/mm4
    cp -Rp /cluster/bluearc/mm4/softNib /cluster/bluearc/scratch/mus/mm4
    cp -Rp /cluster/bluearc/mm4/rmsk /cluster/bluearc/scratch/mus/mm4
    cp -Rp /cluster/bluearc/mm4/trfFa /cluster/bluearc/scratch/mus/mm4
    mkdir -p /cluster/bluearc/scratch/mus/mm4/rmsk.spec
    cp -Rp /cluster/bluearc/mm4/rmsk.spec/* /cluster/bluearc/scratch/mus/mm4/rmsk.spec

    # also copy to iservers
    ssh kkr1u00
    cd ~/mm4
    cp -p liftAll.lft /iscratch/i/mm4
    mkdir -p /iscratch/i/mm4/softNib
    cp -p /cluster/bluearc/mm4/softNib/chr*.nib /iscratch/i/softNib
    mkdir -p /iscratch/i/mm4/trfFa
    cp ?{,?}/chr*_*/chr?{,?}{,_random}_?{,?}.fa /cluster/bluearc/mm4/trfFa
    /cluster/bin/scripts/iSync


# PREPARE CLUSTER FOR BLASTZ RUN (DONE - 2003-10-21 - Hiram)

    ssh kksilo
    mkdir -p /cluster/bluearc/mm4/rmsk.spec
    cd /cluster/bluearc/mm4/rmsk.spec
    ln -s ../rmsk/*.out .
    cat << '_EOF_' > runArian.sh
#!/bin/sh
for FN in *.out
do
    echo ${FN}
    /cluster/bluearc/RepeatMasker030619/DateRepsinRMoutput.pl \
	${FN} -query mouse -comp human -comp rat
done
'_EOF_'
    chmod +x runArian.sh
    ./runArian.sh

    cd /cluster/bluearc/mm4
    mkdir linSpecRep.notInHuman
    mkdir linSpecRep.notInRat
    foreach f (rmsk.spec/*.out_hum_rat)
        set base = $f:t:r:r
        echo $base.out.spec
        /cluster/bin/scripts/extractLinSpecReps 1 $f > \
                        linSpecRep.notInHuman/$base.out.spec
    end
    foreach f (rmsk.spec/*.out_hum_rat)
        set base = $f:t:r:r
        echo $base.out.spec
        /cluster/bin/scripts/extractLinSpecReps 2 $f > \
                        linSpecRep.notInRat/$base.out.spec
    end

    cp -Rp /cluster/bluearc/mm4/linSpecRep.notInHuman /cluster/bluearc/scratch/mus/mm4
    cp -Rp /cluster/bluearc/mm4/linSpecRep.notInRat /cluster/bluearc/scratch/mus/mm4
    #	Request rsync of /scratch to the KiloKluster

# AUTO UPDATE GENBANK MRNA RUN  (IN PROGRESS - 2003-10-21 - Hiram)

    ssh eieio
    cd /cluster/data/genbank/etc
    #	edit genbank.conf to specify
    #	# mm4
    #	mm4.genome = /scratch/mus/mm4/softNib/*.nib
    #	mm4.lift = /cluster/data/mm4/jkStuff/liftAll.lft
    #	mm4.downloadDir = mm4
    #	mm4.genbank.est.xeno.load = yes
    #	mm4.mgcTables.default = full
    #	mm4.mgcTables.mgc = all
    cd /cluster/data/genbank

    nice ./bin/gbAlignStep -initial -type=mrna -verbose=1 \
	-clusterRootDir=/cluster/bluearc/genbank -iserver=no mm4
    # this failed in the alignment step due to /scratch problems, to continue:
    ssh kk
    cd /cluster/bluearc/genbank/work/initial.mm4/align
    para recover align.jobs recover_align.jobs
    para create recover_align.jobs
    para try, push, check, etc ...
    # then
    ssh eieio
    cd /cluster/data/genbank
    nice ./bin/gbAlignStep -initial -continue=finish -type=mrna -verbose=1 \
	-clusterRootDir=/cluster/bluearc/genbank -iserver=no mm4
    # to load that:
    ssh hgwdev
    cd /cluster/data/genbank
    nice bin/gbDbLoadStep -verbose=1 -drop -initialLoad mm4
    # then, for the big est run
    ssh eieio
    cd /cluster/data/genbank
    nice ./bin/gbAlignStep -initial -type=est -verbose=1 \
	-clusterRootDir=/cluster/bluearc/genbank -iserver=no mm4
# Completed: 256925 of 256971 jobs
# CPU time in finished jobs:   79788950s 1329815.83m 22163.60h  923.48d  2.530 y
# IO & Wait Time:               7185609s  119760.16m  1996.00h   83.17d  0.228 y
# Time in running jobs:          290862s    4847.70m    80.80h    3.37d  0.009 y
# Average job time:                 339s       5.64m     0.09h    0.00d
# Longest job:                    69850s    1164.17m    19.40h    0.81d
# Submission to last job:        141340s    2355.67m    39.26h    1.64d
    # cluster problems required that to be completed manually:
    ssh kk
    cd /cluster/bluearc/genbank/work/initial.mm4/align
    para recover align.jobs recover.jobs
    para create recover.jobs
    para try, push, check, etc ...
# Completed: 46 of 46 jobs
# CPU time in finished jobs:      11250s     187.50m     3.13h    0.13d  0.000 y
# IO & Wait Time:                   423s       7.05m     0.12h    0.00d  0.000 y
# Average job time:                 254s       4.23m     0.07h    0.00d
# Longest job:                     1532s      25.53m     0.43h    0.02d
# Submission to last job:          1532s      25.53m     0.43h    0.02d
    ssh eieio
    cd /cluster/data/genbank
    nice ./bin/gbAlignStep -initial -continue=finish -type=est -verbose=1 \
	-clusterRootDir=/cluster/bluearc/genbank -iserver=no mm4
    # Then for an efficient load of everything, drop the mrna tables and
    #	load all:
    ssh hgwdev
    cd /cluster/data/genbank
    nice bin/gbDbLoadStep -verbose=1 -drop -initialLoad mm4

# LOAD CPGISSLANDS (DONE 2003-10-21 Hiram)
     ssh kksilo
     mkdir -p /cluster/data/mm4/bed/cpgIsland
     cd /cluster/data/mm4/bed/cpgIsland
     # cpglh requires hard-masked (N) .fa's.
     # There may be warnings about "bad character" for IUPAC ambiguous
     # characters like R, S, etc.  Ignore the warnings.
     foreach f (../../?{,?}/chr?{,?}{,_random}.fa.masked)
       set fout=$f:t:r:r.cpg
       /cluster/bin/cpglh $f > $fout
       echo Done with $fout
     end

    cat << '_EOF_' > filter.awk
/* chr1  1325    3865    754     CpG: 183        64.9    0.7 */
/* Transforms to: */
/* chr1  1325    3865    CpG: 183  754  183 489  64.9  0.7 */
{
width = $3-$2;
printf("%s\t%s\t%s\t%s %s\t%s\t%s\t%0.0f\t%0.1f\t%s\n",
  $1,$2,$3,$5,$6,width,$6,width*$7*0.01,100.0*2*$6/($3-$2),$7);}
'_EOF_'

     awk -f filter.awk chr*.cpg > cpgIsland.bed

     # Load into db
     ssh hgwdev
     cd /cluster/data/mm4/bed/cpgIsland
     /cluster/bin/i386/hgLoadBed mm4 cpgIsland -tab -noBin \
       -sqlTable=$HOME/kent/src/hg/lib/cpgIsland.sql cpgIsland.bed

# BLASTZ Human	(DONE - 2003-10-28 - Hiram)

    ssh kk
    mkdir -p /cluster/data/mm4/bed/blastz.hg16
    cd /cluster/data/mm4/bed/blastz.hg16
    cat << '_EOF_' > DEF
# mouse vs. human
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/home/angie/schwartzbin:/cluster/home/kent/bin/i386

ALIGN=blastz-run
BLASTZ=blastz
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=1


# TARGET
# Mouse
SEQ1_DIR=/scratch/mus/mm4/softNib
# RMSK not currently used
SEQ1_RMSK=/scratch/mus/mm4/rmsk
# FLAG not currently used
SEQ1_FLAG=-rodent
SEQ1_SMSK=/scratch/mus/mm4/linSpecRep.notInHuman
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY
# Human
SEQ2_DIR=/iscratch/i/gs.17/build34/bothMaskedNibs
# RMSK not currently used
SEQ2_RMSK=/iscratch/i/gs.17/build34/rmsk
# FLAG not currently used
SEQ2_FLAG=-primate
SEQ2_SMSK=/iscratch/i/gs.17/build34/linSpecRep.notInMouse
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=30000000
SEQ2_LAP=0

BASE=/cluster/data/mm4/bed/blastz.hg16

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << this line keeps emacs coloring happy

    # prepare first cluster run script
    source DEF
    cat << '_EOF_' > ../../jkStuff/BlastZ_run0.sh
#!/bin/sh
#       prepare first cluster run for blastz processing
#
M=`uname -n`
if [ "$M" != "kk" ]; then
    echo "ERROR: you are on machine: '$M'"
    echo -e "\tthis script expects machine kk"
    exit 255
fi
source DEF
mkdir ${RAW}
mkdir run.0
echo "running 'make-joblist'"
~angie/hummus/make-joblist $DEF > $BASE/run.0/j
if [ ! -f ./xdir.sh ]; then
    echo "ERROR: no ./xdir.sh file present.  Should have been made by make-joblist."
    exit 255
fi
echo "running 'xdir.sh'"
sh ./xdir.sh
cd run.0
sed -e 's#^#/cluster/home/angie/schwartzbin/#' j > jobList
rm j
echo "running 'para create'"
para create jobList
echo "Ready for cluster run.  para try, check, push, etc ..."
'_EOF_'
    # << this line keeps emacs coloring happy

    chmod +x ../../jkStuff/BlastZ_run0.sh
    # prepare first cluster run
    ../../jkStuff/BlastZ_run0.sh
    cd run.0
    para try, check, push, check, ....
# CPU time in finished jobs:   15818152s  263635.86m  4393.93h  183.08d  0.502 y
# IO & Wait Time:               6171331s  102855.52m  1714.26h   71.43d  0.196 y
# Average job time:                 507s       8.45m     0.14h    0.01d
# Longest job:                     8930s     148.83m     2.48h    0.10d
# Submission to last job:         85042s    1417.37m    23.62h    0.98d

    #	Prepare second cluster run script, .out's to .lav's
    ssh kk
    cd /cluster/data/mm4/bed/blastz.hg16
cat << '_EOF_' > ../../jkStuff/BlastZ_run1.sh
#!/bin/sh
#       prepare second cluster run for blastz processing
#
M=`uname -n`
if [ "$M" != "kk" ]; then
    echo "ERROR: you are on machine: '$M'"
    echo -e "\tthis script expects machine kk"
    exit 255
fi
source DEF
mkdir $BASE/run.1
mkdir $BASE/lav
echo "running 'make-joblist'"
/cluster/bin/scripts/blastz-make-out2lav $DEF $BASE > $BASE/run.1/jobList
cd run.1
wc -l jobList
echo "running 'para create'"
para create jobList
echo "Ready for cluster run.  para try, check, push, etc ..."
'_EOF_'
    chmod +x ../../jkStuff/BlastZ_run1.sh

    #	Second cluster run to convert the .out's to .lav's
    #	You do NOT want to run this on the big cluster.  It brings
    #	the file server to its knees.  Run this on the small cluster.
    ssh kkr1u00
    source DEF
    ../../jkStuff/BlastZ_run1.sh
    cd run.1
    para try, check, push, etc ...
# Completed: 323 of 323 jobs
# CPU time in finished jobs:      12410s     206.83m     3.45h    0.14d  0.000 y
# IO & Wait Time:                335408s    5590.14m    93.17h    3.88d  0.011 y
# Average job time:                1077s      17.95m     0.30h    0.01d
# Longest job:                     1966s      32.77m     0.55h    0.02d
# Submission to last job:          1992s      33.20m     0.55h    0.02d

    #	Prepare third cluster run script to convert lav's to axt's
cat << '_EOF_' > ../../jkStuff/BlastZ_run2.sh
#!/bin/sh
#       prepare third cluster run for blastz processing
#
M=`uname -n`
if [ "$M" != "kk" ]; then
    echo "ERROR: you are on machine: '$M'"
    echo -e "\tthis script expects machine kk"
    exit 255
fi
source DEF
mkdir axtChrom
mkdir run.2
cd run.2
# usage:  blastz-chromlav2axt lav-dir axt-file seq1-dir seq2-dir
echo '#LOOP' > gsub
echo '/cluster/bin/scripts/blastz-chromlav2axt '${BASE}'/lav/$(root1) {check out line+ '${BASE}'/axtChrom/$(root1).axt} '${SEQ1_DIR} ${SEQ2_DIR} >> gsub
echo '#ENDLOOP' >> gsub
ls -1S ${BASE}/lav > chrom.list
gensub2 chrom.list single gsub jobList
wc -l jobList
echo "running 'para create'"
para create jobList
echo "Ready for cluster run.  para try, check, push, etc ..."
'_EOF_'
    chmod +x ../../jkStuff/BlastZ_run2.sh
    #	Third cluster run to convert lav's to axt's
    source DEF
    ../../jkStuff/BlastZ_run2.sh
    cd run.2
    para try, check, push, etc ...
# Completed: 44 of 44 jobs
# CPU time in finished jobs:       3981s      66.35m     1.11h    0.05d  0.000 y
# IO & Wait Time:                 49397s     823.28m    13.72h    0.57d  0.002 y
# Average job time:                1213s      20.22m     0.34h    0.01d
# Longest job:                     7584s     126.40m     2.11h    0.09d
# Submission to last job:          7597s     126.62m     2.11h    0.09d

    # translate sorted axt files into psl
    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.hg16
    mkdir -p pslChrom
    set tbl = "blastzHg16"
    foreach f (axtChrom/chr*.axt)
      set c=$f:t:r
      echo "Processing chr $c"
      /cluster/bin/i386/axtToPsl $f S1.len S2.len pslChrom/${c}_${tbl}.psl
    end
    #	That takes about 30 minutes
    # Load database tables
    ssh hgwdev
    set tbl = "blastzHg16"
    cd /cluster/data/mm4/bed/blastz.hg16/pslChrom
    /cluster/bin/i386/hgLoadPsl mm4 chr*_${tbl}.psl
    # this is a 55 minute job

# CHAIN HG16 BLASTZ (DONE - 2003-10-24 - Hiram)

# The axtChain is best run on the small kluster, or the kk9 kluster
#	in this case, it was run on the kk kluster
    ssh kk
    mkdir -p /cluster/data/mm4/bed/blastz.hg16/axtChain/run1
    cd /cluster/data/mm4/bed/blastz.hg16/axtChain/run1
    mkdir out chain

    ls -1S /cluster/data/mm4/bed/blastz.hg16/axtChrom/*.axt > input.lst
    cat << '_EOF_' > gsub
#LOOP
doChain {check in exists $(path1)} {check out line+ chain/$(root1).chain} {check out line+ out/$(root1).out}
#ENDLOOP
'_EOF_'
    # << this line makes emacs coloring happy

    cat << '_EOF_' > doChain
#!/bin/csh
    axtFilter -notQ_random $1 | axtChain stdin \
	/scratch/mus/mm4/softNib \
	/iscratch/i/gs.17/build34/bothMaskedNibs $2 > $3
'_EOF_'
    # << this line makes emacs coloring happy
    chmod a+x doChain

    # 41 jobs
    gensub2 input.lst single gsub jobList
    para create jobList
    para try
    para push # ... etc ...
# Completed: 44 of 44 jobs
# CPU time in finished jobs:      27109s     451.82m     7.53h    0.31d  0.001 y
# IO & Wait Time:                 29921s     498.68m     8.31h    0.35d  0.001 y
# Average job time:                1296s      21.60m     0.36h    0.02d
# Longest job:                    12356s     205.93m     3.43h    0.14d
# Submission to last job:         12356s     205.93m     3.43h    0.14d

    # now on the cluster server, sort chains
    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.hg16/axtChain
    time chainMergeSort run1/chain/*.chain > all.chain
    # real    8m55.100s
    # user    6m46.680s
    # sys     0m58.250s
    time chainSplit chain all.chain
    # real    8m36.259s
    # user    5m46.920s
    # sys     0m59.700s

    # these steps take ~20 minutes
    # optionally: rm run1/chain/*.chain

    # Load chains into database
    # next machine
    ssh hgwdev
    cd /cluster/data/mm4/bed/blastz.hg16/axtChain/chain
    foreach i (*.chain)
        set c = $i:r
        hgLoadChain mm4 ${c}_chainHg16 $i
        echo done $c
    end

# NET HUMAN BLASTZ (DONE - 2003-10-31 - Hiram)

    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.hg16/axtChain
    mkdir preNet
    cd chain
    foreach i (*.chain)
      echo preNetting $i
      /cluster/bin/i386/chainPreNet $i /cluster/data/mm4/chrom.sizes \
                        /cluster/data/hg16/chrom.sizes ../preNet/$i
    end
    # real    11m58.018s
    # user    4m10.390s
    # sys     2m10.780s

    cd ..
    mkdir n1
    cd preNet
    foreach i (*.chain)
      set n = $i:r.net
      echo primary netting $i
      /cluster/bin/i386/chainNet $i -minSpace=1 /cluster/data/mm4/chrom.sizes \
                            /cluster/data/hg16/chrom.sizes ../n1/$n /dev/null
    end

    cd ..
    cat n1/*.net | /cluster/bin/i386/netSyntenic stdin hNoClass.net
    # memory usage 1591906304, utime 6877 s/100, stime 1977

    ssh hgwdev
    cd /cluster/data/mm4/bed/blastz.hg16/axtChain
    time netClass hNoClass.net mm4 hg16 human.net \
	-tNewR=/cluster/bluearc/scratch/mus/mm4/linSpecRep.notInHuman \
	-qNewR=/cluster/bluearc/scratch/hg/gs.17/build34/linSpecRep.notInMouse
    # real    11m35.367s
    # user    7m20.880s
    # sys     1m33.360s

    # manually fixup one line in the linSpecRep.notInHuman/chr3.out.spec file
    #	RepeatMasker or the post-processing script is making an error
    #	Remove the line that is missing the rest of the fields
    # the line : 2860   6.4  0.0  1   0  0
Expecting 7 words line 156272 of /cluster/bluearc/scratch/mus/mm4/linSpecRep.notInHuman/chr3.out.spec got 6
2860   6.4  0.0  1.1  chr3      164080732 164081087  (231854) +  L1Md_F2        LINE/L1               6208 6561   (21)      1   0  0
 2860   6.4  0.0  1   0  0
 1420   8.1  0.0  0.0  chr3      164081159 164081355  (231586) C  ORR1A0-int     LTR/MaLR            (1593)  199      3      3   0  0


    # If things look good do
    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.hg16/axtChain
    rm -r n1 hNoClass.net
    # Make a 'syntenic' subset of these with
    netFilter -syn human.net > humanSyn.net

    # Load the nets into database
    ssh hgwdev
    cd /cluster/data/mm4/bed/blastz.hg16/axtChain
    netFilter -minGap=10 human.net |  hgLoadNet mm4 netHg16 stdin
    netFilter -minGap=10 humanSyn.net | hgLoadNet mm4 syntenyNetHg16 stdin

    # Add entries for net and chain to mouse/mm4 trackDb

    # make net
    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.hg16/axtChain
    mkdir humanNet
    time netSplit human.net humanNet
    # real    6m13.469s
    # user    3m22.670s
    # sys     0m44.880s

    mkdir ../axtNet
    foreach n (humanNet/chr*.net)
	set c=$n:t:r
	echo "netToAxt: $c.net -> $c.axt"
	rm -f ../axtNet/$c.axt
	netToAxt humanNet/$c.net chain/$c.chain \
		/cluster/data/mm4/nib \
		/cluster/bluearc/scratch/hg/gs.17/build34/bothMaskedNibs \
		../axtNet/$c.axt
	echo "Complete: $c.net -> $c.axt"
    end

    ssh hgwdev
    mkdir -p /cluster/data/mm4/bed/blastz.hg16/axtBest
    cd /cluster/data/mm4/bed/blastz.hg16/axtBest
    ln -s ../axtNet/chr*.axt .

    # copy net axt's to download area
    ssh hgwdev
    cd /cluster/data/mm4/bed/blastz.hg16/axtNet
    mkdir -p /usr/local/apache/htdocs/goldenPath/mm4/vsHg16/axtNet
    cp -p *.axt /usr/local/apache/htdocs/goldenPath/mm4/vsHg16/axtNet
    cd /usr/local/apache/htdocs/goldenPath/mm4/vsHg16/axtNet
    gzip *.axt
    # add README.txt file to dir, if needed

    #  Convert those axt files to psl
    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.hg16
    mkdir pslBest
    foreach a (axtBest/chr*.axt)
	set c=$a:t:r
	echo "processing $c.axt -> ${c}_blastzBestHg16.psl"
    /cluster/bin/i386/axtToPsl axtBest/${c}.axt \
	S1.len S2.len pslBest/${c}_blastzBestHg16.psl
	echo "Done: ${c}_blastzBestHg16.psl"
    end

    # Load tables
    ssh hgwdev
    cd /cluster/data/mm4/bed/blastz.hg16/pslBest
    time /cluster/bin/i386/hgLoadPsl mm4 chr*_blastzBestHg16.psl
    # real    10m47.853s
    # user    2m48.700s
    # sys     0m24.250s

     # check results
#  featureBits mm4 blastzBestHg16
#  1030510540 bases of 2627444668 (39.221%) in intersection

#  featureBits mm3 blastzBestHuman
#  1019460260 bases of 2505900260 (40.682%) in intersection

    # Make /gbdb links and add them to the axtInfo table:
     mkdir -p /gbdb/mm4/axtBestHg16
     cd /gbdb/mm4/axtBestHg16
     ln -s /cluster/data/mm4/bed/blastz.hg16/axtNet/chr*.axt .
     cd /cluster/data/mm4/bed/blastz.hg16/axtNet
     rm -f axtInfoInserts.sql
     foreach f (/gbdb/mm4/axtBestHg16/chr*.axt)
       set chr=$f:t:r
       echo "INSERT INTO axtInfo (species, alignment, chrom, fileName) \
                VALUES ('hg16','Blastz Best in Genome','$chr','$f');" \
         >> axtInfoInserts.sql
     end
    hgsql mm4 < ~/kent/src/hg/lib/axtInfo.sql
    #	table axtInfo may already exist, ignore create error.
    hgsql mm4 < axtInfoInserts.sql

# MAKING THE AXTTIGHT FROM AXTBEST (DONE - 2003-10-31 - Hiram)
    # After creating axtBest alignments above, use subsetAxt to get axtTight:
    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.hg16/axtNet
    mkdir -p ../axtTight
    tcsh
    foreach i (*.axt)
      echo $i
      subsetAxt  $i ../axtTight/$i \
        ~kent/src/hg/mouseStuff/subsetAxt/coding.mat 3400
    end

    # translate to psl
    cd ../axtTight
    mkdir ../pslTight
    foreach i (*.axt)
      set c = $i:r
      axtToPsl $i ../S1.len ../S2.len ../pslTight/${c}_blastzTightHg16.psl
      echo "Done: $i"
    end

    # Load tables into database
    ssh hgwdev
    cd /cluster/data/mm4/bed/blastz.hg16/pslTight
    hgLoadPsl mm4 chr*_blastzTightHg16.psl

    # copy to axt's to download area
    cd /cluster/data/mm4/bed/blastz.hg16/axtTight
    mkdir -p /usr/local/apache/htdocs/goldenPath/mm4/vsHg16/axtTight
    cp -p *.axt /usr/local/apache/htdocs/goldenPath/mm4/vsHg16/axtTight
    cd /usr/local/apache/htdocs/goldenPath/mm4/vsHg16/axtTight
    gzip *.axt
    # add README.txt file to dir, if needed

# BLASTZ Rat (DONE - 2003-10-27 - Hiram)

    ssh kk
    mkdir -p /cluster/data/mm4/bed/blastz.rn3.2003-10-21
    cd /cluster/data/mm4/bed
    ln -s blastz.rn3.2003-10-21 blastz.rn3
    cd blastz.rn3

    cat << '_EOF_' > DEF
# mouse vs. rat
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/home/angie/schwartzbin:/cluster/home/kent/bin/i386

ALIGN=blastz-run
BLASTZ=blastz
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=1

# TARGET
# Mouse
SEQ1_DIR=/scratch/mus/mm4/softNib
# RMSK not currently used
SEQ1_RMSK=/scratch/mus/mm4/rmsk
# FLAG not currently used
SEQ1_FLAG=-rodent
SEQ1_SMSK=/scratch/mus/mm4/linSpecRep.notInRat
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY
# Rat
SEQ2_DIR=/iscratch/i/rn3/bothMaskedNibs
# RMSK not currently used
SEQ2_RMSK=/cluster/bluearc/rat/rn3/rmsk
# FLAG not currently used
SEQ2_FLAG=-rodent
SEQ2_SMSK=/cluster/bluearc/rat/rn3/linSpecRep.notInMouse
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=30000000
SEQ2_LAP=0

BASE=/cluster/data/mm4/bed/blastz.rn3

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << this line keeps emacs coloring happy

    # prepare first cluster run
    ../../jkStuff/BlastZ_run0.sh
    cd run.0
    para try, check, push, check, ....
# Completed: 39728 of 39729 jobs
# Crashed: 1 jobs
# CPU time in finished jobs:   16243094s  270718.23m  4511.97h  188.00d  0.515 y
# IO & Wait Time:               1164706s   19411.77m   323.53h   13.48d  0.037 y
# Average job time:                 438s       7.30m     0.12h    0.01d
# Longest job:                     8391s     139.85m     2.33h    0.10d
# Submission to last job:        189809s    3163.48m    52.72h    2.20d

    #	Second cluster run to convert the .out's to .lav's
    #	You do NOT want to run this on the big cluster.  It brings
    #	the file server to its knees.  Run this on the small cluster.
    ssh kkr1u00
    cd /cluster/data/mm4/bed/blastz.rn3
    source DEF
    ../../jkStuff/BlastZ_run1.sh
    cd run.1
    para try, check, push, etc ...
# Completed: 323 of 323 jobs
# CPU time in finished jobs:      10597s     176.62m     2.94h    0.12d  0.000 y
# IO & Wait Time:                207530s    3458.83m    57.65h    2.40d  0.007 y
# Average job time:                 675s      11.26m     0.19h    0.01d
# Longest job:                     1613s      26.88m     0.45h    0.02d
# Submission to last job:          2456s      40.93m     0.68h    0.03d

    #	Third cluster run to convert lav's to axt's
    ssh kk
    cd /cluster/data/mm4/bed/blastz.rn3
    source DEF
    ../../jkStuff/BlastZ_run2.sh
    cd run.2
    para try, check, push, etc ...
# Completed: 44 of 44 jobs
# CPU time in finished jobs:      10649s     177.48m     2.96h    0.12d  0.000 y
# IO & Wait Time:                129039s    2150.65m    35.84h    1.49d  0.004 y
# Average job time:                3175s      52.91m     0.88h    0.04d
# Longest job:                    18946s     315.77m     5.26h    0.22d
# Submission to last job:         19121s     318.68m     5.31h    0.22d

    # translate sorted axt files into psl
    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.rn3
    mkdir -p pslChrom
    set tbl = "blastzRn3"
    foreach f (axtChrom/chr*.axt)
      set c=$f:t:r
      echo "Processing chr $c"
      /cluster/bin/i386/axtToPsl $f S1.len S2.len pslChrom/${c}_${tbl}.psl
    end
    #	That takes about 20 minutes
    # Load database tables
    ssh hgwdev
    set tbl = "blastzRn3"
    cd /cluster/data/mm4/bed/blastz.rn3/pslChrom
    /cluster/bin/i386/hgLoadPsl mm4 chr*_${tbl}.psl


# CHAIN Rn3 BLASTZ (DONE - 2003-10-30 - Hiram)

#	Experiment, run this on kolossus
    ssh kolossus
    cd ~/kent.$MACHTYPE/src/hg/mouseStuff/axtChain
    make
    cd ../axtFilter
    make
    mkdir -p /cluster/data/mm4/bed/blastz.rn3/axtChain/run1
    cd /cluster/data/mm4/bed/blastz.rn3/axtChain/run1
    mkdir out chain

    ls -1S /cluster/data/mm4/bed/blastz.rn3/axtChrom/*.axt > input.lst
    cat << '_EOF_' > gsub
#LOOP
./doChain $(path1) chain/$(root1).chain out/$(root1).out
#ENDLOOP
'_EOF_'
    # << this line makes emacs coloring happy

    cat << '_EOF_' > doChain
#!/bin/csh
    $HOME/bin/$MACHTYPE/axtFilter -notQ_random $1 | \
        $HOME/bin/$MACHTYPE/axtChain stdin \
        /cluster/store6/mm4/nib \
        /cluster/store3/rn3/softNib $2 > $3
'_EOF_'
    # << this line makes emacs coloring happy
    chmod a+x doChain
    mkdir out chain

    gensub2 input.lst single gsub jobList
    # copy the jobList to runJobs.sh
    echo "#!/bin/sh" > runJobs.sh
    cat jobList >> runJobs.sh
    chmod +x runJobs.sh
    nohup ./runJobs.sh &
    #	Well, maybe that wasn't such a good idea.  That shell
    #	script took about 7 hours to run.  I'd recommend the small
    #	kluster or the kk9 kluster for this job

    # now on the cluster server, sort chains
    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.rn3/axtChain
    time chainMergeSort run1/chain/*.chain > all.chain
    # real    22m15.194s
    # user    14m9.970s
    # sys     2m18.350s
    time chainSplit chain all.chain
    # real    99m40.570s
    # user    13m41.590s
    # sys     29m44.260s

    # Load chains into database
    # next machine
    ssh hgwdev
    cd /cluster/data/mm4/bed/blastz.rn3/axtChain/chain
    foreach i (*.chain)
        set c = $i:r
        hgLoadChain mm4 ${c}_chainRn3 $i
        echo done $c
    end
# problem loading chr13 and chr7 - rerun these two
    foreach i (chr13.chain chr7.chain)
        set c = $i:r
        hgLoadChain mm4 ${c}_chainRn3 $i
        echo done $c
    end

# NET RAT BLASTZ (DONE - 2003-10-31 - Hiram)

    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.rn3/axtChain
    mkdir preNet
    cd chain
    foreach i (*.chain)
      echo preNetting $i
      /cluster/bin/i386/chainPreNet $i /cluster/data/mm4/chrom.sizes \
                        /cluster/data/rn3/chrom.sizes ../preNet/$i
    end
    # real    38m28.442s
    # user    11m24.220s
    # sys     3m24.980s

    cd ..
    mkdir n1
    cd preNet
    foreach i (*.chain)
      set n = $i:r.net
      echo primary netting $i
      /cluster/bin/i386/chainNet $i -minSpace=1 /cluster/data/mm4/chrom.sizes \
                            /cluster/data/rn3/chrom.sizes ../n1/$n /dev/null
    end

    cd ..
    cat n1/*.net | /cluster/bin/i386/netSyntenic stdin hNoClass.net
    # memory usage 1855098880, utime 8760 s/100, stime 2368

# The netClass operations requires an "ancientRepeat" table to exist
    # in either mm4 or rn3.  So, create the table:

    ssh hgwdev
    mkdir -p /cluster/data/mm4/bed/ancientRepeat
    cd /cluster/data/mm4/bed/ancientRepeat
    # mysqldump needs write permission to this directory
    chmod 777 .
    hgsqldump --all --tab=. hg16 ancientRepeat
    chmod 775 .
    hgsql mm4 < ancientRepeat.sql
    mysqlimport -u<r/w user> -p<r/w pass> hg16 ancientRepeat.txt
    # mm4.ancientRepeat: Records: 133  Deleted: 0  Skipped: 0  Warnings: 0
    # This is a hand curated table obtained from Arian.

    ssh hgwdev
    cd /cluster/data/mm4/bed/blastz.rn3/axtChain
    time netClass hNoClass.net mm4 rn3 rat.net \
	-tNewR=/cluster/bluearc/scratch/mus/mm4/linSpecRep.notInHuman \
	-qNewR=/cluster/bluearc/rat/rn3/linSpecRep.notInMouse
    # real    12m58.603s
    # user    8m7.610s
    # sys     1m40.280s

    # If things look good do
    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.rn3/axtChain
    rm n1 hNoClass.net
    # Make a 'syntenic' subset of these with
    time netFilter -syn rat.net > ratSyn.net
    # real    5m52.054s
    # user    3m24.820s
    # sys     0m44.020s

    # Load the nets into database
    ssh hgwdev
    cd /cluster/data/mm4/bed/blastz.rn3/axtChain
    time netFilter -minGap=10 rat.net |  hgLoadNet mm4 netRn3 stdin
    # real    17m0.651s
    # user    4m51.440s
    # sys     0m36.060s
    time netFilter -minGap=10 ratSyn.net | hgLoadNet mm4 syntenyNetRn3 stdin
    # real    14m4.567s
    # user    4m41.660s
    # sys     0m34.420s

    # Add entries for net and chain to mouse/mm4 trackDb

    # make net
    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.rn3/axtChain
    mkdir ratNet
    time netSplit rat.net ratNet
    # real    28m29.554s
    # user    4m48.770s
    # sys     4m3.580s

    mkdir ../axtNet
    foreach n (ratNet/chr*.net)
	set c=$n:t:r
	echo "netToAxt: $c.net -> $c.axt"
	rm -f ../axtNet/$c.axt
	netToAxt ratNet/$c.net chain/$c.chain \
		/cluster/data/mm4/nib \
		/cluster/data/rn3/nib \
		../axtNet/$c.axt
	echo "Complete: $c.net -> ../axtNet/$c.axt"
    end

    ssh hgwdev
    mkdir -p /cluster/data/mm4/bed/blastz.rn3/axtBest
    cd /cluster/data/mm4/bed/blastz.rn3/axtBest
    ln -s ../axtNet/chr*.axt .

    # copy net axt's to download area
    ssh hgwdev
    cd /cluster/data/mm4/bed/blastz.rn3/axtNet
    mkdir -p /usr/local/apache/htdocs/goldenPath/mm4/vsRn3/axtNet
    cp -p *.axt /usr/local/apache/htdocs/goldenPath/mm4/vsRn3/axtNet
    cd /usr/local/apache/htdocs/goldenPath/mm4/vsRn3/axtNet
    gzip *.axt
    # add README.txt file to dir, if needed

    #  Convert those axt files to psl
    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.rn3
    mkdir pslBest
    foreach a (axtBest/chr*.axt)
	set c=$a:t:r
	echo "processing $c.axt -> ${c}_blastzBestRn3.psl"
    /cluster/bin/i386/axtToPsl axtBest/${c}.axt \
	S1.len S2.len pslBest/${c}_blastzBestRn3.psl
	echo "Done: ${c}_blastzBestRn3.psl"
    end

    # Load tables
    ssh hgwdev
    cd /cluster/data/mm4/bed/blastz.rn3/pslBest
    time /cluster/bin/i386/hgLoadPsl mm4 chr*_blastzBestRn3.psl
    # real    9m7.118s
    # user    2m32.780s
    # sys     0m25.300s

     # check results
     # the original axtBest stuff from the axtBest operation:
#  featureBits mm4 blastzBestRn3
#  1780774716 bases of 2627444668 (67.776%) in intersection

#  featureBits mm3 blastzBestRat
#  1577582189 bases of 2505900260 (62.955%) in intersection

    # Make /gbdb links and add them to the axtInfo table:
     mkdir -p /gbdb/mm4/axtBestRn3
     cd /gbdb/mm4/axtBestRn3
     ln -s /cluster/data/mm4/bed/blastz.rn3/axtNet/chr*.axt .
     cd /cluster/data/mm4/bed/blastz.rn3/axtNet
     rm -f axtInfoInserts.sql
     touch axtInfoInserts.sql
     foreach f (/gbdb/mm4/axtBestRn3/chr*.axt)
       set chr=$f:t:r
       echo "INSERT INTO axtInfo (species, alignment, chrom, fileName) \
                VALUES ('rn3','Blastz Best in Genome','$chr','$f');" \
         >> axtInfoInserts.sql
     end
     hgsql mm4 < ~/kent/src/hg/lib/axtInfo.sql
     hgsql mm4 < axtInfoInserts.sql


# MAKING THE AXTTIGHT FROM AXTBEST (DONE - 2003-10-31 - Hiram)
    # After creating axtBest alignments above, use subsetAxt to get axtTight:
    ssh kksilo
    cd /cluster/data/mm4/bed/blastz.rn3/axtNet
    mkdir ../axtTight
    tcsh
    foreach i (*.axt)
      echo $i
      subsetAxt  $i ../axtTight/$i \
        ~kent/src/hg/mouseStuff/subsetAxt/coding.mat 3400
    end

    # translate to psl
    cd ../axtTight
    mkdir ../pslTight
    foreach i (*.axt)
      set c = $i:r
      axtToPsl $i ../S1.len ../S2.len ../pslTight/${c}_blastzTightRn3.psl
      echo "Done: $i"
    end

    # Load tables into database
    ssh hgwdev
    cd /cluster/data/mm4/bed/blastz.rn3/pslTight
    time hgLoadPsl mm4 chr*_blastzTightRn3.psl
    # real    9m53.256s
    # user    2m2.170s
    # sys     0m17.370s


    # copy to axt's to download area
    cd /cluster/data/mm4/bed/blastz.rn3/axtTight
    mkdir -p /usr/local/apache/htdocs/goldenPath/mm4/vsRn3/axtTight
    cp -p *.axt /usr/local/apache/htdocs/goldenPath/mm4/vsRn3/axtTight
    cd /usr/local/apache/htdocs/goldenPath/mm4/vsRn3/axtTight
    gzip *.axt

    # add README.txt file to dir, if needed

# MAKING RAT AND HUMAN SYNTENY (DONE - 2003-11-05 - Hiram)

    ssh hgwdev
    mkdir -p /cluster/data/mm4/bed/syntenyRn3
    cd /cluster/data/mm4/bed/syntenyRn3

#	updating the scripts in use here from 
#	/cluster/data/hg16/bed/syntenyMm3
    cp -p /cluster/data/hg16/bed/syntenyMm3/*.pl .

#	fix the syntenicBest script to not try and work on empty
#	results from its queries.  Also, set the db and table name
#	in the script itself so the arguments are not needed

    ./syntenicBest.pl
#	on the order of 3 to 4 hours to complete syntenicBest
#	almost no time, or only a few minutes at most for any of
#	the rest
    ./smooth.pl
    ./joinsmallgaps.pl
#	set db and table name in fillgap.pl
    ./fillgap.pl
    ./synteny2bed.pl
    hgLoadBed mm4 syntenyRn3 ucsc100k.bed

#	same thing for Hg16
    mkdir -p /cluster/data/mm4/bed/syntenyHg16
    cd /cluster/data/mm4/bed/syntenyHg16

    cp ../syntenyRn3/syntenicBest.pl
    # fixup table name to be Hg16
    ./syntenicBest.pl
    ../syntenyRn3/smooth.pl
    ../syntenyRn3/joinsmallgaps.pl
    cp ../syntenyRn3/fillgap.pl
    # fixup table name to be Hg16
    ./fillgap.pl
    ../syntenyRn3/synteny2bed.pl
    hgLoadBed mm4 syntenyHg16 ucsc100k.bed

    #	check results
# featureBits mm3 syntenyRat
# 2384684351 bases of 2505900260 (95.163%) in intersection
# featureBits mm4 syntenyRn3
# 2397585098 bases of 2627444668 (91.252%) in intersection
# featureBits mm3 syntenyHuman
# 2343924066 bases of 2505900260 (93.536%) in intersection
# featureBits mm4 syntenyHg16
# 2299774191 bases of 2627444668 (87.529%) in intersection


# BLASTZ Self	(IN PROGRESS - 2003-10-21 - Hiram)

    ssh kk
    #	Create artifical linSpecRep.notInMouse
    # The procedure for lineage spec business with self is to simply
    # use the actual repeat masker output for this mouse assembly as
    # the lineage specific repeats for itself.  Thus, merely make
    # symlinks to the repeat masker out files and name them as expected
    # for blastz.  In this case they are called notInMouse but they
    # really mean InMouse.  When asked what to use for this,
    #	Scott Schwartz says:
    #	It depends on what you want to do with the results.
    #	If you don't mind never having any RepeatMasker stuff
    #	align, then it should be fine.   But one could imagine
    #	other cases.

    cd /cluster/bluearc/scratch/mus/mm4
    mkdir linSpecRep.notInMouse
    cd linSpecRep.notInMouse

    foreach f (../rmsk/*.fa.out)
	set base = $f:t:r:r
	echo $base.out.spec
	ln -s $f $base.out.spec
    end


    mkdir -p /cluster/data/mm4/bed/blastzSelf
    cd /cluster/data/mm4/bed/blastzSelf

    cat << '_EOF_' > DEF
# mouse vs. mouse
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/home/angie/schwartzbin:/cluster/home/kent/bin/i386

ALIGN=blastz-run
BLASTZ=blastz
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=1

# TARGET
# Mouse
SEQ1_DIR=/scratch/mus/mm4/softNib
# RMSK not currently used
SEQ1_RMSK=/scratch/mus/mm4/rmsk
# FLAG not currently used
SEQ1_FLAG=-rodent
SEQ1_SMSK=/cluster/bluearc/scratch/mus/mm4/linSpecRep.notInMouse
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY
# Mouse
SEQ2_DIR=/iscratch/i/mm4/softNib
# RMSK not currently used
SEQ2_RMSK=/iscratch/i/mm4/rmsk
# FLAG not currently used
SEQ2_FLAG=-rodent
SEQ2_SMSK=/cluster/bluearc/scratch/mus/mm4/linSpecRep.notInMouse
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=30000000
SEQ2_LAP=0

BASE=/cluster/data/mm4/bed/blastzSelf

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << this line keeps emacs coloring happy
    #	First cluster run
    cd /cluster/data/mm4/bed/blastzSelf
    source DEF
    ../../jkStuff/BlastZ_run0.sh
    cd run
    para try, check, push, check, ....
# Completed: 41344 of 41344 jobs
# CPU time in finished jobs:   21214466s  353574.44m  5892.91h  245.54d  0.673 y
# IO & Wait Time:               2233362s   37222.69m   620.38h   25.85d  0.071 y
# Average job time:                 567s       9.45m     0.16h    0.01d
# Longest job:                   338309s    5638.48m    93.97h    3.92d
# Submission to last job:        774549s   12909.15m   215.15h    8.96d
    # note, one of those jobs took 94 hours !

    #	Second cluster run to convert the .out's to .lav's
    #	You do NOT want to run this on the big cluster.  It brings
    #	the file server to its knees.  Run this on the small cluster.
    ssh kkr1u00
    cd /cluster/data/mm4/bed/blastzSelf
    source DEF
    ../../jkStuff/BlastZ_run1.sh
    cd run.1
    para try, check, push, etc ...
# Completed: 323 of 323 jobs
# CPU time in finished jobs:      70707s    1178.45m    19.64h    0.82d  0.002 y
# IO & Wait Time:                 14609s     243.48m     4.06h    0.17d  0.000 y
# Average job time:                 264s       4.40m     0.07h    0.00d
# Longest job:                     5502s      91.70m     1.53h    0.06d
# Submission to last job:         10167s     169.45m     2.82h    0.12d

    #	Third cluster run to convert lav's to axt's
    ssh kk
    cd /cluster/data/mm4/bed/blastzSelf
    source DEF
    ../../jkStuff/BlastZ_run2.sh
    cd run.2
    para try, check, push, etc ...
# Completed: 37 of 44 jobs
# Crashed: 7 jobs
# CPU time in finished jobs:      12417s     206.95m     3.45h    0.14d  0.000 y
# IO & Wait Time:                186792s    3113.20m    51.89h    2.16d  0.006 y
# Average job time:                5384s      89.73m     1.50h    0.06d
# Longest job:                    33349s     555.82m     9.26h    0.39d
# Submission to last job:         33401s     556.68m     9.28h    0.39d
    # failed: chr17, chr1_random, chr2, chr3, chr5, chr7, chrUn_random
    # finish these on kolossus
    cat << '_EOF_' > runFailed.sh
#!/bin/sh

for c in 17 1_random 2 3 5 7 Un_random
do
time ../../../jkStuff/x86_64-chromlav2axt \
        /cluster/data/mm4/bed/blastzSelf/lav/chr${c} \
        /cluster/data/mm4/bed/blastzSelf/axtChrom/chr${c}.axt \
        /cluster/data/mm4/nib /cluster/data/mm4/nib
done
'_EOF_'
    #
    chmod +x runFailed.sh
    ./runFailed.sh > runFailed.out 2>&1
XXXX running 2003-11-03 08:35

# PRODUCING GENSCAN PREDICTIONS (DONE - 2003-10-27 - Hiram)

    #	Must run this on the small cluster since this
    #	process requires more memory than is found in the KK nodes
    ssh kkr1u00
    mkdir -p /cluster/data/mm4/bed/genscan
    cd /cluster/data/mm4/bed/genscan
    # Make subdirectories for genscan to put their output files in
    mkdir gtf pep subopt

    ls -1S /cluster/data/mm4/?{,?}/chr*_*/chr*_*.fa.masked \
      > genome.list
    # Create template file, gsub, for gensub2.
    cat << '_EOF_' > gsub
#LOOP
/cluster/bin/i386/gsBig {check in line+ $(path1)} {check out line gtf/$(root1).gtf} -trans={check out line pep/$(root1).pep} -subopt={check out line subopt/$(root1).bed} -exe=/cluster/home/fanhsu/projects/compbio/bin/genscan-linux/genscan -par=/cluster/home/fanhsu/projects/compbio/bin/genscan-linux/HumanIso.smat -tmp=/tmp -window=2400000
#ENDLOOP
'_EOF_'
    # << this line makes emacs coloring happy
    gensub2 genome.list single gsub jobList
    para create jobList
    para try
    para check
    para push
    # with only 6 CPUs available:
# Completed: 598 of 599 jobs
# Crashed: 1 jobs
# CPU time in finished jobs:     906601s   15110.02m   251.83h   10.49d  0.029 y
# IO & Wait Time:                206027s    3433.78m    57.23h    2.38d  0.007 y
# Average job time:                1861s      31.01m     0.52h    0.02d
# Longest job:                    76738s    1278.97m    21.32h    0.89d
# Submission to last job:        196259s    3270.98m    54.52h    2.27d
    #	The failed job, rerun on Itanium:
    ssh snort
    cd kent.ia64/src/hg/gsBig
    make
    cd /cluster/data/mm4/bed/genscan
    #	It would not run at window=2400000, but it did with 2000000
    $HOME/bin/$MACHTYPE/gsBig /cluster/data/mm4/2/chr2_15/chr2_15.fa.masked gtf/chr2_15.fa.gtf -trans=pep/chr2_15.fa.pep -subopt=subopt/chr2_15.fa.bed -exe=/cluster/home/fanhsu/projects/compbio/bin/genscan-linux/genscan -par=/cluster/home/fanhsu/projects/compbio/bin/genscan-linux/HumanIso.smat -tmp=/tmp -window=2000000
    # Run time 209 seconds :  0.2 s / kb
    # Got 118 exons
    # Got 18 genes
    # Got 216 suboptimal exons

    # Convert these to chromosome level files as so:
    ssh kksilo
    cd /cluster/data/mm4/bed/genscan
    liftUp genscan.gtf ../../jkStuff/liftAll.lft warn gtf/chr*.gtf
    liftUp genscanSubopt.bed ../../jkStuff/liftAll.lft warn subopt/chr*.bed > \
      /dev/null
    cat pep/*.pep > genscan.pep

    # Load into the database as so:
    ssh hgwdev
    cd /cluster/data/mm4/bed/genscan
    ldHgGene mm4 genscan genscan.gtf
    # Read 46885 transcripts in 331775 lines in 1 files
    # 46885 groups 44 seqs 1 sources 1 feature types
    # 46885 gene predictions
    hgPepPred mm4 generic genscanPep genscan.pep
    hgLoadBed mm4 genscanSubopt genscanSubopt.bed > /dev/null

# MAKE DOWNLOADABLE SEQUENCE FILES (IN PROGRESS 2003-10-21 Hiram)
    ssh kksilo
    cd /cluster/data/mm4

    # Build the .zip files
    jkStuff/zipAll.sh >&! zipAll.log &
    #	bash:	./jkStuff/zipAll.sh > zipAll.log 2>&1 &
    tail -f zipAll.log
    mkdir zip
    mv *.zip zip
    cd zip
    # Look at zipAll.log to make sure all file lists look reasonable.
    # Check zip file integrity:
    foreach f (*.zip)
      unzip -t $f > $f.test
      tail -1 $f.test
    end
    wc -l *.zip.test
    #  47 chromAgp.zip.test
    #  46 chromFa.zip.test
    #  46 chromFaMasked.zip.test
    #  46 chromOut.zip.test
    #  46 chromTrf.zip.test
    # 601 contigAgp.zip.test
    # 601 contigFa.zip.test
    # 601 contigFaMasked.zip.test
    # 601 contigOut.zip.test
    # 601 contigTrf.zip.test
    #3236 total

    ssh hgwdev
    cd /cluster/data/mm4/jkStuff
    # create generic copy program
    cat << '_EOF_' > cpToWeb.sh
#!/bin/sh
if [ $# -ne 1 ]; then
	echo "usage: cpToWeb.sh <goldenPath download directory>"
	echo -e "\texample: cpToWeb.sh mm4"
	exit 255
fi
GP=/usr/local/apache/htdocs/goldenPath/$1
mkdir -p ${GP}
mkdir -p ${GP}/chromosomes
for f in ../?/*.fa ../??/*.fa
do
    BN=`basename ${f}`
    zip -j ${GP}/chromosomes/${BN}.zip ${f}
    echo "zipped: ${BN}"
done
mkdir -p ${GP}/bigZips
for Z in *.zip
do
	cp -p ${Z} ${GP}/bigZips
	echo "copied: ${Z}"
done
'_EOF_'
    chmod +x cpToWeb.sh
    cd /cluster/data/mm4/zip
    ../jkStuff/cpToWeb.sh mm4
    cd /usr/local/apache/htdocs/goldenPath/mm4
    # Take a look at bigZips/* and chromosomes/*, update their README.txt's

    # Make the upstream sequence files.
    # NOTE: must be redone due to bad gap track
    cd bigZips
    featureBits mm4 refGene:upstream:1000 -fa=upstream1000.fa
    zip upstream1000.zip upstream1000.fa
    rm upstream1000.fa
    featureBits mm4 refGene:upstream:2000 -fa=upstream2000.fa
    zip upstream2000.zip upstream2000.fa
    rm upstream2000.fa
    featureBits mm4 refGene:upstream:5000 -fa=upstream5000.fa
    zip upstream5000.zip upstream5000.fa
    rm upstream5000.fa
    # mrna zips -- auto dump process takes care of this

# CREATE CYTOBAND TRACK
    # Can be done at any time
    ssh hgwdev
    cd /cluster/data/mm4
    mkdir cytoBand
    cd cytoBand
    # Get file from NCBI
    wget ftp://ftp.ncbi.nih.gov/genomes/M_musculus/maps/mapview/BUILD.32/Mouse400.dat.gz
    gunzip Mouse400.dat.gz
    # Create bed file
    /cluster/bin/scripts/createNcbiCytoBand Mouse400.dat
    # Load the bed file
    hgLoadBed -noBin -sqlTable=/cluster/home/kent/src/hg/lib/cytoBand.sql mm4 cytoBand cytoBand.bed


# UPDATE BACEND SEQUENCES (DONE - 2003-10-27 - Hiram)

    # Download new files
    ssh kksilo
    mkdir /cluster/data/mm4/bed/bacends/ncbi
    cd /cluster/data/mm4/bed/bacends/ncbi
    wget ftp://ftp.ncbi.nih.gov/genomes/M_musculus/BACENDS/AllBACends.mfa.gz
    wget ftp://ftp.ncbi.nih.gov/genomes/M_musculus/BACENDS/cl_acc_gi_len.gz
    wget ftp://ftp.ncbi.nih.gov/genomes/M_musculus/BACENDS/README
    gunzip AllBACends.mfa.gz
    gunzip cl_acc_gi_len.gz

    # Convert fa file
    cat << '_EOF_' > convert.pl
#!/usr/local/bin/perl -w

use strict;

while (my $line = <>) {
    if (substr($line,0,1) ne ">") {
        print $line;
    } else {
        my @fields = split(/\|/, $line);
        my $printed = 0;
        for (my $i = 0; $i < $#fields; $i++) {
                if ($fields[$i] eq "gb") {
                        (my $name, my $vers) = split(/\./,$fields[$i+1]);
                        print ">$name\n";
                        $i= $#fields;
                        $printed = 1;
                }
        }
        if (!$printed) {
                die("Failed for $line\n");
        }
    }
}
'_EOF_'
    chmod +x convert.pl
    ./convert.pl < AllBACends.mfa > BACends.fa

    # Create new pairs files
    convertBacEndPairInfo cl_acc_gi_len

    # Split file into pieces and copy to cluster to propagate
    ssh kksilo
    /cluster/bin/i386/faSplit sequence BACends.fa 100 BACends
    cd /cluster/data/mm4/bed/bacends/ncbi
    rm /cluster/bluearc/scratch/mus/mm4/bacEnds
    mv BACends???.fa /cluster/bluearc/scratch/mus/mm4/bacEnds
    cp -p BACends.fa /cluster/bluearc/scratch/mus/mm4/bacEnds

    # Ask for propagation from sysadmin

    # Load the sequences (change bacends.# to match correct location)
    ssh hgwdev
    mkdir /gbdb/mm4/bacends
    cd /gbdb/mm4/bacends
    ln -s /cluster/data/mm4/bed/bacends/ncbi/BACends.fa .
    cd /tmp
    hgLoadSeq mm4 /gbdb/mm4/bacends/BACends.fa
    #Adding /gbdb/mm4/bacends/BACends.fa)
    #452237 sequences
    #Updating seq table
    #All done

# BACEND SEQUENCE ALIGNMENTS (DONE - 2003-10-28 - Hiram)
    # (alignments done without RepeatMasking)
    #	We need an ooc file for this genome
    ssh kksilo
    mkdir /cluster/data/mm4/ooc
    cd /cluster/data/mm4/ooc
    ls ../unmaskedNib/chr*.nib > nib.list
    blat -makeOoc=11.ooc -repMatch=1024 nib.list nib.list output.psl
    # Wrote 26077 overused 11-mers to 11.ooc
    # Did not end using this.  Used an old one instead.

    # Create full sequence alignments
    ssh kk
    cd /cluster/data/mm4/bed/bacends

    /cluster/bin/scripts/splitContigList -scratch /iscratch/i/mm4/trfFa 1

    # allow blat to run politely in /tmp while it writes output, then
    # copy results to results file:

    cat << '_EOF_' > runBlat.sh
#!/bin/sh
path1=$1
path2=$2
root1=$3
root2=$4
result=$5
rm -fr /tmp/${root1}_${root2}
mkdir /tmp/${root1}_${root2}
pushd /tmp/${root1}_${root2}
/cluster/bin/i386/blat ${path1} ${path2} -ooc=/scratch/hg/h/mouse11.ooc \
	${root1}.${root2}.psl
popd
rm -f ${result}
mv /tmp/${root1}_${root2}/${root1}.${root2}.psl ${result}
rm -fr /tmp/${root1}_${root2}
'_EOF_'
    # << this line keeps emacs coloring happy
    chmod +x runBlat.sh

    cat << '_EOF_' > template
#LOOP
./runBlat.sh {check in exists $(path1)} {check in exists $(path2)} $(root1) $(root2) {check out line+ bacEnds.out/$(root2)/$(root1).$(root2).psl}
#ENDLOOP
'_EOF_'
    ls -1S /iscratch/i/mm4/bacEnds/BACends???.fa > bacEnds.lst
    mkdir bacEnds.out
    #	create results directories for each to avoid the all result files in
    #	one directory problem
    foreach f (`cat bacEnds.lst`)
	set b = $f:t:r
	echo $b
	mkdir bacEnds.out/$b
    end

    gensub2 contig.lst bacEnds.lst template jobList
    para create jobList
    # 58702 jobs written to batch
    para try, check, push, etc ...
# Completed: 58702 of 58702 jobs
# CPU time in finished jobs:    3702485s   61708.08m  1028.47h   42.85d  0.117 y
# IO & Wait Time:               1321608s   22026.80m   367.11h   15.30d  0.042 y
# Average job time:                  86s       1.43m     0.02h    0.00d
# Longest job:                     2767s      46.12m     0.77h    0.03d
# Submission to last job:          5781s      96.35m     1.61h    0.07d

# Compile alignments and lift the files (takes a while)
    ssh kksilo
    cd /cluster/data/mm4/bed/bacends
    time pslSort dirs raw.psl temp bacEnds.out/*
    # real    852m20.286s	<- over 14 hours !
    # user    522m19.890s
    # sys     65m43.910s

    ssh kolossus
    time pslReps -nearTop=0.01 -minCover=0.7 -minAli=0.8 -noIntrons raw.psl  bacEnds.psl /dev/null
# Processed 540122688 alignments
# 5289.06user 306.10system 1:56:57elapsed
# 79%CPU (0avgtext+0avgdata 0maxresident)k
# 0inputs+0outputs (146major+16134522minor)pagefaults 0swaps

# time pslReps -nearTop=0.02 -minCover=0.60 -minAli=0.85 -noIntrons raw.psl  bacEnds.psl /dev/null
    # Processed 540122688 alignments
    # real    157m1.227s
    # user    113m57.480s
    # sys     17m13.940s

    rmdir temp
    #	You will want to keep this file around until later processing is
    #	proven correct
    rm raw.psl		# 68 Gb !  It takes a while even to remove it.

    ssh kksilo
    time /cluster/bin/scripts/lifter -psl -mouse /cluster/data/mm4 bacEnds.psl
    # 4037.85
    # user 743.34
    # system 1:48:09elapsed 73%CP
    # real    28m29.554s	== 9 hours
    # user    4m48.770s
    # sys     4m3.580s

    cp -p ~booch/bacends/split.pl .
    cp -p ~booch/bacends/header .
    time ./split.pl header < bacEnds.psl.lifted
    # real 169.41
    # user 38.91
    # sys 43.44

    #	These are 2 Gb files:
    # -rw-rw-r--    1 2275160342 Nov  1 15:15 bacEnds.psl
    # -rw-rw-r--    1 2385296298 Nov  1 22:19 bacEnds.psl.lifted

    # we are up to 8 Gb for these files:
    # -rw-rw-r--    1 8476583727 Oct 30 10:49 bacEnds.psl
    # -rw-rw-r--    1 8892639725 Oct 30 23:04 bacEnds.psl.lifted

    cp -p bacEnds.psl.lifted bacEnds.psl.lifted.save
    time pslSort dirs bacEnds.psl.lifted temp split
    # real 1135.23
    # user 934.31
    # sys 112.83

    #real    72m23.363s
    #user    58m48.260s
    #sys     7m13.090s

    rmdir temp
    rm -r split

    # Copy files to final destination and remove
    mkdir /cluster/data/mm4/bacends
    cp -p bacEnds.psl.lifted /cluster/data/mm4/bacends
XXX done 2003-11-01 23:50

# BACEND PAIRS TRACK (WORKING - 2003-10-28 - Hiram)

    ssh kolossus
    cd /cluster/data/mm4/bacends

    # two line header file for the cat:
	cat << '_EOF_' > header
bin     chr     start   end     clone   score   strand  all     features        starts  sizes   names   rid     rcov    lid     lcov
10N     10      10N     10N     10      10N     10      10      10N     10      10      10      10N     10N     10N     10N
'_EOF_'

	time ${HOME}/bin/${MACHTYPE}/pslPairs -min=50000 -max=300000 \
	-short -long -orphan -mismatch -verbose bacEnds.psl.lifted \
	../bed/bacends/ncbi/bacEndPairs.txt bacEnds
XXX running 2003-11-01 23:55

XXXX - running 2003-10-31 14:45

        cat header ../bed/bacends/ncbi/bacEndPairs.txt | \
	~booch/bin/row score ge 300 | \
	~booch/bin/sorttbl chr start | \
	~booch/bin/headchg -del > bacEndPairs.bed

    # edit this Makefile to add this executable path to the scripts:
    #	/projects/compbiousr/booch/booch/scripts/

    # Update Makefile with new location of pairs/singles
    # files, if necessary (DONE)

    # Make initial file of alignments
    make bacEnds.rdb

    # Try to fish out more pairs
    make bacEndsMiss.psl

    # Re-make bacEnds.rdb with new info
    make bacEnds.rdb

    # Create bacEndPairs track file
    make bacEndPairs.bed

    # Create bacEndPairsBad and bacEndPairsLong files
    make bacEndPairsBad.bed

    # Create psl file to load
    make bacEnds.load.psl

    # Create database tables
    ssh hgwdev
    cd /projects/hg2/booch/psl/tables
    hgsql mm4 < all_bacends.sql
    hgsql mm4 < bacEndPairs.sql
    hgsql mm4 < bacEndPairsBad.sql
    hgsql mm4 < bacEndPairsLong.sql

    # Load the tables
    cd /cluster/data/mm4/bacends
    hgsql -e \
	'load data local infile "bacEnds.load.psl" into table all_bacends;' mm4
    hgsql -e \
	'load data local infile "bacEndPairs.bed" into table bacEndPairs;' mm4
    hgsql -e \
    'load data local infile "bacEndPairsBad.bed" into table bacEndPairsBad;' \
	mm4
    hgsql -e \
  'load data local infile "bacEndPairsLong.bed" into table bacEndPairsLong;' \
	mm4
# featureBits mm4 all_bacends
# 243096171 bases of 2627444668 (9.252%) in intersection
# featureBits mm3 all_bacends
# 220398676 bases of 2505900260 (8.795%) in intersection

# featureBits mm4 bacEndPairs
# 2549945356 bases of 2627444668 (97.050%) in intersection
# featureBits mm3 bacEndPairs
# 2508331798 bases of 2505900260 (100.097%) in intersection

# featureBits mm4 bacEndPairsBad
# 1074505863 bases of 2627444668 (40.895%) in intersection
# featureBits mm3 bacEndPairsBad
# 547271514 bases of 2505900260 (21.839%) in intersection

# featureBits mm4 bacEndPairsLong
# 2833125883 bases of 2627444668 (107.828%) in intersection
# featureBits mm3 bacEndPairsLong
# 2500534101 bases of 2505900260 (99.786%) in intersection

XXXX - running 2003-11-04 10:32

# ADD MAP CONTIGS TRACK (DONE - 2003-11-04 - Hiram)
    ssh hgwdev
    mkdir -p /cluster/data/mm4/bed/ctgPos
    cd /cluster/data/mm4/bed/ctgPos
    # hgCtgPos uses the lift files... but mouse lift files are for the
    # 5MB contigs from splitFaIntoContigs, not for the real NT_ contigs
    # from the assembly.  (In the future, we should go with the NT's!)
    # So... just for this release, go straight from the seq_contig.md
    # to the table def'n: contig, size, chrom, chromStart, chromEnd
    cat << '_EOF_' > parseSeqContig.pl
#!/usr/local/bin/perl -w

use strict;

while (<>) {
    if (/^\d+\s+(\S+)\s+(\d+)\s+(\d+)\s+(\S+)\s+(N[TC]_\d+)\s+(\S+)\s+contig\s+\S+\s+\S+\s*$/i) {
        my $chr=$1; my $start=$2; $start -= 1; my $end=$3; my $ctg=$5;
        if ($chr !~ /N/ ) {
        print "$ctg\t" . ($end-$start) . "\tchr$chr\t$start\t$end\n";
        }
    }
}
'_EOF_'
    chmod +x parseSeqContig.pl
      ./parseSeqContig.pl ../../ncbi/seq_contig.md > ctgPos.tab
    hgsql mm4 < ~/kent/src/hg/lib/ctgPos.sql
    echo "load data local infile 'ctgPos.tab' into table ctgPos" | hgsql mm4
    # Note: the info is there in seq_contig.md to also do the _random's,
    # but we'd have to do some more work: duplicate the gaps of 50000 between
    # contigs for all _random's except chrUn_random (1000 between).

    # featureBits mm4 ctgPos
    # 2554101163 bases of 2627444668 (97.209%) in intersection
    # featureBits mm3 ctgPos
    # 2500661074 bases of 2505900260 (99.791%) in intersection

# KNOWN GENES TRACK (DONE - 2003-11-20 - Hiram)

    # you will probably need to make the programs in kent/src/hg/protein
    cd ~/kent/src/hg/protein
    make
    # The scripts run below will check for programs and let you know
    # which ones are missing

    # obtain new SwissProt database (should be done about once a month)
    # the swiss prot data is currently living on store5, first step is
    # on the fileserver.  This script was used once as it was created,
    # it may need to be verified and improved as it is used again.  See
    # comments at the top of the script.
    ssh eieio
    cd /cluster/data/swissprot
    ~/kent/src/hg/protein/mkSwissProtDB.sh
    # that obtains the data and unpacks it, second step is on hgwdev
    # to create the database
    ssh hgwdev
    cd /cluster/data/swissprot
    ~/kent/src/hg/protein/mkSwissProtDB.sh
    # Now the proteins database can be created from that.  Must be on hgwdev
    # Again, a script that has been used once upon creation, see
    # comments in it.  For example currently it is assumed these two
    # scripts have been run on the same day.  In this case 03112
    ssh hgwdev
    cd /cluster/data/proteins
    ~/kent/src/hg/protein/mkProteinsDb.sh
    # with those two databases existing, read for the actual known genes
    # track build.  Must be on hgwdev since it is all mostly database
    # operations.  The {Date} argument is the date stamp created by the
    # above two scripts.  Something of the form YYMMDD, e.g.: 031112
    # Again, a script that has been used only once at creation, see
    # comments at top of script.
    ssh hgwdev
    mkdir /cluster/data/mm4/bed/knownGenes
    cd /cluster/data/mm4/bed/knownGenes
    DateStamp=031112
    ~/kent/src/hg/protein/KGprocess.sh ${DateStamp}
    # that runs to a point where it prepares data and jobList for a
    # cluster run.  Continue with a cluster run on kk
    ssh kk
    cd /cluster/data/mm4/bed/knownGenes/kgBestMrna
    para create jobList
    para try
    para check
    para push
    # this is a quick cluster job.  Less than five minutes. e.g.:
# Completed: 43580 of 43580 jobs
# CPU time in finished jobs:     114636s    1910.60m    31.84h    1.33d  0.004 y
# IO & Wait Time:                111889s    1864.82m    31.08h    1.30d  0.004 y
# Average job time:                   5s       0.09m     0.00h    0.00d
# Longest job:                        9s       0.15m     0.00h    0.00d
# Submission to last job:           282s       4.70m     0.08h    0.00d

    # Continuing back on hgwdev, run the same script again
    ssh hgwdev
    cd /cluster/data/mm4/bed/knownGenes
    DateStamp=031112
    ~/kent/src/hg/protein/KGprocess.sh ${DateStamp}
    # that should run to completion and the known genes track is ready

    # Add the proteins link into gdbPdb.hgcentral:
    hgsql -e 'INSERT INTO gdbPdb (genomeDb, proteomeDb) \
	VALUES ("mm4","proteins031112");' \
	-h genome-testdb hgcentraltest


# SET defaultDb in hgcentraltest to move from mm3 to mm4
    hgsql -e 'update defaultDb set name = "mm4" where name = "mm3";' \
	-h genome-testdb hgcentraltest

# STS MARKERS TRACK (WORKING - 2003-11-25 - Hiram)

    ssh kksilo
    mkdir -p /cluster/data/mm4/bed/STSmarkers/downloads
    cd /cluster/data/mm4/bed/STSmarkers/downloads
    # these files appear to be new almost every day
    wget --timestamping \
	ftp://ftp.ncbi.nih.gov/repository/UniSTS/UniSTS_mouse.sts
    wget --timestamping \
	ftp://ftp.ncbi.nih.gov/repository/UniSTS/UniSTS.aliases

    # these map files appear to be old, 2002 Data
    wget --timestamping \
ftp://ftp.ncbi.nih.gov/repository/UniSTS/UniSTS_MapReports/Mus_musculus/*
    #	Picks up files:
    #	345184 Feb 20  2002 10090.MGD.txt
    #	173294 Jun 27  2002 10090.WI_Mouse_Genetic.txt
    #	240637 Jun 27  2002 10090.WI_Mouse_YAC.txt
    #	390088 Jun 27  2002 10090.Whitehead-MRC_RH.txt

    # these reports appear to be changing daily too
    wget --timestamping \
	ftp://ftp.informatics.jax.org/pub/reports/MRK_Dump2.rpt
    wget --timestamping \
	ftp://ftp.informatics.jax.org/pub/reports/MRK_Sequence.rpt
    wget --timestamping \
	ftp://ftp.informatics.jax.org/pub/reports/PRB_PrimerSeq.rpt
XXXX - 2003-12-16 16:50

    ssh kk9
    mkdir -p /cluster/data/mm4/bed/STSmarkers/primer
    mkdir -p /cluster/data/mm4/bed/STSmarkers/ePCR
    cd /cluster/data/mm4/bed/STSmarkers/primer
    # we need to document where musPrimer.fa comes from
    echo "/cluster/bluearc/scratch/mus/mm4/musPrimer.fa" > primers.lst
    cat << '_EOF_' > template
#LOOP
/cluster/bin/i386/blat.2 $(path1) $(path2) -ooc=/scratch/hg/h/mouse11.ooc  -minMatch=1 -minScore=0 -minIdentity=80 -oneOff {check out line+ primers.out/$(root1).psl}
#ENDLOOP
'_EOF_'
    mkdir primers.out
    /cluster/bin/scripts/splitContigList -mouse -scratch \
	/cluster/bluearc/scratch/mus/mm4/trfFa 1
    /cluster/bin/i386/gensub2 contig.lst primers.lst template jobList
    para create jobList
    para try
    para check
    para push
    ... etc ...
# Completed: 599 of 599 jobs
# CPU time in finished jobs:     184360s    3072.66m    51.21h    2.13d  0.006 y
# IO & Wait Time:                  1734s      28.90m     0.48h    0.02d  0.000 y
# Average job time:                 311s       5.18m     0.09h    0.00d
# Longest job:                      417s       6.95m     0.12h    0.00d
# Submission to last job:          2132s      35.53m     0.59h    0.02d

    /cluster/bin/i386/pslSort dirs primers.psl temp primers.out
    rmdir temp
    # comparing results to mm3:
    # /projects/hg2/booch/psl/mm.2003.02/mm3/primers/primers.psl
    # Mm3 wc primers.psl
    # 4263983 89543582 440456942 primers.psl
    # Mm4 wc primers.psl /cluster/data/mm4/bed/STSmarkers/primer/primers.psl
    # 4805773 100921172 496200670 primers.psl

    cd /cluster/data/mm4/bed/STSmarkers/ePCR
    ls -1S /cluster/bluearc/scratch/mus/mm4/trfFa > contig.lst
    mkdir epcr.out
    cat << '_EOF_' > template
#LOOP
/cluster/bin/scripts/luRunEpcr $(path1) $(path2) epcr.out/$(num2).epcr
#ENDLOOP
'_EOF_'
    # we need to document where mmPrimer.info comes from
    echo "/cluster/bluearc/scratch/mus/mm4/mmPrimer.info" > epcr.lst
    gensub2 epcr.lst contig.lst template jobList
    para create jobList
    para try
    para check
    para push
    ... etc ...
# Completed: 599 of 599 jobs
# CPU time in finished jobs:      65528s    1092.14m    18.20h    0.76d  0.002 y
# IO & Wait Time:                  1841s      30.68m     0.51h    0.02d  0.000 y
# Average job time:                 112s       1.87m     0.03h    0.00d
# Longest job:                      159s       2.65m     0.04h    0.00d
# Submission to last job:           791s      13.18m     0.22h    0.01d

    ssh hgwdev
    # all those results become all.epcr
    cat epcr.out/*.epcr > all.epcr
    # comparing results to Mm3:
    # /projects/hg2/booch/psl/mm.2003.02/mm3/primers/all.epcr
    # Mm3 wc all.epcr
    #  24627   98508 1329559 all.epcr
    # Mm4 wc all.epcr	/cluster/data/mm4/bed/STSmarkers/ePCR/all.epcr
    #  65121  260484 3485112 ../ePCR/all.epcr

    cd /cluster/data/mm4/bed/STSmarkers/primer

    # create primers.psl.filter.blat and epcr.not.found
    /projects/compbio/usr/booch/booch/scripts/filterPrimers -mouse \
	/cluster/store5/mouseMarker/stsInfoMouse.bed primers.psl \
	/cluster/bluearc/scratch/mus/mm4/musPrimer.fa \
	../ePCR/all.epcr > primers.psl.filter.blat
    #
    # comparing results to Mm3:
    # Mm3: wc primers.psl.filter.blat
    #  26088  547848 2612720 primers.psl.filter.blat
    # Mm4:  wc primers.psl.filter.blat
    #  24056  505176 2385675 primers.psl.filter.blat

    # create accession_info.rdb  (chrM added to Terry's script for mouse)
    touch empty_sequence.inf
    /projects/compbio/usr/booch/booch/scripts/compileAccInfo -mouse \
	/cluster/data/mm4 empty_sequence.inf
    mv accession_info.rdb temp
    ~booch/bin/sorttbl Chr Ord Start < temp > accession_info.rdb
    rm temp
    # comparing results to Mm3:
    #  Mm3 wc accession_info.rdb
    # 173948 1913432 12738822 accession_info.rdb
    #  Mm4 wc accession_info.rdb
    #  86935  956289 6374930 accession_info.rdb
    #### This is an interesting difference.  The structure of the .agp files 
    # for Mm3 and Mm4 show a large difference in line counts:
    # wc /cluster/data/mm3/?/*.agp /cluster/data/mm3/??/*.agp
    # 339937 2893447 18141029 total
    # wc /cluster/data/mm4/?/*.agp /cluster/data/mm4/??/*.agp
    # 219652 1885501 11875772 total

    # creates epcr.not.found.nomatch and epcr.not.found.psl
    /projects/compbio/usr/booch/booch/scripts/epcrToPsl -mouse \
	epcr.not.found /cluster/bluearc/scratch/mus/mm4/musPrimer.fa \
	accession_info.rdb /cluster/data/mm4
    ##### epcr.not.found.psl is empty !
    # Comparing results to Mm3:
    # Mm3 wc epcr*
    # 205     820    7585 epcr.not.found
    #   1      12      95 epcr.not.found.nomatch
    # 204    4284   19817 epcr.not.found.psl
    # 410    5116   27497 total

    # Mm4 wc epcr*
    #  132     528    5154 epcr.not.found
    #  132    1584   11622 epcr.not.found.nomatch
    #    0       0       0 epcr.not.found.psl
    #  264    2112   16776 total

    # combine them to one, since epcr.not.found.psl is empty, this is a copy
    cat primers.psl.filter.blat epcr.not.found.psl > primers.psl.filter

    # lift those primers  (added chrM to this lifter script for mouse)
    # creates primers.psl.filter.lifted
    /projects/compbio/usr/booch/booch/scripts/lifter -mouse -psl \
	/cluster/data/mm4 primers.psl.filter

    # create primers.initial
    PATH=/cluster/home/booch/bin:$PATH \
	/projects/compbio/usr/booch/booch/scripts/extractPslInfo \
	primers.psl.filter.lifted
    # create primers.initial.acc
    /projects/compbio/usr/booch/booch/scripts/findAccession -agp \
	-mouse primers.initial /cluster/data/mm4

    # this needs to be -rat as that specifies how to scan the
    # stsInfoMouse.bed file and it does not work if you use -mouse
    /projects/compbio/usr/booch/booch/scripts/getStsId -rat \
	/cluster/store5/mouseMarker/stsInfoMouse.bed \
	primers.initial.acc > primers.initial.acc.trans

    sort -k 4n primers.initial.acc.trans > primers.final
    rm primers.initial.acc primers.initial.acc.trans
    # comparing results to Mm3:
    # Mm3 wc primers.final
    # 26292  184044 1253365 primers.final
    # Mm4 wc primers.final
    # 24056  168392 1289371 primers.final

    cd /cluster/data/mm4/bed/STSmarkers
    # stsMarkers.final is empty for mouse
    touch stsMarkers.final dummy
    PATH=/cluster/home/booch/bin:$PATH \
    /projects/compbio/usr/booch/booch/scripts/combineSeqPrimerPos \
	stsMarkers.final primer/primers.final > stsMarkers_pos.rdb
    # Comparing results to Mm3
    # Mm3 wc stsMarkers_pos.rdb
    # 25925  181475 1413458 stsMarkers_pos.rdb
    # Mm4 wc stsMarkers_pos.rdb
    # 24058  168406 1133400 stsMarkers_pos.rdb

    /projects/compbio/usr/booch/booch/scripts/combineAllSeqPrimer \
	-rat /cluster/store5/mouseMarker/stsInfoMouse.bed \
	dummy primer/primers.final > stsMarkers_pos_all.rdb
    # can not find this result for Mm3
    # Mm4 wc stsMarkers_pos_all.rdb
    # 22107   46165  293258 stsMarkers_pos_all.rdb

XXXX this createSTSbed is only for Human, does not work here
XXXX  Need something that converts stsMarkers_pos.rdb to stsMapMouse.bed
    /projects/compbio/usr/booch/booch/scripts/createSTSbed \
    /projects/cc/hg/ytlu/bin/script/perl/createStsBed \
	/cluster/store5/mouseMarker/stsInfoMouse.bed \
	stsMarkers_pos.rdb 500 > stsMapMouse.bed

#  STS Markers plots - needs to wait until stsMarkers_pos_all.rdb
#	is created correctly from above, also needs the three maps files
    mkdir /cluster/data/mm4/bed/STSmarkers/html
    cd /cluster/data/mm4/bed/STSmarkers/html
    mkdir maps plots sts

    # not sure how to make the three maps/*.map files
    /projects/compbio/usr/booch/booch/scripts/mergeTPFsts -rat \
	../primer/accession_info.rdb ../stsMarkers_pos.rdb \
	maps/wi_rh.id.map 3.0 ../stsMarkers_pos_all.rdb \
	/cluster/store5/mouseMarker/stsInfoMouse.bed > rh.rdb
    mv map.ranges rh.ranges
    /projects/compbio/usr/booch/booch/scripts/mergeTPFsts -rat \
	../primer/accession_info.rdb ../stsMarkers_pos.rdb \
	maps/wi_gen.id.map 3.0 ../stsMarkers_pos_all.rdb \
	/cluster/store5/mouseMarker/stsInfoMouse.bed > wi_gen.rdb
    mv map.ranges wi_gen.ranges
    /projects/compbio/usr/booch/booch/scripts/mergeTPFsts -rat \
	../primer/accession_info.rdb ../stsMarkers_pos.rdb \
	maps/mgd_gen.id.map 3.0 ../stsMarkers_pos_all.rdb \
	/cluster/store5/mouseMarker/stsInfoMouse.bed > mgd.rdb
    mv map.ranges mgd.ranges

    /projects/compbio/usr/booch/booch/scripts/combineTPFsts \
	rh.rdb wi_gen.rdb mgd.rdb > sts.rdb

    /projects/compbio/usr/booch/booch/scripts/TPFrdb2html \
	-mouse maps/wi_rh.id.map -plain ASSEM sts sts.rdb mm4 sts
	
    mv *.rdb sts/
    mv *.ranges sts/

    cd plots
    STSFLAGS="-dbl -top 0.3 -mouse -m mm4"
    /projects/compbio/usr/booch/booch/scripts/createUCSCplots \
	${STSFLAGS} /cluster/data/mm4 ../maps ../../stsMarkers_pos.rdb
    /projects/compbio/usr/booch/booch/scripts/createUCSCplots -x 10000000 \
	${STSFLAGS} /cluster/data/mm4 ../maps ../../stsMarkers_pos.rdb
    /projects/compbio/usr/booch/booch/scripts/createUCSCplots -x 50000000 \
	${STSFLAGS} /cluster/data/mm4 ../maps ../../stsMarkers_pos.rdb

LOAD GENEID GENES (DONE - 2003-11-27 - Hiram)
    mkdir -p /cluster/data/mm4/bed/geneid/download
    cd /cluster/data/mm4/bed/geneid/download
    foreach f (/cluster/data/mm4/?{,?}/chr?{,?}{,_random}.fa)
      set chr = $f:t:r
      wget \
http://genome.imim.es/genepredictions/M.musculus/mmOct2003/geneid_v1.1/$chr.gtf
      wget \
http://genome.imim.es/genepredictions/M.musculus/mmOct2003/geneid_v1.1/$chr.prot
    end
    # Add missing .1 to protein id's
    foreach f (*.prot)
      perl -wpe 's/^(>chr\w+)$/$1.1/' $f > $f:r-fixed.prot
    end
    cd ..
    ldHgGene mm4 geneid download/*.gtf -exon=CDS
    hgPepPred mm4 generic geneidPep download/*-fixed.prot

# TWINSCAN 1.3 GENE PREDICTIONS (2003-12-15 braney)

    cd /cluster/data/mm4/bed
    rm -fr twinscan
    mkdir twinscan.2003-12-15
    ln -s twinscan.2003-12-15 twinscan
    cd twinscan
    tarFile=MGSCv3_v_NCBI34_11-24-03.tgz
    wget http://genes.cs.wustl.edu/predictions/mouse/11-24-03/MGSCv3_v_NCBI34_11-24-03.tgz
    wget  http://genes.cs.wustl.edu/predictions/mouse/11-24-03/md5sum.txt

    # check file transferred correctly
    md5sum $tarFile | diff - md5sum.txt
    tar xvfz $tarFile
    unset tarFile 

    # pare down protein FASTA header to id and add missing .a:
    foreach c (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 X Y )
      echo chr$c
      perl -wpe 's/^(\>\S+)\s.*$/$1.a/' < chr_ptx/chr$c.ptx > chr_ptx/chr$c-fixed.fa
    end
    ldHgGene mm4 twinscan chr_gtf/chr*.gtf -gtf
    hgPepPred mm4 generic twinscanPep chr_ptx/chr*-fixed.fa
