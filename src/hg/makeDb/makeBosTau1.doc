#!/bin/csh -f # set emacs mode
exit; # don't actually run this like a script :)

# Bos taurus 
# Btau_1.0 from Baylor
# September 2004
# contigs and scaffolds, no chromosomes
# WGS, Atlas assembler, 3x coverage
# ftp://ftp.hgsc.bcm.tmc.edu/pub/data/Btaurus/fasta/Btau20040927-freeze
# anonymous ftp, no login/password needed

# DOWNLOAD SEQUENCE (DONE Sept. 30, 2004 Heather)
    ssh kksilo
    mkdir /cluster/store8/bosTau1
    cd /cluster/data
    ln -s /cluster/store8/bosTau1 bosTau1
    cd /cluster/data/bosTau1
    mkdir downloads
    cd downloads

    # we won't use these, but download them for completeness
    mkdir Bin0
    cd Bin0
    wget ftp://ftp.hgsc.bcm.tmc.edu/pub/data/Btaurus/fasta/Btau20040927-freeze/Bin0/Btau20040927-freeze-bin0.fa.gz
    wget ftp://ftp.hgsc.bcm.tmc.edu/pub/data/Btaurus/fasta/Btau20040927-freeze/Bin0/Btau20040927-freeze-bin0.fa.qual.gz
    wget ftp://ftp.hgsc.bcm.tmc.edu/pub/data/Btaurus/fasta/Btau20040927-freeze/Bin0/Btau_lib_insert_size_20040927.tbl.gz
    cd ..

    mkdir contigs
    cd contigs
    wget ftp://ftp.hgsc.bcm.tmc.edu/pub/data/Btaurus/fasta/Btau20040927-freeze/contigs/Btau20040927-freeze-contigs.fa.gz
    wget ftp://ftp.hgsc.bcm.tmc.edu/pub/data/Btaurus/fasta/Btau20040927-freeze/contigs/Btau20040927-freeze-contigs.fa.qual.gz
    wget ftp://ftp.hgsc.bcm.tmc.edu/pub/data/Btaurus/fasta/Btau20040927-freeze/contigs/Btau_v1.0_20040927.agp.gz
    wget ftp://ftp.hgsc.bcm.tmc.edu/pub/data/Btaurus/fasta/Btau20040927-freeze/contigs/AAFC01_accs.gz
    cd ..

    mkdir linearScaffolds
    cd linearScaffolds
    wget ftp://ftp.hgsc.bcm.tmc.edu/pub/data/Btaurus/fasta/Btau20040927-freeze/linearScaffolds/Btau20040927-freeze-assembly.fa.gz
    wget ftp://ftp.hgsc.bcm.tmc.edu/pub/data/Btaurus/fasta/Btau20040927-freeze/linearScaffolds/Btau20040927-freeze-assembly.fa.qual.gz
    cd ..

    mkdir repeat-reads
    cd repeat-reads
    wget ftp://ftp.hgsc.bcm.tmc.edu/pub/data/Btaurus/fasta/Btau20040927-freeze/repeat-reads/Btau20040927-freeze-repeat-reads.fa.gz
    wget ftp://ftp.hgsc.bcm.tmc.edu/pub/data/Btaurus/fasta/Btau20040927-freeze/repeat-reads/Btau20040927-freeze-repeat-reads.fa.qual.gz
    cd ..

# GUNZIP
  gunzip */*.gz

# CHECK FILES

# Check that IDs in .fa match IDs in .qual
  
  ssh kksilo
  cd /cluster/data/bosTau1/downloads
  # foreach Bin0 contigs linearScaffolds repeat-reads
  grep ">" *.fa > id.fa
  grep ">" *.qual > id.qual
  diff id.fa id.qual

  # this takes about 5-10 minutes
  /cluster/bin/i386/checkAgpAndFa contigs/Btau_v1.0_20040927.gap linearScaffolds/Btau20040927-freeze >& check.out
  /cluster/bin/i386/checkAgpAndFa contigs/Btau_v1.0_20040927.gap linearScaffolds/Btau20040927-freeze > check.err


# SPLIT SCAFFOLDS (DONE Sep. 30, 2004, Heather)

  ssh eieio
  cd /cluster/data/bosTau1
  mkdir scaffolds
  /cluster/bin/i386/faSplit byname downloads/linearScaffolds/Btau20040927-freeze-assembly.fa scaffolds -outDirDepth=3
  # not sure why these didn't get put under scaffolds directory
  mv 1 scaffolds
  mv 2 scaffolds
  mv 3 scaffolds
  mv 4 scaffolds
  etc.
  # generate list
  find scaffolds -print > scaffolds.list.0
  grep fa scaffolds.list.0 > scaffolds.list

# MAKE 2BIT NIB FILE (DONE Oct.1, 2004, Heather)

  ssh kksilo
  cd /cluster/data/bosTau1/linearScaffolds
  /cluster/bin/i386/faToTwoBit Btau20040927-freeze-assembly.fa bosTau1.2bit
  /cluster/bin/i386/twoBitToFa bosTau1.2bit check.fa
  mv bosTau1.2bit ..
  diff -q Btau20040927-freeze-assembly.fa check.fa
  # could also use cmp
  # note: size match
  ssh hgwdev
  mkdir /gbdb/bosTau1
  mkdir /gbdb/bosTau1/nib
  # could get rid of the nib in this path, 2bit isn't a nib (4bit)
  ln -s /cluster/data/bosTau1/bosTau1.2bit /gbdb/bosTau1/nib

# CREATE DATABASE

  ssh hgwdev
  hgsql hg17
  create database bosTau1;
  use bosTau1;
  create table grp (PRIMARY KEY(NAME)) select * from hg17.grp;
  # add rows to hgcentraltest on hgwbeta in dbDb and defaultDb
  # set orderKey past dog, before mouse

# CREATE GAP TABLE

  ssh hgwdev
  cd kent/src/hg/lib
  # remove bin column for now
  hgsql bosTau1 < gap2.sql
  cd /cluster/data/bosTau1/downloads/contigs
  grep fragment Btau_v1.0_20040927.agp > fragment.txt
  hgsql bosTau1
  load data local infile 'fragment.txt' into table gap
  # create trackDb/cow/bosTau1/gap.html

# CREATE CONTIG TABLE (DONE, Oct. 5, 2004, Heather)

  ssh hgwdev
  cd kent/src/hg/lib
  # this doesn't include strand or contig start/end
  hgsql bosTau1 < ctgPos2.sql
  cd /cluster/data/bosTau1/downloads/contigs
  grep Contig Btau_v1.0_20040927.agp > Contig.out
  ssh kksilo
  cd /cluster/data/bosTau1/downloads/contigs
  getContig.pl < Contig.out > ctgPos2
  ssh hgwdev
  load data local infile 'ctgPos2' into table ctgPos2
  # 9 skipped
  # Contig24811
  # Contig368174
  # Contig44331
  # Contig55201
  # Contig59195
  # Contig64664
  # Contig67471
  # Contig88377
  # Contig89200
  # 9 with size 0

# CREATE CHROMINFO TABLE (DONE Oct. 5, 2004, Heather)
# an improvement here would be to have getMaxCoord output the 2bit file name
  ssh hgwdev
  cd /cluster/data/bosTau1
  # get coordinates from agp and put in database table
  getcoords.pl < downloads/contigs/Btau_v1.0_20040927.agp > scaffolds.coords
  hgsql bosTau1 < coords.sql
  load data local infile 'scaffolds.coords' into table scaffoldCoords
  # calculate maximum coords; check that start coord is always 1
  /cluster/home/heather/bin/i386/GetMaxCoord > getMaxCoord.bosTau1
  # edit chromInfo.sql; allow fileName to be null
  cp ~heather/kent/src/hg/lib/chromInfo.sql .
  hgsql bosTau1 < chromInfo.sql
  load data local infile 'getMaxCoord.bosTau1' into table chromInfo
  update chromInfo set fileName = "/gbdb/bosTau1/nib/bosTau1.2bit"

# REPEATMASKER (DONE, Oct. 5, 2004, Heather)
# using the split scaffold fa files generated earlier
# do a trial run
  ssh hgwdev
  cd /cluster/data/bosTau1/scaffolds/0/0/0
  /cluster/bluearc/RepeatMasker/RepeatMasker -ali -s -spec bos SCAFFOLD1000.fa
# configure
  cd /cluster/data/bosTau1
  mkdir jkStuff
  cp /cluster/data/anoGam1/jkStuff/RMAnopheles jkStuff/RMBosTaurus
  # change references anoGam1 --> bosTau1
  mkdir RMRun

  # /bin/csh makeJoblist-RM.csh

  cd scaffolds
  foreach i (0 1 2 3 4 5 6 7 8 9)
    cd $i
    foreach j (0 1 2 3 4 5 6 7 8 9)
      cd $j
      foreach k (0 1 2 3 4 5 6 7 8 9)
        cd $k
        foreach f (*.fa)
          echo /cluster/data/bosTau1/jkStuff/RMBosTaurus \
	       /cluster/data/bosTau1/scaffolds/$i/$j/$k $f \
	      '{'check out line+ /cluster/data/bosTau1/$i/$j/$k/$f.out'}' \
	  >> /cluster/data/bosTau1/RMRun/RMJobs
	end
      cd ..
      end
    cd ..
    end
  cd ..
  end

  # do the run
  ssh kk
  cd /cluster/data/bosTau1/RMRun
  para create RMJobs
  para try
  para push
  para check
  para time
  etc.

  # concatenate into one output file; took about 90 minutes
  ssh kksilo
  cd /cluster/data/bosTau1
  mkdir repeats
  /bin/tcsh concatRM.tcsh
  cd repeats
  # use grep -v to get rid of all the headers
  # then, add back in an initial header
  # this is so hgLoadOut is happy
  grep SCAFFOLD repeats.all > repeats.clean
  cat repeats.header repeats.clean > repeats.final
  grep "There were no repetitive sequences found" repeats.final > repeats.notfound
  grep -v "There were no repetitive sequences found" repeats.final > repeats.out
  ssh hgwdev
  hgLoadOut bosTau1 repeats.out
  # Strange perc. fields:
  # -2.3 line 925441
  # -18.2 line 1644720
  # -18.2 line 1644722
  hgsql bosTau1
  rename table repeats_rmsk to rmsk

  # select count(*) from rmsk;
  # 4,244,045
  # select count(*) from rmsk where repName like "Bov%";
  # 1,445,972

# SIMPLE REPEATS (DONE, Oct. 6, 2004, Heather)
# put the results throughout the scaffold 0/0/0 directories,
# same as RepeatMasker, to avoid too many files in the same directory
  ssh kksilo
  cd /cluster/data/bosTau1
  mkdir bed
  cd bed
  mkdir simpleRepeat
  cd simpleRepeat

  /bin/csh makeJoblist-trf.csh
  # do the run; took about 12 hours
  tcsh trf-run.csh > & ! trf.log &

  # concatenate into one output file; took about an hour
  /bin/tcsh concatTRF.csh

  # load
  /cluster/bin/i386/hgLoadBed bosTau1 simpleRepeat trf.bed \
    -sqlTable = /cluster/home/heather/kent/src/hg/lib/simpleRepeat.sql

  # Reading trf.all
  # Loaded 248313 elements of size 16
  # Sorted
  # Saving bed.tab
  # Loading bosTau1

# CREATE MASKED FA USING REPEATMASKER AND FILTERED TRF FILES (DONE Oct. 10, 2004, Heather) 

  ssh kksilo
  cd /cluster/data/bosTau1
  /cluster/bin/i386/maskOutFa -soft downloads/linearScaffolds/Btau20040927-freeze-assembly.fa repeats/repeat.out bosTau1.softmask.fa
  # 71 warnings about negative rEnd
  # matches select count(*) from rmsk where repEnd < 0;

  /cluster/bin/i386/maskOutFa -softAdd bosTau1.softmask.fa bed/simpleRepeat/trf.bed bosTau1.softmask2.fa

  # hard masking (Ns instead of lower case) for download files
  # split for use by genscan
  /cluster/bin/i386/maskOutFa bosTau1.softmask2.fa hard bosTau1.hardmask.fa
  mkdir hardmask-split
  /cluster/bin/i386/faSplit about bosTau1.hardmask.fa 2000000 hardmask-split

# REGENERATE 2BIT NIB (DONE, Oct. 10, 2004, Heather)
  ssh kksilo
  cd /cluster/data/bosTau1
  /cluster/bin/i386/faToTwoBit bosTau1.softmask2.fa bosTau1.softmask.2bit
  /cluster/bin/i386/twoBitToFa bosTau1.softmask.2bit check.softmask.fa
  diff -q bosTau1.softmask2.fa check.softmask.fa
  mv bosTau1.2bit bosTau1.2bit.unmasked
  mv bosTau1.softmask.2bit bosTau1.2bit
  # note: size match

# PUT MASKED SEQUENCE OUT FOR CLUSTER RUNS (DONE, Oct. 10, 2004, Heather)
  # could get rid of the nib in this path, 2bit isn't a nib (4bit)
  ssh kkr1u00
  mkdir -p /iscratch/i/bosTau1/nib
  cp -p /cluster/data/bosTau1/bosTau1.2bit /iscratch/i/bosTau1/nib
  iSync

  ssh kksilo
  mkdir -p /cluster/bluearc/bosTau1/nib
  cp -p /cluster/data/bosTau1/nib/bosTau1.2bit /cluster/bluearc/bosTau1/nib

# GENERATE split masked fas for blastz (DONE, Oct. 19, 2004, Heather)
  ssh kkr1u00
  mkdir -p /iscratch/i/bosTau1/splitFas
  cd /cluster/data/bosTau1
  /cluster/bin/i386/faSplit sequence /cluster/data/bosTau1/bosTau1.softmask2.fa 350 \
    /iscratch/i/bosTau1/splitFas
  # slight problem with directory name
  cd /iscratch/i/bosTau1
  mkdir splitDir
  mv splitFas* splitDir
  rmdir splitFas
  # check that I got all scaffolds
  grep SCAFFOLD *.fa > SCAFFOLD.list
  # sync
  /cluster/bin/scripts/iSync

# MAKE 11.OOC FILE FOR BLAT (DONE, Oct. 10, 2004, Heather)
  ssh kkr1u00
  mkdir /cluster/data/bosTau1/bed/ooc
  cd /cluster/data/bosTau1/bed/ooc
  ls -1 /cluster/data/bosTau1/bosTau1.2bit > nib.lst
  /cluster/bin/i386/blat nib.lst /dev/null /dev/null -tileSize=11 \
    -makeOoc=/cluster/bluearc/bosTau1/11.ooc -repMatch=100
  # Wrote 1327650 overused 11-mers to /cluster/bluearc/bosTau1/11.ooc
  cp -p /cluster/bluearc/bosTau1/11.ooc /iscratch/i/bosTau1/
  iSync

# GENBANK
  ssh hgwdev
  cd /cluster/home/heather/kent/src/hg/makeDb/genbank
  # check for missing commits
  diff /cluster/data/genbank/etc/genbank.conf etc/genbank.conf
  # edit etc/genbank.conf and add these lines, starting with the comment:
  # bosTau1 (B. taurus)
  # could get rid of the nib in this path, 2bit isn't a nib (4bit)
  bosTau1.genome = /iscratch/i/bosTau1/nib/bosTau1.2bit
  bosTau1.lift = no
  bosTau1.refseq.mrna.native.load = no
  # bosTau1.genbank.mrna.xeno.load = yes
  bosTau1.genbank.mrna.xeno.load = no
  bosTau1.genbank.est.xeno.load = no
  bosTau1.downloadDir = bosTau1
  bosTau1.perChromTables = no
  cvs commit -m "added cow" etc/genbank.conf
  #revision 1.56

  # edit src/lib/gbGenome.c
  make
  cvs commit -m "added cow" src/lib/gbGenome.c
  # revision 1.19

  # edit src/align/gbBlat
  make
  cvs commit -m "added cow" src/align/gbBlat
  # revision 1.29

  make install-server

  ssh eieio
  cd /cluster/data/genbank
  nice bin/gbAlignStep -srcDb=genbank -type=mrna -initial -verbose=1 bosTau1 &
  # logged to 
  # /cluster/data/genbank/var/build/logs/YYMMDDHHMMSS.bosTau1.initalign.log
  # load
  ssh hgwdev
  cd /cluster/data/genbank
  nice bin/gbDbLoadStep -verbose=1 -drop -initialLoad bosTau1
  # logged to /cluster/data/genbank/var/dbload/hgwdev/logs/YYMMDDHHMMSS.dbload.log

  # ESTs required modification to the build process to deal with the huge
  # number of scaffolds.  Once completed, the following line was
  # added to genbank.conf to enable it's uses:
    bosTau1.mondoTwoBitParts = 5000
  ssh eieio
  cd /cluster/data/genbank
  bin/gbAlignStep -initial -srcDb=genbank -type=est bosTau1
  
  # load the ESTs, reloading mRNAs as well
  ssh hgwdev
  cd /cluster/data/genbank
  nice bin/gbDbLoadStep -drop -initialLoad bosTau1

  # add bosTau1 to list of databases to align in
  #  /cluster/data/genbank/etc/align-genbank

# GC PERCENT (DONE Oct. 17, 2004, Heather)
  # use old-style (non-wiggle)
  # run on kolossus (serialized)
  # use default window size (20K); only applies to 25k scaffolds
  # ran from Friday night 4pm to Sunday morning 7am
  # dominated one CPU
  ssh kolossus
  mkdir /cluster/data/bosTau1/bed/gcPercent
  cd /cluster/data/bosTau1/bed/gcPercent
  # gcPercent modified to recognize 2bit file
  /cluster/bin/x86_64/hgGcPercent -noLoad bosTau1 /gbdb/bosTau1/nib
  ssh hgwdev
  cd /cluster/home/heather/kent/src/hg/lib
  # change index from 12 to 14 characters
  hgsql bosTau1 < gcPercent.sql
  load data local infile 'gcPercent.bed' into table gcPercent
  # 54007 rows

# ALIGN TO HUMAN (BLASTZ)
# Later these notes will be moved to makeHg17.doc
  ssh kk
  cd /cluster/data/hg17/bed
  mkdir blastz.bosTau1.2004-10-20
  ln -s /cluster/data/hg17/bed/blastz.bosTau1.2004-10-20 blastz.bosTau1
  # create DEF file 
  # for now, not doing ABRIDGE_REPEATS
  # this means I don't need to create lineage specific repeats
  # This is because blastz-run wouldn't take advantage of these
  # because my query is in scaffolds

# human vs. cow
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin

ALIGN=blastz-run
BLASTZ=blastz

# Default
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=0

# TARGET: Human
SEQ1_DIR=/scratch/hg/gs.18/build35/bothMaskedNibs
SEQ1_RMSK=
SEQ1_FLAG=
SEQ1_SMSK=
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: Cow
SEQ2_DIR=/iscratch/i/bosTau1/splitDir
SEQ2_RMSK=
SEQ2_FLAG=
SEQ2_SMSK=
SEQ2_IN_CONTIGS=1
SEQ2_CHUNK=10000000
SEQ2_LAP=0

BASE=/cluster/data/hg17/bed/blastz.bosTau1.2004-10-20

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len

'_EOF_'
  # << this line keeps emacs coloring happy
  bash
  cd /cluster/data/hg17/bed/blastz.bosTau1
  source DEF
  mkdir $RAW run.0
  # create S2.len so make-joblist doesn't have to
  /cluster/bin/scripts/blastz-make-joblist $DEF > $BASE/run.0/j
  sh ./xdir.sh
  cd run.0
  # check how many lines in j
  sed -e 's@^blastz-run@/cluster/bin/penn/blastz-run@' j > jobList
  para create jobList
  para try, push check, para push, para check....

  # convert out to lav
  ssh kki
  cd /cluster/data/hg17/bed/blastz.bosTau1
  # run bash shell if not running it already
  source DEF
  mkdir -p $BASE/run.1
  mkdir -p $BASE/lav
  # create a new job list to convert out files to lav
  /cluster/bin/scripts/blastz-make-out2lav $DEF $BASE > run.1/jobList
  cd run.1
  # make sure the job list is OK
  wc -l jobList
  head jobList
  para create jobList
  para try
  para check
  para push

# ALIGN TO HUMAN (BLASTZ) again

    # too many errors from blastz and out2lav
    # repeat in /cluster/data/bosTau1/bed/blastz
    # use same jobList, DEF file, etc.

    # lavToAxt
    ssh kksilo
    cd /cluster/data/bosTau1/bed/blastz
    mkdir axtTemp
    cd lav
    foreach i (*)
        /cluster/bin/i386/catDir $i | /cluster/bin/i386/lavToAxt stdin /cluster/data/hg17/nib \
	  /cluster/data/bosTau1/bosTau1.2bit ../axtTemp/$i.axt
	echo done $i
    end

    # axtChain
    ssh kki
    cd /cluster/data/bosTau1/bed/blastz
    mkdir -p axtChain/run1
    cd axtChain/run1
    mkdir out chainRaw
    ls -1S /cluster/data/bosTau1/bed/blastz/axtTemp/*.axt > input.lst

    cat << '_EOF_' > gsub
    #LOOP
    doChain {check in exists $(path1)} {check out line+ chainRaw/$(root1).chain} {check out line+ out/$(root1).out}
    #ENDLOOP
    '_EOF_'
    # << this line makes emacs coloring happy
    
    # Reuse gap penalties from chicken run.
    cat << '_EOF_' > temp.gap
    tablesize       11
    smallSize       111
    position        1       2       3       11      111     2111    12111   32111   72111   152111  252111
    qGap    325     360     400     450     600     1100    3600    7600    15600   31600   56600
    tGap    325     360     400     450     600     1100    3600    7600    15600   31600   56600
    bothGap 625     660     700     750     900     1400    4000    8000    16000   32000   57000
    '_EOF_'
    # << this line makes emacs coloring happy
    sed 's/  */\t/g' temp.gap > ../../cowHumanTuned.gap
    rm -f temp.gap

    cat << '_EOF_' > doChain
    #!/bin/csh
    axtChain -scoreScheme=/cluster/data/blastz/HoxD55.q \
       -linearGap=/cluster/data/bosTau1/bed/blastz/cowHumanTuned.gap -verbose=0 $1 \
       /iscratch/i/hg17/bothMaskedNibs /iscratch/i/bosTau1/nib/bosTau1.2bit stdout | \
       /cluster/bin/i386/chainAntiRepeat /iscratch/i/hg17/bothMaskedNibs \
       /iscratch/i/bosTau1/nib/bosTau1.2bit stdin $2
'_EOF_'
    
    # << this line makes emacs coloring happy
    chmod a+x doChain
    gensub2 input.lst single gsub jobList
    para create jobList
    para try
    para check
    para push

    # sort
    ssh kksilo
    cd /cluster/data/bosTau1/bed/blastz/axtChain
    /cluster/bin/i386/chainMergeSort run1/chain/*.chain > all.chain
    mv run1/chain run1/chain.orig
    # rm run1/chain/*.chain
    # rm -f ../axtTemp
    /cluster/bin/i386/chainSplit chain all.chain

    # load
    ssh hgwdev
    cd /cluster/data/bosTau1/bed/blastz/axtChain/chain
    foreach i (*.chain)
      set c = $i:r
      echo loading $c
      /cluster/bin/i386/hgLoadChain hg17 ${c}_chainBosTau1 $i
    end

# NET 
# run in stages to avoid memory problems
  ssh kolossus
  cd /cluster/data/bosTau1/bed/blastz/axtChain
  /cluster/bin/x86_64/chainPreNet all.chain ../S1.len ../S2.len chainPreNet.out
  /cluster/home/heather/bin/x86_64/chainNet chainPreNet.out \
    -minSpace=1 ../S1.len ../S2.len hg17.net bosTau1.net
  /cluster/home/heather/bin/x86_64/netSyntenic hg17.net noClass.net
  # memory usage 7955406848, utime 16854 s/100, stime 1375

  ssh kksilo
  cd /cluster/data/bosTau1/bed/blastz/axtChain
  /cluster/bin/i386/netSplit noClass.net noClass
  mkdir ../axtNet
  cd noClass
  foreach i (*.net)
    /cluster/bin/i386/netToAxt $i ../chain/$i:r.chain /cluster/data/hg17/nib /cluster/data/bosTau1/bosTau1.2bit ../../axtNet/$i:r.axt
  end

  cd ..
  mkdir axtNetSort
  foreach f (axtNet/*.axt)
    set c = $f:t:r
    echo "axtSort on $c"
    /cluster/bin/i386/axtSort $f axtNetSort/$c.axt
  end

  mkdir mafNet
  foreach f (axtNetSort/*.axt)
    set c = $f:t:r
    echo "axtToMaf on $c"
    /cluster/bin/i386/axtToMaf $f /cluster/data/hg17/chrom.sizes /cluster/data/bosTau1/chrom.sizes mafNet/$c.maf -tPrefix=hg17. -qPrefix=bosTau1.
  end

    # TODO: Load the nets into database 
    # skipping netClass because of out of memory
    ssh hgwdev
    cd /cluster/data/bosTau1/bed/blastz/axtChain
    /cluster/bin/i386/netFilter -minGap=10 hg17.net | /cluster/bin/i386/hgLoadNet hg17 netBosTau1 stdin

# GC5BASE - (DONE 2004-10-27 - Hiram)
    ssh kksilo
    mkdir /cluster/data/bosTau1/bed/gc5Base
    cd /cluster/data/bosTau1/bed/gc5Base
    hgGcPercent -wigOut -doGaps -file=stdout -win=5 bosTau1 \
      /cluster/data/bosTau1 | wigBedToBinary stdin gc5Base.wig gc5Base.wib
    #       Calculating gcPercent with window size 5
    #       Using twoBit: /cluster/data/bosTau1/bosTau1.2bit
    #       File stdout created
    #	Converted stdin, upper limit 100.00, lower limit 0.00
    #	real    254m41.199s
    #	user    139m32.740s
    #	sys     85m1.450s
    #	Now load those results into the database
    ssh hgwdev
    cd /cluster/data/bosTau1/bed/gc5Base
    mkdir /gbdb/bosTau1/wib
    ln -s `pwd`/gc5Base.wib /gbdb/bosTau1/wib
    hgLoadWiggle -pathPrefix=/gbdb/bosTau1/wib bosTau1 gc5Base gc5Base.wig
    #	The index is no good for this organism due to the scaffold
    #	naming scheme, drop the index and create one that works:
    hgsql -e "drop index chrom on gc5Base;" bosTau1
    hgsql -e "create index chrom on gc5Base (chrom(16));" bosTau1
    #	The speeds up an operation on the hgTables browser by orders of
    #	magnitude - whole genome statistics display

# LOAD GAP & GOLD TABLES FROM AGP (DONE 11/10/04 angie)
    ssh hgwdev
    # There is one line of AGP containing a 0-length contig segment, and 
    # this causes a problem for findBin in hgGoldGapGl.  awk that out:
    awk '$3 != 0 {print;}' \ 
      /cluster/data/bosTau1/downloads/contigs/Btau_v1.0_20040927.agp \
    | hgGoldGapGl -noGl bosTau1 stdin
    # For some reason, the indices did not get built correctly --
    # "show index from gap/gold" shows NULL cardinalities for chrom.  
    # Rebuild indices with "analyze table".
    hgsql bosTau1 -e 'analyze table gold; analyze table gap;'


# GENSCAN (DONE Nov. 17, 2004 Heather)
  # uses hard-masked sequence files
  ssh hgwdev
  mkdir /cluster/data/bosTau1/bed/genscan
  cd /cluster/data/xenTro1/bed/genscan
  cvs co hg3rdParty/genscanlinux
  mkdir gtf pep subopt

  # Run on small cluster (more memory than big cluster).
  ssh kki

  # generate list of hard-masked scaffolds that are not all-N's
  # (genscan crashes if all-N's)
  foreach f ( `ls -1S /cluster/data/bosTau1/hardmask-split/*` )
    egrep '[ACGT]' $f > /dev/null
    if ($status == 0) echo $f >> genome.list
  end
  wc -l genome.list
  # Create gsub
  cat << '_EOF_' > gsub
  #LOOP
  /cluster/bin/x86_64/gsBig {check in line+ $(path1)} {check out line gtf/$(root1).gtf} -trans={check out line pep/$(root1).pep} -subopt={check out line subopt/$(root1).bed} -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=2400000
  #ENDLOOP
  '_EOF_'
  # << this line makes emacs coloring happy
  /cluster/bin/i386/gensub2 genome.list single gsub jobList
  para create jobList
  para try, check, push, check, ...
  ls -1 gtf | wc -l
  endsInLf gtf/*

  # Concatenate
  ssh kksilo
  cd /cluster/data/bosTau1/bed/genscan
  cat gtf/*.gtf > genscan.gtf
  cat pep/*.pep > genscan.pep
  cat subopt/*.bed > genscanSubopt.bed

  # Load
  ssh hgwdev
  cd /cluster/data/bosTau1/bed/genscan
  ldHgGene -gtf bosTau1 genscan genscan.gtf
  hgPepPred bosTau1 generic genscanPep genscan.pep
  hgLoadBed bosTau1 genscanSubopt genscanSubopt.bed
  featureBits bosTau1 genscan
  # 49346362 bases of 2261116798 (2.182%) in intersection



# RE-INDEX TABLES TO ACCOMODATE LONG SCAFFOLD NAMES

  ssh hgwdev
# Note: next time around rmsk index redo won't be necessary,
# because of modifications to hgLoadOut.  Note we're just
# doing an extremely simplified (chrom-only) index in most
# of these cases because the scaffolds are so small.
  hgsql bosTau1 -e 'drop index bin on rmsk'
  hgsql bosTau1 -e 'create index genoName on rmsk(genoName(16))'
  hgsql bosTau1 -e 'drop index genoStart on rmsk'
  hgsql bosTau1 -e 'drop index genoEnd on rmsk'

# Next time around simpleRepeat index redo also not necessary,
# because of changes to simpleRepeat.sql
  hgsql bosTau1 -e 'drop index chrom on simpleRepeat'
  hgsql bosTau1 -e 'drop index chrom_2 on simpleRepeat'
  hgsql bosTau1 -e 'drop index chrom_3 on simpleRepeat'
  hgsql bosTau1 -e 'create index chrom on simpleRepeat(chrom(16),bin)'

# I'm not sure if the all_est/intronEst/all_mrna will need
# redoing next time or not.  Please check with show index from table.
  hgsql bosTau1 -e 'drop index tName on all_est'
  hgsql bosTau1 -e 'drop index tName_2 on all_est'
  hgsql bosTau1 -e 'drop index tname_3 on all_est'
  hgsql bosTau1 -e 'create index tName on all_est(tName(16))'

  hgsql bosTau1 -e 'drop index tName on intronEst'
  hgsql bosTau1 -e 'drop index tName_2 on intronEst'
  hgsql bosTau1 -e 'drop index tname_3 on intronEst'
  hgsql bosTau1 -e 'create index tName on intronEst(tName(16))'

  hgsql bosTau1 -e 'drop index tName on all_mrna'
  hgsql bosTau1 -e 'drop index tName_2 on all_mrna'
  hgsql bosTau1 -e 'drop index tname_3 on all_mrna'
  hgsql bosTau1 -e 'create index tName on all_mrna(tName(16))'

