# for emacs: -*- mode: sh; -*-

mkdir -p /hive/data/genomes/eboVir3/bed/multiz160way
cd /hive/data/genomes/eboVir3/bed/multiz160way

# construct a species list ordered by number of words in the psl pair
# alignment results:
echo KM034562v1 > species.list
for D in ../../lastz160way/KM034562v1/pairs/*
do
  echo -n "${D}: "; zcat ${D}/pslParts/part000.lst.psl.gz \
   | grep -v "^#" | wc 
done | sort -k4n | sed -e 's#../../lastz160way/KM034562v1/pairs/##;' \
   | sed -e 's/:.*//' | grep -v KM034562v1 >> species.list

# verify 160 count
sort -u species.list | wc -l
# 160

# construct 160way.nh tree from that species.list, beginning as so,
with the first two as the first pair:

(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((KM034562v1:0.1,KJ660346v2:0.1):0.1,
KJ660347v2:0.1):0.1,
KJ660348v2:0.1):0.1,
KM034554v1:0.1):0.1,
...
KC545391v1:0.1):0.1,
KC545392v1:0.1):0.1,
JN638998v1:0.1):0.1,
marVir1.NC_024781v1:0.1):0.1,
marVir1.NC_001608v3:0.1);

# construct tree with just the names for multiz:
sed 's/[a-z][a-z]*_//g; s/:[0-9\.][0-9\.]*//g; s/;//; /^ *$/d' \
        160way.nh | xargs echo | sed 's/ //g; s/,/ /g' > tree.nh

# create mafLinks:
mkdir -p /hive/data/genomes/eboVir3/bed/multiz160way/mafLinks
cd /hive/data/genomes/eboVir3/bed/multiz160way/mafLinks

ls ../../lastz160way/KM034562v1/pairs | while read D
do
  onePair="../../lastz160way/KM034562v1/pairs/${D}"
  if [ -d "${onePair}" ]; then
    mafNet=`ls ${onePair}/mafNet/*.maf.gz 2> /dev/null`
    if [ ! -f "${mafNet}" ]; then
      echo "ERROR: can not find mafNet file ${mafNet}" 1>&2
      exit 255
    fi
    D=`echo $D | sed -e 's/marVir1.//'`
    echo ${D} ${mafNet} 1>&2
    zcat ${mafNet} | sed -e "s#^s eboVir2.${D}#s ${D}.${D}#;" \
       | gzip -c > KM034562v1.${D}.maf.gz
  fi
done

# remove the self alignment:
rm KM034562v1.KM034562v1.maf.gz

# leaves 159 files:
ls *.maf.gz | wc -l
# 159

# scan the names to verify sanity:
zcat *.maf.gz | grep "^s " | awk '{print $2}' | sort \
   | uniq -c | sort -rn | less

cd /hive/data/genomes/eboVir3/bed/multiz160way
mkdir run maf
cd run
mkdir penn
cp -p /cluster/bin/penn/multiz.2009-01-21_patched/multiz penn
cp -p /cluster/bin/penn/multiz.2009-01-21_patched/maf_project penn
cp -p /cluster/bin/penn/multiz.2009-01-21_patched/autoMZ penn

ls ../mafLinks | sed -e 's/.maf.gz//; s/KM034562v1.//' > maf.list

cat << '_EOF_' > template
#LOOP
./autoMultiz.csh $(file1) {check out line+ /hive/data/genomes/eboVir3/bed/multiz160way/maf/$(root1).maf}
#ENDLOOP
'_EOF_'
  # << happy emacs


cat << '_EOF_' > autoMultiz.csh
#!/bin/csh -ef
set db = KM034562v1
set c = $1
set result = $2
set run = `/bin/pwd`
set tmp = /dev/shm/$db/multiz.$c
set pairs = /hive/data/genomes/eboVir3/bed/multiz160way/mafLinks
/bin/rm -fr $tmp
/bin/mkdir -p $tmp
/bin/cp -p ../tree.nh ../species.list $tmp
pushd $tmp > /dev/null
foreach s (`/bin/grep -v "$db" species.list`)
    set in = $pairs/$db.$s.maf
echo "looking for: $in"
    set out = $db.$s.sing.maf
    if (-e $in.gz) then
        /bin/zcat $in.gz > $out
        if (! -s $out) then
            echo "##maf version=1 scoring=autoMZ" > $out
        endif
    else if (-e $in) then
        /bin/ln -s $in $out
    else
        echo "##maf version=1 scoring=autoMZ" > $out
    endif
end
set path = ($run/penn $path); rehash
$run/penn/autoMZ + T=$tmp E=$db "`cat tree.nh`" $db.*.sing.maf $c \
        > /dev/null
popd > /dev/null
/bin/rm -f $result.maf
/bin/cp -p $tmp/$c $result.maf
/bin/rm -fr $tmp
'_EOF_'
  # << happy emacs

gensub2 maf.list single template jobList
