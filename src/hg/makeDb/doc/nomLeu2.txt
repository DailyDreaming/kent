# for emacs: -*- mode: sh; -*-

#       DATE:	29-Jun-2011
#       ORGANISM:	Nomascus leucogenys
#       TAXID:	61853
#       ASSEMBLY LONG NAME:	Nleu1.1
#       ASSEMBLY SHORT NAME:	Nleu1.1
#       ASSEMBLY SUBMITTER:	Gibbon Genome Sequencing Consortium
#       ASSEMBLY TYPE:	Haploid
#       NUMBER OF ASSEMBLY-UNITS:	2
#       ASSEMBLY ACCESSION:	GCA_000146795.2
#       ##Below is a 2 column list with assembly-unit id and name.
#       ##The Primary Assembly unit is listed first.
#       GCA_000146805.1	Primary Assembly
#       GCA_000231795.1	non-nuclear

#       FTP-RELEASE DATE: 28-Oct-2011

#       http://www.ncbi.nlm.nih.gov/genome/480
#       http://www.ncbi.nlm.nih.gov/genome/assembly/313108/
#       http://www.ncbi.nlm.nih.gov/bioproject/13975
#       chrMt scaffolds included in the download directory

#       http://www.ncbi.nlm.nih.gov/Traces/wgs/?val=ADFV01
#       Genome Coverage : 5.6x in Q20 bases

#       http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=61853

# rsync://ftp.ncbi.nlm.nih.gov/genbank/genomes/Eukaryotes/vertebrates_mammals/Nomascus_leucogenys/Nleu1.1/

##########################################################################
# Download sequence (DONE - 2012-04-13 - Hiram)
    mkdir /hive/data/genomes/nomLeu2
    cd /hive/data/genomes/nomLeu2
    mkdir genbank
    cd genbank
    time rsync -a -P \
rsync://ftp.ncbi.nlm.nih.gov/genbank/genomes/Eukaryotes/vertebrates_mammals/Nomascus_leucogenys/Nleu1.1/ ./
    #   real    14m52.432s

    # verify the size of the sequence here:
    faSize Primary_Assembly/unplaced_scaffolds/FASTA/unplaced.scaf.fa.gz
    #   2551980185 bases (219594130 N's 2332386055 real 2332386055 upper
    #   0 lower) in 240900 sequences in 1 files
    #   Total size: mean 10593.5 sd 37887.7
    #   min 200 (gi|366711530|gb|ADFV02115282.1|)
    #   max 1003560 (gi|366982705|gb|JH472452.1|) median 706

##########################################################################
# fixup names for UCSC standards (DONE - 2012-04-13 - Hiram)
    mkdir /hive/data/genomes/nomLeu2/ucsc
    cd /hive/data/genomes/nomLeu2/ucsc

    ########################  Unplaced scaffolds
    # verify we don't have any .acc numbers different from .1
    zcat \
    ../genbank/Primary_Assembly/unplaced_scaffolds/AGP/unplaced.scaf.agp.gz \
	| cut -f1 | egrep "^JH|^ADFV" \
	| sed -e 's/^JH[0-9][0-9]*//; s/^ADFV[0-9][0-9]*//' | sort | uniq -c
    #   868326 .1

    # this is like the unplaced.pl script in other assemblies except it
    #	does not add chrUn_ to the names since they are all just scaffolds

    cat << '_EOF_' > unplaced.pl
#!/bin/env perl

use strict;
use warnings;

my $agpFile =  "../genbank/Primary_Assembly/unplaced_scaffolds/AGP/unplaced.scaf.agp.gz";
my $fastaFile =  "../genbank/Primary_Assembly/unplaced_scaffolds/FASTA/unplaced.scaf.fa.gz";
open (FH, "zcat $agpFile|") or die "can not read $agpFile";
open (UC, "|gzip -c > unplaced.agp.gz") or die "can not write to unplaced.agp.gz";
while (my $line = <FH>) {
    if ($line =~ m/^#/) {
        print UC $line;
    } else {
        $line =~ s/\.1//;    
        printf UC "%s", $line;
    }
}
close (FH);
close (UC);

open (FH, "zcat $fastaFile|") or die "can not read $fastaFile";
open (UC, "|gzip -c > unplaced.fa.gz") or die "can not write to unplaced.fa.gz";
while (my $line = <FH>) {
    if ($line =~ m/^>/) {
        chomp $line;
        $line =~ s/.*gb\|//;
        $line =~ s/\|.*//;
        $line =~ s/\.1//;    
        printf UC ">$line\n";
    } else {
        print UC $line;
    }
}
close (FH);
close (UC);
'_EOF_'
    # << happy emacs
    chmod +x unplaced.pl
    time ./unplaced.pl
    #   real    11m26.151s

    # verify nothing lost from original:
    time faSize *.fa.gz
    #   2551980185 bases (219594130 N's 2332386055 real 2332386055 upper
    #   0 lower) in 240900 sequences in 1 files
    #   Total size: mean 10593.5 sd 37887.7 min 200 (ADFV02115282)
    #   max 1003560 (JH472452) median 706

    # make sure none of the names got to be over 31 characers long:
    zcat *.agp.gz | grep -v "^#" | cut -f1 | awk '{print length($0)}' \
        | sort -rn | uniq -c | head
    #   181924 12
    #   686402 8

##########################################################################
# Initial makeGenomeDb.pl (DONE - 2012-04-13 - Hiram)
    cd /hive/data/genomes/nomLeu2
    # mitoAcc - chrMt sequence is included in the download files
    cat << '_EOF_' > nomLeu2.config.ra
# Config parameters for makeGenomeDb.pl:
db nomLeu2
clade mammal
genomeCladePriority 13
scientificName Nomascus leucogenys
commonName Gibbon
assemblyDate Jun. 2011
assemblyLabel Gibbon Genome Sequencing Consortium Nleu1.1 (NCBI project 13975, GCA_000146795.2, WGS ADFV01)
assemblyShortLabel GGSC Nleu1.1
ncbiAssemblyName Nleu1.1
ncbiAssemblyId 325108
orderKey 329
mitoAcc none
fastaFiles /hive/data/genomes/nomLeu2/ucsc/*.fa.gz
agpFiles /hive/data/genomes/nomLeu2/ucsc/*.agp.gz
# qualFiles none
dbDbSpeciesDir gibbon
taxId 61853
'_EOF_'
    # << happy emacs

    # verify sequence and agp are OK
    time makeGenomeDb.pl -workhorse=hgwdev -fileServer=hgwdev -dbHost=hgwdev \
        -stop=agp nomLeu2.config.ra > agp.log 2>&1
    #   real    1m56.055s
    # verify OK:
    tail -1 agp.log
    #   *** All done!  (through the 'agp' step)

    # finish it off
    time makeGenomeDb.pl -continue=db -workhorse=hgwdev -fileServer=hgwdev \
        -dbHost=hgwdev nomLeu2.config.ra > db.log 2>&1
    #   real    21m20.515s
    #	add the trackDb entries to the source tree, and the 2bit link:
    ln -s `pwd`/nomLeu2.unmasked.2bit /gbdb/nomLeu2/nomLeu2.2bit
    #	browser should function now

#########################################################################
# running repeat masker (DONE - 2012-04-13 - Hiram)
    mkdir /hive/data/genomes/nomLeu2/bed/repeatMasker
    cd /hive/data/genomes/nomLeu2/bed/repeatMasker
    time doRepeatMasker.pl -buildDir=`pwd` -noSplit \
	-bigClusterHub=swarm -dbHost=hgwdev -workhorse=hgwdev \
	-smallClusterHub=encodek nomLeu2 > do.log 2>&1 &
XXX - running - Fri Apr 13 12:22:37 PDT 2012
    #   real    990m24.340s

    cat faSize.rmsk.txt
    #   2808525991 bases (289538800 N's 2518987191 real 1404190109 upper
    #   1114797082 lower) in 4583 sequences in 1 files
    #   Total size: mean 612813.9 sd 9553116.1 min 100 (GL895433-1)
    #   max 315321322 (chr1) median 25278
    #   %39.69 masked total, %44.26 masked real

    egrep -i "versi|relea" do.log
#    April 26 2011 (open-3-3-0) version of RepeatMasker
# CC   RELEASE 20110920; 
# RepeatMasker version development-$Id: RepeatMasker,v 1.26 2011/09/26 16:19:44 angie Exp $

    featureBits -countGaps nomLeu2 rmsk
    #   29525418 bases of 2525996391 (1.169%) in intersection

    # why is it different than the faSize above ?
    # because rmsk masks out some N's as well as bases, the count above
    #	separates out the N's from the bases, it doesn't show lower case N's

##########################################################################
# running simple repeat (DONE - 2012-04-13 - Hiram)
    mkdir /hive/data/genomes/nomLeu2/bed/simpleRepeat
    cd /hive/data/genomes/nomLeu2/bed/simpleRepeat
    time doSimpleRepeat.pl -buildDir=`pwd` -bigClusterHub=swarm \
	-dbHost=hgwdev -workhorse=hgwdev -smallClusterHub=encodek \
	nomLeu2 > do.log 2>&1 &
XXX - running - Fri Apr 13 12:23:16 PDT 2012
    #   real    9m41.939s
    cat fb.simpleRepeat 
    #   29525418 bases of 2525996391 (1.169%) in intersection

    # add to rmsk after it is done:
    cd /hive/data/genomes/nomLeu2
    twoBitMask nomLeu2.rmsk.2bit \
	-add bed/simpleRepeat/trfMask.bed nomLeu2.2bit
    #	you can safely ignore the warning about fields >= 13

    twoBitToFa nomLeu2.2bit stdout | faSize stdin > faSize.nomLeu2.2bit.txt
    cat faSize.nomLeu2.2bit.txt
    #   2808525991 bases (289538800 N's 2518987191 real 1403003553 upper
    #   1115983638 lower) in 4583 sequences in 1 files
    #   Total size: mean 612813.9 sd 9553116.1 min 100 (GL895433-1)
    #   max 315321322 (chr1) median 25278
    #   %39.74 masked total, %44.30 masked real

    rm /gbdb/nomLeu2/nomLeu2.2bit
    ln -s `pwd`/nomLeu2.2bit /gbdb/nomLeu2/nomLeu2.2bit

#########################################################################
# Verify all gaps are marked, add any N's not in gap as type 'other'
#	(DONE - 2012-04-13 - Hiram)
    mkdir /hive/data/genomes/nomLeu2/bed/gap
    cd /hive/data/genomes/nomLeu2/bed/gap
    time nice -n +19 findMotif -motif=gattaca -verbose=4 \
	-strand=+ ../../nomLeu2.unmasked.2bit > findMotif.txt 2>&1
    #	real    0m26.240s
    grep "^#GAP " findMotif.txt | sed -e "s/^#GAP //" > allGaps.bed
    featureBits nomLeu2 -not gap -bed=notGap.bed
    #   2332423317 bases of 2332423317 (100.000%) in intersection

    time featureBits nomLeu2 allGaps.bed notGap.bed -bed=new.gaps.bed
XXX
    wc -l new.gaps.bed
    #   14502 new.gaps.bed
    #   39382069 bases of 2403678276 (1.638%) in intersection
    #   real    2m51.724s

    #	what is the highest index in the existing gap table:
    hgsql -N -e "select ix from gap;" nomLeu2 | sort -n | tail -1
    #	1382
    cat << '_EOF_' > mkGap.pl
#!/bin/env perl

use strict;
use warnings;

my $ix=`hgsql -N -e "select ix from gap;" nomLeu2 | sort -n | tail -1`;
chomp $ix;

open (FH,"<new.gaps.bed") or die "can not read new.gaps.bed";
while (my $line = <FH>) {
    my ($chrom, $chromStart, $chromEnd, $rest) = split('\s+', $line);
    ++$ix;
    printf "%s\t%d\t%d\t%d\tN\t%d\tother\tyes\n", $chrom, $chromStart,
        $chromEnd, $ix, $chromEnd-$chromStart;
}
close (FH);
'_EOF_'
    # << happy emacs
    chmod +x ./mkGap.pl
    ./mkGap.pl > other.bed
    featureBits -countGaps nomLeu2 other.bed
    #   702334 bases of 2808525991 (0.025%) in intersection
    wc -l other.bed
    #	14502
    hgLoadBed -sqlTable=$HOME/kent/src/hg/lib/gap.sql \
	-noLoad nomLeu2 otherGap other.bed
    #   Read 14502 elements of size 8 from other.bed
    #	starting with this many
    hgsql -e "select count(*) from gap;" nomLeu2
    #	 169119
    hgsql nomLeu2 -e 'load data local infile "bed.tab" into table gap;'
    #	result count:
    hgsql -e "select count(*) from gap;" nomLeu2
    #	183621
    # == 14502 + 169119
    # verify we aren't adding gaps where gaps already exist
    # this would output errors if that were true:
    gapToLift -minGap=1 nomLeu2 nonBridged.lift -bedFile=nonBridged.bed
    #   one of these new ones is adjacent to an existing gap:
# WARNING: overlapping gap at chr1:16262949-16312949(fragment) and chr1:16312949-16312957(other)

    # see example in danRer7.txt
    # are there non-bridged gaps here:
    hgsql -N -e "select bridge from gap;" nomLeu2 | sort | uniq -c
    #  169119 no
    #   14502 yes

##########################################################################
## WINDOWMASKER (DONE - 2012-04-13 - Hiram)
    mkdir /hive/data/genomes/nomLeu2/bed/windowMasker
    cd /hive/data/genomes/nomLeu2/bed/windowMasker
    time nice -n +19 doWindowMasker.pl -buildDir=`pwd` -workhorse=hgwdev \
	-dbHost=hgwdev nomLeu2 > do.log 2>&1 &
XXX - running - Fri Apr 13 12:23:38 PDT 2012
    #   real    224m8.502s

    # Masking statistics
    twoBitToFa nomLeu2.wmsk.2bit stdout | faSize stdin
    #   2808525991 bases (289538800 N's 2518987191 real 1636028761 upper
    #   882958430 lower) in 4583 sequences in 1 files
    #   Total size: mean 612813.9 sd 9553116.1 min 100 (GL895433-1)
    #   max 315321322 (chr1) median 25278
    #   %31.44 masked total, %35.05 masked real

    twoBitToFa nomLeu2.wmsk.sdust.2bit stdout | faSize stdin
    #   2808525991 bases (289538800 N's 2518987191 real 1622625959 upper
    #   896361232 lower) in 4583 sequences in 1 files
    #   Total size: mean 612813.9 sd 9553116.1 min 100 (GL895433-1)
    #   max 315321322 (chr1) median 25278
    #   %31.92 masked total, %35.58 masked real

    hgLoadBed nomLeu2 windowmaskerSdust windowmasker.sdust.bed.gz
    #   Read 13770155 elements of size 3 from windowmasker.sdust.bed.gz

    featureBits -countGaps nomLeu2 windowmaskerSdust
    #   1185785055 bases of 2808525991 (42.221%) in intersection

    #	eliminate the gaps from the masking
    featureBits nomLeu2 -not gap -bed=notGap.bed
    #   2525294057 bases of 2525294057 (100.000%) in intersection
    time nice -n +19 featureBits nomLeu2 windowmaskerSdust notGap.bed \
        -bed=stdout | gzip -c > cleanWMask.bed.gz
    #   902560289 bases of 2525294057 (35.741%) in intersection
    #   real    3m46.190s

    #	reload track to get it clean
    hgLoadBed nomLeu2 windowmaskerSdust cleanWMask.bed.gz
    #   Read 13751189 elements of size 4 from cleanWMask.bed.gz
    featureBits -countGaps nomLeu2 windowmaskerSdust
    #   902560289 bases of 2808525991 (32.136%) in intersection
    zcat cleanWMask.bed.gz \
	| twoBitMask ../../nomLeu2.unmasked.2bit stdin \
	    -type=.bed nomLeu2.cleanWMSdust.2bit
    twoBitToFa nomLeu2.cleanWMSdust.2bit stdout | faSize stdin \
        > nomLeu2.cleanWMSdust.faSize.txt
    cat nomLeu2.cleanWMSdust.faSize.txt
    #   2808525991 bases (289538800 N's 2518987191 real 1622625959 upper
    #   896361232 lower) in 4583 sequences in 1 files
    #   Total size: mean 612813.9 sd 9553116.1 min 100 (GL895433-1)
    #   max 315321322 (chr1) median 25278
    #   %31.92 masked total, %35.58 masked real

    # how much does this window masker and repeat masker overlap:
    featureBits -countGaps nomLeu2 rmsk windowmaskerSdust
    #   660954442 bases of 2808525991 (23.534%) in intersection

#########################################################################
# MASK SEQUENCE WITH WM+TRF (DONE - 2012-04-13 - Hiram)
    #	since rmsk masks so very little of the genome, use the clean WM mask
    #	on the genome sequence
#    cd /hive/data/genomes/nomLeu2
#    twoBitMask -add bed/windowMasker/nomLeu2.cleanWMSdust.2bit \
#	bed/simpleRepeat/trfMask.bed nomLeu2.2bit
    #	safe to ignore the warnings about BED file with >=13 fields
#    twoBitToFa nomLeu2.2bit stdout | faSize stdin > faSize.nomLeu2.txt
#    cat faSize.nomLeu2.txt
    #   927696114 bases (111611440 N's 816084674 real 607935500 upper
    #   208149174 lower) in 5678 sequences in 1 files
    #   Total size: mean 163384.3 sd 1922194.0 min 1000 (AERX01077754-1)
    #   max 51042256 (chrLG7) median 2009
    #   %22.44 masked total, %25.51 masked real

    #	create symlink to gbdb
#    rm /gbdb/nomLeu2/nomLeu2.2bit
#    ln -s `pwd`/nomLeu2.2bit /gbdb/nomLeu2/nomLeu2.2bit

########################################################################

