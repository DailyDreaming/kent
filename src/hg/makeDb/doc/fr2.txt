# for emacs: -*- mode: sh; -*-


# This file describes browser build for the Medaka
# genome, Takifugu rubripes, October 2004, MEDAKA1 from
#       Institute of Genetics (NIG) and the University of Tokyo
#       NIG: http://dolphin.lab.nig.ac.jp/medaka/
#       UTGB: http://medaka.utgenome.org/o
#       Data release policy: http://medaka.utgenome.org/#policy
#       Ensembl: http://www.ensembl.org/Oryzias_latipes/index.html
#
#       "$Id: fr2.txt,v 1.7 2007/01/29 18:39:33 hiram Exp $"
#

##########################################################################
### Fetch sequence       (DONE - 2007-01-22 - Cory McLean and Hiram)
  ssh kkstore02
  mkdir /cluster/store5/fr2
  ln -s /cluster/store5/fr2 /cluster/data/fr2
  cd /cluster/data/fr2
  mkdir jgi
  cd jgi
  cat << '_EOF_' > fetch.sh
#!/bin/sh

wget --timestamping "ftp://ftp.jgi-psf.org/pub/JGI_data/Fugu/v4.0/*"

gunzip fugu.041029.scaffolds.fasta.gz

scaffoldFaToAgp fugu.041029.scaffolds.fasta

gzip fugu.041029.scaffolds.fasta
'_EOF_'
    # << happy emacs
    chmod +x fetch.sh
    ./fetch.sh

##########################################################################
#  Run the makeGenomeDb.pl script (DONE - 2007-01-22 - Cory and Hiram)
    # prepare for the makeGenomeDb.pl script:
    ssh hgwdev
    cd /cluster/data/fr2
    #   the config.ra script pretty much specifies everything
    cat << '_EOF_' >  config.ra
db fr2
scientificName Takifugu Rubripes
assemblyDate Oct. 2004
assemblyLabel JGI V4.0
# orderKey = fr1.orderKey - 1
orderKey 464
#       NC_004299.1
mitoAcc 23397366
fastaFiles /cluster/data/fr2/jgi/fugu.041029.scaffolds.fasta.gz
dbDbSpeciesDir fugu
agpFiles /cluster/data/fr2/jgi/fugu.041029.scaffolds.agp
commonName Fugu
clade Vertebrate
genomeCladePriority 110
'_EOF_'
    # << happy emacs

    makeGenomeDb.pl config.ra > mgdb.out 2>&1
    #	This sequence creates and loads the following files into the
    #	new database oryLat1
    #	chr*_gap, chr*_gold, chromInfo, gc5Base, grp
    #	And, when you follow the instructions it gives at the end to check in
    #	the trackDb files it creates, and you do a make in your trackDb
    #	hierarchy, you will then create the trackDb and hgFindSpec tables
    #	(with a 'make alpha') or your specific trackDb_logname
    #	hgFindSpec_logname with a simple 'make' with no arguments.
    #	The sequence also adds an entry to the dbDb table to turn on this
    #	organism in the drop-down menus

    ############################################
    # Checked in trackDb fr2 files to the source tree.  Instructions
    # located in ~/kent/src/product/README.trackDb
    ssh hgwdev
    cd /gbdb/fr2
    ln -s /cluster/data/fr2/fr2.unmasked.2bit ./fr2.2bit

################################################
## WINDOWMASKER (Working - 2007-01-22 - Cory and Hiram)
  cd /cluster/data/fr2/bed/
  ~/kent/src/hg/utils/automation/doWindowMasker.pl fr2 \
      -workhorse=kolossus > wmRun.log 2>&1 &

  # Save the log
  mv wmRun.log WindowMasker.2007-01-22

  # Masking statistics
  cd WindowMasker.2007-01-22
  twoBitToFa fr2.wmsk.2bit stdout | faSize stdin

  # 400525790 bases (49313545 N's 351212245 real 284686886 upper
  # 66525359 lower)

  hgLoadBed -strict fr2 windowmaskerSdust windowmasker.sdust.bed.gz
  # Loaded 1747418 elements of size 3

#########################################################################
# SIMPLE REPEATS (TRF) (Working 2007-01-22 - Cory and Hiram)
  ssh kolossus
  mkdir /cluster/data/fr2/bed/simpleRepeat
  cd /cluster/data/fr2/bed/simpleRepeat
  time nice -n 19 twoBitToFa ../../fr2.unmasked.2bit stdout \
     | trfBig -trf=/cluster/bin/i386/trf stdin /dev/null \
     -bedAt=simpleRepeat.bed -tempDir=/tmp > trf.log 2>&1 &
  # ~31m
  # Make a filtered version for sequence masking:
  awk '{if ($5 <= 12) print;}' simpleRepeat.bed > trfMask.bed
  splitFileByColumn trfMask.bed trfMaskChrom

  # Load unfiltered repeats into the database:
    ssh hgwdev
    hgLoadBed fr2 simpleRepeat \
      /cluster/data/fr2/bed/simpleRepeat/simpleRepeat.bed \
      -sqlTable=$HOME/kent/src/hg/lib/simpleRepeat.sql

    featureBits fr2 simpleRepeat
    # 9915088 bases of 393312790 (2.521%) in intersection

    featureBits fr1 simpleRepeat
    # 6801339 bases of 315518167 (2.156%) in intersection

#########################################################################
## Add TRF mask to WindowMasker masked sequence
    ssh kkstore02
    cd /cluster/data/fr2
    twoBitMask bed/WindowMasker.2007-01-22/fr2.wmsk.sdust.2bit \
      -add bed/simpleRepeat/trfMask.bed fr2.2bit

    # Received ignorable warning:
    # Warning: BED file bed/simpleRepeat/trfMask.bed has >=13 fields which means it
    # might contain block coordinates, but this program uses only the first three
    # fields (the entire span -- no support for blocks).

    # Make this be the actual file the get DNA browser sees
    ssh hgwdev
    cd /gbdb/fr2/
    rm fr2.2bit
    ln -s /cluster/data/fr2/fr2.2bit fr2.2bit

#########################################################################
## Lift our .2bit file against the .lft file to create a scaffold fasta file
    cd /cluster/data/fr2/jkStuff
    cp ../jgi/fugu.041029.scaffolds.lft liftAll.lft
    cp /cluster/data/tetNig1/jkStuff/lft2BitToFa.pl .
    cd ..
    mkdir noUn
    cd noUn
    time ../jkStuff/lft2BitToFa.pl ../fr2.2bit ../jkStuff/liftAll.lft \
         > chrUn.scaffolds.fa
    # real    5m4.520s

    twoBitToFa -seq=chrM ../fr2.2bit chrM.fa
    faToTwoBit *.fa fr2.scaffolds.2bit
    twoBitInfo *.2bit stdout | sort -k2nr > fr2.scaffolds.sizes


##########################################################################
## Move the data out to the cluster
    cd /san/sanvol1/scratch/
    mkdir fr2
    cd fr2
    cp -p /cluster/data/fr2/jkStuff/liftAll.lft
    cp -p /cluster/data/fr2/chrom.sizes .
    cp -p /cluster/data/fr2/fr2.2bit .
    cp -p /cluster/data/fr2/noUn/*2bit .
    cp -p /cluster/data/fr2/noUn/*sizes .

## Edit the kent/src/hg/makeDb/doc/gasAcu1.txt doc to show what we're going to
## do there.
##
## To display the new chains and nets in the gasAcu1 browser, we had to edit the
## trackDb.ra file to include the new chain and net:
##
## track chainFr2
## shortLabel $o_db Chain
## longLabel $o_Organism ($o_date/$o_db) Chained Alignments
## group compGeno
## priority 140
## visibility hide
## color 100,50,0
## altColor 255,240,200
## matrix 16 91,-90,-25,-100,-90,100,-100,-25,-25,-100,100,-90,-100,-25,-90,91
## spectrum on
## type chain fr2
## otherDb fr2

## track netFr2
## shortLabel $o_db Net
## longLabel $o_Organism ($o_date/$o_db) Alignment Net
## group compGeno
## priority 140.1
## visibility hide
## spectrum on
## type netAlign fr2 chainFr2
## otherDb fr2


## Then we verified that the chain covered a higher percentage of gasAcu1 than fr1 did:
## Look into the gasAcu1.txt file to see the commands going on there.

## Then we needed to update the links to the detail pages of chains and nets: 
## /cluster/home/cmclean/kent/src/hg/makeDb/trackDb/chainFr2.html and netFr2.html

###########################################################

#########################################################################
# MAKE 11.OOC FILE FOR BLAT (DONE - 2007-01-24 - Hiram and Cory)
    # This will find repeats within the genome that should not be matched
    # against. Uses 11-mers.
    # Use -repMatch=128 (based on size -- for human we use 1024, and
    # fugu size is ~12% of human judging by gapless fr2 vs. hg18
    # genome sizes from featureBits.

    featureBits hg18 gap
    featureBits -countGaps hg18 gap
    
    ssh kolossus
    blat /cluster/data/fr2/fr2.2bit /dev/null /dev/null -tileSize=11 \
      -makeOoc=/cluster/data/fr2/11.ooc -repMatch=128
    # Wrote 8898 overused 11-mers to /cluster/data/fr2/11.ooc

    cp -p /cluster/data/fr2/11.ooc /cluster/bluearc/fugu/fr2
    cp -p /cluster/data/fr2/jkStuff/liftAll.lft /cluster/bluearc/fugu/fr2

#########################################################################
# GENBANK AUTO UPDATE (WORKING - 2007-01-24 - Hiram and Cory)
    # Make a liftAll.lft that specifies 5M chunks for genbank:
    # Actually not necessary, since our chunks are small enough.  If we had
    # to, would look like this:
#    ssh kkstore05
#   cd /cluster/data/fr2
#   simplePartition.pl fr2.2bit 5000000 /tmp/fr2
#   cat /tmp/fr2/*/*.lft > jkStuff/liftAll.lft
#   rm -r /tmp/fr2

    # align with latest genbank process.
    ssh hgwdev
    cd ~/kent/src/hg/makeDb/genbank
    cvsup
    # edit etc/genbank.conf to add fr2 just after fr1
    # fr2
    fr2.serverGenome = /cluster/data/fr2/fr2.2bit
    fr2.clusterGenome = /cluster/bluearc/fugu/fr2/fr2.2bit
    fr2.ooc = /cluster/bluearc/fugu/fr2/11.ooc
    fr2.align.unplacedChroms = chrUn
    fr2.lift = /cluster/bluearc/fugu/fr2/liftAll.lft
    fr2.refseq.mrna.native.pslCDnaFilter  = ${lowCover.refseq.mrna.native.pslCDnaFilter}
    fr2.refseq.mrna.xeno.pslCDnaFilter    = ${lowCover.refseq.mrna.xeno.pslCDnaFilter}
    fr2.genbank.mrna.native.pslCDnaFilter = ${lowCover.genbank.mrna.native.pslCDnaFilter}
    fr2.genbank.mrna.xeno.pslCDnaFilter   = ${lowCover.genbank.mrna.xeno.pslCDnaFilter}
    fr2.genbank.est.native.pslCDnaFilter  = ${lowCover.genbank.est.native.pslCDnaFilter}
    fr2.genbank.mrna.xeno.loadDesc = yes
    fr2.refseq.mrna.native.load = no
    fr2.refseq.mrna.xeno.load  = no

    cvs ci -m "Added fr2." etc/genbank.conf
    # update /cluster/data/genbank/:
    make etc-update

    # Edit src/lib/gbGenome.c to add new species.  Not necessary here since
    # fugu already exists.
    #
    # cvs ci -m "Added Oryzias latipes (medaka)." src/lib/gbGenome.c
    # make install-server


    cd /cluster/data/genbank
    screen

    # This is a call to a script that will push our jobs out to the cluster
    # since it's a big job.  
    nice -n +19 bin/gbAlignStep -initial fr2 &
    # logFile: var/build/logs/2007.01.24-12:09:11.fr2.initalign.log

    # We had an error because machine kkr4u02 was unable to ssh to.  This
    # happened in the middle of the -run subroutine.
    para problems > problems.out 2>&1
    grep host problems.out | sort | uniq -c | sort -n
    # 62021 host: kkr4u02.kilokluster.ucsc.edu

    parasol list machines | grep kkr4u02
    # kkr4u02.kilokluster.ucsc.edu

    parasol remove machine kkr4u02.kilokluster.ucsc.edu "unable to ssh"

    para push -retries=5
    # updated job database on disk
    # Pushed Jobs: 14820
    # Retried jobs: 14820

    # We still need to finish the rest of the gbAlignStep since it failed
    # because the -run subroutine did not finish correctly.  We must manually
    # call the rest of the routine.
    nice -n 19 bin/gbAlignStep -continue=finish -initial fr2 &
    # logFile: var/build/logs/2007.01.24-15:48:19.fr2.initalign.log



    # load database when finished
    ssh hgwdev
    cd /cluster/data/genbank
    time nice -n +19 ./bin/gbDbLoadStep -drop -initialLoad fr2

    # enable daily alignment and update of hgwdev
    cd ~/kent/src/hg/makeDb/genbank
    cvsup
    # add fr2 to:
        etc/align.dbs
        etc/hgwdev.dbs
    cvs ci -m "Added fr2." etc/align.dbs etc/hgwdev.dbs
    make etc-update

#########################################################################
# ENSEMBL GENES (WORKING - 2007-01-24 - Hiram and Cory)
#  Good luck with the biomart interface.  It seems to be different each time
#  it is used.
    mkdir /cluster/data/fr2/bed/ensembl
    cd /cluster/data/fr2/bed/ensembl
    # Get the ensembl gene data from 
    # http://www.biomart.org/biomart/martview/
    #	
    # Follow this sequence through the pages:
    #	The default dataset will be Human.  In the right side
    #	frame, if you scroll it up and down, you will come to a pull-down
    #	dataset menu where you can select the organism.  There appear to be
    #	two pull-down menus in this frame, one for:
    #	Database: ENSEMBL 42 GENE (SANGER)
    #	and you can select the second:
    #	Dataset: Takifugu rubripes genes (FUGU4)

    #	After selecting the Dataset, in the left frame, click on the
    #	"Attributes" (Structures) label, now the right frame changes to radio
    #	buttons, Features, Sequences, Structures
    #	Click the "Structures" button, the three optional buttons can be
    #	expanded to select elements of these:
    #	REGION:
    #	GENE:
    #	EXON:
    #	REGION: has Chromosome checked
    #	GENE: has Ensembl Gene ID and Biotype selected
    #	EXON: has no selections
    #	In the GENE: menu:
    #	Unselect Biotype
    #	and Select
    #	Ensembl Gene ID
    #	Ensembl Transcript ID
    #	External Gene ID

    #   Click on the "Filters" section on the left-side frame.
    #   Under GENE in the right-side frame, select Gene type checkbox and
    #   highlight "protein_coding".
    #   Check:  Click "Count" from top buttons, and 22,008/22,409 genes will
    #   be reported.    

    #	Then, in the black menu bar above these frames, click the "Results"
    #	it shows the first ten rows.  For this organism, there appear to be no
    #	External Gene ID in the HTML view.  Change the "Display maximum"
    #	"rows as" pull-down
    #	to GFF, and use the "Export all results to" pull-down to
    #	Compressed web file (notify by email), press the "Go" button to download.
    
    #   After retrieving the URL where our data is located
    #   (http://www.biomart.org/biomart/martresults?file=martquery_0124222017_859.txt.gz),
    #   we get it from that place:
    wget http://www.biomart.org/biomart/martresults?file=martquery_0124222017_859.txt.gz \
         -O fr2.ensembl42.gff.gz

    # Ensemble gives us coordinates on each scaffold relative to the beginning
    # of *that scaffold.*  We want to have them in chrUn coordinates instead.
    # We use the liftUp program on the Ensembl data, with our liftAll.lft file
    # we created a long time ago, to achieve this, and name it
    # fr2.ensembl42.protein_coding.gff since we only took the protein coding
    # genes.
    zcat fr2.ensembl42.gff.gz | liftUp -type=.gff fr2.ensembl42.protein_coding.gff \
       ../../jkStuff/liftAll.lft error stdin 

    # On other files, sometimes we need to massage the input names to match
    # the UCSC naming conventions.  Below is an example, though it was not
    # necessary today.
    # Add "chr" to front of each line in the gene data gtf file to make 
    # it compatible with our software, and liftUp to get scaffolds onto chrUn
    #	The scaffolds and ultracontigs mentioned in this are not the scaffolds
    #	we have in our lift file for chrUn ...  can't use them.
    #    zcat oryLat1.ensembl42.gff.gz | egrep -v "scaffold|ultracontig" \
    #	| sed -e "s/^\([0-9][0-9]*\)/chr\1/" | gzip -c > ensembl42.gff.gz
    #	Verify names OK:
    #   zcat ensembl42.gff.gz | awk '{print $1}' | sort | uniq -c
    #	22938 chr1
    #	15887 chr10
    #	18645 chr11
    #	20162 chr12
    #	21474 chr13
    #	21302 chr14
    #	20148 chr15
    #	22978 chr16
    #	26164 chr17
    #	13671 chr18
    #	17109 chr19
    #	10988 chr2
    #	15705 chr20
    #	21361 chr21
    #	21030 chr22
    #	12984 chr23
    #	19009 chr24
    #	21767 chr3
    #	26204 chr4
    #	24335 chr5
    #	24300 chr6
    #	24329 chr7
    #	23323 chr8
    #	27795 chr9


    cd /cluster/data/fr2/bed/ensembl
    ldHgGene -gtf -genePredExt fr2 ensGene fr2.ensembl42.protein_coding.gff
    #   Read 22102 transcripts in 407112 lines in 1 files
    #   22102 groups 1 seqs 1 sources 4 feature types
    #   22102 gene predictions

    # The genome-test database will already populate this into our browser
    # since Ensembl genes are a default track.  However, the link to the
    # Ensembl website is broken because it automatically assumes we are
    # referencing the human genome.  We need to edit the
    # ~/kent/src/hg/makeDb/trackDb/fugu/trackDb.ra file in the ensGene track
    # and update the URL to point to the correct spot.  In this case, we want
    # the incorrect URL:
    # url http://www.ensembl.org/perl/transview?transcript=$$track genscan
    # to the correct URL:
    # url http://dec2006.archive.ensembl.org/Takifugu_rubripes/transview?transcript=$$
    # Also, we add the following lines at the end
    # urlName gene
    # archive dec2006


    ## Now we want to get the proteins that are derived from these genes as a link at
    #  the top of the detail browser.
    # ensGtp associates geneId/transcriptId/proteinId for hgPepPred and 
    # hgKnownToSuper.  Use ensMart to create it as above, except:
    # for the Attributes, choose the "Features" box, and then In "GENE:"
    # select Ensembl Gene ID, Ensembl Transcript ID, Ensembl Peptide ID.  
    # Results, choose txt output and a Compressed web file (notify by email).
    # Save this as
    # ensGtp42.txt.gz
    wget http://www.biomart.org/biomart/martresults?file=martquery_0124225551_471.txt.gz \
        -O ensGtp42.txt.gz
    
    #	Strip the first lines which is merely column heading labels
    zcat ensGtp42.txt.gz | headRest 1 stdin | sed -e "s/ /\t/g" > ensGtp.txt

    # We want to load our genes, but unfortunately the gene names are larger
    # than the standard ensGtp.sql file that the following command handles:
    #    hgLoadSqlTab fr2 ensGtp ~/kent/src/hg/lib/ensGtp.sql ensGtp.txt
    # Instead, we make our own temporary .sql file to handle the insert.
    sed -e "s/20/21/; s/18/21/" ~/kent/src/hg/lib/ensGtp.sql > ensGtp.bigcols.sql;

    # And then perform the insert.
    hgLoadSqlTab fr2 ensGtp ensGtp.bigcols.sql ensGtp.txt
    rm ensGtp.bigcols.sql

    hgsql -N -e "select count(*) from ensGtp;" fr2
    #   +-------+
    #   | 22102 |
    #   +-------+
    wc -l ensGtp.txt
    #   22102 ensGtp.txt

    # Load Ensembl peptides:
    # Get them from ensembl as above in the gene section except for
    # for the Attributes, choose the "Sequences" box, and then 
    # SEQUENCES: Peptide and 
    #	Header Information "Ensembl Transcript ID"
    #	Results output as FASTA
    # Save file as ensPep.fa.gz

    # XXX Still waiting for the proteins to be sent to us so that we can add
    # this part.
    # hgPepPred fr2 generic ensPep ensPep.fa

############################################################################
#  BLATSERVERS ENTRY (DONE - 2007-01-25 - Hiram)
#	After getting a blat server assigned by the Blat Server Gods,
    ssh hgwdev

    hgsql -e 'INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
	VALUES ("fr2", "blat3", "17786", "1", "0"); \
	INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
	VALUES ("fr2", "blat3", "17787", "0", "1");' \
	    hgcentraltest
    #	test it with some sequence

#########################################################################
# BLASTZ/CHAIN/NET Hg18 (DONE - 2007-01-26 - Hiram)
    ##  Swap back to fr2
    mkdir /cluster/data/fr2/bed/blastz.hg18.swap
    cd /cluster/data/fr2/bed/blastz.hg18.swap
    time doBlastzChainNet.pl -verbose=2 \
	/cluster/data/hg18/bed/blastz.fr2.2007-01-24/DEF \
	-chainMinScore=2000 -chainLinearGap=loose \
	-tRepeats=windowmaskerSdust -qRepeats=windowmaskerSdust \
	-bigClusterHub=pk -swap > swap.log 2>&1 &
    #	real    47m14.554s

    ssh hgwdev
    cd /cluster/data/fr2/bed/blastz.hg18.swap
    time nice -n +19 featureBits fr2 chainHg18Link \
	> fb.fr2.chainHg18Link.txt 2>&1 &
    #	42875664 bases of 393312790 (10.901%) in intersection

###########################################################################
# HUMAN (hg18) PROTEINS TRACK (DONE braney 2007-01-26)
    ssh kkstore02
    bash # if not using bash shell already

    mkdir /cluster/data/fr2/blastDb
    cd /cluster/data/fr2
    zcat jgi/fugu.041029.scaffolds.fasta.gz > temp.fa
    faSplit sequence temp.fa 500 blastDb/
    rm temp.fa
    cd blastDb
    for i in *.fa
    do
	/cluster/bluearc/blast229/formatdb -i $i -p F
    done
    rm *.fa

    mkdir -p /san/sanvol1/scratch/fr2/blastDb
    cd /cluster/data/fr2/blastDb
    for i in nhr nin nsq; 
    do 
	echo $i
	cp *.$i /san/sanvol1/scratch/fr2/blastDb
    done

    mkdir -p /cluster/data/fr2/bed/tblastn.hg18KG
    cd /cluster/data/fr2/bed/tblastn.hg18KG
    echo  /san/sanvol1/scratch/fr2/blastDb/*.nsq | xargs ls -S | sed "s/\.nsq//"  > query.lst
    wc -l query.lst
# 495 query.lst

   # we want around 100000 jobs
   calc `wc /cluster/data/hg18/bed/blat.hg18KG/hg18KG.psl | awk "{print \\\$1}"`/\(100000/`wc query.lst | awk "{print \\\$1}"`\)

# 36727/(100000/495) = 181.798650

   mkdir -p /cluster/bluearc/fr2/bed/tblastn.hg18KG/kgfa
   split -l 180 /cluster/data/hg18/bed/blat.hg18KG/hg18KG.psl  /cluster/bluearc/fr2/bed/tblastn.hg18KG/kgfa/kg
   ln -s /cluster/bluearc/fr2/bed/tblastn.hg18KG/kgfa kgfa
   cd kgfa
   for i in *; do 
     nice pslxToFa $i $i.fa; 
     rm $i; 
     done
   cd ..
   ls -1S kgfa/*.fa > kg.lst
   mkdir -p /cluster/bluearc/fr2/bed/tblastn.hg18KG/blastOut
   ln -s /cluster/bluearc/fr2/bed/tblastn.hg18KG/blastOut
   for i in `cat kg.lst`; do  mkdir blastOut/`basename $i .fa`; done
   tcsh
   cd /cluster/data/fr2/bed/tblastn.hg18KG
   cat << '_EOF_' > blastGsub
#LOOP
blastSome $(path1) {check in line $(path2)} {check out exists blastOut/$(root2)/q.$(root1).psl }
#ENDLOOP
'_EOF_'

   cat << '_EOF_' > blastSome
#!/bin/sh
BLASTMAT=/cluster/bluearc/blast229/data
export BLASTMAT
g=`basename $2`
f=/tmp/`basename $3`.$g
for eVal in 0.01 0.001 0.0001 0.00001 0.000001 1E-09 1E-11
do
if /cluster/bluearc/blast229/blastall -M BLOSUM80 -m 0 -F no -e $eVal -p tblastn -d $1 -i $2 -o $f.8
then
        mv $f.8 $f.1
        break;
fi
done
if test -f  $f.1
then
    if /cluster/bin/i386/blastToPsl $f.1 $f.2
    then
        liftUp -nosort -type=".psl" -pslQ -nohead $3.tmp /cluster/data/hg18/bed/blat.hg18KG/protein.lft warn $f.2

        if pslCheck -prot $3.tmp                                                  
        then                                                                      
            mv $3.tmp $3                                                          
            rm -f $f.1 $f.2 $f.3 $f.4
        fi
        exit 0                                                                    
    fi                                                                            
fi                                                                                
rm -f $f.1 $f.2 $3.tmp $f.8 $f.3 $f.4
exit 1
'_EOF_'
    # << happy emacs
    chmod +x blastSome
    gensub2 query.lst kg.lst blastGsub blastSpec
    exit # back to bash
    
    ssh pk
    cd /cluster/data/fr2/bed/tblastn.hg18KG
    para create blastSpec
#    para try, check, push, check etc.

    para time

# Completed: 101475 of 101475 jobs
# CPU time in finished jobs:    3924977s   65416.29m  1090.27h   45.43d  0.124 y
# IO & Wait Time:               1118884s   18648.06m   310.80h   12.95d  0.035 y
# Average job time:                  50s       0.83m     0.01h    0.00d
# Longest finished job:            3925s      65.42m     1.09h    0.05d
# Submission to last job:         46557s     775.95m    12.93h    0.54d

    ssh kkstore04
    cd /cluster/data/fr2/bed/tblastn.hg18KG
    tcsh
    mkdir chainRun
    cd chainRun
    cat << '_EOF_' > chainGsub
#LOOP
chainOne $(path1)
#ENDLOOP
'_EOF_'

    cat << '_EOF_' > chainOne
(cd $1; cat q.*.psl | simpleChain -prot -outPsl -maxGap=75000 stdin /cluster/bluearc/fr2/bed/tblastn.hg18KG/blastOut/c.`basename $1`.psl)
'_EOF_'
    chmod +x chainOne
    ls -1dS /cluster/bluearc/fr2/bed/tblastn.hg18KG/blastOut/kg?? > chain.lst
    gensub2 chain.lst single chainGsub chainSpec
    # do the cluster run for chaining
    ssh kk
    cd /cluster/data/fr2/bed/tblastn.hg18KG/chainRun
    para create chainSpec
    para try, check, push, check etc.

# Completed: 205 of 205 jobs
# CPU time in finished jobs:       2262s      37.70m     0.63h    0.03d  0.000 y
# IO & Wait Time:                 40989s     683.15m    11.39h    0.47d  0.001 y
# Average job time:                 211s       3.52m     0.06h    0.00d
# Longest finished job:             360s       6.00m     0.10h    0.00d
# Submission to last job:          1492s      24.87m     0.41h    0.02d

    ssh kkstore04
    cd /cluster/data/fr2/bed/tblastn.hg18KG/blastOut
    bash # if using another shell
    for i in kg??
    do
       cat c.$i.psl | awk "(\$13 - \$12)/\$11 > 0.6 {print}" > c60.$i.psl
       sort -rn c60.$i.psl | pslUniq stdin u.$i.psl
       awk "((\$1 / \$11) ) > 0.60 { print   }" c60.$i.psl > m60.$i.psl
       echo $i
    done
    sort -T /tmp -k 14,14 -k 16,16n -k 17,17n u.*.psl m60* | uniq > /cluster/data/fr2/bed/tblastn.hg18KG/unliftBlastHg18KG.psl
    cd ..
    pslCheck unliftBlastHg18KG.psl
    liftUp blastHg18KG.psl ../../jkStuff/liftAll.lft warn unliftBlastHg18KG.psl

    # load table 
    ssh hgwdev
    cd /cluster/data/fr2/bed/tblastn.hg18KG
    hgLoadPsl fr2 blastHg18KG.psl

    # check coverage
    featureBits fr2 blastHg18KG 
# 19761405 bases of 393312790 (5.024%) in intersection

    featureBits fr2 refGene:cds blastHg18KG  -enrichment
# ensGene:cds 8.216%, blastHg18KG 5.024%, both 4.401%, cover 53.57%, enrich 10.66x

    ssh kkstore04
    rm -rf /cluster/data/fr2/bed/tblastn.hg18KG/blastOut
    rm -rf /cluster/bluearc/fr2/bed/tblastn.hg18KG/blastOut
#end tblastn
##########################################################################
