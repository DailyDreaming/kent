# for emacs: -*- mode: sh; -*-

# This file describes browser build for the panTro3 chimp genome: October 2010

#############################################################################
# Fetch sequence from genbank (DONE - 2011-02-15 - Hiram)

    mkdir -p /hive/data/genomes/panTro3/genbank
    cd /hive/data/genomes/panTro3/genbank

    time wget --timestamping -r --cut-dirs=6 --level=0 -nH -x \
	--no-remove-listing -np \
"ftp://ftp.ncbi.nlm.nih.gov/genbank/genomes/Eukaryotes/vertebrates_mammals/Pan_troglodytes/Pan_troglodytes-2.1.3/*"

    #	real    56m24.981s
    #	user    0m1.053s
    #	sys     0m8.815s

    # measure total sequence in this assembly
    cd Primary_Assembly
    faSize assembled_chromosomes/FASTA/*.fa.gz \
	unlocalized_scaffolds/FASTA/*.fa.gz unplaced_scaffolds/FASTA/*.fa.gz
# 3307943878 bases (407430668 N's 2900513210 real 2900513210 upper 0 lower)
#	in 24131 sequences in 50 files
# Total size: mean 137082.8 sd 4455051.2 min 373 (gi|284234151|gb|AACZ03151841.1|) max 247518478 (gi|305434869|gb|CM000316.2|) median 2299
# N count: mean 16884.1 sd 887107.9
# U count: mean 120198.6 sd 3921497.1
# L count: mean 0.0 sd 0.0
# %0.00 masked total, %0.00 masked real

#############################################################################
# process into UCSC naming scheme (DONE - 2011-02-17 - Hiram)
    mkdir /hive/data/genomes/panTro3/ucsc
    cd /hive/data/genomes/panTro3/ucsc

    cat << '_EOF_' > toUcsc.pl
#!/bin/env perl

use strict;
use warnings;

my %accToChr;

open (FH, "<../genbank/Primary_Assembly/assembled_chromosomes/chr2acc") or
        die "can not read Primary_Assembly/assembled_chromosomes/chr2acc";
while (my $line = <FH>) {
    chomp $line;
    my ($chrN, $acc) = split('\s+', $line);
    $accToChr{$acc} = $chrN;
}
close (FH);

foreach my $acc (keys %accToChr) {
    my $chrN =  $accToChr{$acc};
    print "$acc $accToChr{$acc}\n";
    open (FH, "zcat ../genbank/Primary_Assembly/assembled_chromosomes/AGP/chr${chrN}.agp.gz|") or die "can not read chr${chrN}.agp.gz";
    open (UC, ">chr${chrN}.agp") or die "can not write to chr${chrN}.agp";
    while (my $line = <FH>) {
        if ($line =~ m/^#/) {
            print UC $line;
        } else {
            $line =~ s/^$acc/chr${chrN}/;
            print UC $line;
        }
    }
    close (FH);
    close (UC);
    open (FH, "zcat ../genbank/Primary_Assembly/assembled_chromosomes/FASTA/chr${chrN}.fa.gz|") or die "can not read chr${chrN}.fa.gz";
    open (UC, ">chr${chrN}.fa") or die "can not write to chr${chrN}.fa";
    while (my $line = <FH>) {
        if ($line =~ m/^>/) {
            printf UC ">chr${chrN}\n";
        } else {
            print UC $line;
        }
    }
    close (FH);
    close (UC);
}
'_EOF_'
    # << happy emacs
    chmod +x toUcsc.pl

    cat << '_EOF_' > unplaced.pl
#!/bin/env perl

use strict;
use warnings;

my $agpFile =  "../genbank/Primary_Assembly/unplaced_scaffolds/AGP/unplaced.scaf.agp.gz";
my $fastaFile =  "../genbank/Primary_Assembly/unplaced_scaffolds/FASTA/unplaced.scaf.fa.gz";
open (FH, "zcat $agpFile|") or die "can not read $agpFile";
open (UC, ">unplaced.agp") or die "can not write to unplaced.agp";
while (my $line = <FH>) {
    if ($line =~ m/^#/) {
        print UC $line;
    } else {
        $line =~ s/\.1//;    
        printf UC "chrUn_%s", $line;
    }
}
close (FH);
close (UC);

open (FH, "zcat $fastaFile|") or die "can not read $fastaFile";
open (UC, ">unplaced.fa") or die "can not write to unplaced.fa";
while (my $line = <FH>) {
    if ($line =~ m/^>/) {
        chomp $line;
        $line =~ s/.*gb\|//;
        $line =~ s/\.1\|.*//;
        printf UC ">chrUn_$line\n";
    } else {
        print UC $line;
    }
}
close (FH);
close (UC);
'_EOF_'
    # << happy emacs
    chmod +x unplaced.pl

    cat << '_EOF_' > unlocalized.pl
#!/bin/env perl

use strict;
use warnings;

my %accToChr;
my %chrNames;

open (FH, "<../genbank/Primary_Assembly/unlocalized_scaffolds/unlocalized.chr2scaf") or
        die "can not read Primary_Assembly/unlocalized_scaffolds/unlocalized.chr2scaf";
while (my $line = <FH>) {
    chomp $line;
    my ($chrN, $acc) = split('\s+', $line);
    $accToChr{$acc} = $chrN;
    $chrNames{$chrN} += 1;
}
close (FH);

foreach my $chrN (keys %chrNames) {
    my $agpFile =  "../genbank/Primary_Assembly/unlocalized_scaffolds/AGP/chr$chrN.unlocalized.scaf.agp.gz";
    my $fastaFile =  "../genbank/Primary_Assembly/unlocalized_scaffolds/FASTA/chr$chrN.unlocalized.scaf.fa.gz";
    open (FH, "zcat $agpFile|") or die "can not read $agpFile";
    open (UC, ">chr${chrN}_random.agp") or die "can not write to chr${chrN}_random.agp";
    while (my $line = <FH>) {
        if ($line =~ m/^#/) {
            print UC $line;
        } else {
	    chomp $line;
	    my (@a) = split('\t', $line);
	    my $acc = $a[0];
	    my $accNo1 = $acc;
	    $accNo1 =~ s/.1$//;
	    die "ERROR: acc not .1: $acc" if ($accNo1 =~ m/\./);
	    die "ERROR: chrN $chrN not correct for $acc"
		if ($accToChr{$acc} ne $chrN);
	    my $ucscName = "chr${chrN}_${accNo1}_random";
	    printf UC "%s", $ucscName;
	    for (my $i = 1; $i < scalar(@a); ++$i) {
		printf UC "\t%s", $a[$i];
	    }
	    printf UC "\n";
        }
    }
    close (FH);
    close (UC);
    printf "chr%s\n", $chrN;
    open (FH, "zcat $fastaFile|") or die "can not read $fastaFile";
    open (UC, ">chr${chrN}_random.fa") or die "can not write to chr${chrN}_random.fa";
    while (my $line = <FH>) {
        if ($line =~ m/^>/) {
	    chomp $line;
	    my $acc = $line;
	    $acc =~ s/.*gb\|//;
	    $acc =~ s/\|.*//;
	    my $accNo1 = $acc;
	    $accNo1 =~ s/.1$//;
	    die "ERROR: acc not .1: $acc" if ($accNo1 =~ m/\./);
	    die "ERROR: chrN $chrN not correct for $acc"
		if ($accToChr{$acc} ne $chrN);
	    my $ucscName = "chr${chrN}_${accNo1}_random";
	    printf UC ">$ucscName\n";
	} else {
	    print UC $line;
	}
    }
    close (FH);
    close (UC);
}
'_EOF_'
    # << happy emacs
    chmod +x unlocalized.pl

    ./toUcsc.pl
    ./unlocalized.pl
    ./unplaced.pl

    # verify nothing lost in the translation
    faSize *.fa
# 3307943878 bases (407430668 N's 2900513210 real 2900513210 upper 0 lower)
#	in 24131 sequences in 50 files
# Total size: mean 137082.8 sd 4455051.2 min 373 (chr1_AACZ03151841_random) max 247518478 (chr2B) median 2299
# N count: mean 16884.1 sd 887107.9
# U count: mean 120198.6 sd 3921497.1
# L count: mean 0.0 sd 0.0
# %0.00 masked total, %0.00 masked real

#############################################################################
# Initial database build (DONE - 2011-02-17 - Hiram)
    cd /hive/data/genomes/panTro3
    cat << '_EOF_' > panTro3.ra
# Config parameters for makeGenomeDb.pl:
db panTro3
scientificName Pan troglodytes
commonName Chimp
assemblyDate Oct. 2010
assemblyShortLabel CGSC 2.1.3
assemblyLabel CGSC 2.1.3 (GCA_000001515.3)
orderKey 23
mitoAcc NC_001643
fastaFiles /hive/data/genomes/panTro3/ucsc/*.fa
agpFiles /hive/data/genomes/panTro3/ucsc/*.agp
# qualFiles none
dbDbSpeciesDir chimp
taxId 9598
'_EOF_'
    # << happy emacs

    time makeGenomeDb.pl -stop=agp -dbHost=hgwdev -fileServer=hgwdev \
	-workhorse=hgwdev -noGoldGapSplit panTro3.ra > makeGenome.agp.log 2>&1
    #	real    3m33.842s

    time makeGenomeDb.pl -continue=db -dbHost=hgwdev -fileServer=hgwdev \
	-workhorse=hgwdev -noGoldGapSplit panTro3.ra > makeGenome.db.log 2>&1
    #	real    22m7.001s

    cat fb.panTro3.gold.gap.txt
    #	3307943878 bases of 3307943878 (100.000%) in intersection

#############################################################################
# reload gold and gap tables (DONE - 2011-02-18 - Hiram)
# the placed scaffolds AGP is much more detailed, lift it to
#	the supercontig AGP locations
    mkdir /hive/data/genomes/panTro3/bed/ctgPos2
    cd /hive/data/genomes/panTro3/bed/ctgPos2
    cat << '_EOF_' > liftAgp.pl
#!/bin/env perl

use strict;
use warnings;

my %contigParts = ();

# read the AGP that needs to be lifted to the other AGP
open (FH, "zcat ../../genbank/Primary_Assembly/placed_scaffolds/AGP/chr*.agp.gz|")
	or die "can not read placed_scaffolds/AGP/chr*.agp.gz";
while (my $line = <FH>) {
    next if ($line =~ m/^#/);
    chomp $line;
    my ($contig, $rest) = split('\s+', $line, 2);
    my $parts = "";
    my $index = 0;
    if (exists($contigParts{$contig})) {
	$parts = $contigParts{$contig};
	$index = scalar(@{$parts});
    } else {
	my @agpLines;
	$parts = \@agpLines;
	$contigParts{$contig} = $parts;
    }
    $parts->[$index] = $line;
}
close (FH);

my $partCount = 0;
my $lineCount = 0;
foreach my $key (keys %contigParts) {
    ++$partCount;
    my $parts = $contigParts{$key};
    $lineCount += scalar(@{$parts});
}

printf STDERR "partCount: $partCount, lineCount: $lineCount\n";

# read the other AGP and lift that first AGP to this one
open (FH, "<../../panTro3.agp") or die "can not read panTro3.agp";
while (my $line = <FH>) {
    chomp $line;
    my @a = split('\s+', $line);
    if (($a[0] =~ m/chrM|_random|chrUn/) || ($a[4] eq "N")) {
	printf "%s\n", $line;
    } else {
	die "ERROR: not 9 fields at $line" if (scalar(@a) != 9);
	my $chr = $a[0];
	my $lift = $a[1] - 1;
	my $contig = $a[5];
	die "ERROR: can not find contig $contig at $line"
	    if (!exists($contigParts{$contig}));
	my $parts = $contigParts{$contig};
	for (my $i = 0; $i < scalar(@{$parts}); ++$i) {
	    my $line = $parts->[$i];
	    my @b = split('\s+', $line);
	    my $start = $b[1] + $lift;
	    my $end = $b[2] + $lift;
	    printf "%s\t%d\t%d", $chr, $start, $end;
	    for (my $i = 3; $i < scalar(@b); ++$i) {
		printf "\t%s", $b[$i];
	    }
	    printf "\n";
	}
    }
}
close (FH);
'_EOF_'
    # << happy emacs
    chmod +x liftAgp.pl
    ./liftAgp.pl > contig.agp
    hgGoldGapGl -noGl -noLoad panTro3 contig.agp
    # take a look at the resulting .tab files, then load into db:
    hgGoldGapGl -noGl panTro3 contig.agp
    # verify nothing lost or gained
    featureBits -or -countGaps panTro3 gold gap
    3307960432 bases of 3307960432 (100.000%) in intersection

    # replace the first agp, but save it for later use
    mv panTro3.agp panTro3.scaffolds.agp
    ln -s bed/ctgPos2/contig.agp panTro3.agp

#############################################################################
# Initial pushQ entry to get QA started on this assembly
#	(DONE - 2011-02-17 - Hiram)
    cd /hive/data/genomes/panTro3
    ln -s `pwd`/panTro3.unmasked.2bit /gbdb/panTro3/panTro3.2bit
    mkdir pushQ
    cd pushQ
    makePushQSql.pl panTro3 > panTro3.pushQ.sql
    scp -p panTro3.pushQ.sql hgwbeta:/tmp
    ssh hgwbeta
    cd /tmp
    hgsql qapushq < panTro3.pushQ.sql 

#############################################################################
# running repeat masker (DONE - 2011-02-22 - Hiram)
    mkdir /hive/data/genomes/panTro3/bed/repeatMasker
    cd /hive/data/genomes/panTro3/bed/repeatMasker
    time doRepeatMasker.pl -buildDir=`pwd` -noSplit \
	-bigClusterHub=swarm -dbHost=hgwdev -workhorse=hgwdev \
	-smallClusterHub=memk panTro3 > do.log 2>&1 &
    #	real    456m48.171s
    egrep "version|RELEASE" do.log
# RepeatMasker version development-$Id: RepeatMasker,v 1.25 2010/09/08 21:32:26 angie Exp $
# CC   RELEASE 20090604;
    # failed during the 'cat' step due to 3 missing sequence numbers,
    cp -p panTro3.fa.out panTro3.fa.out.broken
    # manually remove those three lines
    vi panTro3.fa.out
    #	then manually complete last bit in the 'cat' step:
    /cluster/bin/scripts/extractNestedRepeats.pl panTro3.fa.out \
	> panTro3.nestedRepeats.bed
    #	-rw-rw-r-- 1    58826545 Feb 22 09:20 panTro3.nestedRepeats.bed
    #	continuing with the RM run:
    time doRepeatMasker.pl -buildDir=`pwd` -noSplit \
	-bigClusterHub=swarm -dbHost=hgwdev -workhorse=hgwdev \
	-continue=mask -smallClusterHub=memk panTro3 > mask.log 2>&1 &
    #	real    28m6.877s

    cat faSize.rmsk.txt
# 3307960432 bases (407430668 N's 2900529764 real 1433143490 upper
#	1467386274 lower) in 24132 sequences in 1 files
#	%44.36 masked total, %50.59 masked real


##########################################################################
# running simple repeat (DONE - 2011-02-22 - Hiram)
    mkdir /hive/data/genomes/panTro3/bed/simpleRepeat
    cd /hive/data/genomes/panTro3/bed/simpleRepeat
    time doSimpleRepeat.pl -buildDir=`pwd` -bigClusterHub=swarm \
	-dbHost=hgwdev -workhorse=hgwdev -smallClusterHub=memk \
	panTro3 > do.log 2>&1 &
    #	real    30m3.767s
    #	two failed due to no sequence in inputs 2011-02-17 17:00
    # chr2B:0-50000000 and chr2B:50000000-100000000
    # faSize on both indicates: (50000000 N's 0 real 0 upper 0 lower)
    #	TrfPart/049/049.lst.bed
    #	TrfPart/050/050.lst.bed
    #	create empty results:
    touch  /hive/data/genomes/panTro3/TrfPart/049/049.lst.bed
    touch  /hive/data/genomes/panTro3/TrfPart/050/050.lst.bed
    # run a para time > run.time on memk to get that file to exist:
# Completed: 93 of 95 jobs
# Crashed: 2 jobs
# CPU time in finished jobs:      35389s     589.82m     9.83h    0.41d  0.001 y
# IO & Wait Time:                   468s       7.79m     0.13h    0.01d  0.000 y
# Average job time:                 386s       6.43m     0.11h    0.00d
# Longest finished job:            9452s     157.53m     2.63h    0.11d
# Submission to last job:         10661s     177.68m     2.96h    0.12d

    #	continue
    time doSimpleRepeat.pl -buildDir=`pwd` -bigClusterHub=swarm \
	-dbHost=hgwdev -workhorse=hgwdev -smallClusterHub=memk \
	-continue=filter panTro3 > filter.log 2>&1 &
    # ~ 1 minute
    cat fb.simpleRepeat 
    #	95418830 bases of 2900529764 (3.290%) in intersection

    cd /hive/data/genomes/panTro3
    twoBitMask panTro3.rmsk.2bit \
	-add bed/simpleRepeat/trfMask.bed panTro3.2bit
    #	you can safely ignore the warning about fields >= 13

    twoBitToFa panTro3.2bit stdout | faSize stdin > faSize.panTro3.2bit.txt
    cat faSize.panTro3.2bit.txt
# 3307960432 bases (407430668 N's 2900529764 real 1431641829 upper
#	1468887935 lower) in 24132 sequences in 1 files
#	%44.40 masked total, %50.64 masked real

    # reset symlink to this masked sequence
    rm /gbdb/panTro3/panTro3.2bit
    ln -s `pwd`/panTro3.2bit /gbdb/panTro3/panTro3.2bit

##########################################################################
# add a ctgPos2 track with other names (DONE - 2011-02-17 - Hiram)
    mkdir /hive/data/genomes/panTro3/bed/ctgPos2
    cd /hive/data/genomes/panTro3/bed/ctgPos2

    cat << '_EOF_' > ctgPos2.pl
#!/bin/env perl

use strict;
use warnings;

my %accToChr;

open (FH, "<../../panTro3.scaffolds.agp") or die "can not read panTro3.scaffolds.agp";
while (my $line = <FH>) {
    chomp $line;
    my @a = split('\s+', $line);
    next if ($a[0] =~ m/_random|chrUn/);
    if (scalar(@a) == 9) {
	my $start = $a[1] - 1;
	my $end = $a[2];
	my $size = $end - $start;
	printf "%s\t%d\t%s\t%d\t%d\t%s\n",
            $a[5], $size, $a[0], $start, $end, $a[4];
    }
}
close (FH);

my %accToComponent;
open (FH, "<../../genbank/Primary_Assembly/component_localID2acc") or
	die "can not read component_localID2acc";
while (my $line = <FH>) {
    chomp $line;
    my ($component, $acc) = split('\s+', $line);
    die "duplicate acc: $acc" if (exists($accToComponent{$acc}));
    $accToComponent{$acc} = $component;
}
close (FH);

open (FH, "hgsql -N -e 'select chrom,chromStart,chromEnd,type,frag from gold;' panTro3 | egrep 'chrUn\|_random'|") or die "can not select from gold";
while (my $line = <FH>) {
    chomp $line;
    my ($chr, $start, $end, $type, $acc) = split('\s+', $line);
    die "ERR: can not find acc: $acc" if (!exists($accToComponent{$acc}));
    my $component = $accToComponent{$acc};
    my $size = $end - $start;
    printf "%s\t%d\t%s\t%d\t%d\t%s\n",
	    $component, $size, $chr, $start, $end, $type;
}
close (FH);
'_EOF_'
    # << happy emacs

    ./ctgPos2.pl | sed -e "s/NC_001643/GI:5835121/" > ctgPos2.tab

    # check that we have them all:
    awk '{print $3}' ctgPos2.tab | sort -u | wc -l
    #	24132
    wc -l ../../chrom.sizes
    #	24132 ../../chrom.sizes

    # determine length of unique ctg names:
    awk '{print $1}' ctgPos2.tab | sed -e "s/\.1$//;s/_random//" \
	| awk '{print length($0)}' | sort -rn | head -1
    #	14
    # determine length of unique chrom names:
    awk '{print $3}' ctgPos2.tab | sed -e "s/_random//" \
	| awk '{print length($0)}' | sort -rn | head -1
    #	18

    # customize our sql definition with proper sizes, the 20 and 16 are
    #	unique in this template:
    sed -e "s/20/14/; s/16/18/" $HOME/kent/src/hg/lib/ctgPos2.sql > ctgPos2.sql
    hgLoadSqlTab panTro3 ctgPos2 ctgPos2.sql ctgPos2.tab

##########################################################################
# Marking *all* gaps - they are not all in the AGP file
#	(DONE - 2011-02-18 - Hiram)
    mkdir /hive/data/genomes/panTro3/bed/allGaps
    cd /hive/data/genomes/panTro3/bed/allGaps
    time nice -n +19 findMotif -motif=gattaca -verbose=4 \
	-strand=+ ../../panTro3.unmasked.2bit > findMotif.txt 2>&1
    #	real    1m12.153s
    grep "^#GAP " findMotif.txt | sed -e "s/^#GAP //" > allGaps.bed
    featureBits panTro3 -not gap -bed=notGap.bed
    #	2900583125 bases of 2900583125 (100.000%) in intersection
    #	real    0m18.559s

    time featureBits panTro3 allGaps.bed notGap.bed -bed=new.gaps.bed
    #	53361 bases of 2900583125 (0.002%) in intersection
    #	real    20m48.848s

    #	what is the highest index in the existing gap table:
    hgsql -N -e "select ix from gap;" panTro3 | sort -n | tail -1
    #	3118
    cat << '_EOF_' > mkGap.pl
#!/bin/env perl

use strict;
use warnings;

my $ix=`hgsql -N -e "select ix from gap;" panTro3 | sort -n | tail -1`;
chomp $ix;

open (FH,"<new.gaps.bed") or die "can not read new.gaps.bed";
while (my $line = <FH>) {
    my ($chrom, $chromStart, $chromEnd, $rest) = split('\s+', $line);
    ++$ix;
    printf "%s\t%d\t%d\t%d\tN\t%d\tother\tyes\n", $chrom, $chromStart,
        $chromEnd, $ix, $chromEnd-$chromStart;
}
close (FH);
'_EOF_'
    # << happy emacs
    chmod +x ./mkGap.pl
    ./mkGap.pl > other.bed
    featureBits panTro3 other.bed
    #	53361 bases of 2900583125 (0.002%) in intersection
    #	verify chrom names are OK for index length
    hgLoadBed -sqlTable=$HOME/kent/src/hg/lib/gap.sql \
	-noLoad panTro3 otherGap other.bed
    #	Loaded 96549
    #	adding this many:
    wc -l bed.tab
    #	23478
    #	starting with this many
    hgsql -e "select count(*) from gap;" panTro3
    #	159676
    hgsql panTro3 -e 'load data local infile "bed.tab" into table gap;'
    #	result count:
    hgsql -e "select count(*) from gap;" panTro3
    #	183154 == 159676 + 23478

#########################################################################
