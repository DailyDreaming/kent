#!/bin/csh -f
exit

#############################################################################
# This is the make doc for hg18 ENCODE

#############################################################################
# Create encodeRegions table

    ssh hgwdev
    cd /cluster/data/encode
    mkdir convertHg18
    ln -s convertHg18 hg18
    ln -s convertHg17 hg17
    cd hg18
    hgsql hg17 -N -e "SELECT * FROM encodeRegions ORDER BY name" | \
        liftOver stdin /gbdb/hg17/liftOver/hg17ToHg18.over.chain.gz \
                encodeRegions.tab encodeRegions.unmapped
    hgLoadBed hg18 encodeRegions encodeRegions.bed
    cp encodeRegions.bed ~/browser/ENCODE/build35_regions.bed
    # cvs add, install in /usr/local/apache/htdocs/ENCODE

#############################################################################
# MSA alignments (kate)
#  Submittted by Elliott Margulies, 2007-05-11

    ssh kkstore03
    cd /cluster/data/encode/TBA
    mkdir -p APR-07/lab
    cd APR-07/lab
    wget -r -nv -nd -np ftp://kronos.nhgri.nih.gov/pub/outgoing/elliott/msa/APR-2007/apr_2007_tba_hg18.tar

    cd ..
    mkdir maf
cat > getMafs.csh << 'EOF'
    foreach f (lab/*/*.maf.gz)
        echo $f
        gunzip -c $f | \
            sed 's/^s human\./s hg18./' \
            sed 's/^s cow\./s bosTau2./' \
            sed 's/^s dog\./s canFam2./' \
            sed 's/^s chicken\./s galGal3./' \
            sed 's/^s monodelphis\./s monDom4./' \
            sed 's/^s chimp\./s panTro2./' \
            sed 's/^s macaque\./s rheMac2./' \
            sed 's/^s rat\./s rn4./' \
            sed 's/^s xenopus\./s xenTro2./' \
                        > maf/$f:t:r:r:e.maf
    end
'EOF'
    csh getMafs.csh >&! getMafs.log &

    ssh hgwdev
    cd /cluster/data/encode/TBA/APR-07/maf
    set gdir = /gbdb/hg18/encode/TBA/APR-07/maf
    mkdir -p $gdir
    rm -f $gdir/*.maf
    ln -s /cluster/data/encode/TBA/APR-07/maf/*.maf $gdir
    hgLoadMaf -pathPrefix=$gdir -WARN hg18 encodeTbaAlign >&! load.log
    cat *.maf | hgLoadMafSummary hg18 encodeTbaSummary stdin

##############################################################################
# Lifting rampage (Andy)

ssh hgwdev
bash
cd /cluster/data/encode/convertHg18
/cluster/data/encode/bin/scripts/listEncodeTables.csh hg17 > hg17.tables
wc -l hg17.tables
#554 hg17.tables (dang)

# start with easy beds i.e. the ones like "bed <num> ."

grep "bed.*\." hg17.tables > easyBeds.tables
grep -v "bed.*\." hg17.tables > remaining.tables
wc -l easyBeds.tables
#127 easyBeds.tables
mkdir easyBeds
for fields in 3 4 5 6 9 12; do 
    for table in `grep "bed $fields" easyBeds.tables | cut -f1`; do 
       /cluster/data/encode/bin/scripts/convertBedTable.csh hg17 hg18 \
         $table $fields >> easyBeds.script.log 
       mv $table.* easyBeds/
    done
done
# still got 4 like "bed ." 
egrep -v "bed (3|4|5|6|9|12)" easyBeds.tables
#encodeYaleChIPSTAT1HeLaBingRenSites     encodeChip      bed .
#encodeYaleChIPSTAT1HeLaMaskLess36mer36bpSite    encodeChip      bed .
#encodeYaleChIPSTAT1HeLaMaskLess50mer38bpSite    encodeChip      bed .
#encodeYaleChIPSTAT1HeLaMaskLess50mer50bpSite    encodeChip      bed .
# these are all bed 3
for table in `egrep -v "bed (3|4|5|6|9|12)" easyBeds.tables | cut -f1`; do
       /cluster/data/encode/bin/scripts/convertBedTable.csh hg17 hg18 \
         $table 3 >> easyBeds.script.log
       mv $table.* easyBeds/
done

# ok now there's ones like "bed <num> +"
wc -l remaining.tables
#427 remaining.tables
grep '\+' remaining.tables > plusBed.tables
grep -v '\+' remaining.tables > tmp; mv tmp remaining.tables 
wc -l remaining.tables plusBed.tables 
#  383 remaining.tables
#   44 plusBed.tables
#  427 total
mkdir plusBeds
for fields in 4 5 6 9 12; do
    for table in `grep "bed $fields" plusBed.tables | cut -f1`; do
       /cluster/data/encode/bin/scripts/convertBedTable.csh hg17 hg18 \
         $table $fields >> plusBeds.script.log
       mv $table.* plusBeds/
    done
done

# how about bedGraph ones?
grep bedGraph remaining.tables > bedGraph.tables
grep -v bedGraph remaining.tables > tmp; mv tmp remaining.tables 
wc -l bedGraph.tables remaining.tables 
#  186 bedGraph.tables
#  197 remaining.tables
#  383 total
mkdir bedGraph
for table in `cut -f1 bedGraph.tables`; do
       /cluster/data/encode/bin/scripts/convertBedTable.csh hg17 hg18 \
         $table 4 >> bedGraph.script.log
       mv $table.* bedGraph/
done

######################################
# Continue lifting rampage (ting, 06-07-2007)
#

# Examining remaining.tables
# All GIS tables are bed 12, so lift these
		grep Gis remaining.tables > Gis.tables
		grep -v Gis remaining.tables > tmp; mv tmp remaining.tables
		wc -l Gis.tables remaining.tables
		#    7 Gis.tables
		#  190 remaining.tables
		#  197 total
		mkdir bedGis
		doGis.csh
		# 7 tables lifted.

# 190 remaining.

####################################################
# More lifting (Andy)

ssh hgwdev
bash
cd /cluster/data/encode/convertHg18

# genePred tables
grep genePred remaining.tables > genePred.tables
grep -v genePred remaining.tables > tmp; mv tmp remaining.tables
wc -l genePred.tables remaining.tables 
#  68 genePred.tables
# 122 remaining.tables
# 190 total
mkdir genePred
for table in `cut -f1 genePred.tables`; do
    /cluster/data/encode/bin/scripts/convertGenePredTable.csh hg17 hg18 $table >> genePred.scripts.log;
    mv $table.* genePred/
done
# ERRORS, uh oh
# fixed /cluster/data/encode/bin/scripts/convertGenePredTable.csh
# binned hg17 tables weren't working right.
grep error genePred.scripts.log | sed 's/^.*converting\ \(.*\)\.txt.*$/\1/' > genePredBins.tables
for table in `cat genePredBins.tables`; do
    /cluster/data/encode/bin/scripts/convertGenePredTable.csh hg17 hg18 $table >> genePredBins.scripts.log;
    mv $table.* genePred/
done

# missed bed tables.  There's a few like "bed5FloatScore" and "bed 3", etc.
# these can be treated as normal beds
grep bed remaining.tables | cut -f1,3 | sed 's/bed5FloatScore/bed 5/' > \
  bedOther.tables
grep -v bed remaining.tables > tmp
wc -l bedOther.tables tmp
#  14 bedOther.tables
# 108 tmp
# 122 total
mkdir bedOther
for fields in 3 4 5; do 
    for table in `grep "bed $fields" bedOther.tables | cut -f1`; do 
       /cluster/data/encode/bin/scripts/convertBedTable.csh hg17 hg18 \
         $table $fields >> bedOther.script.log 
       mv $table.* bedOther/
    done
done

# wiggle
# first tally up which ones are in which DBs.  The older ones can go hg16->hg18 instead
# of hg17->hg18.  Make three sets of tables and do set operations:
hgsql hg16 -e 'show tables' > hg16.all.tables
hgsql hg17 -e 'show tables' > hg17.all.tables
grep -v wigMaf remaining.tables | cut -f1 > wig.tables
grep wigMaf remaining.tables > tmp; mv tmp remaining.tables
wc -l wig.tables remaining.tables 
# 119 wig.tables
#   3 remaining.tables
# 122 total
#  OOPS I forgot to subtract the 14 tables from last one.

# How many of the wiggle tables are in hg17?  I hope all 119
grep -Fw -f wig.tables hg17.all.tables | wc -l
# 105
# good.  Ok how about hg16?
grep -Fw -f wig.tables hg16.all.tables | wc -l
# 61
# I guess then hg17 should have 44 newer ones.
grep -Fw -f wig.tables hg16.all.tables > hg16.wig.tables
grep -Fwv -f hg16.wig.tables wig.tables > hg17.wig.tables
wc -l *wig.tables
#  61 hg16.wig.tables
#  44 hg17.wig.tables
# 105 wig.tables
# Awesome.  These two sets shouldn't intersect at all:
grep -Fw -f hg16.wig.tables hg17.wig.tables | wc -l
# 0
# Great.  Now lets move on.  Let's use hgWiggle on each of these tables to 
# fetch the old data.  Then we'll convert that to bed 4, lift that, then 
# run wigEncode on the lifted data.

mkdir ../hg18.wib
mkdir -p /gbdb/hg18/encode/wib

mkdir fromHg16.wig
for table in `cat hg16.wig.tables`; do 
    hgWiggle -db=hg16 $table \
       | grep -v "^#" | awk -f varStepToBed.awk > $table.old.wig
    liftOver -bedPlus=3 -tab $table.old.wig /gbdb/hg16/liftOver/hg16ToHg18.over.chain.gz \
      $table.new.wig $table.unmapped
    sort -k1,1 -k2,2n $table.new.wig > tmp.wig; mv tmp.wig $table.new.wig
    wigEncode $table.new.wig $table.wig $table.wib 2>> wigFromHg16.log
    mv $table.wib ../hg18.wib/
    ln -s /cluster/data/encode/hg18.wib/${table}.wib /gbdb/hg18/encode/wib/${table}.wib
    hgLoadWiggle -pathPrefix=/gbdb/hg18/encode/wib hg18 $table $table.wig
    mv $table.*wig $table.unmapped fromHg16.wig/
done

mkdir fromHg17.wig
for table in `cat hg17.wig.tables`; do
    hgWiggle -db=hg17 $table \
       | grep -v "^#" | awk -f varStepToBed.awk > $table.old.wig
    liftOver -bedPlus=3 -tab $table.old.wig /gbdb/hg17/liftOver/hg17ToHg18.over.chain.gz \
      $table.new.wig $table.unmapped
    sort -k1,1 -k2,2n $table.new.wig > tmp.wig; mv tmp.wig $table.new.wig
    wigEncode $table.new.wig $table.wig $table.wib 2>> wigFromHg17.log
    mv $table.wib ../hg18.wib/
    ln -s /cluster/data/encode/hg18.wib/${table}.wib /gbdb/hg18/encode/wib/${table}.wib
    hgLoadWiggle -pathPrefix=/gbdb/hg18/encode/wib hg18 $table $table.wig
    mv $table.*wig $table.unmapped fromHg17.wig/
done


#############################################################################
# Stanford NRSF ChIP-seq (DONE, Heather, July 2007)

ssh hgwdev
cd /cluster/data/encode/stanford/2007-03-14
liftOver fix.bed /gbdb/hg17/liftOver/hg17ToHg18.over.chain.gz hg18.bed core.unmapped
liftOver control_fix.bed /gbdb/hg17/liftOver/hg17ToHg18.over.chain.gz hg18.control.bed control.unmapped
hgLoadBed hg18 encodeStanfordNRSFEnriched hg18.bed -tab
hgLoadBed hg18 encodeStanfordNRSFControl hg18.control.bed -tab
