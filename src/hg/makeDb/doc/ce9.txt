# for emacs: -*- mode: sh; -*-

# Caenorhabditis elegans
# Washington University School of Medicine GSC and Sanger Institute WS210

#  $Id: ce9.txt,v 1.3 2009/09/24 20:54:24 hiram Exp $

#########################################################################
# DOWNLOAD SEQUENCE (DONE - 2010-07-08 - Hiram)
    mkdir /hive/data/genomes/ce9
    cd /hive/data/genomes/ce9
    mkdir ws210
    cd ws210
    wget --no-parent --timestamping -m -nH --cut-dirs=5 \
	ftp://ftp.sanger.ac.uk/pub/wormbase/WS210/genomes/c_elegans/
    #	about 11 minutes

    mkdir acedb
    cd acedb
    wget --no-parent --timestamping -m -nH --cut-dirs=4 \
	ftp://ftp.sanger.ac.uk/pub/wormbase/WS210/acedb/

#########################################################################
# NORMALIZE SEQUENCE NAMES TO BEGIN WITH chr (DONE - 2010-07-08 - Hiram)
    mkdir /hive/data/genomes/ce9/sanger
    cd /hive/data/genomes/ce9/sanger
    # Fix fasta names:
    zcat ../ws210/sequences/dna/CHR*[XVAI].dna.gz \
    | sed -e '/^$/ d;  s/^>CHROMOSOME_MtDNA/>chrM/;  s/^>CHROMOSOME_/>chr/;' \
    | gzip -c > UCSC.fa.gz
    faCount UCSC.fa.gz 
#seq    len     A       C       G       T       N       cpg
chrI    15072421        4835939 2695879 2692150 4848453 0       503521
chrII   15279323        4878195 2769216 2762198 4869714 0       492149
chrIII  13783685        4444652 2449141 2466322 4423570 0       459669
chrIV   17493784        5711040 3034767 3017008 5730969 0       522372
chrM    13794   4335    1225    2055    6179    0       110
chrV    20924143        6750393 3712058 3701397 6760295 0       638983
chrX    17718854        5747199 3119702 3117868 5734085 0       514715
total   100286004       32371753        17781988        17758998 323732650       3131519

    # Make sure we get the same sizes from this command:
    zcat ../ws210/sequences/dna/CHR*[XVAI].dna.gz | sed -e '/^$/ d;' \
	| faCount stdin

#seq    len     A       C       G       T       N       cpg
CHROMOSOME_I    15072421        4835939 2695879 2692150 4848453 0       503521
CHROMOSOME_II   15279323        4878195 2769216 2762198 4869714 0       492149
CHROMOSOME_III  13783685        4444652 2449141 2466322 4423570 0       459669
CHROMOSOME_IV   17493784        5711040 3034767 3017008 5730969 0       522372
CHROMOSOME_MtDNA        13794   4335    1225    2055    6179    0       110
CHROMOSOME_V    20924143        6750393 3712058 3701397 6760295 0       638983
CHROMOSOME_X    17718854        5747199 3119702 3117868 5734085 0       514715
total   100286004       32371753        17781988        17758998 323732650       3131519

    #	Compare to WS200: +1 in chrII, -3 in chrIII
faCount ../../ce7/sanger/UCSC.fa.gz
#seq    len     A       C       G       T       N       cpg
chrI    15072421        4835939 2695879 2692150 4848453 0       503521
chrII   15279324        4878196 2769216 2762198 4869714 0       492149
chrIII  13783682        4444652 2449139 2466321 4423570 0       459669
chrIV   17493784        5711040 3034767 3017008 5730969 0       522372
chrM    13794   4335    1225    2055    6179    0       110
chrV    20924143        6750393 3712058 3701397 6760295 0       638983
chrX    17718854        5747199 3119702 3117868 5734085 0       514715
total   100286002       32371754        17781986        17758997 323732650       3131519

    # Fix AGP names:
    sed -e 's/^/chr/' ../ws210/sequences/dna/CHR*.agp > UCSC.agp
    # And add a fake mitochondrial AGP entry for the sake of downstream
    # tools (make sure the GenBank sequence is identical to given):
    echo -e "chrM\t1\t13794\t1\tF\tNC_001328.1\t1\t13794\t+" >> UCSC.agp

#########################################################################
# run the makeGenomeDb procedure to create the db and unmasked sequence
#	(DONE - 2010-07-08 - Hiram)
    cd /hive/data/genomes/ce9
    cat << '_EOF_' > ce9.config.ra
# Config parameters for makeGenomeDb.pl:
db ce9
clade worm
genomeCladePriority 10
scientificName Caenorhabditis elegans
commonName C. elegans
assemblyDate Jan 2010
assemblyLabel Washington University School of Medicine GSC and Sanger Institute WS210
assemblyShortLabel WS210
orderKey 823
# mito sequence included in fasta and AGP file
mitoAcc none
fastaFiles /hive/data/genomes/ce9/sanger/UCSC.fa.gz
agpFiles   /hive/data/genomes/ce9/sanger/UCSC.agp
# qualFiles /dev/null
dbDbSpeciesDir worm
taxId 6239
'_EOF_'
    # << emacs

    mkdir jkStuff
    #	run just to AGP to make sure things are sane first
    nice -n +19 makeGenomeDb.pl -noGoldGapSplit ce9.config.ra -stop=agp \
      > jkStuff/makeGenomeDb.agp.log 2>&1
    #	now, continuing to make the Db and all
    time nice -n +19 makeGenomeDb.pl -noGoldGapSplit ce9.config.ra -continue=db \
      > jkStuff/makeGenomeDb.db.log 2>&1
    #	real    1m37.013s
    #	take the trackDb business there and check it into the source tree
    #	fixup the description, gap and gold html page descriptions


#########################################################################
# REPEATMASKER (DONE - 2010-07-08 - Hiram)
    screen 	#	use screen to control the job
    mkdir /hive/data/genomes/ce9/bed/repeatMasker
    cd /hive/data/genomes/ce9/bed/repeatMasker
    time nice -n +19 doRepeatMasker.pl -noSplit -bigClusterHub=pk \
	-buildDir=/hive/data/genomes/ce9/bed/repeatMasker ce9 > do.log 2>&1 &
    #	about 103 minutes

    #	from the do.log:
    #	RepeatMasker version development-$Id:
    #	RepeatMasker,v 1.24 2009/06/08 18:07:05 angie Exp $
    #	CC   RELEASE 20090604;                                            *

#########################################################################
# SIMPLE REPEATS (DONE - 2010-07-09 - Hiram)
    ssh kkstore06
    screen 	#	use screen to control the job
    mkdir /hive/data/genomes/ce9/bed/simpleRepeat
    cd /hive/data/genomes/ce9/bed/simpleRepeat
    time nice -n +19 doSimpleRepeat.pl -smallClusterHub=memk \
	-buildDir=/hive/data/genomes/ce9/bed/simpleRepeat ce9 > do.log 2>&1 &
    #	about 30 minutes

#########################################################################
# MASK SEQUENCE WITH RM+TRF (DONE - 2010-07-09 - Hiram)
    # Since both doRepeatMasker.pl and doSimpleRepeats.pl have completed,
    # now it's time to combine the masking into the final ce9.2bit,
    # following the instructions at the end of doSimpleRepeat's output.
    ssh kolossus
    cd /hive/data/genomes/ce9
    twoBitMask ce9.rmsk.2bit -add bed/simpleRepeat/trfMask.bed ce9.2bit
    # You can safely ignore the warning about extra BED columns
    twoBitToFa ce9.2bit stdout | faSize stdin
# 100286004 bases (0 N's 100286004 real 86863769 upper 13422235 lower)
#	in 7 sequences in 1 files
# %13.38 masked total, %13.38 masked real
    #	set the symlink on hgwdev to /gbdb/ce9
    cd /gbdb/ce9
    ln -s /hive/data/genomes/ce9/ce9.2bit .

#########################################################################
# MAKE 11.OOC FILE FOR BLAT (DONE - 2010-07-09 - Hiram)
    # Use -repMatch=100 (based on size -- for human we use 1024, and 
    # worm size is ~3.4% of human judging by gapless ce4 vs. hg18 genome 
    # size from featureBits. So we would use 34, but that yields a very
    # high number of tiles to ignore, especially for a small more compact 
    # genome.  Bump that up a bit to be more conservative.
    cd /hive/data/genomes/ce9
    blat ce9.2bit /dev/null /dev/null -tileSize=11 \
      -makeOoc=jkStuff/ce9.11.ooc -repMatch=100
    #	Wrote 8514 overused 11-mers to jkStuff/11.ooc
    mkdir /hive/data/staging/data/ce9
    cd  /hive/data/genomes/ce9
    cp -p ce9.2bit jkStuff/ce9.11.ooc chrom.sizes /hive/data/staging/data/ce9

    #	request rsync to cluster nodes

#########################################################################
#  BLATSERVERS ENTRY (DONE - 2010-07-09 - Hiram)
#	After getting a blat server assigned by the Blat Server Gods,
    ssh hgwdev

    hgsql -e 'INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
	VALUES ("ce9", "blat9", "17778", "1", "0"); \
	INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
	VALUES ("ce9", "blat9", "17779", "0", "1");' \
	    hgcentraltest
    #	test it with some sequence

############################################################################
# reset default position, same as ce4 on the ZC101 / unc-52 locus
    ssh hgwdev
    hgsql -e 'update dbDb set defaultPos="chrII:14646344-14667746"
	where name="ce9";' hgcentraltest

############################################################################
# GENBANK AUTO UPDATE (DONE - 2010-09-09 - Hiram)
    # align with latest genbank process.
    ssh hgwdev
    cd ~/kent/src/hg/makeDb/genbank
    git pull
    # edit etc/genbank.conf to add ce9 just before ce6

# ce9 (C. elegans)
ce9.serverGenome = /hive/data/genomes/ce9/ce9.2bit
ce9.clusterGenome = /scratch/data/ce9/ce9.2bit
ce9.ooc = /scratch/data/ce9/ce9.11.ooc
ce9.refseq.mrna.native.pslCDnaFilter  = ${finished.refseq.mrna.native.pslCDnaFilter}
ce9.refseq.mrna.xeno.pslCDnaFilter    = ${finished.refseq.mrna.xeno.pslCDnaFilter}
ce9.genbank.mrna.native.pslCDnaFilter = ${finished.genbank.mrna.native.pslCDnaFilter}
ce9.genbank.mrna.xeno.pslCDnaFilter   = ${finished.genbank.mrna.xeno.pslCDnaFilter}
ce9.genbank.est.native.pslCDnaFilter  = ${finished.genbank.est.native.pslCDnaFilter}
ce9.maxIntron = 100000
ce9.lift = no
ce9.genbank.mrna.xeno.load = yes
ce9.refseq.mrna.xeno.load = yes
ce9.downloadDir = ce9
# ce9.upstreamGeneTbl = refGene
# ce9.upstreamMaf = multiz6way /hive/data/genomes/ce9/bed/multiz6way/species.lst

    git commit -m "Added ce9 C. elegans WS120" etc/genbank.conf
    git push
    # update /cluster/data/genbank/:
    make etc-update

    ssh genbank
    screen		#	use a screen to manage this job
    cd /cluster/data/genbank
    time nice -n +19 bin/gbAlignStep -initial ce9 &
    #	logFile: var/build/logs/2010.09.07-11:34:55.ce9.initalign.log
    #	real    118m26.190s
    # this had a temporary failure:
# Cannot allocate memory
# can't fork
# command failed: gbAlignInstall  -noMigrate -workdir=work/initial.ce9/align -orgCats=native genbank.179.0 daily.0826 mrna ce9 at /cluster/genbank/genbank/bin/../lib/gbCommon.pm line 272. at /cluster/genbank/genbank/bin/../lib/gbCommon.pm line 272.
# command failed: gbAlignFinish -workdir=work/initial.ce9/align  -noMigrate ce9 at /cluster/genbank/genbank/bin/../lib/gbCommon.pm line 272. at /cluster/genbank/genbank/bin/../lib/gbCommon.pm line 272.
    # continuing
    time ./etc/align-genbank -finish -workdir work/initial.ce9/align
    #	var/build/logs/2010.09.09-15:09:26.align.log
    #	real    0m47.281s

    # load database when finished
    ssh hgwdev
    cd /cluster/data/genbank
    time nice -n +19 ./bin/gbDbLoadStep -drop -initialLoad ce9
    #	logFile: var/dbload/hgwdev/logs/2010.09.09-15:11:20.dbload.log
    #	real    24m52.293s

    # enable daily alignment and update of hgwdev
    cd ~/kent/src/hg/makeDb/genbank
    git pull
    # add ce9 to:
        etc/align.dbs
        etc/hgwdev.dbs
    git commit -m "Added ce9 - C. elegans WS210" \
	etc/align.dbs etc/hgwdev.dbs
    git push
    make etc-update

###############################################################################
## RNA sangerGenes (DONE - 2010-09-14 - Hiram)
    mkdir /hive/data/genomes/ce9/bed/sangerNonCoding
    cd /hive/data/genomes/ce9/bed/sangerNonCoding
# scan out lines matching these column 2 words, then see what column 3
#	has to say for the next filter.
for C in I II III IV V X M
do
    echo "chr${C}.gff -> test.chr${C}.gff"
    grep -v "^#" ../sangerGene/chr${C}.gff | awk -F'\t' '
{
    if (match($2,"^Non_coding_transcript|^miRNA|^ncRNA|^rRNA|^scRNA|^snRNA|^snlRNA|^snoRNA|^tRNA|^tRNAscan-SE-1.23")) {
	printf "%s\n", $0
    }
}
' | sort -u | sort -k4n > test.chr${C}.gff
done

for C in I II III IV V X M
do
    echo "chr${C}.gff -> rna.chr${C}.gff"
    grep -v "^#" ../sangerGene/chr${C}.gff | sed -e 's/"//g' | awk -F'\t' '
{
    if (match($2,"^Non_coding_transcript|^miRNA|^ncRNA|^rRNA|^scRNA|^snRNA|^snlRNA|^snoRNA|^tRNA|^tRNAscan-SE-1.23")) {
        if (match($3,"exon|intron")) {
            gsub("Transcript ","",$9)
            gsub(" .*","",$9)
            for (i = 1; i < 9; ++i) {
                printf "%s\t", $i
            }
            printf "%s\n", $9
        }
    }
}
' | sort -u | sort -k4n > rna.chr${C}.gff
done

# scan the column 2 pseudoGene definitions to see what column 3 says
for C in I II III IV V X M
do
    echo "chr${C}.gff -> test.chr${C}.gff"
    grep -v "^#" ../sangerGene/chr${C}.gff | awk -F'\t' '
{
    if (match($2,"^Pseudogene")) {
	printf "%s\n", $0
    }
}
' | sort -u | sort -k4n > test.chr${C}.gff
done

for C in I II III IV V X M
do
    echo "chr${C}.gff -> pseudoGene.chr${C}.gff"
    grep -v "^#" ../sangerGene/chr${C}.gff | sed -e 's/"//g' | awk -F'\t' '
{
    if (match($2,"^Pseudogene")) {
        if (match($3,"exon|intron")) {
            gsub("Pseudogene ","",$9)
            gsub(" .*","",$9)
            gsub("\".*","",$9)
            for (i = 1; i < 9; ++i) {
                printf "%s\t", $i
            }
            printf "%s\n", $9
        }
    }
}
' | sort -u | sort -k4n > pseudoGene.chr${C}.gff
done

    cd /hive/data/genomes/ce9/bed/sangerNonCoding
    ldHgGene -out=sangerRnaGene.gp ce9 sangerRnaGene rna.*.gff
    #	Read 16663 transcripts in 18079 lines in 7 files
    #	16663 groups 7 seqs 10 sources 2 feature types
    #	16663 gene predictions

    ldHgGene ce9 sangerRnaGene rna.*.gff

    ldHgGene -out=sangerPseudoGene.gp ce9 sangerPseudoGene pseudoGene.*.gff
    #	Read 1565 transcripts in 7919 lines in 7 files
    #	1565 groups 6 seqs 1 sources 2 feature types
    #	1565 gene predictions

    ldHgGene ce9 sangerPseudoGene pseudoGene.*.gff

#########################################################################
## SANGER GENE TRACK (DONE - 2010-09-16 - Hiram)
##	There is a tremendous amount of extraneous notations in the gff
##	files.  Filter them down to a manageable set, change the chrom
##	names, eliminate duplicates, select only what will work in
##	ldHgGene.   Plus there is a lot of confusion in the names, ever since
##	the ce4 build.  These notes from Angie are still accurate:
##
# ADJUST KIMEXPDISTANCE NAMES TO MATCH SANGERCANONICAL (DONE 7/12/07 angie)
# kimExpDistance has all [A-Z]+[0-9]+\.[0-9]+ names, but now sangerCanonical
# has some of the new    [A-Z]+[0-9]+\.[0-9]+\.[0-9]+ names, so when hgNear 
# looks for a canonical name in kimExpDistance, it often can't find it.
# Canonical also has     [A-Z]+[0-9]+\.[0-9]+[a-z]
# and                    [A-Z]+[0-9]+\.[0-9]+[a-z]\.[0-9]+
# kimExpDistance has 4   [A-Z]+[0-9]+\.[0-9]+[A-Z]
# Update the names in kimExpDistance to match sangerCanonical.

    mkdir /hive/data/genomes/ce9/bed/sangerGene
    cd /hive/data/genomes/ce9/bed/sangerGene
/hive/data/genomes/ce9/ws210] less genome_feature_tables/GFF2/CHROMOSOME_I.gff

for C in I II III IV V X
do
    echo -n "${C} "
    cat ../../ws210/genome_feature_tables/GFF2/CHROMOSOME_${C}.gff | \
    sed -e "s/CHROMOSOME_III/chrIII/g; s/CHROMOSOME_II/chrII/g; \
        s/CHROMOSOME_IV/chrIV/g; s/CHROMOSOME_I/chrI/g; \
        s/CHROMOSOME_X/chrX/g; s/CHROMOSOME_V/chrV/g; \
        s/CHROMOSOME_M/chrM/g;" \
        -e 's/Sequence "\(.*\)"$/\1/' -e 's/Transcript "\(.*\)"$/\1/' \
        -e 's/CDS "//' -e 's/"//' \
                > chr${C}.gff
done
C=M
echo -n "${C} "
cat ../../ws210/genome_feature_tables/GFF2/CHROMOSOME_MtDNA.gff | \
sed -e "s/CHROMOSOME_III/chrIII/g; s/CHROMOSOME_II/chrII/g; \
    s/CHROMOSOME_IV/chrIV/g; s/CHROMOSOME_I/chrI/g; \
    s/CHROMOSOME_X/chrX/g; s/CHROMOSOME_V/chrV/g; \
    s/CHROMOSOME_M/chrM/g; s/chrMtDNA/chrM/g;" \
    -e 's/Sequence "\(.*\)"$/\1/' -e 's/Transcript "\(.*\)"$/\1/' \
    -e 's/CDS "//' -e 's/"//' \
            > chr${C}.gff

# now filter them to gene definitions
# scan column 2 of these guys to decide on the filter here.
# After applying this column 2 filter, scan column 3 to see what is
# appropriate to filter for column 3.  Use that column 3 in the next
# scan.
for C in I II III IV V X M
do
    echo "chr${C}.gff -> test.chr${C}.gff"
    grep -v "^#" chr${C}.gff | awk -F'\t' '
{
    if (match($2,"curated|Coding_transcript")) {
	printf "%s\n", $0
    }
}
' | sort -u | sort -k4n > test.chr${C}.gff
done

    if (match($2,"curated|Coding_transcript")) {
# now filter them to gene definitions
for C in I II III IV V X M
do
    echo "chr${C}.gff -> filtered.chr${C}.gff"
    grep -v "^#" chr${C}.gff | sed -e 's/"//g' | awk -F'\t' '
{
    if (match($2,"curated|Coding_transcript")) {
	if (match($3,"intron|coding_exon|exon|CDS|three_prime_UTR|five_prime_UTR")) {
	    gsub("coding_exon","CDS",$3)
            gsub("Transcript ","",$9)
            gsub(" .*","",$9)
            gsub("three_prime_UTR","3utr",$3)
            gsub("five_prime_UTR","5utr",$3)
            for (i = 1; i < 9; ++i) {
                printf "%s\t", $i
            }
            printf "%s\n", $9
        }
    }
}
' | sort -u | sort -k4n > filtered.chr${C}.gff
done

# turn them into genePred files
    nice -n +19 ldHgGene -nobin ce9 sangerGene filtered.*.gff
    #	Read 31178 transcripts in 1036352 lines in 7 files
    #	31178 groups 7 seqs 2 sources 5 feature types
    #	31178 gene predictions

    nice -n +19 ldHgGene -nobin ce9 sangerGene filtered.*.gff
    mv genePred.tab filteredGenePred.tab

    # there are a set of names that are merely CDS definitions
    # of the alleles, for example: AC3.5 is CDS for AC3.5.1 and AC3.5.2
    # we do not need the AC3.5

    cat << '_EOF_' > removeNoDotGenes.pl
#!/usr/bin/env perl

use strict;
use warnings;

my %fullNames;
my %minusDotName;

my $done = 0;

while (my $line = <>) {
    chomp $line;
    die "duplicate name $line" if (exists($fullNames{$line}));
    my @a = split('\.', $line);
    die "more than three dots ? $line" if (scalar(@a) > 3);
    my $shortName = $line;
    if (3 == scalar(@a)) {
        $shortName = "$a[0].$a[1]";
        if (exists($minusDotName{$shortName})) {
            $minusDotName{$shortName} .= ",$line";
        } else {
            $minusDotName{$shortName} = $line;
        }
    } elsif (2 == scalar(@a)) {
        $shortName = "$a[0]";
        if (exists($minusDotName{$shortName})) {
            $minusDotName{$shortName} .= ",$line";
        } else {
            $minusDotName{$shortName} = $line;
        }
    }
    $fullNames{$line} = $shortName;
#    printf "$line -> $shortName\n" if ($done < 10);
    ++$done;
}
foreach my $key (keys %fullNames) {
    if (exists($minusDotName{$key})) {
        printf "$key\t$minusDotName{$key}\n";
    }
}
'_EOF_'
    # << happy emacs

    ./removeNoDotGenes.pl < ucsc.allGenes.list | cut -f 1 \
	| sort -u > namesToRemove.list

    for N in `cat namesToRemove.list`
do
    hgsql -N -e "delete from sangerGene where name=\"${N}\";" ce9
done

    cat << '_EOF_' > mkSangerLinks.pl
#!/usr/bin/env perl

use strict;
use warnings;

my %ucscGeneNames; 
my %strippedNames;
open (FH, "<name.sangerGene.txt") or die "can not read name.sangerGene.txt";
while (my $line = <FH>) {
    chomp $line;
    $ucscGeneNames{$line} = 1;
    my @a = split('\.', $line);
    die "more than three dots ? $line" if (scalar(@a) > 3);
    my $shortName = $line;
    if (3 == scalar(@a)) {
        $shortName = "$a[0].$a[1]";
    } elsif (2 == scalar(@a)) {
        $shortName = "$a[0]";
    }
    $strippedNames{$shortName} = $line;
}
close (FH); 

my %geneToProtein;
open (FH, "<protein.tab") or die "can not read protein.tab";
while (my $line = <FH>) {
    chomp $line;
    my ($gene, $protein) = split('\t',$line);
    if (exists($ucscGeneNames{$gene})) {
        if (exists($geneToProtein{$gene})) {
            printf STDERR "duplicate: $gene $protein $geneToProtein{$gene}\n";
        } else {
            $geneToProtein{$gene} = $protein;
        }
    } elsif (exists($strippedNames{$gene})) {
#       my $shortName = $strippedNames{$gene};
        my $shortName = $gene;
        if (exists($geneToProtein{$shortName})) {
            printf STDERR "duplicate: $shortName $protein $geneToProtein{$shortName}\n";
        } else {
            $geneToProtein{$shortName} = $protein;
#           printf "shortName: $line $shortName $protein\n";
        }
    }
}
close (FH);

my $missing = 0;
foreach my $key (sort keys %ucscGeneNames) {
    my @a = split('\.', $key);
    my $shortName = $key;
    if (3 == scalar(@a)) {
        $shortName = "$a[0].$a[1]";
    } elsif (2 == scalar(@a)) {
        $shortName = "$a[0]";
    }
    if (!exists($geneToProtein{$key})) {
        if (!exists($geneToProtein{$shortName})) {
            ++$missing;
            printf STDERR "missing: $key $shortName\n";
            $geneToProtein{$key} = $key;
        } else {
            $geneToProtein{$key} = $geneToProtein{$shortName};
        }
    }
}
printf STDERR "missing proteins: $missing\n";

my %genesDone;
open (SL,">sangerLinks.tab") or die "can not write to sangerLinks.tab";
open (FH, "<paragraph.txt") or die "can not read paragraph.txt";
while (my $line = <FH>) {
    chomp $line;
    my ($name, $descr) = split('\t', $line);
    if (exists($geneToProtein{$name})) {
        printf SL "%s\t%s\t%s\n", $name, $geneToProtein{$name}, $descr;
        $genesDone{$name} = 1;
    }
}
close(FH);

my $noCount = 0;
foreach my $key (sort keys %ucscGeneNames) {
    if (!exists($genesDone{$key})) {
        printf SL "%s\t%s\t(no description)\n", $key, $key;
        ++$noCount;
    }
}
close(SL);
printf STDERR "no description for $noCount genes\n";
'_EOF_'
    # << happy emacs
    chmod +x mkSangerLinks.pl
    ./mkSangerLinks.pl
    #	no description for 150 genes

    hgLoadSqlTab ce9 sangerLinks ~/kent/src/hg/lib/sangerLinks.sql \
	sangerLinks.tab

    hgsql -N -e "select name from sangerGene;" ce9 | sort > name.sangerGene.txt
    sort /hive/data/genomes/ce9/ws210/tarFile/gene_name.txt > orfToGene.txt
    cut -f1 orfToGene.txt | sort > orf.name.list
    comm -23 name.sangerGene.txt orf.name.list > orf.no.match.list

    grep "^>" /hive/data/genomes/ce9/ws210/sequences/protein/wormpep.table210 \
	| sed -e "s/^>//" | sort > wormpep.table210
    join orf.no.match.list wormpep.table210 > orf.missing.txt
    join name.sangerGene.txt orfToGene.txt > orf.matching.txt
    
    cat << '_EOF_' > missingOrf.pl
#!/usr/bin/env perl

use strict;
use warnings;

open (PT, ">protein.tab") or die "can not write to protein.tab";

open (FH, "<orf.missing.txt") or die "can not read orf.missing.txt";
while (my $line = <FH>) {
    chomp $line;
    my ($geneName, $ceName, $wbGene, $others) = split('\s+',$line, 4);
    my @other = split('\s+', $others);
    my $uniProt = "";
    my $proteinId = "";
    my $locus = "";
    my $paragraph = "";
    for (my $i = 0; $i < scalar(@other); ++$i) {
        if ($other[$i] =~ m/^locus:/) {
            $locus = $other[$i];
            $locus =~ s/^locus://;
        } elsif ($other[$i] =~ m/^UniProt:/) {
            $uniProt = $other[$i];
            $uniProt =~ s/^UniProt://;
        } elsif ($other[$i] =~ m/^protein_id:/) {
            $proteinId = $other[$i];
            $proteinId =~ s/^protein_id://;
        } elsif ($other[$i] =~ m/status:/) {
            next;
        } else {
            if (length($paragraph) > 0) {
                $paragraph .= " $other[$i]";
            } else {
                $paragraph = $other[$i];
            }
        }
    }
    if (length($locus) > 0) {
        printf "%s\t%s\n", $geneName, $locus;
    } else {
        printf "%s\t%s\n", $geneName, $geneName;
    }
    if (length($proteinId) > 1) {
        printf PT "%s\t%s\n", $geneName, $proteinId;
    }
    if (length($proteinId) > 1) {
        printf PT "%s\t%s\n", $geneName, $proteinId;
    }

}
close (FH);
close (PT);
'_EOF_'
    # << happy emacs
    chmod +x missingOrf.pl
    ./missingOrf.pl > addTo.orfToGene.txt

    cat addTo.orfToGene.txt orf.matching.txt | tr '[ ]' '[\t]' \
	> fixedOrfToGene.tab

    hgLoadSqlTab ce9 orfToGene ~/kent/src/hg/lib/orfToGene.sql \
	fixedOrfToGene.tab

    cat << '_EOF_' > geneToProtein.pl
#!/usr/bin/env perl

use strict;
use warnings;

open (FH, "sed -e 's/^>//' ../../ws210/sequences/protein/wormpep.table210|") or die "can not read wormpep.table210";
while (my $line = <FH>) {
    chomp $line;
    my ($geneName, $ceName, $wbGene, $others) = split('\s+',$line, 4);
    my @other = split('\s+', $others);
    my $uniProt = "";
    my $proteinId = "";
    my $locus = "";
    my $paragraph = "";
    for (my $i = 0; $i < scalar(@other); ++$i) {
        if ($other[$i] =~ m/^locus:/) {
            $locus = $other[$i];
            $locus =~ s/^locus://;
        } elsif ($other[$i] =~ m/^UniProt:/) {
            $uniProt = $other[$i];
            $uniProt =~ s/^UniProt://;
        } elsif ($other[$i] =~ m/^protein_id:/) {
            $proteinId = $other[$i];
            $proteinId =~ s/^protein_id://;
        } elsif ($other[$i] =~ m/status:/) {
            next;
        } else {
            if (length($paragraph) > 0) {
                $paragraph .= " $other[$i]";
            } else {
                $paragraph = $other[$i];
            }
        }
    }
    if (length($uniProt) > 0) {
        printf "%s\t%s\n", $geneName, $uniProt;
    } elsif (length($proteinId) > 0) {
        printf "%s\t%s\n", $geneName, $proteinId;
    }
}
close (FH);
'_EOF_'
    # << happy emacs
    chmod +x geneToProtein.pl
    ./geneToProtein.pl | sort > protein.tab

    cat ../../ws210/tarFile/chr*.gff | awk '{print $NF}' \
	| sort -u > tar.gene.list
    cat filtered.chr*.gff | awk '{print $NF}' \
	| sort -u > ucsc.filtered.gene.list

    #	obtained tar file with lists from Paul Davis
    #	our genes are a subset since we separate non-coding
    #	using what we already have:
    cut -f1 paragraph.tab | sort > local.paragraph.nameList
    ln -s /hive/data/genomes/ce9/ws210/tarFile/paragraph.txt ./paragraph.txt
    sort paragraph.txt > sort.paragraph.txt
    #	selecting out what they have for our business
    join sort.paragraph.txt local.paragraph.nameList \
	| sed -e "s/ /\t/" > join.local.paragraph.txt

    # Add proteinID field to sangerGene table, used by Gene Sorter
    hgsql -e 'alter table sangerGene add proteinID varchar(40) NOT NULL;' ce9
    # To add index on this column
    hgsql -e 'alter table sangerGene add index(proteinID);' ce9
    # Use SwissProt IDs in sangerLinks table to fill proteinID 
    # column in the sangerGene table
    hgsql -e 'update sangerGene as g, sangerLinks as l \
      set g.proteinID = l.protName where g.name = l.orfName;' ce9
    # check there are rows with the protName field filled
    hgsql -N -e "select proteinId from sangerGene" ce9 | sort | uniq -c | wc -l
    #	23411

    hgPepPred ce9 generic sangerPep ../../ws210/sequences/protein/wormpep210

###############################################################################
######## MAKING GENE SORTER TABLES #### (DONE - 2010-09-09 - Hiram)
## Before starting this, the sangerPep and names need to be fixed
# These are instructions for building the
# Gene Sorter browser.  Don't start these until
# there is a sangerGene table with a proteinID column containing Swiss-Prot
# protein IDs, and also Kim lab expression data is required (in hgFixed).

    mkdir /hive/data/genomes/ce9/bed/geneSorter
    cd /hive/data/genomes/ce9/bed/geneSorter
    # Cluster together various alt-splicing isoforms.
    # Creates the sangerIsoforms and sangerCanonical tables
    # this creates tables: sangerCanonical sangerIsoforms
    hgClusterGenes ce9 sangerGene sangerIsoforms sangerCanonical
    #	Got 19952 clusters, from 31290 genes in 7 chromosomes

    featureBits ce9 sangerCanonical
    #	58389702 bases of 100286004 (58.223%) in intersection
    featureBits ce6 sangerCanonical
    #	57412493 bases of 100281426 (57.251%) in intersection

    # Create Self blastp table - sangerBlastTab
    mkdir -p /hive/data/genomes/ce9/bed/blastTab
    cd /hive/data/genomes/ce9/bed/blastTab

    pepPredToFa hg19 knownGenePep hg19.known.faa
    pepPredToFa ce9 sangerPep ce9.sanger.faa

    cat << '_EOF_' > ce9.config.ra
targetGenesetPrefix sanger
targetDb ce9
queryDbs hg19
hg19Fa /hive/data/genomes/ce9/bed/blastTab/hg19.known.faa
ce9Fa /hive/data/genomes/ce9/bed/blastTab/ce9.sanger.faa
buildDir /hive/data/genomes/ce9/bed/blastTab/ce9
scratchDir /hive/data/genomes/ce9/bed/blastTab/ce9/tmp
'_EOF_'
    # << happy emacs

    mkdir ce9
    time nice -n +19 doHgNearBlastp.pl -targetOnly -noLoad -workhorse=hgwdev \
	-clusterHub=pk ce9.config.ra > do.log 2>&1 &
    #	real    5m56.823s

    time ./ce9/run.ce9.ce9/loadPairwise.csh 
    #	Scanning through 968 files
    #	Loading database with 1228800 rows
    #	real    0m37.193s

    cd /hive/data/genomes/ce9/bed/geneSorter
    # CREATE EXPRESSION DISTANCE TABLES FOR  
    # KIM LAB EXPRESSION DATA - this creates ce9.kimExpDistance
    time hgExpDistance ce9 hgFixed.kimWormLifeMedianRatio \
	  hgFixed.kimWormLifeMedianExps kimExpDistance
    time hgExpDistance -lookup=sangerToRefSeq ce9 \
	hgFixed.kimWormLifeMedianRatio \
	hgFixed.kimWormLifeMedianExps kimExpDistance
    #	Have 19134 elements in hgFixed.kimWormLifeMedianRatio
    #	Got 19134 unique elements in hgFixed.kimWormLifeMedianRatio
    #	real    1m50.164s

    # CREATE TABLE TO MAP BETWEEN SANGERGENES AND REFSEQ GENES
    # sangerToRefSeq
    hgMapToGene ce9 refGene sangerGene sangerToRefSeq

    # SET dbDb TABLE ENTRY FOR GENE SORTER
    # set hgNearOk to 1 on hgcentraltest to make Ce9 Gene Sorter viewable

    hgsql -e 'update dbDb set hgNearOk = 1 where name = "ce9";' \
         hgcentraltest

    #	Running joinerCheck to see what is sane:
    cd ~/kent/src/hg/makeDb/schema
    joinerCheck -identifier=wormBaseId -database=ce9 -times -keys ./all.joiner
# ce9.kimExpDistance.query - hits 11528085 of 11528085 ok
# ce9.kimExpDistance.target - hits 11528085 of 11528085 ok
# ce9.orfToGene.name - hits 28125 of 28125 ok
# ce9.sangerBlastTab.query - hits 1228800 of 1228800 ok
# ce9.sangerBlastTab.target - hits 1228800 of 1228800 ok
# ce9.sangerCanonical.transcript - hits 19952 of 19952 ok
# ce9.sangerIsoforms.transcript - hits 28152 of 28152 ok
# ce9.sangerLinks.orfName - hits 28152 of 28152 ok
# ce9.sangerPep.name - hits 28152 of 28152 ok
# ce9.sangerToRefSeq.name - hits 27945 of 27945 ok

XXX - ready for the next business Thu Sep 16 16:29:26 PDT 2010
    ## create a gene name to WBGene ID reference table
    ## to be used to construct URL
    mkdir /hive/data/genomes/ce9/bed/WBGeneID
    cd /hive/data/genomes/ce9/bed/WBGeneID
    #	There was one duplicate entry in the file, the sort -u eliminates it
    sed -e "s#http://wormbase.org/db/gene/gene?name=##; s#;class=Gene##" \
	../../downloads/tarFile/url.txt | sort -u > sangerGeneToWBGeneID.tab
    #	add in the one-dot names for those names that are only two-dot names
    #	in this file:
    cat << '_EOF_' > addDotName.pl
#!/usr/bin/env perl

use strict;
use warnings;

my %sangerGeneName;

open (FH, "sangerGene.name") or die "can not read sangerGene.name";
while (my $line = <FH>) {
    chomp $line;
    $sangerGeneName{$line} = 1;
}
close (FH);

open (FH,"<sangerGeneToWBGeneID.tab") or
	die "can not read sangerGeneToWBGeneID.tab";

my %twoDotNames;

while (my $line = <FH>) {
    chomp $line;
    my ($name, $wbId) = split('\s+',$line);
    die "duplicate gene name $name $wbId" if (exists($twoDotNames{$name}));
    if (exists($sangerGeneName{$name})) {
	$twoDotNames{$name} = $wbId;
    }
}
close (FH);

my %neededNames;

foreach my $key (keys %twoDotNames) {
    my ($a, $b, $c, $d) = split('\.',$key);
    my $wbId = $twoDotNames{$key};
    die "three dot name found $key $wbId" if (defined($d));
    if (defined($c)) {
	my $oneDot = sprintf "%s.%s", $a, $b;
	if (!exists($twoDotNames{$oneDot})) {
	    if (!exists($neededNames{$oneDot})) {
		$neededNames{$oneDot} = $wbId;
	    }
	}
    }
}
foreach my $key (keys %twoDotNames) {
    printf "%s\t%s\n", $key, $twoDotNames{$key};
}
foreach my $key (keys %neededNames) {
    printf "%s\t%s\n", $key, $neededNames{$key};
}
'_EOF_'
    #	<< happy emacs
    chmod +x addDotName.pl

    hgsql -N -e "select name from sangerGene;" ce9 | sort -u > sangerGene.name
    ./addDotName.pl  > fixed.sangerGeneToWBGeneID.tab


    hgLoadSqlTab ce9 sangerGeneToWBGeneID \
	~/kent/src/hg/lib/sangerGeneToWBGeneID.sql \
	fixed.sangerGeneToWBGeneID.tab
    cd ~/kent/src/hg/makeDb/schema
    joinerCheck -identifier=wormBaseId -database=ce9 -times -keys ./all.joiner
# After all the table names were fixed:
# ce9.kimExpDistance.query - hits 11528085 of 11528085 ok
# ce9.kimExpDistance.target - hits 11528085 of 11528085 ok
# ce9.orfToGene.name - hits 28125 of 28125 ok
# ce9.sangerBlastTab.query - hits 1228800 of 1228800 ok
# ce9.sangerBlastTab.target - hits 1228800 of 1228800 ok
# ce9.sangerCanonical.transcript - hits 19952 of 19952 ok
# ce9.sangerIsoforms.transcript - hits 28152 of 28152 ok
# ce9.sangerLinks.orfName - hits 28152 of 28152 ok
# ce9.sangerPep.name - hits 28152 of 28152 ok
# ce9.sangerToRefSeq.name - hits 27945 of 27945 ok

    # fixup the Pep names
    cd /hive/data/genomes/ce9/bed/geneSorter
    hgsql -N -e "select name from sangerPep;" ce9 | sort -u \
	> name.sangerPep.ce9
    hgsql -N -e "select name from sangerGene;" ce9 | sort -u \
	> name.sangerGene.ce9
    comm -13 name.sangerGene.ce9 name.sangerPep.ce9 > toRemove.sangerPep.ce9
    wc -l toRemove.sangerPep.ce9 
    #	3026 toRemove.sangerPep.ce9

    # it appears each name with two extensions: name.1.2
    # is the cause of this trouble
    awk -F'.' 'NF == 3' name.sangerGene.ce9 \
	| awk -F'.' '{printf "%s.%s\n", $1, $2}' | sort -u | wc -l
    #	3026
    # try duplicating those names in the sangerPep table
    awk -F'.' 'NF == 3' name.sangerGene.ce9 \
	| awk -F'.' '{printf "%s.%s\t%s.%s.%s\n", $1, $2, $1, $2, $3}' \
	> name.translation

    cat << '_EOF_' > replicate.pl
#!/usr/bin/env perl

use strict;
use warnings;

open (FH, "<name.translation") or die "can not read name.translation";
while (my $line = <FH>) {
    chomp $line;
    my ($smallName, $bigName) = split('\t', $line);
    printf "rm -f $bigName.faa $smallName.faa\n";
    printf "hgsql -N -e 'select * from sangerPep where name=\"$smallName\";' ce9 > $smallName.faa\n";
    printf "sed -e 's/^$smallName/$bigName/' $smallName.faa > $bigName.faa\n";
    printf "hgsql -N -e 'load data local infile \"$bigName.faa\" into table sangerPep;' ce9\n";
    printf "rm -f $bigName.faa $smallName.faa\n";
}
close (FH);

open (FH, "<name.translation") or die "can not read name.translation";
while (my $line = <FH>) {
    chomp $line;
    my ($smallName, $bigName) = split('\t', $line);
    printf "hgsql -N -e 'delete from sangerPep where name=\"$smallName\";' ce9\n";
}
close (FH);
'_EOF_'
    # << happy emacs
    chmod +x replicate.pl
    ./replicate.pl > replicate.sh
    sh replicate.sh


# ce9.orfToGene.name - hits 30296 of 30296 ok
# ce9.sangerBlastTab.query - hits 1255312 of 1255312 ok
# ce9.sangerBlastTab.target - hits 1255312 of 1255312 ok
# ce9.sangerCanonical.transcript - hits 20051 of 20051 ok
# ce9.sangerIsoforms.transcript - hits 30296 of 30296 ok
# ce9.sangerLinks.orfName - hits 30115 of 30115 ok
# ce9.sangerPep.name - hits 23771 of 23771 ok
# ce9.sangerToRefSeq.name - hits 29995 of 29995 ok
# ce9.sangerGeneToWBGeneID.sangerGene - hits 30115 of 30115 ok

###############################################################################
# ADJUST KIMEXPDISTANCE NAMES TO MATCH SANGERCANONICAL
#	(DONE - 2010-09-16 - Hiram)
#	This business taken from Angie's fixups in ce4.txt
# kimExpDistance has all [A-Z]+[0-9]+\.[0-9]+ names, but now sangerCanonical
# has some of the new    [A-Z]+[0-9]+\.[0-9]+\.[0-9]+ names, so when hgNear 
# looks for a canonical name in kimExpDistance, it often can't find it.
# Canonical also has     [A-Z]+[0-9]+\.[0-9]+[a-z]
# and                    [A-Z]+[0-9]+\.[0-9]+[a-z]\.[0-9]+
# kimExpDistance has 4   [A-Z]+[0-9]+\.[0-9]+[A-Z]
# Update the names in kimExpDistance to match sangerCanonical.
    mkdir /hive/data/genomes/ce9/bed/fixupKim
    cd /hive/data/genomes/ce9/bed/fixupKim
    # Look at just the names and how they differ between the two sources:
    hgsql ce9 -N -e 'select transcript from sangerCanonical' \
      | sort > canonicalName.list
    hgsql ce9 -N -e 'select * from kimExpDistance' > ce9.kimExpDistance
    awk -F"\t" '{print $1}' ce9.kimExpDistance | sort -u > ce9.kimExpNames
    sdiff /tmp/canonicalName.list ce9.kimExpNames | less
    comm -23 canonicalName.list ce9.kimExpNames | wc -l
#8539
    comm -13 canonicalName.list ce9.kimExpNames | wc -l
#7721
    comm -12 canonicalName.list ce9.kimExpNames | wc -l
#11413
    # Pretty significant non-overlap, but I think much of it can be 
    # resolved by slight tweaks to kimExpDistance names so that they 
    # match the latest, more-specifically-versioned canonical transcripts.
    # Also, kimExpDistance has many names with no match in canonical,
    # which means many thousands of unnecessary rows bloating the table.
    cat > fixExpDistance.pl <<'_EOF_'
#!/bin/env perl

use warnings;
use strict;

my @kimExpNames;
my @kimSpecial;
open(FH, "<ce9.kimExpNames") || die;
while (<FH>) {
  chomp;
  push @kimExpNames, $_;
  push @kimSpecial, $_ if ($_ =~ /\dA$/);
}
close(FH);

my %kim2canon;
open(FH, "canonicalName.list") || die;
while (<FH>) {
  chomp;
  my $kim = $_;
  my @special = grep m/^$kim$/i, @kimSpecial;
  if (scalar(@special)) {
    $kim2canon{$special[0]} = $kim;
  } else {
    my $simple = $kim;
    $simple =~ s/^(\w+\.\d+).*$/$1/;
    $kim2canon{$simple} = $kim;
  }
}
close(FH);

while (<>) {
  chomp;
  my ($query, $target, $distance) = split('\t');
  my $canonicalQ = $kim2canon{$query};
  my $canonicalT = $kim2canon{$target};
  if (defined $canonicalQ && defined $canonicalT) {
    print "$canonicalQ\t$canonicalT\t$distance\n";
  }
}
'_EOF_'
    # << emacs
    chmod a+x fixExpDistance.pl
    ./fixExpDistance.pl ce9.kimExpDistance > kimExpDistanceFixedNames.tab
    # Look the file over, grep for some IDs in /tmp/canonicalName.list.
    # Load into the db as kimExprDistanceTest.  It will take a while
    # because it's still 12M rows (down from 19M).
    time nice hgLoadSqlTab ce9 kimExpDistanceTest \
      ~/kent/src/hg/lib/distance.sql kimExpDistanceFixedNames.tab
    #	real    0m37.241s

    # Test hgNear with kimExpDistanceTest instead of kimExpDistance.
    # Don't delete the original table just yet, but do clean it up soon
    # because it's quite large.
    hgsql ce9 -e 'rename table kimExpDistance to kimExpDistanceOrig;'
    hgsql ce9 -e 'rename table kimExpDistanceTest to kimExpDistance;'
    runJoiner.csh ce9 kimExpDistance
    # Test hgNear again with kimExpDistance.

############################################################################
