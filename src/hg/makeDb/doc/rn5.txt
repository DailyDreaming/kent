# for emacs: -*- mode: sh; -*-
#
#	the above keeps emacs happy while working with this text document

# This file describes how we made the browser database on the
# Rattus norvegicus genome, March 2012 update (Rnor5.0) from Baylor.

#	http://www.ncbi.nlm.nih.gov/bioproject/16219
#	http://www.ncbi.nlm.nih.gov/genome/73
#	http://www.ncbi.nlm.nih.gov/Traces/wgs/?val=AABR06
#	Genome Coverage : 3x BAC; 6x WGS ABI Sanger reads
#	chrMt: NC_001665.2

#	DATE:   08-Mar-2012
#	ORGANISM:       Rattus norvegicus
#	TAXID:  10116
#	ASSEMBLY LONG NAME:     Rnor_5.0
#	ASSEMBLY SHORT NAME:    Rnor_5.0
#	ASSEMBLY SUBMITTER:     Rat Genome Sequencing Consortium
#	ASSEMBLY TYPE:  Haploid
#	NUMBER OF ASSEMBLY-UNITS:       1
#	ASSEMBLY ACCESSION:     GCA_000001895.3
#	FTP-RELEASE DATE: 19-Mar-2012

#########################################################################
## Download sequence (DONE - 2012-03-19 - Hiram)
    mkdir /hive/data/genomes/rn5
    mkdir /hive/data/genomes/rn5/genbank
    cd /hive/data/genomes/rn5/genbank

    rsync -a -P \
rsync://ftp.ncbi.nlm.nih.gov/genbank/genomes/Eukaryotes/vertebrates_mammals/Rattus_norvegicus/Rnor_5.0/ ./

    faSize Primary_Assembly/assembled_chromosomes/FASTA/chr*.fa.gz
# 2902588968 bases (334517722 N's 2568071246 real 2568071246 upper 0 lower)
#	in 21 sequences in 21 files
# Total size: mean 138218522.3 sd 67159802.9
#	min 54450796 (gi|380690185|gb|CM000083.4|)
#	max 290094216 (gi|380690196|gb|CM000072.4|) median 118718031

    faSize Primary_Assembly/unlocalized_scaffolds/FASTA/*.fa.gz
# 4156200 bases (1012688 N's 3143512 real 3143512 upper 0 lower)
#	in 1278 sequences in 21 files
# Total size: mean 3252.1 sd 8429.6
#	min 500 (gi|380099756|gb|AABR06109458.1|)
#	max 227955 (gi|380099484|gb|AABR06109730.1|) median 2219

    faSize Primary_Assembly/unplaced_scaffolds/FASTA/*.fa.gz
# 2937457 bases (1314805 N's 1622652 real 1622652 upper 0 lower)
#	in 1439 sequences in 1 files
# Total size: mean 2041.3 sd 5072.3 min 280 (gi|380097677|gb|AABR06111537.1|)
#	max 73090 (gi|380452989|gb|JH620568.1|) median 723

    # and all together:
    faSize Primary_Assembly/assembled_chromosomes/FASTA/chr*.fa.gz \
Primary_Assembly/unlocalized_scaffolds/FASTA/*.fa.gz \
Primary_Assembly/unplaced_scaffolds/FASTA/*.fa.gz
# 2909682625 bases (336845215 N's 2572837410 real 2572837410 upper 0 lower)
#	in 2738 sequences in 43 files
# Total size: mean 1062703.7 sd 13357023.2
#	min 280 (gi|380097677|gb|AABR06111537.1|)
#	max 290094216 (gi|380690196|gb|CM000072.4|) median 1018

#########################################################################
# fixup names for UCSC standards (DONE - 2012-03-19 - Hiram)
    mkdir /hive/data/genomes/rn5/ucsc
    cd /hive/data/genomes/rn5/ucsc

    ########################  Assembled Chromosomes
    cat << '_EOF_' > toUcsc.pl
#!/bin/env perl

use strict;
use warnings;

my %accToChr;

open (FH, "<../genbank/Primary_Assembly/assembled_chromosomes/chr2acc") or
        die "can not read Primary_Assembly/assembled_chromosomes/chr2acc";
while (my $line = <FH>) {
    next if ($line =~ m/^#/);
    chomp $line;
    my ($chrN, $acc) = split('\s+', $line);
    $accToChr{$acc} = $chrN;
}
close (FH);

foreach my $acc (keys %accToChr) {
    my $chrN =  $accToChr{$acc};
    print "$acc $accToChr{$acc}\n";
    open (FH, "zcat ../genbank/Primary_Assembly/assembled_chromosomes/AGP/chr${chrN}.agp.gz|") or die "can not read chr${chrN}.agp.gz";
    open (UC, ">chr${chrN}.agp") or die "can not write to chr${chrN}.agp";
    while (my $line = <FH>) {
        if ($line =~ m/^#/) {
            print UC $line;
        } else {
            $line =~ s/^$acc/chr${chrN}/;
            print UC $line;
        }
    }
    close (FH);
    close (UC);
    open (FH, "zcat ../genbank/Primary_Assembly/assembled_chromosomes/FASTA/chr${chrN}.fa.gz|") or die "can not read chr${chrN}.fa.gz";
    open (UC, ">chr${chrN}.fa") or die "can not write to chr${chrN}.fa";
    while (my $line = <FH>) {
        if ($line =~ m/^>/) {
            printf UC ">chr${chrN}\n";
        } else {
            print UC $line;
        }
    }
    close (FH);
    close (UC);
}
'_EOF_'
    # << happy emacs
    chmod +x toUcsc.pl
    time ./toUcsc.pl
    #	real    0m50.678s
    time gzip *.fa *.agp
    #	real    12m46.877s
    faSize chr*.fa.gz
    #	2725521370 bases (77999939 N's 2647521431 real 2647521431 upper 0
    #	lower) in 21 sequences in 21 files
    #	Total size: mean 129786731.9 sd 33408399.1 min 61431566 (chr19)
    #	max 195471971 (chr1) median 124902244

    ########################  Unplaced scaffolds
    cat << '_EOF_' > unplaced.pl
#!/bin/env perl

use strict;
use warnings;

my $agpFile =  "../genbank/Primary_Assembly/unplaced_scaffolds/AGP/unplaced.scaf.agp.gz";
my $fastaFile =  "../genbank/Primary_Assembly/unplaced_scaffolds/FASTA/unplaced.scaf.fa.gz";
open (FH, "zcat $agpFile|") or die "can not read $agpFile";
open (UC, ">unplaced.agp") or die "can not write to unplaced.agp";
while (my $line = <FH>) {
    if ($line =~ m/^#/) {
        print UC $line;
    } else {
        $line =~ s/\.1//;    
        printf UC "chrUn_%s", $line;
    }
}
close (FH);
close (UC);

open (FH, "zcat $fastaFile|") or die "can not read $fastaFile";
open (UC, ">unplaced.fa") or die "can not write to unplaced.fa";
while (my $line = <FH>) {
    if ($line =~ m/^>/) {
        chomp $line;
        $line =~ s/.*gb\|//;
        $line =~ s/\.1\|.*//;
        printf UC ">chrUn_$line\n";
    } else {
        print UC $line;
    }
}
close (FH);
close (UC);
'_EOF_'
    # << happy emacs
    chmod +x unplaced.pl
    time ./unplaced.pl
    #	real    0m0.131s
    # make sure none of the names got to be over 31 characers long:
    grep -v "^#" unplaced.agp | cut -f1 | sort | uniq -c | sort -rn
    gzip *.fa *.agp
    # not much in that sequence:
    faSize unplaced.fa.gz
# 2937457 bases (1314805 N's 1622652 real 1622652 upper 0 lower)
#	in 1439 sequences in 1 files
# Total size: mean 2041.3 sd 5072.3 min 280 (chrUn_AABR06111537)
#	max 73090 (chrUn_JH620568) median 723

    ########################  Unlocalized scaffolds
    cat << '_EOF_' > unlocalized.pl
#!/bin/env perl

use strict;
use warnings;

my %accToChr;
my %chrNames;

open (FH, "<../genbank/Primary_Assembly/unlocalized_scaffolds/unlocalized.chr2scaf") or
        die "can not read Primary_Assembly/unlocalized_scaffolds/unlocalized.chr2scaf";
while (my $line = <FH>) {
    next if ($line =~ m/^#/);
    chomp $line;
    my ($chrN, $acc) = split('\s+', $line);
    $accToChr{$acc} = $chrN;
    $chrNames{$chrN} += 1;
}
close (FH);

foreach my $chrN (keys %chrNames) {
    my $agpFile =  "../genbank/Primary_Assembly/unlocalized_scaffolds/AGP/chr$chrN.unlocalized.scaf.agp.gz";
    my $fastaFile =  "../genbank/Primary_Assembly/unlocalized_scaffolds/FASTA/chr$chrN.unlocalized.scaf.fa.gz";
    open (FH, "zcat $agpFile|") or die "can not read $agpFile";
    open (UC, ">chr${chrN}_random.agp") or die "can not write to chr${chrN}_random.agp";
    while (my $line = <FH>) {
        if ($line =~ m/^#/) {
            print UC $line;
        } else {
            chomp $line;
            my (@a) = split('\t', $line);
            my $acc = $a[0];
            my $accNo1 = $acc;
            $accNo1 =~ s/.1$//;
            die "ERROR: acc not .1: $acc" if ($accNo1 =~ m/\./);
            die "ERROR: chrN $chrN not correct for $acc"
                if ($accToChr{$acc} ne $chrN);
            my $ucscName = "chr${chrN}_${accNo1}_random";
            printf UC "%s", $ucscName;
            for (my $i = 1; $i < scalar(@a); ++$i) {
                printf UC "\t%s", $a[$i];
            }
            printf UC "\n";
        }
    }
    close (FH);
    close (UC);
    printf "chr%s\n", $chrN;
    open (FH, "zcat $fastaFile|") or die "can not read $fastaFile";
    open (UC, ">chr${chrN}_random.fa") or die "can not write to chr${chrN}_random.fa";
    while (my $line = <FH>) {
        if ($line =~ m/^>/) {
            chomp $line;
            my $acc = $line;
            $acc =~ s/.*gb\|//;
            $acc =~ s/\|.*//;
            my $accNo1 = $acc;
            $accNo1 =~ s/.1$//;
            die "ERROR: acc not .1: $acc" if ($accNo1 =~ m/\./);
            die "ERROR: chrN $chrN not correct for $acc"
                if ($accToChr{$acc} ne $chrN);
            my $ucscName = "chr${chrN}_${accNo1}_random";
            printf UC ">$ucscName\n";
        } else {
            print UC $line;
        }
    }
    close (FH);
    close (UC);
}
'_EOF_'
    # << happy emacs
    chmod +x unlocalized.pl
    time ./unlocalized.pl
    #	real    0m0.592s
    gzip *.fa *.agp

    # verify none of the names are longer than 31 characters:
    zcat *.agp.gz | grep -v "^#" | cut -f1 | sort -u \
	| awk '{print length($1),$1}' | sort -rn | head
25 chr20_AABR06110665_random
25 chr20_AABR06110664_random
...

    faSize chr*_random.fa.gz
# 4156200 bases (1012688 N's 3143512 real 3143512 upper 0 lower)
#	in 1278 sequences in 21 files
# Total size: mean 3252.1 sd 8429.6 min 500 (chr2_AABR06109458_random)
#	max 227955 (chr4_AABR06109730_random) median 2219

    #	verify all the sequence is still here after all this rigamarole:
    time faSize *.fa.gz
# 2909682625 bases (336845215 N's 2572837410 real 2572837410 upper 0 lower)
#	in 2738 sequences in 43 files
# Total size: mean 1062703.7 sd 13357023.2 min 280 (chrUn_AABR06111537)
#	max 290094216 (chr1) median 1018
    # verify same numbers as was in the original files measured above

#########################################################################
# Create .ra file and run makeGenomeDb.pl (DONE - Hiram - 2012-03-19)
    cd /hive/data/genomes/rn5
    cat << '_EOF_' >rn5.config.ra
# Config parameters for makeGenomeDb.pl:
db rn5
clade mammal
scientificName Rattus norvegicus
commonName Rat
assemblyDate Mar. 2012
assemblyLabel RGSC Rnor_5.0 (GCA_000001895.3)
assemblyShortLabel RGSC 5.0
orderKey 1559
mitoAcc NC_001665
fastaFiles /hive/data/genomes/rn5/ucsc/*.fa.gz
agpFiles /hive/data/genomes/rn5/ucsc/*.agp.gz
# qualFiles none
dbDbSpeciesDir rat
ncbiAssemblyId 73
ncbiAssemblyName Rnor_5.0
taxId 10116
'_EOF_'
    # << happy emacs

    #	run agp step first to verify fasta and agp files agree
    makeGenomeDb.pl -stop=agp rn5.config.ra > agp.log 2>&1
    # verify end of agp.log indictates:
# All AGP and FASTA entries agree - both files are valid
    # continue with the build
    time makeGenomeDb.pl -continue=db rn5.config.ra > db.log 2>&1
    #	real    22m39.834s

#########################################################################
# running repeat masker (DONE - 2012-03-19 - Hiram)
    mkdir /hive/data/genomes/rn5/bed/repeatMasker
    cd /hive/data/genomes/rn5/bed/repeatMasker
    time doRepeatMasker.pl -buildDir=`pwd` -noSplit \
	-bigClusterHub=swarm -dbHost=hgwdev -workhorse=hgwdev \
	-smallClusterHub=encodek rn5 > do.log 2>&1 &
XXX - running - Mon Mar 19 12:13:37 PDT 2012
    #	real    250m27.510s
    cat faSize.rmsk.txt
    #	2860591921 bases (676999153 N's 2183592768 real 1981827417 upper
    #	201765351 lower) in 22819 sequences in 1 files
    #	Total size: mean 125360.1 sd 395781.0 min 1000 (AFYH01291818)
    #	max 10736886 (JH126562) median 5475
    #	%7.05 masked total, %9.24 masked real

    grep -i versi do.log
# RepeatMasker version development-$Id: RepeatMasker,v 1.26 2011/09/26 16:19:44 angie Exp $
#    April 26 2011 (open-3-3-0) version of RepeatMasker

    featureBits -countGaps rn5 rmsk
    #	201917583 bases of 2860591921 (7.059%) in intersection
    # why is it different than the faSize above ?
    # because rmsk masks out some N's as well as bases, the count above
    #	separates out the N's from the bases, it doesn't show lower case N's

##########################################################################
# running simple repeat (DONE - 2012-03-19 - Hiram)
    mkdir /hive/data/genomes/rn5/bed/simpleRepeat
    cd /hive/data/genomes/rn5/bed/simpleRepeat
    time doSimpleRepeat.pl -buildDir=`pwd` -bigClusterHub=swarm \
	-dbHost=hgwdev -workhorse=hgwdev -smallClusterHub=encodek \
	rn5 > do.log 2>&1 &
    #	real    14m45.644s

    cat fb.simpleRepeat 
    #	97893561 bases of 2780239565 (3.521%) in intersection

XXX -
    # not going to add to rmsk here, using the window masker instead since
    #	it masks more sequence
    cd /hive/data/genomes/rn5
    twoBitMask rn5.rmsk.2bit \
	-add bed/simpleRepeat/trfMask.bed rn5.2bit
    #	you can safely ignore the warning about fields >= 13

    twoBitToFa rn5.2bit stdout | faSize stdin > faSize.rn5.2bit.txt
    cat faSize.rn5.2bit.txt
    #	2608572064 bases (131440969 N's 2477131095 real 1320629270 upper
    #	1156501825 lower) in 2685 sequences in 1 files
    #	Total size: mean 971535.2 sd 4827933.6 min 1003 (AGCE01151413)
    #	max 72162052 (JH378105) median 1553

    rm /gbdb/rn5/rn5.2bit
    ln -s `pwd`/rn5.2bit /gbdb/rn5/rn5.2bit

#########################################################################
# Verify all gaps are marked, add any N's not in gap as type 'other'
#	(DONE - 2012-03-19 - Hiram)
    mkdir /hive/data/genomes/rn5/bed/gap
    cd /hive/data/genomes/rn5/bed/gap
    time nice -n +19 findMotif -motif=gattaca -verbose=4 \
	-strand=+ ../../rn5.unmasked.2bit > findMotif.txt 2>&1
    #	real    0m35.258s
    grep "^#GAP " findMotif.txt | sed -e "s/^#GAP //" > allGaps.bed
    time featureBits -countGaps rn5 -not gap -bed=notGap.bed
    #	2780239565 bases of 2909698938 (95.551%) in intersection
    #	real    0m14.151s

    time featureBits -countGaps rn5 allGaps.bed notGap.bed -bed=new.gaps.bed
    #	207385842 bases of 2909698938 (7.127%) in intersection
    #	real    28m7.467s
XXX - this looks like a lot of gap !
    # no unannotated gaps, no more to run here
    # there are no non-bridged gaps here:
    hgsql -N -e "select bridge from gap;" rn5 | sort | uniq -c
    #	269010 yes

##########################################################################
## WINDOWMASKER (DONE - 2012-03-19 - Hiram)
    mkdir /hive/data/genomes/rn5/bed/windowMasker
    cd /hive/data/genomes/rn5/bed/windowMasker
    time nice -n +19 doWindowMasker.pl -buildDir=`pwd` -workhorse=hgwdev \
	-dbHost=hgwdev rn5 > do.log 2>&1 &
XXX - running - Mon Mar 19 12:14:21 PDT 2012
    #	real    275m14.802s

    # Masking statistics
    twoBitToFa rn5.wmsk.2bit stdout | faSize stdin
    #	2860591921 bases (676999153 N's 2183592768 real 1197030078 upper
    #	986562690 lower) in 22819 sequences in 1 files
    #	Total size: mean 125360.1 sd 395781.0 min 1000 (AFYH01291818)
    #	max 10736886 (JH126562) median 5475
    #	%34.49 masked total, %45.18 masked real

    twoBitToFa rn5.wmsk.sdust.2bit stdout | faSize stdin
    #	2860591921 bases (676999153 N's 2183592768 real 1186196719 upper
    #	997396049 lower) in 22819 sequences in 1 files
    #	Total size: mean 125360.1 sd 395781.0 min 1000 (AFYH01291818)
    #	max 10736886 (JH126562) median 5475
    #	%34.87 masked total, %45.68 masked real

    hgLoadBed rn5 windowmaskerSdust windowmasker.sdust.bed.gz
    #	Loaded 14478353 elements of size 3

    featureBits -countGaps rn5 windowmaskerSdust
    #	1674395202 bases of 2860591921 (58.533%) in intersection

    #	eliminate the gaps from the masking
    featureBits rn5 -not gap -bed=notGap.bed
    #	2183592768 bases of 2183592768 (100.000%) in intersection
    time nice -n +19 featureBits rn5 windowmaskerSdust notGap.bed \
        -bed=stdout | gzip -c > cleanWMask.bed.gz
    #	997396049 bases of 2183592768 (45.677%) in intersection
    #	real    16m48.600s

    #	reload track to get it clean
    hgLoadBed rn5 windowmaskerSdust cleanWMask.bed.gz
    #	Loaded 14630157 elements of size 4
    time featureBits -countGaps rn5 windowmaskerSdust
    #	997396049 bases of 2860591921 (34.867%) in intersection
    #	real    2m47.260s

    #	mask with this clean result
    zcat cleanWMask.bed.gz \
	| twoBitMask ../../rn5.unmasked.2bit stdin \
	    -type=.bed rn5.cleanWMSdust.2bit
    twoBitToFa rn5.cleanWMSdust.2bit stdout | faSize stdin \
        > rn5.cleanWMSdust.faSize.txt
    cat rn5.cleanWMSdust.faSize.txt
    #	2860591921 bases (676999153 N's 2183592768 real 1186196719 upper
    #	997396049 lower) in 22819 sequences in 1 files
    #	Total size: mean 125360.1 sd 395781.0 min 1000 (AFYH01291818)
    #	max 10736886 (JH126562) median 5475
    #	%34.87 masked total, %45.68 masked real

    # how much does this window masker and repeat masker overlap:
    featureBits -countGaps rn5 rmsk windowmaskerSdust
    #	177085590 bases of 2860591921 (6.191%) in intersection

#########################################################################
# MASK SEQUENCE WITH WM+TRF (DONE - 2012-01-12 - Hiram)
    cd /hive/data/genomes/rn5
    twoBitMask -add bed/windowMasker/rn5.cleanWMSdust.2bit \
	bed/simpleRepeat/trfMask.bed rn5.2bit
    #	safe to ignore the warnings about BED file with >=13 fields
    twoBitToFa rn5.2bit stdout | faSize stdin > faSize.rn5.txt
    cat faSize.rn5.txt
    #	2860591921 bases (676999153 N's 2183592768 real 1186074582 upper
    #	997518186 lower) in 22819 sequences in 1 files
    #	Total size: mean 125360.1 sd 395781.0 min 1000 (AFYH01291818)
    #	max 10736886 (JH126562) median 5475
    #	%34.87 masked total, %45.68 masked real

    #	create symlink to gbdb
    ssh hgwdev
    rm /gbdb/rn5/rn5.2bit
    ln -s `pwd`/rn5.2bit /gbdb/rn5/rn5.2bit

#########################################################################
