# for emacs: -*- mode: sh; -*-

# This file describes browser build for the otoGar3
#	Otolemur garnettii - Bushbaby genome: March 2011

#	http://www.ncbi.nlm.nih.gov/genome/assembly/249878/
#	http://www.ncbi.nlm.nih.gov/genome/451

#	http://www.ncbi.nlm.nih.gov/Traces/wgs/?val=AAQR03
# Input coverage estimates: Fragments: 53x; Jumps: 78x; Fosmids: 6x; TOTAL: 137x

#############################################################################
# Fetch sequence from genbank (DONE - 2012-01-06 - Hiram)

    mkdir -p /hive/data/genomes/otoGar3/genbank
    cd /hive/data/genomes/otoGar3/genbank

    rsync -a -P \
rsync://ftp.ncbi.nlm.nih.gov/genbank/genomes/Eukaryotes/vertebrates_mammals/Otolemur_garnettii/OtoGar3/ ./

    # measure total sequence in this assembly
    faSize Primary_Assembly/unplaced_scaffolds/FASTA/unplaced.scaf.fa.gz

# 2519724550 bases (160194097 N's 2359530453 real 2359530453 upper 0 lower) in
# 7793 sequences in 1 files
# Total size: mean 323331.8 sd 2530369.2
#	min 1000 (gi|325699471|gb|AAQR03200240.1|)
#	max 73491278 (gi|326327706|gb|GL873520.1|) median 1593

#############################################################################
# process into UCSC naming scheme (DONE - 2012-03-12 - Hiram)
    cd /hive/data/genomes/otoGar3/genbank
    # watch out for the pattern match below: s/.*gb\|//;
    #	depends upon what string is in the header of the fasta file
    cat << '_EOF_' > unplaced.pl
#!/bin/env perl

use strict;
use warnings;

my $agpFile =  "../genbank/Primary_Assembly/unplaced_scaffolds/AGP/unplaced.scaf.agp.gz";
my $fastaFile =  "../genbank/Primary_Assembly/unplaced_scaffolds/FASTA/unplaced.scaf.fa.gz";
open (FH, "zcat $agpFile|") or die "can not read $agpFile";
open (UC, ">unplaced.agp") or die "can not write to unplaced.agp";
while (my $line = <FH>) {
    if ($line =~ m/^#/) {
        print UC $line;
    } else {
        $line =~ s/\.1//;    
        printf UC "%s", $line;
    }
}
close (FH);
close (UC);

open (FH, "zcat $fastaFile|") or die "can not read $fastaFile";
open (UC, ">unplaced.fa") or die "can not write to unplaced.fa";
while (my $line = <FH>) {
    if ($line =~ m/^>/) {
        chomp $line;
        $line =~ s/.*gb\|//;
        $line =~ s/\.1\|.*//;
        printf UC ">$line\n";
    } else {
        print UC $line;
    }
}
close (FH);
close (UC);
'_EOF_'
    # << happy emacs
    chmod +x unplaced.pl
    time ./unplaced.pl
    #	real    1m1.270s

    # compress these files
    gzip *.fa *.agp

    # verify nothing has changed in the sequence, should be the same as above:
    faSize unplaced.fa.gz
# 2519724550 bases (160194097 N's 2359530453 real 2359530453 upper 0 lower)
#	in 7793 sequences in 1 files
# Total size: mean 323331.8 sd 2530369.2 min 1000 (AAQR03200240)
#	max 73491278 (GL873520) median 1593

#############################################################################
#  Initial database build (DONE - 2012-03-12 - Hiram)
    cd /hive/data/genomes/otoGar3
    cat << '_EOF_' > otoGar3.config.ra
# Config parameters for makeGenomeDb.pl:
db otoGar3
clade mammal
genomeCladePriority 16
scientificName Otolemur garnettii
commonName Bushbaby
assemblyDate Mar. 2011
assemblyLabel Broad Institute (GCA_000181295.3)
assemblyShortLabel Broad OtoGar3
orderKey 464
mitoAcc none
fastaFiles /hive/data/genomes/otoGar3/genbank/unplaced.fa.gz
agpFiles /hive/data/genomes/otoGar3/genbank/unplaced.agp.gz
dbDbSpeciesDir bushbaby
taxId   30611
ncbiAssemblyId 249878
ncbiAssemblyName OtoGar3
#	http://www.ncbi.nlm.nih.gov/genome/assembly/249878/
'_EOF_'
    # << happy emacs

    # first verify the sequence and AGP files are OK
    time makeGenomeDb.pl -stop=agp -workhorse=hgwdev otoGar3.config.ra \
	> agp.log 2>&1
    #	real    2m34.742s
    # verify that was OK, look at the agp.log file
    time makeGenomeDb.pl -continue=db -workhorse=hgwdev otoGar3.config.ra \
	> db.log 2>&1
    #	real    18m32.134s

    # verify that was OK, look at the do.log file
    # copy the trackDb business to the source tree, check it in and add
    #	to the trackDb/makefile

#############################################################################
# running repeat masker (DONE - 2012-03-12 - Hiram)
    mkdir /hive/data/genomes/otoGar3/bed/repeatMasker
    cd /hive/data/genomes/otoGar3/bed/repeatMasker
    # had a missing i from the name in the dbDb table, fixed that after
    #	started with this species argument.
    time doRepeatMasker.pl -buildDir=`pwd` -noSplit \
	-species "otolemur garnettii" \
	-bigClusterHub=swarm -dbHost=hgwdev -workhorse=hgwdev \
	-smallClusterHub=encodek otoGar3 > do.log 2>&1 &
XXX - running - Mon Mar 12 13:34:57 PDT 2012
    #	real    265m32.852s
    cat faSize.rmsk.txt
    #	824327835 bases (216289280 N's 608038555 real 541851562 upper
    #	66186993 lower) in 427428 sequences in 1 files
    #	%8.03 masked total, %10.89 masked real


    grep -i versi do.log
# RepeatMasker version development-$Id: RepeatMasker,v 1.26 2011/09/26 16:19:44 angie Exp $
#    April 26 2011 (open-3-3-0) version of RepeatMasker

    time featureBits -countGaps otoGar3 rmsk
    #	real    3m0.062s
    #	66224843 bases of 824327835 (8.034%) in intersection
    # why is it different than the faSize above ?
    # because rmsk masks out some N's as well as bases, the count above
    #	separates out the N's from the bases, it doesn't show lower case N's

##########################################################################
# running simple repeat (DONE - 2012-03-12 - Hiram)
    mkdir /hive/data/genomes/otoGar3/bed/simpleRepeat
    cd /hive/data/genomes/otoGar3/bed/simpleRepeat
    time doSimpleRepeat.pl -buildDir=`pwd` -bigClusterHub=swarm \
	-dbHost=hgwdev -workhorse=hgwdev -smallClusterHub=encodek \
	otoGar3 > do.log 2>&1 &
XXX - running - Mon Mar 12 13:36:49 PDT 2012
    #	real    2177m47.881s
    # two failed jobs, running them on hgwdev to see what fails:
./TrfRun.csh /hive/data/genomes/otoGar3/TrfPart/013/013.lst.bed > 013.log 2>&1 &
./TrfRun.csh /hive/data/genomes/otoGar3/TrfPart/015/015.lst.bed > 015.log 2>&1
    #	real    347m1.394s
    # These two jobs are failing because the lift file splits in so many
    #	pieces that there is a name SplitLft.gz which is interpreted as
    #	a gzipped file to the liftUp command.  These needed to be done
    #	manually with numeric extensions to three places:
    cd /scratch/tmp/doSimpleRepeat.cluster.M32046
    split -a 3 -d -l 500 \
	/hive/data/genomes/otoGar3/TrfPart/013/013.lft SplitLft.
foreach splitLft (SplitLft.*)
  set bedFiles = `awk '{print $2 ".bed"};' $splitLft`
  endsInLf -zeroOk $bedFiles
  cat $bedFiles \
  | liftUp -type=.bed tmpOut.$splitLft $splitLft error stdin
end
    cat tmpOut.* > tmpOut__bed

    endsInLf -zeroOk tmpOut*
    cp -p tmpOut__bed /hive/data/genomes/otoGar3/TrfPart/013/013.lst.bed
    cd /scratch/tmp/doSimpleRepeat.cluster.L32048
    split -a 3 -d -l 500 \
	/hive/data/genomes/otoGar3/TrfPart/015/015.lft SplitLft.
foreach splitLft (SplitLft.*)
  set bedFiles = `awk '{print $2 ".bed"};' $splitLft`
  endsInLf -zeroOk $bedFiles
  cat $bedFiles \
  | liftUp -type=.bed tmpOut.$splitLft $splitLft error stdin
end
    cat tmpOut.* > tmpOut__bed

    endsInLf -zeroOk tmpOut*
    cp -p tmpOut__bed /hive/data/genomes/otoGar3/TrfPart/015/015.lst.bed

    time doSimpleRepeat.pl -continue=filter -buildDir=`pwd` \
	-bigClusterHub=swarm \
	-dbHost=hgwdev -workhorse=hgwdev -smallClusterHub=memk \
	otoGar3 > filter.log 2>&1 &
    #	real    3m29.203s
    cat fb.simpleRepeat 
    #	62230728 bases of 608038597 (10.235%) in intersection

    #	do *not* add this to rmsk here since we are going to use
    #	windowMasker instead of rmsk
    # add to rmsk after it is done:
    cd /hive/data/genomes/otoGar3
    twoBitMask otoGar3.rmsk.2bit \
	-add bed/simpleRepeat/trfMask.bed otoGar3.2bit
    #	you can safely ignore the warning about fields >= 13

    twoBitToFa otoGar3.2bit stdout | faSize stdin > faSize.otoGar3.2bit.txt
    cat faSize.otoGar3.2bit.txt

    rm /gbdb/otoGar3/otoGar3.2bit
    ln -s `pwd`/otoGar3.2bit /gbdb/otoGar3/otoGar3.2bit

#########################################################################
# Verify all gaps are marked, add any N's not in gap as type 'other'
#	(DONE - 2012-03-12 - Hiram)
    mkdir /hive/data/genomes/otoGar3/bed/gap
    cd /hive/data/genomes/otoGar3/bed/gap
    time nice -n +19 findMotif -motif=gattaca -verbose=4 \
	-strand=+ ../../otoGar3.unmasked.2bit > findMotif.txt 2>&1
    #	real    real    1m7.907s
    grep "^#GAP " findMotif.txt | sed -e "s/^#GAP //" > allGaps.bed
    time featureBits otoGar3 -not gap -bed=notGap.bed
    #	real    0m14.265s
    #	2359530453 bases of 2359530453 (100.000%) in intersection
    time featureBits otoGar3 allGaps.bed notGap.bed -bed=new.gaps.bed
XXX - running - Mon Mar 12 13:40:47 PDT 2012
    #	real    681m9.272s
    #	7969 bases of 608046566 (0.001%) in intersection

    #	what is the highest index in the existing gap table:
    hgsql -N -e "select ix from gap;" otoGar3 | sort -n | tail -1
    #	1942
    cat << '_EOF_' > mkGap.pl
#!/bin/env perl

use strict;
use warnings;

my $ix=`hgsql -N -e "select ix from gap;" otoGar3 | sort -n | tail -1`;
chomp $ix;

open (FH,"<new.gaps.bed") or die "can not read new.gaps.bed";
while (my $line = <FH>) {
    my ($chrom, $chromStart, $chromEnd, $rest) = split('\s+', $line);
    ++$ix;
    printf "%s\t%d\t%d\t%d\tN\t%d\tother\tyes\n", $chrom, $chromStart,
        $chromEnd, $ix, $chromEnd-$chromStart;
}
close (FH);
'_EOF_'
    # << happy emacs
    chmod +x ./mkGap.pl
    ./mkGap.pl > other.bed
    featureBits -countGaps otoGar3 other.bed
    #	real    8m36.778s
    #	7969 bases of 824327835 (0.001%) in intersection
    wc -l other.bed
    #	7853
    hgLoadBed -sqlTable=$HOME/kent/src/hg/lib/gap.sql \
	-noLoad otoGar3 otherGap other.bed
    # profile of sizes:
    awk '{print $3-$2}' other.bed | sort | uniq -c
    #	7763 1
    #	78 2
    #	5 3
    #	3 4
    #	2 5
    #	1 6
    #	1 7

    #	starting with this many
    hgsql -e "select count(*) from gap;" otoGar3
    #	127442
    hgsql otoGar3 -e 'load data local infile "bed.tab" into table gap;'
    #	result count:
    hgsql -e "select count(*) from gap;" otoGar3
    #	135295
    # == 127442 + 7853
    # verify we aren't adding gaps where gaps already exist
    # this would output errors if that were true:
    gapToLift -minGap=1 otoGar3 nonBridged.lift -bedFile=nonBridged.bed
    # these warnings are misleading, they aren't overlapping gaps, they
    # are merely adjacent to existing gaps:
# WARNING: overlapping gap at HE572041:1726761-1727075(other) and HE572041:1727075-1727076(other)
# WARNING: overlapping gap at HE572319:1050744-1050745(other) and HE572319:1050745-1050904(fragment)
    # there are 27 of these locations

    # there are no non-bridged gaps here:
    hgsql -N -e "select bridge from gap;" otoGar3 | sort | uniq -c
    #	135295 yes

##########################################################################
## WINDOWMASKER (DONE - 2012-03-12 - Hiram)
    mkdir /hive/data/genomes/otoGar3/bed/windowMasker
    cd /hive/data/genomes/otoGar3/bed/windowMasker
    time nice -n +19 doWindowMasker.pl -buildDir=`pwd` -workhorse=hgwdev \
	-dbHost=hgwdev otoGar3 > do.log 2>&1 &
XXX - running - Mon Mar 12 13:37:23 PDT 2012
    #	real    73m45.656s

    # Masking statistics
    twoBitToFa otoGar3.wmsk.2bit stdout | faSize stdin
    #	824327835 bases (216289280 N's 608038555 real 427305862 upper
    #	180732693 lower) in 427428 sequences in 1 files
    #	%21.92 masked total, %29.72 masked real

    twoBitToFa otoGar3.wmsk.sdust.2bit stdout | faSize stdin
    #	824327835 bases (216289280 N's 608038555 real 418637635 upper
    #	189400920 lower) in 427428 sequences in 1 files
    #	%22.98 masked total, %31.15 masked real

    hgLoadBed otoGar3 windowmaskerSdust windowmasker.sdust.bed.gz
    #	Loaded 3422833 elements of size 3

    featureBits -countGaps otoGar3 windowmaskerSdust
    #	real    5m27.388s
    #	405686830 bases of 824327835 (49.214%) in intersection

    #	eliminate the gaps from the masking
    featureBits otoGar3 -not gap -bed=notGap.bed
    #	real    3m11.708s
    #	608038597 bases of 608038597 (100.000%) in intersection
    time nice -n +19 featureBits otoGar3 windowmaskerSdust notGap.bed \
        -bed=stdout | gzip -c > cleanWMask.bed.gz
    #	real    577m19.317s
    #	189400922 bases of 608038597 (31.149%) in intersection

    hgLoadBed otoGar3 windowmaskerSdust cleanWMask.bed.gz
    #	Loaded 3485901 elements of size 4

    featureBits -countGaps otoGar3 windowmaskerSdust
    #	714075485 bases of 1799143587 (39.690%) in intersection
    #	mask the sequence with this clean mask
    zcat cleanWMask.bed.gz \
	| twoBitMask ../../otoGar3.unmasked.2bit stdin \
	    -type=.bed otoGar3.cleanWMSdust.2bit
    twoBitToFa otoGar3.cleanWMSdust.2bit stdout | faSize stdin \
        > otoGar3.cleanWMSdust.faSize.txt
    cat otoGar3.cleanWMSdust.faSize.txt
    #	824327835 bases (216289280 N's 608038555 real 418637635 upper
    #	189400920 lower) in 427428 sequences in 1 files
    #	%22.98 masked total, %31.15 masked real

    # how much does this window masker and repeat masker overlap:
    featureBits -countGaps otoGar3 rmsk windowmaskerSdust
    #	280229203 bases of 1511735326 (18.537%) in intersection

#########################################################################
# MASK SEQUENCE WITH WM+TRF (DONE - 2011-12-04 - Hiram)
    cd /hive/data/genomes/otoGar3
    twoBitMask -add bed/windowMasker/otoGar3.cleanWMSdust.2bit \
	bed/simpleRepeat/trfMask.bed otoGar3.2bit
    #	safe to ignore the warnings about BED file with >=13 fields
    twoBitToFa otoGar3.2bit stdout | faSize stdin > faSize.otoGar3.txt
    cat faSize.otoGar3.txt
    #	824327835 bases (216289280 N's 608038555 real 418051473 upper
    #	189987082 lower) in 427428 sequences in 1 files
    #	%23.05 masked total, %31.25 masked real

    #	create symlink to gbdb
    ssh hgwdev
    rm /gbdb/otoGar3/otoGar3.2bit
    ln -s `pwd`/otoGar3.2bit /gbdb/otoGar3/otoGar3.2bit

########################################################################
