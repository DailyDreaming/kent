#!/bin/bash -e
#
# dbload [-inclEsts] [-extFileUpdate] [-getDownloadSeqs=days] [-updateDownloadSeqs] gbRoot databases timefile workdir
#
# Load genbank/refseq sequences.  This is a light weight script 
# that checks for new alignments and for lock files.  This is the
# common functionality for the *-dbload scripts
#
# timefile is name of time file to check for a new alignments
# being ready, relative to gbRoot
#
# -inclEsts - do both ESTs and mRNAs, otherwise do just mRNAs.
# -extFileUpdate - update gbSeq/gbExtFile entries to point to the
#  latest release.  A limit on the number to update is set in this
#  file.

# errors terminate with message
set -e
trap "echo Error: `hostname` dbload failed >&2; exit 1" ERR
exec </dev/null

maxExtFileUpdate=10000000

# parse command line
inclEsts=NO
opts=""
while [[ $1 == -* ]] ; do
    opt=$1
    shift
    case "$opt" in
        -inclEsts) 
            inclEsts=YES ;;
        -extFileUpdate) 
            opts="$opts -maxExtFileUpdate=$maxExtFileUpdate" ;;
        -getDownloadSeqs=*) 
            opts="$opts $opt" ;;
        -updateDownloadSeqs)
            opts="$opts $opt" ;;
        -*) echo "Error: invalid option $opt" >&2
            exit 1 ;;
    esac
done

if [ $# != 4 ] ; then
    echo "wrong # args: dbload [options] gbRoot databases timefile workdir" >&2
    exit 1
fi

gbRoot=$1
databases=$2
timeFile=$3
workdir=$4

cd $gbRoot
. $gbRoot/lib/gbCommon.sh

verb=""
verb="-verbose=1"

# allow 250mb core dumps
ulimit -c 256000

# data files and dirs
dbloadVar=var/dbload/`hostname`
lastTime=$dbloadVar/`basename $timeFile`
lastTimeTmp=$lastTime.tmp
dbloadTime=$dbloadVar/dbload.time

# use our own .hg.conf for genbank db user
HGDB_CONF=$gbRoot/etc/.hg.conf
export HGDB_CONF


mkdir -p $dbloadVar

# Checking for an existing lock file, Silently exits if lock file exists
# and is less than one day old,  error if older.
gbCheckLock $dbloadVar/run/dbload.lock

# check if the build is newer that what was last loaded
if ! gbCmpTimeFiles $timeFile $lastTime ; then
    exit 0
fi

# save build time before load
cp -f $timeFile $lastTimeTmp

if [ $inclEsts = YES ] ; then
    typeArg=""
else
    typeArg="-type=mrna"
fi

# update databases
gbDbLoadStep $verb $typeArg $opts -workdir=$workdir $databases

# on success, save time load completely and build time we started with
mv -f $lastTimeTmp $lastTime
gbMkTimeFile $dbloadTime

# save tables statistics for all databases
dumpTableStats

echo "`hostname`: dbload completed"

