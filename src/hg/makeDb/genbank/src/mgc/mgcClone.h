/* mgcClone.h was originally generated by the autoSql program, which also 
 * generated mgcClone.c and mgcClone.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef MGCCLONE_H
#define MGCCLONE_H

#define MGCCLONE_NUM_COLS 10

struct mgcClone
/* table of clones */
    {
    struct mgcClone *next;  /* Next in singly linked list. */
    int id_clone;	/* clone id */
    int id_vendor;	/* id of clone arrayer */
    int id_lib;	/* library id */
    int flc_id;	/* flc id */
    int plate;	/* Plate number */
    char *row;	/* Row letter */
    int col;	/* Column number */
    char *create_date;	/* Jul 19 1999  9:01:59:880AM */
    char *series;	/* antibiotic plate series */
    int id_sequencer;	/* id of lab sequencing clone 1=no; 2=yes, 0 = not known yet  */
    };

void mgcCloneStaticLoad(char **row, struct mgcClone *ret);
/* Load a row from mgcClone table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct mgcClone *mgcCloneLoad(char **row);
/* Load a mgcClone from row fetched with select * from mgcClone
 * from database.  Dispose of this with mgcCloneFree(). */

struct mgcClone *mgcCloneLoadAll(char *fileName);
/* Load all mgcClone from whitespace-separated file.
 * Dispose of this with mgcCloneFreeList(). */

struct mgcClone *mgcCloneCommaIn(char **pS, struct mgcClone *ret);
/* Create a mgcClone out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new mgcClone */

void mgcCloneFree(struct mgcClone **pEl);
/* Free a single dynamically allocated mgcClone such as created
 * with mgcCloneLoad(). */

void mgcCloneFreeList(struct mgcClone **pList);
/* Free a list of dynamically allocated mgcClone's */

void mgcCloneOutput(struct mgcClone *el, FILE *f, char sep, char lastSep);
/* Print out mgcClone.  Separate fields with sep. Follow last field with lastSep. */

#define mgcCloneTabOut(el,f) mgcCloneOutput(el,f,'\t','\n');
/* Print out mgcClone as a line in a tab-separated file. */

#define mgcCloneCommaOut(el,f) mgcCloneOutput(el,f,',',',');
/* Print out mgcClone as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* MGCCLONE_H */

