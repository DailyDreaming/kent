   This is the details about the automatic updating of RTDB related tracks
for MGC.  RTDB is the RT-PCR clones for the C-list.  This C-list is only
for human MGC genes but in general it can be for any MGC species.

1. Washington U. setup

     Configuration of RTDB on the supplying end of the data would
     be:

    I. RTDB releases are put into a single file for each genome assembly, 
       i.e. a .tar.gz file, e.g.: 
 
           rtdb.hg17.tar.gz
           rtdb.mm6.tar.gz

   II. When copying files to that directory, do so in an atomic manner, e.g.: 

           cp rtdb.hg17.tar.gz <directory>/rtdb.hg17.tar.gz.TMP
           mv <directory>/rtdb.hg17.tar.gz.TMP <directory>/rtdb.hg17.tar.gz

  III. RTDB files organized the following way, e.g. for rtdb.hg17.tar.gz:

           mgcWUPcrHit.bed
           mgcWUPcrHit.ra
           mgcWUPcrHit.html
             (C-list successes)
           mgcWUPcrInProgress.bed
           mgcWUPcrInProgress.ra
           mgcWUPcrInProgress.html
             (c-list pending)
           mgcWUPcrFail.bed
           mgcWUPcrFail.ra
           mgcWUPcrFail.html
             (c-list failed)
           rtdb.md5
       
       The funny filenames are named that way to match the table names in the UCSC 
       database.  The rtdb.md5 file is for checksumming, and can be created like:
   
           md5sum * > rtdb.md5 

    V. Make RTDB files available through HTTP, or FTP at a specific directory.  
       If HTTP, please set the security settings on the Wash U webserver to allow
       directory listings, i.e. going to a web directory URL without an index.html
       file doesn't cause an error.

   VI. Going to this URL: http://mgc.ucsc.edu/cgi-bin/rtdbLoad, will trigger an 
       update on http://mgc.ucsc.edu.

2. UCSC setup

    I. Configuration files and update scripts in CVS module:
           
           kent/src/hg/makeDb/genbank
 
       specifically, put configuration file rtdb.conf in 

           kent/src/hg/makeDb/genbank/etc

       and all download programs and scripts in

           kent/src/hg/makeDb/genbank/src/rtdb

       The rtdb.conf file has the following basic format:
 
           hg17 = http://somewhere.edu/rtdb.hg17.tar.gz

   II. Files from (I) checked out for use in /cluster/data/genbank
       This location is also where downloaded RTDB goes.  Specifcally, while data is
       being downloaded it goes in:
   
           /cluster/data/genbank/data/download/rtdb

        where it gets decompressed like:

           /cluster/data/genbank/data/download/rtdb/2005.03.06/rtdb.hg17.tar.gz
                                |
                                V
           /cluster/data/genbank/data/processed/rtdb/2005.03.06/*

       If the RTDB is updated on the same day, another directory in the 
       data/download/ area is created, but the directory in data/processed/
       area is recreated.  For example, if RTDB is updated three times in a 
       single day, there's:

           /cluster/data/genbank/data/download/rtdb/2005.03.06/rtdb.hg17.tar.gz
           /cluster/data/genbank/data/download/rtdb/2005.03.06-2/rtdb.hg17.tar.gz
           /cluster/data/genbank/data/download/rtdb/2005.03.06-3/rtdb.hg17.tar.gz

       but only one:

           /cluster/data/genbank/data/processed/rtdb/2005.03.06/*

       In addition to the rtdb.conf file being put in /cluster/data/genbank/etc,
       a fresh copy of kent/src/hg/lib/trackDb.sql should be there also.

  III. The RTDB data goes into the MySQL databases on the mgc computer.

   IV. The RTDB data goes in the database according to its directory. For example,
       the files 

           mgcWUPcrHit.bed
           mgcWUPcrInProgress.bed
           mgcWUPcrFail.bed

       go in the hg17 database as the tables mgcWUPcrHit, mgcWUPcrInProgress, and
       mgcWUPcrFail.  

   IV. The trackDb settings are a bit tricky because the .ra and .html files are
       being provided with the assumption that they're updated and modified along
       with the .bed file.  The idea then is to run hgTrackDb upon the arrival of
       new data, but have the destination table be trackDbLocal_rtdb, where it
       uses the db.trackDbLocal setting in the hg.conf file to display the tracks
       on the browser without having to update the main trackDb table.  For
       example:
  
           hgTrackDb  "" hg17 trackDbLocal_rtdb trackDb.sql .

    V. Creation of a script that downloads, puts data in the right place, and
       updates the the database correctly.  This script can be run by cron
       or through the use of a CGI.  The CGI program should be non-interactive
       and only display the status of the update script or an error if the 
       cron is currently running the script.

3. A perl script called rtdbUpdate lives in the CVS at 
   kent/src/hg/makeDb/genbank/src/rtdb.  This program should be run from
   /cluster/data/genbank like:

   rtdbUpdate [-verbose] [-http-verbose] [-force] database

   The -verbose and -http-verbose print additional information to the log
   file it creates in /cluster/data/genbank/var/rtdbbuild/logs.  The -force
   option allows the RTDB to be downloaded multiple times in a day.  Otherwise
   rtdbUpdate dies.  The database parameter specifies what RTDB URL to fetch
   based on the rtdb.conf file.

   rtdbUpdate does the following:
      
     A. Creates a lockfile for the entire update process, and logs the progress.
   
     B. Downloads the appropriate RTDB tarball from the URL specified in the
        rtdb.conf and stores that file in the data/download/ directory and
        unpacks the files into the data/processed/ directory after checksumming
        them as a validation.
    
     C. Loads each .bed file into a table in the database, and each .ra file
        into a big trackDb.ra file, which gets loaded into the trackDbLocal_rtdb
        table in the database.

     D. The lock is released and the program exits normally.

4. Things to implement:

    I. trackDbLocal search path:  In the hg.conf, instead of just one trackDbLocal
       setting, allow a comma-delimited list of trackDbLocal tables, and order that
       list so that each table (if it exists) going left-to-right overrides the 
       previous table.

   II. Cron and CGI programs to initiate updates of RTDB.

5. CGI security
   A. Issues:
      - Two type of users will be required for the update process:
        - a unix user that will write files to the file system
        - a database user that can update the database

      - Access is granted to the database via the a .hg.conf file owned
        and only readable by that user.

      - CGIs execute as user "www". To similify the implementation,
        it's desirably for the CGI to directly execute programs to
        download the data and update the databases.

   B. Configuration

      - The update processes run as a unix user "mgcrtdb".  This uses exists
        only on the mgc server and no login is allowed.  User "genbank" can
        sudo to become this user for management purposes.

      - The tables are created and updated by MySQL user "mgcrtdb", which
        has write access only to the required subset of tables on the 
        databases containing mgc tracks.

      - A file /genbank/etc/.mgcrtdb.hg.conf, own by "mgcrtdb" contains
        the write password for MySQL user "mgcrtdb".

      - A suid mgcrtdb program, /genbank/libexec/i386/rtdbWwwUpdate, is called
        by the CGI to exec the actually update script
        (/genbank/bin/rtdbUpdate).  rtdbWwwUpdate will ensure that it is being
        called by user "www" and will reset the path and environment to
        a known state before execing the actual update script.
        


      
   
