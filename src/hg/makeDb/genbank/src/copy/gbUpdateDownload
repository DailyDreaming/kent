#!/usr/bin/perl
#
# gbUpdateDownload [options]
#
# update download directories
#
# $Id: gbUpdateDownload,v 1.3 2004/08/24 15:44:11 genbank Exp $
#
my $usage = 
    "gbUpdateDownload [options]\n"
    . "\n"
    . "Update download directories\n"
    . "\n"
    . "Options:\n"
    . "   -verbose\n";

use strict;
use warnings;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../lib";
use gbCommon;

# location of /usr/local/apache/htdocs/goldenPath on hgdownload:
my $htdocsDir = "/mirrordata/apache/htdocs/goldenPath";

# check if a download directory for a databases needs updated
sub downloadNeedsUpdated($) {
    my($db) = @_;
    my $dbDir = getRelDownloadDir($db);
    my $downloadTime = getDownloadTimeFile($db);
    my $htdocsTime = "$htdocsDir/$dbDir/download.time";

    return (loadTimeFile($downloadTime) > loadTimeFile($htdocsTime));
}

# Generate list of databases with download files that are outdated
sub getOutdatedDownloadDbs() {
    my @downDbs;
    foreach my $downTime (glob("download/*/download.time")) {
        my $db = basename(dirname($downTime));
        if (downloadNeedsUpdated($db)) {
            push(@downDbs, $db);
        }
    }
    return @downDbs;
}




# update the download files for the web server.
sub updateDownload($) {
    my($db) = @_;
    my $dbDir = getRelDownloadDir($db);

    my $downloadTime = getDownloadTimeFile($db);
    my $htdocsTime = "$htdocsDir/$dbDir/download.time";

    if ((-e $downloadTime) 
        && ((!-e $htdocsTime)
            || (loadTimeFile($downloadTime) > loadTimeFile($htdocsTime)))) {
        # download dir can't have trailing / for rsync
        my $downloadDir = "download/$dbDir";
        $downloadDir =~ s/\/$//;
        if ($gbCommon::verbose) {
            prMsg("update download files for $db");
        }
        makeDir("$htdocsDir/$dbDir");
        runProg("rsync -r --stats $downloadDir $htdocsDir");
    }
}

# Entry
while (($#ARGV >= 0) && ($ARGV[0] =~ /^-.*/)) {
    my $opt = $ARGV[0];
    shift @ARGV;
    if ($opt eq "-verbose") {
        $gbCommon::verbose = 1;
    } elsif ($opt =~ /^-verbose=/) {
        $gbCommon::verbose = 1;
    } else {
        gbError("invalid option \"$opt\"");
    }
}
if ($#ARGV >= 0) {
    gbError("wrong # args: gbUpdateDownload [options]");
}

my @downDbs = getOutdatedDownloadDbs();

# only start task if at least one is outdated
if ($#downDbs >= 0) {
    beginTask("update-download", "update-download");
    foreach my $db (@downDbs) {
        updateDownload($db);
    }
    endTask();
}
