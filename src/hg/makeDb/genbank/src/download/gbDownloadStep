#!/usr/bin/perl
#
# gbDownloadStep [-verbose] [-ftp-verbose] [-genbank] [-refseq]
#
# Download required genbank and refseq data files.  The result will reflect
# the current state of NCBI ftp site, although only a subset of files will be
# retrieved.
#
# It can be run in an empty directory or one where the script has been
# previously run.  It handles rollovers to new genbank releases automatically.
# This uses the built-in ftp module to avoid problems with error reporting
# in other ftp clients and to implement very strict and safe download
# procedures.
#
# -verbose - print details
# -ftp-verbose - print details of interaction with ftp server
# -genbank - only update genbank
# -refseq - only update refseq
#
# $Id: gbDownloadStep,v 1.6 2004/03/09 02:11:36 markd Exp $
#

use strict;
use warnings;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Net::FTP;
use gbCommon;
use gbFtp;

# Constants
my $FTP_HOST = "ftp.ncbi.nih.gov";

# other globals
my $tmpDir = "tmp";

# parse the genbank version from the README.genbank file
#  - readme - file to parse
sub parseGenBankVer($) {
    my($readme) = @_;

    open(FH, $readme) || die("can't open $readme");
    my($line, $version);
    while (defined($line = <FH>) && !defined($version)) {
        if ($line =~ /^GenBank Flat File Release ([0-9.]+)/) {
            $version = $1;
        }
    }
    close(FH) || die("close failed");
    if (!defined($version)) {
        die("can't parse GenBank release from $readme");
    }
    return $version;
}

# determine of version of GenBank on the NCBI server by parsing the
# README file.
sub getGenBankVer() {
    ftpOpen();;
    my $remReadme = "genbank/README.genbank";
    my $locReadme = "$tmpDir/README.genbank";
    unlink $locReadme;
    ftpSafeGet($remReadme, $locReadme);
    my $version = parseGenBankVer($locReadme);
    unlink($locReadme);
    return $version;
}

# determine of version of RefSeq on the NCBI server by examining the
# release/release-catalog directory
sub getRefSeqVer() {
    ftpOpen();;
    my @catFiles = ftpGetDirList("refseq/release/release-catalog");
    my $version;
    foreach my $file (@catFiles) {
        if (($version) = ($file =~ m/release-catalog\/release(.+)\.files\.installed$/)) {
            last;
        }
    }
    if (!defined($version)) {
        gbError("can't find ftp://$FTP_HOST/refseq/release/release-catalog/release*.files.installed");
    }
    return $version;
}

# Download a full release.  Of justCheck is set, just validate local
# file existance and size.  Return true if files were downloaded.
sub downloadOrCheckFull($$$$;$) {
    my($justCheck, $remDir, $outDir, $fileRE, $excludeRE) = @_;

    my @files = ftpGetDirList($remDir);
    my @gotFiles = ();

    if ($main::verbose) {
        if ($justCheck) {
            print STDERR "check of $remDir with $outDir\n";
        } else {
            print STDERR "full download of $remDir to $outDir\n";
        }
    }

    my($remFile);
    foreach $remFile (@files) {
        my $file = basename($remFile);
        if (($file =~ $fileRE)
            && (!defined($excludeRE) || !($file =~ $excludeRE))) {
            my $localFile = "$outDir/$file";
            if (ftpGetOrCheck($justCheck, $remFile, $localFile)) {
                push(@gotFiles, $localFile);
            }
        } else {
            if ($main::verbose) {
                print STDERR "skip remote file: $remFile\n";
            }
        }
    }
    if ($#gotFiles >= 0) {
        if ($justCheck) {
            die("BUG: shouldn't be here");
        }
        md5Files("$outDir/full.md5", @gotFiles);
    }
    return ($#gotFiles >= 0);
}

# Download or check daily files.
sub downloadOrCheckDaily($$$) {
    my($remDir, $outDir, $fileRE) = @_;
    my @files = ftpGetDirList($remDir);

    if ($main::verbose) {
        print STDERR "download or check of $remDir to $outDir\n";
    }

    my($remFile);
    foreach $remFile (@files) {
        my $file = basename($remFile);
        if ($file =~ $fileRE) {
            my $localFile = "$outDir/$file";
            if (ftpGetOrCheck(0, $remFile, $localFile)) {
                md5Files("$outDir/$file.md5", $localFile);
            }
        } else {
            if ($main::verbose) {
                print STDERR "skip remote file: $remFile\n";
            }
        }
    }
}

# Update GenBank files. If no directory exists for the curent genbank
# version, download the full release. Get new, non-cumulative daily
# files.
sub updateGenBank() {
    my($version) = getGenBankVer();
    my $fullRE = qr/(^gb.*\.seq\.gz$)|(^.*\.txt$)|(^README.*$)|(^gb*\.txt\.gz$)/;
    my $dailyRE = qr/^nc.*\.flat\.gz$/;
    my $fullExcludeRE = qr/(^gbsts.*\.seq\.gz$)|(^gbgss.*\.seq\.gz$)/;

    ftpOpen();

    my $genBankDir = "data/download/genbank.$version";

    if (! -e "$genBankDir/full.md5") {
        # get the full directory.  Check summing the files takes enough
        # time that the conection may time out, so reopen.
        downloadOrCheckFull(0, "genbank", $genBankDir, $fullRE, $fullExcludeRE);

        ftpOpen();  # reopen
    } else {
        # just check existance and size
        downloadOrCheckFull(1, "genbank", $genBankDir, $fullRE, $fullExcludeRE);
    }

    # now get or verify dailies
    downloadOrCheckDaily("genbank/daily-nc", 
                         "$genBankDir/daily-nc", $dailyRE);

    ftpClose();
    return $version;
}

# Update RefSeq files. If no directory exists for the curent RefSeq version,
# download the full release. Get new, non-cumulative daily files.  
sub updateRefSeq() {
    my($version) = getRefSeqVer();
    my $fullRE = qr/(^complete.+.rna\.gbff\.gz$)/;
    my $dailyRE = qr/(^rsnc.*\.gbff\.gz$)/;

    ftpOpen();

    my $refSeqDir = "data/download/refseq.$version";

    if (! -e "$refSeqDir/release/complete/full.md5") {
        # get the full directory.  Check summing the files could take enough
        # time that the conection maybe time out, so reopen.
        downloadOrCheckFull(0, "refseq/release/complete",
                            "$refSeqDir/release/complete", $fullRE);
        ftpOpen(); # reopen
    } else {
        # just check existance and size
        downloadOrCheckFull(1, "refseq/release/complete",
                            "$refSeqDir/release/complete", $fullRE);
    }

    # Get or verify dailies. We just download all dailiess, even if they are
    # before cummulative download.  It's too risky to rely on the times.
    downloadOrCheckDaily("refseq/daily", "$refSeqDir/daily", $dailyRE);
    ftpClose();
}

# Entry point
$main::verbose = 0;
$main::genbankUpd = 0;
$main::refseqUpd = 0;
while (($#ARGV >= 0) && ($ARGV[0] =~/^-.*/)) {
    my $opt = $ARGV[0];
    shift @ARGV;
    if ($opt eq "-verbose") {
        $main::verbose = 1;
        $gbCommon::verbose = 1;
    } elsif ($opt eq "-ftp-verbose") {
        $gbFtp::verbose = 1;
    } elsif ($opt eq "-genbank") {
        $main::genbankUpd = 1;
    } elsif ($opt eq "-refseq") {
        $main::refseqUpd = 1;
    } else {
        gbError("invalid option \"$opt\"");
    }
}
if (!($main::genbankUpd || $main::refseqUpd)) {
    $main::genbankUpd = 1;
    $main::refseqUpd = 1;
}

if ($#ARGV >= 0) {
    die("Wrong \# args: gbDownloadStep [-verbose] [-ftp-verbose] [-genbank] [-refseq]");
}

beginTask("build", "download");
ftpInit($FTP_HOST);

if ($main::genbankUpd) {
    updateGenBank();
}
if ($main::refseqUpd) {
    updateRefSeq();
}
ftpClose();
endTask();
