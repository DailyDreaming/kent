#!/bin/bash -e
#
# Run blat, polyInfo and pslIntronsOnly.
#
# gbBlat [options] database genomeFile rnaFa.gz out.psl.gz
#
# Options:
#  -keep - keep temporary files.
# Arguments:
#  - database - hg13, etc; used to determine ooc file to use.
#  - genomeFile - the contig fasta file or chromosome nib subseq spec.
#  - rnaFa.gz - the gzipped RNA/EST query fasta file.  The name of this file
#    must be in the form type.orgCat.* (mrna.native, est.aa.xeno, etc).  This
#    is used to determine various parameter settings.
#  - out.psl.gz - PSL output file  The other output filenames are derived
#    by removing the .psl.gz from the name.  If no sequences align, an
#    empty psl is still created to server as a job-completed marker.
#
# PSL files are written to a local tmp directory and then copies to the output
# directory to minimize NFS trafic.  If no sequences align, an empty psl file
# is still produced.  This script is very careful to exit non-zero if an error
# occurs.
#
set -e

# tools are relative to current directory.  Use path to this script to find
# bin dir. Can't use MACHTYPE as it is i686-pc-linux-gnu on the cluster.
toolsBin=`dirname $0`/i386
BLAT=$toolsBin/blat
POLYINFO=$toolsBin/polyInfo
PSL_INTRONS_ONLY=$toolsBin/pslIntronsOnly

HG_OOC=/scratch/hg/h/11.ooc
MM_OOC=/scratch/hg/h/mouse11.ooc
RN_OOC=/scratch/hg/h/rat11.ooc

# entry, parse arguments
keepTmp="NO"
while [[ $1 == -* ]] ; do
    opt="$1"
    shift
    case "$opt" in
        -keep)
            keepTmp="YES";;
        *)
            echo "Error: invalid option: $opt" >&2
            exit 1 ;;
    esac
done

if [ $# -ne 4 ] ; then
    echo 'Wrong # args: gbBlat [options] database genomeFile rnaFa pslBaseDir' >&2
    exit 1
fi
database="$1"
genomeFile="$2"
rnaFa="$3"
rnaBase=`basename $rnaFa .fa`
outPsl="$4"

outDir=`dirname $outPsl`
outBase=`basename $outPsl .psl.gz`
outPrefix=$outDir/$outBase

outOi="$outPrefix.oi.gz"
outIntronPsl="$outPrefix.intronPsl.gz"

# skip if output file already exists
if [ -e $outPsl ] ; then
    echo "output psl exists, skipping: $outPsl" >&2
    exit 0
fi

# Parse input file name for use in selecting parameters.
set -- `echo $rnaBase |sed 's/\./ /g'`
if [ $# -lt 3 ] ; then
    echo "Error: can't parse mrna file name to get parameters: $rnaBase" >&2
    exit 1
fi
type=$1
# ESTs split by accPrefix as well
if [ "x$type" = "xest" ] ; then
    orgCat=$3
else
    orgCat=$2
fi
case "$type" in
    mrna|est) ;;
    *) echo "Error: invalid type \"$type\" in mrna file name: $rnaBase" >&2
    exit 1;;
esac
case "$orgCat" in
    native|xeno) ;;
    *) echo "Error: invalid organism category \"$orgCat\" in mrna file name: $rnaBase" >&2
    exit 1;;
esac

# ooc chosen based on database
case "$database" in
    hg*) oocOpt="-ooc=${HG_OOC}" ;;
    mm*) oocOpt="-ooc=${MM_OOC}" ;;
    rn*) oocOpt="-ooc=${RN_OOC}" ;;
    ci*) ;;
    *) echo "Error: gbBlat doesn't know how get ooc for database \"$database\"" >&2
        exit 1;;
esac


# determine blat parameters
case "$orgCat" in
    native)
        case "$type" in
            mrna)
                blatParams="-q=rna -fine $oocOpt" ;;
            est)
                blatParams="-mask=lower $oocOpt" ;;
        esac;;
    xeno) 
        case "$type" in
            mrna)
                blatParams="-q=rnax -t=dnax -mask=lower";;
            est)
                blatParams="-q=dnax -t=dnax -mask=lower";;
        esac;;
esac

# local directory for all work.
tmpDir="/var/tmp/gbBlat.$$.tmp"
rm -rf $tmpDir
mkdir -p $tmpDir

# create out directory now, so mkdir failure (usually NFS) will not happen
# after blat has completed.  Try twice, just because we sometimes get 
# weird failures 
mkdir -p $outDir || (sleep 2 && mkdir -p $outDir)

# arrange for cleanup on any exit
if [ "x$keepTmp" = "xYES" ] ; then
    echo will keep tmpDir `hostname` $tmpDir
else
    trap "rm -rf $tmpDir" EXIT
fi

# Uncompress rna, as BLAT doesn't read from a pipe
rnaFaTmp=$tmpDir/$rnaBase.fa
zcat $rnaFa >$rnaFaTmp

# run blat, don't create header, so we can just cat together later
localPsl="$tmpDir/$outBase.psl"
$BLAT -noHead $blatParams $genomeFile $rnaFaTmp $localPsl

# the rest is done only if the output file length is greater than zero
if [ -s $localPsl ] ; then
    # get orientation info
    localOi="$tmpDir/$outBase.oi"
    $POLYINFO $localPsl $genomeFile $rnaFaTmp $localOi

    # if these are ESTs, select ones that have introns, saving only
    # if some actually exist.
    localIntronPsl="$tmpDir/$outBase.intronPsl"
    if [ $type == "est" ] ; then
        $PSL_INTRONS_ONLY $localPsl $genomeFile $localIntronPsl
        if [ -s $localPsl ] ; then
            gzip -1c $localIntronPsl > $outIntronPsl.tmp
            mv -f $outIntronPsl.tmp $outIntronPsl
        else
            rm -f $localIntronPsl
        fi
    fi

    # copy into place, oi first, since it's the derived data and useless
    # without the psl.
    gzip -1c $localOi > $outOi.tmp
    mv -f $outOi.tmp $outOi
fi

# always installed psl (and installed last) to indicate completion
gzip -1c $localPsl > $outPsl.tmp
mv -f $outPsl.tmp $outPsl
