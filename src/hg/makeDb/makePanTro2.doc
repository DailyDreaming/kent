#!/bin/csh -f # set emacs mode
exit; # don't actually run this like a script :)

# This file describes browser build for the panTro2 chimp genome: Feb 2006
#
#	"$Id: makePanTro2.doc,v 1.11 2006/03/28 21:37:57 angie Exp $"
#
#######################################################################
# DOWNLOAD 6X CHIMP SEQUENCE FROM LaDeana HIllier, WUSTL (2006-02-27 - kate)
#
# panTro2
# 6X Chimp from LaDeana Hillier, WUSLT 

# NCBI accession for the project is:  AADA01000000  (02-SEP-2005)
# NOTE: chrom numbering follows hunan orthology, a change from panTro1.
# Human chrom 2 is orthologus to chimp chroms 2a and 2b.

# SETUP BUILD AREA AND DOWNLOAD ASSEMBLY (DONE 2006-02-27 kate)

    ssh kkstore01
    mkdir /cluster/store8/panTro2
    ln -s /cluster/store8/panTro2 /cluster/data
    cd /cluster/data/panTro2

    # annotations dir
    mkdir bed

    # temp dir for lift files and 
    # scripts copy-pasted from this doc
    mkdir jkStuff

    # make download dir
    wget ftp://genome.wustl.edu/pub/user/lhillier/panTro2.tar.gz

    tar xvfz *.gz
    mv panTro2 wustl

    # for finished chr21, there is chr21.agp, chr21.clones.agp,
    #   and chr21.fa (complete chrom fasta file)
    # for partially finished chrY, there is:
    #   .agp, .clones.agp, and .fa for chrY and chrY_random
    # for chr7, that includes a 5M finished region, there
    # are:  chr7.agp, chr7.contigs.fa, and chr7.clones.fa
    # (also chr7_random.{agp,contigs.fa}
    # For all other chroms there are AGP files plus contig fasta:
    #   chr*.agp, chr*.contigs.fa files

    grep '>' wustl/*.contigs.fa | wc -l
    # 246371
    # NOTE: Release notes list 265882 contigs 
    # (due to replacement of contigs by clone sequence in finished chroms?)
    grep '>' wustl/*.clones.fa | wc -l
    # 505


# BUILD CHROM FASTA FILES (2006-02-28 kate)
#  Most chroms are built from contigs, a few have
#       clones in the AGP, chr7 has both!

    cut -f1 wustl/*.agp | uniq | grep -v '^$' | grep -v random | \
        sed 's/chr//' > chrom.lst
    wc -l chrom.lst
    # 28
    # 1,2a,2b,3-22,X,Y,M,Un, and chr6_hla_hap1

cat > jkStuff/makeChroms.csh << 'EOF'
    date
    foreach d (`cat chrom.lst`)
        set c = chr$d
        echo $c
        mkdir $d
        cp wustl/$c.{agp,*.fa} $d
        if (-e $d/$c.clones.fa) then
            set fa = clones.fa
            # chr7 has both contigs and clones and clone file
            # doesn't have genbank sequence header -- merge them
            if ($c == "chr7") then
                cat $d/$c.contigs.fa  >> $d/$c.clones.fa
                rm $d/$c.contigs.fa
            else
                # extract clone id from sequence name line to please agpToFa
                awk -F\| '{if (/^>/) printf(">%s\n", $4); else print}' \
                wustl/$c.clones.fa > $d/$c.clones.fa
            endif
        else
            set fa = contigs.fa
        endif
        agpToFa -simpleMultiMixed $d/$c.agp $c $d/$c.fa $d/$c.$fa
        if (-e wustl/${c}_random.agp) then
            set r = ${c}_random
            echo $r
            cp wustl/$r.{agp,*.fa} $d
            if (-e $d/$r.clones.fa) then
                set fa = clones.fa
            awk -F\| '{if (/^>/) printf(">%s\n", $4); else print}' \
                wustl/$r.clones.fa > $d/$r.clones.fa
            else
                set fa = contigs.fa
            endif
            agpToFa -simpleMultiMixed $d/$r.agp $r $d/$r.fa $d/$r.$fa
        endif
    end
    date
'EOF'
    # << happy emacs
    csh jkStuff/makeChroms.csh >&! jkStuff/makeChroms.log &
        # 5 minutes

cat > jkStuff/checkChroms.csh << 'EOF'
    date
    foreach d (`cat chrom.lst`)
        set c = chr$d
        echo $c
        faSize $d/$c.fa
        checkAgpAndFa $d/$c.agp $d/$c.fa | tail -1
        if (-e $d/${c}_random.fa) then
            set r = ${c}_random
            echo $r
            faSize $d/$r.fa
            checkAgpAndFa $d/$r.agp $d/$r.fa | tail -1
        endif
    end
    date
'EOF'
    # << happy emacs
    csh jkStuff/checkChroms.csh >&! jkStuff/checkChroms.log &
        # 3 minutes

    # Replace chrM and chrM_random from this assembly with
    # chrM from NCBI.
    # so retrieving it from NCBI, via method described in canFam2 make doc.
    # (search "pan troglodytes mitochondrion genome" finds NC_001643
    rm -fr M
    mkdir M
    cd M
    wget -O chrM.fa 'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=nucleotide&val=5835121&dopt=FASTA'
    # Edit chrM.fa: make sure the long fancy header line says it's the 
    # Canis familiaris mitochondrion complete genome, and then replace the 
    # header line with just ">chrM".
    faSize chrM.fa
        # 16554 bases

    # cleanup chrom dirs
    cd ..
    foreach d (`cat chrom.lst`)
        set c = chr$d
        mkdir $d/parts
        mv $d/*.clones.fa $d/*.contigs.fa $d/parts
    end

    # retrieve fixed chr9.agp from LaDeana (2006-03-02)
    mkdir wustl.chr9
    cd wustl.chr9
    wget ftp://genome.wustl.edu/pub/user/lhillier/pub/chr9.agp.gz
    gunzip *.gz
    cp -p chr9.agp ../9
    cd ../9
    agpToFa -simpleMultiMixed chr9.agp chr9 chr9.fa parts/chr9.contigs.fa
    checkAgpAndFa chr9.agp chr9.fa | tail -1


########################
# QUALITY SCORES  (2006-03-15 kate)
# From Joanne Nelson, WUSTL

    ssh kkstore01
    cd /cluster/data/panTro2
    mkdir bed/quality
    cd bed/quality
    wget -r ftp://genome.wustl.edu/private/963082470306293/upload_for_kate
    mkdir wustl
    mv genome.wustl.edu/private/*/upload*/*.qvl wustl
    rm -fr genome.wustl.edu
    grep '>' wustl/chr*.qvl | wc -l
        # 246371
        # same as #contigs in sequence files, above
    gzip wustl/*.qvl

cat > makeQuals.csh << 'EOF'
    date
    mkdir -p qac
    set b = /cluster/data/panTro2
    foreach f (`ls wustl/*.qvl.gz | grep -v chrM | grep -v ContigF`)
        set c = $f:t:r:r:r
        echo $c
        set d = `echo $c | sed 's/chr//;s/_random//'`
        # contig names in quality files are slightly different from AGP's
        sed 's/Contig/bld2_Cont/' $b/$d/$c.agp > agp.tmp
        nice zcat wustl/$c.contigs.qvl | \
            nice qaToQac stdin stdout | \
            nice qacAgpLift agp.tmp stdin qac/$c.qac
    end
    date
'EOF'
    # << happy emacs
    csh makeQuals.csh >&! makeQuals.log &
#chr7
#AC161123.3 not found
    # need special handling for chr7, that has both contigs
    # (with quality scores), and clones (w/o)
    # probably we want to dummy up high qual scores for the
    # finished clone

cat > toWig.csh << 'EOF'
    foreach f (qac/*.qac)
        qacToWig $f stdout
    end 
'EOF'
    # << happy emacs
    date
    csh toWig.csh | 
        nice wigEncode stdin quality.wig quality.wib
    date


########################
# CREATE DATABASE AND GRP TABLE (DONE 2006-02-28 kate)
    ssh hgwdev
    hgsql '' -e 'create database panTro2'
    # Use df to make sure there is at least 75G free on hgwdev:/var/lib/mysql
    df -h /var/lib/mysql
        # /dev/sdc1             1.8T  1.6T   71G  96% /var/lib/mysql
    # oops -- not enough ?

    hgsql panTro2 -e \
      "create table grp (PRIMARY KEY(NAME)) select * from mm8.grp"
    # remove encode track groups
    hgsql panTro2 -e "delete from grp where name like 'encode%'"
    

########################
# MAKE CHROMINFO TABLE WITH (TEMPORARILY UNMASKED) 2BIT (DONE 2006-02-28 kate)
    # Redo to fix chr9 (2006-03-02 kate)
    # Make .2bit, unmasked until RepeatMasker and TRF steps are done.
    # Do this now so we can load up RepeatMasker and run featureBits; 
    # can also load up other tables that don't depend on masking.  
    ssh kkstore01
    cd /cluster/data/panTro2
    nice faToTwoBit ?{,?}/chr*.fa 6_hla_hap1/chr*.fa panTro2.2bit

    mkdir bed/chromInfo
    twoBitInfo panTro2.2bit stdout \
    | awk '{print $1 "\t" $2 "\t/gbdb/panTro2/panTro2.2bit";}' \
      > bed/chromInfo/chromInfo.tab
    
    # Make symbolic links from /gbdb/panTro2/ to the real .2bit.
    ssh hgwdev
    mkdir /gbdb/panTro2
    ln -s /cluster/data/panTro2/panTro2.2bit /gbdb/panTro2/
    # Load /gbdb/panTro2/panTro2.2bit paths into database and save size info.
    cd /cluster/data/panTro2
    hgsql panTro2  < $HOME/kent/src/hg/lib/chromInfo.sql
    hgsql panTro2 -e 'load data local infile \
      "/cluster/data/panTro2/bed/chromInfo/chromInfo.tab" \
      into table chromInfo;'
    echo "select chrom,size from chromInfo" | hgsql -N panTro2 > chrom.sizes
    wc chrom.sizes
       # 52

# GOLD AND GAP TRACKS (DONE 2006-02-28 kate)
    # Redo to fix chr9 (2006-03-02 kate)
    ssh hgwdev
    cd /cluster/data/panTro2
    #hgGoldGapGl -noGl -chromLst=chrom.lst panTro2 /cluster/data/panTro2 .
    hgGoldGapGl -noGl panTro2 /cluster/data/panTro2 .
    # featureBits fails if there's missing tables, so make them:
    hgsql panTro2 -e "create table chrM_gap select * from chr1_gap where 0=1"
    hgsql panTro2 -e "create table chr6_hla_hap1_gap select * from chr1_gap where 0=1"

[kate@hgwdev panTro2]$ nice featureBits panTro2 -countGaps -noRandom gap
423043673 bases of 3175632892 (13.322%) in intersection
[kate@hgwdev panTro2]$ nice featureBits panTro1 -countGaps -noRandom gap
671583599 bases of 3083993401 (21.776%) in intersection
[kate@hgwdev panTro2]$ nice featureBits hg15 -countGaps -noRandom gap
238329157 bases of 3070537687 (7.762%) in intersection
[kate@hgwdev panTro2]$ nice featureBits hg18 -countGaps -noRandom gap
222401287 bases of 3091592211 (7.194%) in intersection

chr1   12771775 bases of 229974691 (5.554%) in intersection
chr10   9298149 bases of 135001995 (6.887%) in intersection
chr11   10601065 bases of 134204764 (7.899%) in intersection
chr12   5495847 bases of 135371336 (4.060%) in intersection
chr13   28069601 bases of 115868456 (24.225%) in intersection
chr14   21093350 bases of 107349158 (19.649%) in intersection
chr15   23087195 bases of 100063422 (23.073%) in intersection
chr16   16171896 bases of 90682376 (17.834%) in intersection
chr17   9948345 bases of 83384210 (11.931%) in intersection
chr18   3076876 bases of 77261746 (3.982%) in intersection
chr19   12470245 bases of 64473437 (19.342%) in intersection
chr20   4187763 bases of 62293572 (6.723%) in intersection
chr21   13764311 bases of 46489110 (29.608%) in intersection
chr22   17821597 bases of 50165558 (35.526%) in intersection
chr2a   8581091 bases of 114460064 (7.497%) in intersection
chr2b   120728260 bases of 248603653 (48.563%) in intersection
chr3   8990241 bases of 203962478 (4.408%) in intersection
chr4   7932593 bases of 194897272 (4.070%) in intersection
chr5   8761164 bases of 183994906 (4.762%) in intersection
chr6   9202606 bases of 173908612 (5.292%) in intersection
chr6_hla_hap1   0 bases of 34169 (0.000%) in intersection
chr7   9183564 bases of 160261443 (5.730%) in intersection
chr8   6927299 bases of 145085868 (4.775%) in intersection
#chr9   115285361 bases of 224587821 (51.332%) in intersection
#  Seems too big -- notified LaDeana of huge gap (80MB)
#  She fixed the AGP, and here's the result
chr9    29207531 bases of 138509991 (21.087%) in intersection
chrM   0 bases of 16554 (0.000%) in intersection
chrUn   8188633 bases of 58616431 (13.970%) in intersection
chrX   24409881 bases of 155361357 (15.712%) in intersection
chrY   1261428 bases of 23952694 (5.266%) in intersection


# HGCENTRALTEST ENTRY AND TRACKDB TABLE (DONE 2006-03-03 kate)
    ssh hgwdev
    cd $HOME/kent/src/hg/makeDb/trackDb
    cvs up -d -P
    # Edit that makefile to add in all the right places and do
    make update
    cvs commit makefile
    mkdir -p chimp/panTro2
    cvs add chimp/panTro2
    cvs ci -m "trackDb dir for second chimp genome(s)" chimp/panTro2
    # Do this in a clean (up-to-date, no edits) tree:
    make alpha DBS=panTro2

    # Add dbDb entry (not a new organism so defaultDb and genomeClade already 
    # have entries):
    hgsql -h genome-testdb hgcentraltest \
      -e 'insert into dbDb (name, description, nibPath, organism,  \
          defaultPos, active, orderKey, genome, scientificName,  \
          htmlPath, hgNearOk, hgPbOk, sourceName)  \
          values("panTro2", "Jan. 2006", \
          "/gbdb/panTro2", "Chimp", "chr7:115705331-115981791", 1, \
          15, "Chimp", "Pan troglodytes", \
          "/gbdb/panTro2/html/description.html", 0, 0, \
          "Washington University Build 2 Version 1");'


# SPLIT SEQUENCE FOR REPEATMASKER (2006-03-01 kate)
# Split into 500K chunks, at gaps if possible

    ssh kkstore01
    cd /cluster/data/panTro2
    mkdir split500K
    foreach d (`cat chrom.lst`)
        set c = chr$d
        mkdir split500K/$c
        faSplit gap -minGapSize=100 -verbose=2 $d/$c.fa 500000 \
                split500K/$c/${c}_ -lift=split500K/$c.lft
        set r = ${c}_random
        if (-e $d/$r.fa) then
            mkdir split500K/$r
            faSplit gap -minGapSize=100 -verbose=2 $d/$r.fa 500000 \
                split500K/$r/${r}_ -lift=split500K/$r.lft
        endif
    end
    mkdir lifts
    cat split500K/*.lft > lifts/split500K.lft

    # Redo chr9 (2006-03-02 kate)
    rm -fr split500K/chr9
    mkdir split500K/chr9
    faSplit gap -minGapSize=100 -verbose=2 9/chr9.fa 500000 \
                split500K/chr9/chr9_ -lift=split500K/chr9.lft
    # forgot to redo this -- doing it now (2006-03-21 kate)
    cat split500K/*.lft > lifts/split500K.lft


# REPEATMASKER RUN (2006-03-01 kate)
# Using -species pan option to get chimp repeats
# Redone 3/10 with additional chimp repeats from
# Evan Eichler (left out of -pan lib)

    ssh pk
    cd /cluster/data/panTro2
    mkdir RMRun
    cd RMRun

    # Record RM version used
    ls -l /cluster/bluearc/RepeatMasker
        #lrwxrwxrwx    1 hiram    protein        18 Jan 20 13:13 /cluster/bluearc/RepeatMasker -> RepeatMasker060120/
    cat /cluster/bluearc/RepeatMasker/Libraries/version > RM.version
        #RM database version 20060120
    # Run RepeatMasker on a dummy input, just to make it initialize its chimp 
    # libraries once before the cluster run
    /cluster/bluearc/RepeatMasker/RepeatMasker -spec pan /dev/null
        # Building species libraries in: /cluster/bluearc/RepeatMasker060120/Libraries/20060120/pan

    pushd  /cluster/data/panTro2/split500K
    ls -1S */*.fa | sort > ../RMRun/split.lst
    popd

    cat << 'EOF' > template
#LOOP
./RMChimp.csh $(dir1) $(root1) {check out line out/$(dir1)/$(root1).out}
#ENDLOOP
'EOF'
    # << for emacs
    
cat > RMChimp.csh << 'EOF'
#!/bin/csh  -ef
set d = /cluster/data/panTro2
set tmp = /scratch/tmp/panTro2/$2
mkdir -p $tmp
mkdir -p out/$1
cp $d/split500K/$1/$2.fa $tmp
pushd $tmp
/cluster/bluearc/RepeatMasker060120/RepeatMasker -ali -s -species pan $2.fa
popd
cp -p $tmp/$2.fa.out $3
if (-e $tmp/$2.fa.align) cp $tmp/$2.fa.align out/$1
if (-e $tmp/$2.fa.tbl) cp $tmp/$2.fa.tbl out/$1
if (-e $tmp/$2.fa.cat) cp $tmp/$2.fa.cat out/$1
rm -fr $tmp/*
rmdir --ignore-fail-on-non-empty $tmp
rmdir --ignore-fail-on-non-empty /scratch/tmp/panTro2
'EOF'
    # << for emacs
    chmod +x RMChimp.csh

    gensub2 split.lst single template jobList
    para create jobList
        # 6538 jobs
    para try

# CPU time in finished jobs:   32493557s  541559.29m  9025.99h  376.08d  1.030 y
# IO & Wait Time:                 40999s     683.31m    11.39h    0.47d  0.001 y
# Average job time:                4976s      82.94m     1.38h    0.06d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:            7607s     126.78m     2.11h    0.09d
# Submission to last job:        121890s    2031.50m    33.86h    1.41d

#  34 hours

    # Lift up the 500KB .out's to chrom level
    ssh kkstore01
    cd /cluster/data/panTro2/RMRun
cat > lift.csh << 'EOF'
    foreach d (`cat ../chrom.lst`)
        set c = chr$d
        echo $c
        liftUp ../$d/$c.fa.out ../lifts/split500K.lft error out/$c/*.out
        set r = ${c}_random
        if (-e out/$r) then
            echo $r
            liftUp ../$d/$r.fa.out ../lifts/split500K.lft error out/$r/*.out
        endif
    end
'EOF'
    # << for emacs
    csh lift.csh >&! lift.log &

    # Redo chr9 after remaking split500K.lft (2006-03-24 kate)
    liftUp ../9/chr9.fa.out ../lifts/split500K.lft error out/chr9/*.out

    # Load .outs into database
    # Redone after relift (2006-03-24 kate)
    ssh hgwdev
    cd /cluster/data/panTro2
    ls */*.fa.out | wc -l
        # 52 (one per chrom)... load them up
    hgLoadOut panTro2 */*.fa.out
# Several messages like: Strange perc. field -3.1 line 327855 of 1/chr1.fa.out
# And at end: 953 records dropped due to repStart > repEnd
# These are noted in rn4 and other make docs.
# TODO: run it with -verbose=2 and send output to Robert Hubley/Arian Smit


# VERIFY REPEATMASKER RESULTS (2006-03-03 kate)
    # TODO: Eyeball some repeat annotations in the browser, compare to lib seqs.
    # Run featureBits on previous genome build, and compare:
    #nice featureBits panTro2 rmsk
        # w/o 2 Eichler repeats:
        # 1396630330 bases of 2909512873 (48.002%) in intersection
        # with 2 Eichler repeats:
        # 1401134418 bases of 2909512873 (48.157%) in intersection
    nice featureBits panTro1 rmsk
        # 1311281819 bases of 2733948177 (47.963%) in intersection
        # after chr9 .out reload...
        # 1311281819 bases of 2733948177 (47.963%) in intersection

    # looks good -- similar but just a bit higher

    ssh hgwdev
    cd /cluster/data/panTro2/RMRun
    # take a look at 
     hgsql panTro2 -e "select distinct(repFamily) from chr1_rmsk" > repFamilies.panTro2
     hgsql panTro2 -e "select distinct(repName) from chr1_rmsk where repFamily <> 'Simple_repeat' and repFamily <> 'Low_complexity' order by repName" > repNames.panTro2
    wc -l repNames.panTro2
     hgsql panTro1 -e "select distinct(repFamily) from chr1_rmsk" > repFamilies.panTro1
     hgsql panTro1 -e "select distinct(repName) from chr1_rmsk" > repNames.panTro1
     hgsql panTro1 -e "select distinct(repName) from chr1_rmsk where repFamily <> 'Simple_repeat' and repFamily <> 'Low_complexity' order by repName" > repNames.panTro1
    wc -l *Names*
        # 864 repNames.panTro1
        # 906 repNames.panTro2
            # 40 new repeats (+ 2 added from Eichler)
    wc -l *Families*
        # 38 repFamilies.panTro1
        # 38 repFamilies.panTro2
            # no new repeat families


# RUN TRF TO IDENTIFY SIMPLE REPEATS (2006-03-01 kate)

    ssh kkstore01
    cd /cluster/data/panTro2

    # First break up sequence into 5MB chunks at contigs/gaps
    # NOTE: Probably unnecessary -- Hiram has run on whole chroms
    # using small cluster
    mkdir split5M
    foreach d (`cat chrom.lst`)
        set c = chr$d
        mkdir split5M/$c
        faSplit gap -minGapSize=100 -verbose=2 $d/$c.fa 5000000 \
                split5M/$c/${c}_ -lift=split5M/$c.lft
        set r = ${c}_random
        if (-e $d/$r.fa) then
            mkdir split5M/$r
            faSplit gap -minGapSize=100 -verbose=2 $d/$r.fa 5000000 \
                split5M/$r/${r}_ -lift=split5M/$r.lft
        endif
    end
    mkdir lifts
    cat split5M/*.lft > lifts/split5M.lft

    # Run TRF
    mkdir -p bed/simpleRepeat/trf
    cd bed/simpleRepeat
cat > runTrf.csh << 'EOF'
    date
    foreach d (`find  /cluster/data/panTro2/split5M/* -type d`)
        cd $d
        foreach f (*.fa)
            set b = $f:r
            echo $f
            trfBig -trf=/cluster/bin/i386/trf $f /dev/null -tempDir=/tmp \
                    -bedAt=/cluster/data/panTro2/bed/simpleRepeat/trf/$b.bed
        end
    end
    date
'EOF'
    csh runTrf.csh >&! runTrf.log &

    # ~6 hours run-time

    # Redo chr9 (2006-03-02 kate)
    cd /cluster/data/panTro2
    rm -fr split5M/chr9
    mkdir split5M/chr9
    faSplit gap -minGapSize=100 -verbose=2 9/chr9.fa 5000000 \
                split5M/chr9/chr9_ -lift=split5M/chr9.lft
    cd bed/simpleRepeat
    cp runTrf.csh runTrf.chr9.csh
     # edit for just chr9
    csh runTrf.chr9.csh >&! runTrf.chr9.log &
    # check for EOF in output files to give some assurance
    endsInLf trf/*
        # trf/chrM_0.bed zero length

    # lift to chromosome coordinates
    liftUp simpleRepeat.bed /cluster/data/panTro2/lifts/split5M.lft \
         warn trf/*.bed

    # forgot to include the new lift in the all split (2006-03-21 kate)
    # so do it now and reload table
    cd /cluster/data/panTro2
    cat split5M/*.lft > lifts/split5M.lft
    cd bed/simpleRepeat
    liftUp simpleRepeat.bed /cluster/data/panTro2/lifts/split5M.lft \
         warn trf/*.bed

    # load into database
    ssh hgwdev
    cd /cluster/data/panTro2/bed/simpleRepeat
    hgLoadBed panTro2 simpleRepeat simpleRepeat.bed \
      -sqlTable=$HOME/kent/src/hg/lib/simpleRepeat.sql
  
    nice featureBits panTro2 simpleRepeat
        # 82897828 bases of 2909512873 (2.849%) in intersection
    nice featureBits panTro1 simpleRepeat
        # 53732632 bases of 2733948177 (1.965%) in intersection
    # seems quite a bit higher -- compare it to hg17 chrom1

        # nice featureBits panTro2 simpleRepeat -chrom=chr1
            # 3068104 bases of 217202916 (1.413%) in intersection
        nice featureBits hg17 simpleRepeat -chrom=chr1
            # 3438627 bases of 222827847 (1.543%) in intersection
                    # darn similar


# PROCESS SIMPLE REPEATS INTO MASK
    # After the simpleRepeats track has been built, make a filtered version 
    # of the trf output: keep trf's with period <= 12:

    ssh kkstore01
    cd /cluster/data/panTro2/bed/simpleRepeat
    mkdir -p trfMask trfMaskChrom
    foreach f (trf/chr*.bed)
        awk '{if ($5 <= 12) print;}' $f > trfMask/$f:t
    end

    # lift filtered simple repeats to chrom coordinates, by chrom
cat > liftChroms.csh << 'EOF'
    foreach d (`cat /cluster/data/panTro2/chrom.lst`)
        set c = chr$d
        echo $c
        liftUp trfMaskChrom/$c.bed /cluster/data/panTro2/split5M/$c.lft \
                warn trfMask/${c}_?{,?}.bed 
        set r = ${c}_random
        if (-e /cluster/data/panTro2/$d/$r.fa) then
            liftUp trfMaskChrom/$r.bed /cluster/data/panTro2/split5M/$r.lft \
                warn trfMask/${r}_?{,?}.bed 
        endif
    end
'EOF'
    # << for emacs
    csh liftChroms.csh >&! liftChroms.log &

    # check coverage of filtered TRF
    hgwdev
    cd /cluster/data/panTro2/bed/simpleRepeat
    cat trfMaskChrom/*.bed > /tmp/filtTrf.bed
    featureBits panTro2 /tmp/filtTrf.bed
        # 28800863 bases of 2909512873 (0.990%) in intersection


# MASK SEQUENCE WITH REPEATMASKER AND SIMPLE REPEAT/TRF  (2006-03-03)
    
    # soft-mask (lower-case) the chrom fasta files
    # then make hard-masked versions from the soft-masked
    # note: next time simplify this (as below for chr9)
    ssh kkstore01
    cd /cluster/data/panTro2
    set trfChr=bed/simpleRepeat/trfMaskChrom
    foreach f (?{,?}/chr*.fa 6_hla_hap1/chr*.fa)
      cp $f $f.unmasked
      echo "repeat- and trf-masking $f"
      maskOutFa -soft $f $f.out $f
      cp $f $f.rmsk
      set c = $f:t:r
      maskOutFa -softAdd $f $trfChr/$c.bed $f
      echo "hard-masking $f"
      maskOutFa $f hard $f.masked
    end

    # remask chr9 after relifting .out's (2006-03-24)
    set f = 9/chr9.fa
    set c = chr9
    maskOutFa -soft $f.unmasked $f.out $f.rmsk
    maskOutFa -softAdd $f.rmsk $trfChr/$c.bed $f
    maskOutFa $f hard $f.masked

    # a few messages (e.g. 10 per chrom) like:
    # WARNING: negative rEnd: -531 chr1:14090705-14090763 L1MEc

    # after checking, remove .unmasked and .rmsk

    # make 2bit for browser and blat
    # redone for chr9 correction (2006-03-24 kate)
    faToTwoBit ?{,?}/chr*.fa 6_hla_hap1/chr*.fa panTro2.2bit
    mkdir /cluster/bluearc/scratch/hg/panTro2
    ssh kkr1u00
    cp -p /cluster/data/panTro2/panTro2.2bit /iscratch/i/panTro2/panTro2.2bit
    ~kent/bin/iSync

    # after chr9 remask:
    cp -p /cluster/data/panTro2/panTro2.2bit /iscratch/i/panTro2
    cp -p /cluster/data/panTro2/nib/chr9.nib /iscratch/i/panTro2/nib
    ~kent/bin/iSync

    # make nibs for blastz w/linSpecRep
    mkdir nib
    foreach f (?{,?}/chr*.fa 6_hla_hap1/chr*.fa)
      echo $f:t:r
      faToNib -softMask $f nib/$f:t:r.nib
    end
    # remake chr9 (2006-03-24 kate)
    faToNib -softMask 9/chr9.fa nib/chr9.nib


# MAKE 11.OOC 
#   #Remade after chr9 remask (2006-03-24 kate)

    ssh kolossus
    cd /cluster/data/panTro2
    mkdir /cluster/bluearc/panTro2
    blat panTro2.2bit /dev/null /dev/null \
        -tileSize=11 -makeOoc=/cluster/bluearc/panTro2/11.ooc -repMatch=1024
    cp -p /cluster/bluearc/panTro2/11.ooc .


# COPY SEQUENCE TO CLUSTER NODES FOR CLUSTER RUNS

    set scratch = /cluster/bluearc/scratch/hg/panTro2
    mkdir $scratch
    cp -p panTro2.2bit $scratch
    cp -rp nib $scratch
    cp -rp chrom.sizes $scratch
    cp -p 11.ooc $scratch
    # request cluster-admin sync /scratch/hg/panTro2 to cluster nodes

    # update 2bit and chr9 nib after updating chr9 masking
    cp -p panTro2.2bit $scratch
    cp -p nib/chr9.nib $scratch
    cp -p 11.ooc $scratch
    # request cluster-admin sync /scratch/hg/panTro2 to cluster nodes



# GENBANK ALIGNMENTS (DONE 2006-03-25 kate/markd)
    # restarted 3/13 4pm

    # Make a lift file that identifies gap locations for Genbank
    # This is a pseudo "liftAll" made from the AGP files, however negative
    #  strand contigs are renamed to indicate they need to be
    #  reversed. 
    
    ssh kkstore01
    cd /cluster/data/panTro2
    cat ?{,?}/*.agp 6_hla_hap1/*.agp | agpToLift -revStrand > \
        lifts/genbank.lft
    
    ssh hgwdev
    cd ~/kent/src/hg/makeDb/genbank
    cvsup
    # edit etc/genbank.conf to add panTro2
    # the hack in the genbank code for panTro1 as changed for
    # panTro2.  panTro2 treats both chimp and human cDNAs as
    # native, and all else as xeno.  Don't do xeno ESTs any more.

panTro2.serverGenome = /cluster/data/panTro2/panTro2.2bit
panTro2.clusterGenome = /scratch/hg/panTro2/panTro2.2bit
panTro2.ooc = /cluster/bluearc/panTro2/11.ooc
panTro2.align.unplacedChroms = chrUn,chr*_random
panTro2.lift = /cluster/data/panTro2/lifts/genbank.lft
panTro2.refseq.mrna.native.pslCDnaFilter  = ${ordered.refseq.mrna.native.pslCDnaFilter}
panTro2.refseq.mrna.xeno.pslCDnaFilter    = ${ordered.refseq.mrna.xeno.pslCDnaFilter}
panTro2.genbank.mrna.native.pslCDnaFilter = ${ordered.genbank.mrna.native.pslCDnaFilter}
panTro2.genbank.mrna.xeno.pslCDnaFilter   = ${ordered.genbank.mrna.xeno.pslCDnaFilter}
panTro2.genbank.est.native.pslCDnaFilter  = ${ordered.genbank.est.native.pslCDnaFilter}
panTro2.genbank.est.xeno.pslCDnaFilter    = ${ordered.genbank.est.xeno.pslCDnaFilter}
panTro2.downloadDir = panTro2
panTro2.genbank.est.xeno.load = no
panTro2.refseq.mrna.native.load  = yes
panTro2.refseq.mrna.xeno.load = yes
panTro2.refseq.mrna.xeno.loadDesc  = yes

    cvs ci etc/genbank.conf
    make etc-update

    ssh kkstore02
    cd /cluster/data/genbank
    nice bin/gbAlignStep -initial panTro2 &
    # various problems with ssh, bluearc, etc....
    nice bin/gbAlignStep -initial -continue=copy panTro2 &

    ssh hgwdev
    nice bin/gbDbLoadStop -initialLoad -drop panTro2 &
  


# MAKE LINEAGE-SPECIFIC REPEATS FOR BLASTZ (2006-03-15 kate)

    ssh kkstore01
    cd /cluster/data/panTro2
    mkdir linSpecRep
    cd linSpecRep
    mkdir dates
    cd dates

    # run Arian's script to annotate .out files with species-specificity
    # include all currently supported comparison species
cat > outRepeats.csh << 'EOF'
    date
    set d = /cluster/data/panTro2
    foreach f ($d/?{,?}/chr*.fa.out $d/6_hla_hap1/chr*.fa.out)
        set c = $f:t:r:r
        echo $c
        cp $f .
        /cluster/bluearc/RepeatMasker060120/DateRepeats $c.fa.out -query human \
            -comp mouse -comp rat -comp dog -comp cow -comp rabbit
        mv $c.fa.*cuniculus $c.fa.dates.out
        end
    date
'EOF'
    # << for emacs
    csh outRepeats.csh >&! outRepeats.log &
        # 25 minutes

    # Redo for fixed chr9 (2006-03-24 kate)
    cp /cluster/data/panTro2/9/chr9.fa.out .
    set c = chr9
    /cluster/bluearc/RepeatMasker060120/DateRepeats $c.fa.out -query human \
            -comp mouse -comp rat -comp dog -comp cow -comp rabbit
        mv $c.fa.*cuniculus $c.fa.dates.out
    
    # run our script to extract lineage-specific by column 
    #   from the annotated .outs
    # just run on chr1 to assess which variants produce any
    #   differences.
    mkdir testChr1
    cd testChr1
cat > testChr1.csh << 'EOF'
    set script = /cluster/bin/scripts/extractRepeats
    set f = ../chr1.fa.dates.out
    echo mouse
    $script 1  $f > notInMouse.out.spec
    echo rat
    $script 2 $f > notInRat.out.spec
    echo dog
    $script 3 $f > notInDog.out.spec
    echo cow
    $script 4 $f > notInCow.out.spec
    echo rabbit
    $script 5 $f > notInRabbit.out.spec
'EOF'
    csh testChr1.csh >&! testChr1.log &
    ls -l *.spec
-rw-rw-r--  1 kate protein 17678799 Mar 15 09:51 notInCow.out.spec
-rw-rw-r--  1 kate protein 17678799 Mar 15 09:51 notInDog.out.spec
-rw-rw-r--  1 kate protein 17773939 Mar 15 09:48 notInHuman.out.spec
-rw-rw-r--  1 kate protein 17773939 Mar 15 09:50 notInMouse.out.spec
-rw-rw-r--  1 kate protein 17773939 Mar 15 09:51 notInRabbit.out.spec
-rw-rw-r--  1 kate protein 17773939 Mar 15 09:50 notInRat.out.spec

    # this indicates there are 2 unique LSR files:
    # 2) notInRodent (includes Mouse, Rat, Rabbit)
    # 3) notInOther  (includes Cow & Dog)

    # Extract mouse (column 1) and dog (column 3)
    cd /cluster/data/panTro2/linSpecRep
    mkdir notInRodent notInOthers
cat > makeLSR.csh << 'EOF'
    foreach f (dates/*.fa.dates.out)
        set c = $f:t:r:r:r
        echo $c
        set out = $c.out.spec
        /cluster/bin/scripts/extractRepeats 1 $f > notInRodent/$out
        /cluster/bin/scripts/extractRepeats 3 $f > notInOthers/$out
    end
'EOF'
    # << happy emacs
    csh makeLSR.csh >&! makeLSR.log &

    # copy to bluearc for blastz runs
    set d = /cluster/bluearc/panTro2/linSpecRep
    mkdir -p $d
    cp -rp notInRodent $d
    cp -rp notInOthers $d

    # update for chr9 (2006-03-24 kate)
    set c = chr9
    extractRepeats 1 dates/$c.fa.dates.out > \
                notInRodent/$c.out.spec
    extractRepeats 3 dates/$c.fa.dates.out > \
                notInOthers/$c.out.spec
    cp -rp notInRodent $d
    cp -rp notInOthers $d


# SET UP BLAT SERVER (2006-03-06 kate)
# Request blat server from cluster-admin, then enter ports in database

    ssh hgwdev
    hgsql -e 'INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
        VALUES ("panTro2", "blat12", "17790", "1", "0"); \
        INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
        VALUES ("panTro2", "blat12", "17791", "0", "1");' \
            hgcentraltest
    #   test it with some sequence


# GC 5 BASE TRACK (2006-03-06 kate)

    ssh kkstore01
    cd /cluster/data/panTro2/bed
    mkdir gc5base
    cd gc5base
    time hgGcPercent -wigOut -doGaps -file=stdout -win=5 panTro2 \
              /cluster/data/panTro2 | wigEncode stdin gc5Base.wig gc5Base.wib

    sh hgwdev
    cd /cluster/data/panTro2/bed/gc5base
    mkdir -p /gbdb/panTro2/wib
    ln -s `pwd`/*.wib /gbdb/panTro2/wib
    hgLoadWiggle panTro2 gc5Base gc5Base.wig


# CPGISLANDS (2006-03-06 - kate)
#       Redo 3/13/06 after second Repeatmasker run
#       Redone for chr9 remasking (2006-03-24 kate)
    ssh hgwdev
    mkdir /cluster/data/panTro2/bed/cpgIsland
    cd /cluster/data/panTro2/bed/cpgIsland

    # Build software from Asif Chinwalla (achinwal@watson.wustl.edu)
    cvs co hg3rdParty/cpgIslands
    cd hg3rdParty/cpgIslands
    make
    #   gcc readseq.c cpg_lh.c -o cpglh.exe
    cd ../..
    ln -s hg3rdParty/cpgIslands/cpglh.exe .

    # cpglh.exe requires hard-masked (N) .fa's.  
    # There may be warnings about "bad character" for IUPAC ambiguous 
    # characters like R, S, etc.  Ignore the warnings.  
    ssh kkstore01
    cd /cluster/data/panTro2/bed/cpgIsland
cat > doCpg.csh << 'EOF'
    foreach f (../../?{,?}/chr*.fa.masked ../../6_hla_hap1/chr*.fa.masked)
        set c = $f:t:r:r
        echo $c
        ./cpglh.exe $f > $c.cpg
    end
'EOF'
    # << happy emacs
    csh doCpg.csh >&! doCpg.log &

    #   Several chroms have 0 results:
    #   -rw-rw-r--  1     0 Feb 16 15:19 chr10_random.cpg
    #   -rw-rw-r--  1     0 Feb 16 15:20 chr15_random.cpg
    #   -rw-rw-r--  1     0 Feb 16 15:22 chr8_random.cpg
    #   -rw-rw-r--  1     0 Feb 16 15:22 chr9_random.cpg
    #   -rw-rw-r--  1     0 Feb 16 15:22 chrM.cpg
    #   -rw-rw-r--  1     0 Feb 16 15:22 chrX_random.cpg
    #   -rw-rw-r--  1     0 Feb 16 15:22 chrY.cpg

    # Transform cpglh output to bed +
    cat << '_EOF_' > filter.awk
{
$2 = $2 - 1;
width = $3 - $2;
printf("%s\t%d\t%s\t%s %s\t%s\t%s\t%0.0f\t%0.1f\t%s\t%s\n",
       $1, $2, $3, $5,$6, width,
       $6, width*$7*0.01, 100.0*2*$6/width, $7, $9);
}
'_EOF_'
    #   happy emacs
    awk -f filter.awk chr*.cpg | sort -k1,1 -k2,2n > cpgIsland.bed

    ssh hgwdev
    cd /cluster/data/panTro2/bed/cpgIsland
    hgLoadBed -strict panTro2 cpgIslandExt -tab -noBin \
      -sqlTable=$HOME/kent/src/hg/lib/cpgIslandExt.sql cpgIsland.bed
    featureBits panTro2 cpgIslandExt
        # 19412837 bases of 2909512873 (0.667%) in intersection


# BAC Ends (2006-03-08 IN PROGRESS kate)

    # download BAC ends from NCBI.  
    ssh kkstore
    cd /cluster/data/ncbi/bacends/chimp
    mkdir bacends.chimp.2
    cd bacends.chimp.2
    # wget ftp.ncbi.nih.gov/genomes/CLONEEND/pan_troglodytes/*
    # trouble with wget on files in this dir -- they're hanging,
    # so I used ftp mget w/o prompt
    # creates files:  9598_clone_end???.mfa and 95998_clone_info???.txt
    # 10 files of each type
    # NOTE: the *.info files contain a superset of the data in the
    # previous cl_acc_gi_len file -- extract fields 1-5 and 8 to
    # use as input to Terry's script that generaes the .pair file
    # for compatibility with downstream tools
    ftp ftp.ncbi.nih.gov
    cd /genomes/CLONEEND/pan_troglodytes
    prompt
    mget *
    gunzip *.gz

    # setup for track build area
    cd /cluster/data/panTro2
    mkdir -p bed/bacends
    cd bed/bacends
    ln -s  /cluster/data/ncbi/bacends/chimp/bacends.chimp.2 ncbi

    # generate pairs info file by/for processing by Terry Furey's scripts
    grep -h -v '^#' ncbi/*.txt | \
        awk '{printf ("%s\t%s\t%s\t%s\t%s\t%s\n", $1, $2, $3, $4, $5, $8)}' \
                > cl_acc_gi_len
    wc -l cl_acc_gi_len
        # 175757 cl_acc_gi_len
        # previous load (2004): 158588 entries
    faSize ncbi/*.mfa
        # 175757 sequences in 10 files
        # Info and sequence catch match -- good!
     /cluster/bin/scripts/convertBacEndPairInfo cl_acc_gi_len
        # 85911 pairs and 3935 singles
        # previous: 78846 pairs and 896 singles
        # Note large increase in singles -- either lower quality in
        # new data set, or script could use some updating.
        # Just note this for now.
    wc -l bacEndPairs.txt bacEndSingles.txt
        #  85911 bacEndPairs.txt
        #   3935 bacEndSingles.txt

    # create sequence file
    cp /cluster/data/ncbi/bacends/chimp/bacends.chimp.1/convert.pl .
    cat ncbi/*.mfa | ./convert.pl > BACends.fa
    faSize BACends.fa
        # 175757 sequences

    # make accessible to track
    ssh hgwdev
    mkdir -p /gbdb/panTro2/bacends
    ln -s /cluster/data/panTro2/bed/bacends/BACends.fa /gbdb/panTro1/bacends

    # split for aligning on cluster
    ssh kkstore01
    cd /cluster/data/panTro2/bed/bacends
    set tmp = /san/sanvol1/scratch/panTro2/bacends/
    mkdir -p $tmp
    faSplit BACends.fa sequence 10 $tmp

    # blat vs. unmasked sequence in 5M chunks
    # 652 chunks * 10 bacends files = 6520 jobs
    ssh pk
    cd /cluster/data/panTro2/bed/bacends
    mkdir run
    cd run
    mkdir ../out

    # list chrom chunks and bacends chunks
    set dir = /cluster/data/panTro2/split5M
    ls $dir/*/*.fa | sed "s^$dir/^^" > chromSplit.lst
    set dir = /san/sanvol1/scratch/panTro2/bacends
    ls $dir/*.fa | sed "s^$dir/^^" > bacends.lst

cat > align.csh << 'EOF'
#!/bin/csh -ef 
    set d = $1:h
    set f = $1:t
    set e = $2
    mkdir -p ../out/$d
    set tmp = /scratch/tmp/panTro2/align.$$
    mkdir -p $tmp
    cp /cluster/data/panTro2/split5M/$d/$f $tmp
    cp /san/sanvol1/scratch/panTro2/bacends/$e $tmp
    blat $tmp/$f $tmp/$e -ooc=/cluster/bluearc/panTro2/11.ooc ../out/$d/$f:r.$e:r.psl
    rm -fr $tmp
'EOF'
    # << happy emacs
    chmod +x align.csh

cat > gsub << 'EOF'
#LOOP
./align.csh $(path1) $(path2) {check out line+ ../out/$(dir1)/$(root1).$(root2).psl}
#ENDLOOP
'EOF'
    # << happy emacs

    gensub2 chromSplit.lst bacends.lst gsub jobList
    para create jobList
        # 6520 jobs
    para try
    # NOTE: these run quickly


   # MAKE DOWNLOADABLE SEQUENCE FILES


########################
# BLASTZ HUMAN hg18 (2006-03-13 kate)
# Do not use lineage-specific repeats, on recommendation of Arian Smit

    ssh pk
    cd /cluster/data/panTro2/bed
    mkdir blastz.hg18.2006-03-13
    ln -s blastz.hg18.2006-03-13 blastz.hg18
    cd blastz.hg18

    cat << '_EOF_' > DEF
# chimp vs human
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7.x86_64
BLASTZ_ABRIDGE_REPEATS=0

# TARGET: Chimmp panTro2
SEQ1_DIR=/scratch/hg/panTro2/panTro2.2bit
SEQ1_CHUNK=10000000
SEQ1_LAP=10000
SEQ1_LEN=/cluster/bluearc/panTro2/chrom.sizes

# QUERY: Human hg18 - single chunk big enough to run entire genome
SEQ2_DIR=/scratch/hg/hg18/hg18.2bit
SEQ2_LEN=/scratch/hg/hg18/chrom.sizes
SEQ2_CHUNK=3000000000
SEQ2_LAP=0

BASE=/cluster/data/panTro2/bed/blastz.hg18.2006-03-13
TMPDIR=/scratch/tmp
'_EOF_'

    # << happy emacs
    /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
        -chainMinScore=5000 -chainLinearGap=medium -bigClusterHub=pk \
        -blastzOutRoot /san/sanvol1/scratch/panTro2/blastz.hg18 \
        `pwd`/DEF >&! blastz.out &

    # failed during chaining step, because /scratch/hg/panTro2
    #   doesn't exist on minicluster nodes
    # for now, just symlink /iscratch/i/panTro2 there 
    #   so that the 2bit is available to this pipeline -- later
    # we'll make sure the nodes are completely synced up.
    /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
        -chainMinScore=5000 -chainLinearGap=medium -bigClusterHub=pk \
        -blastzOutRoot /san/sanvol1/scratch/panTro2/blastz.hg18 \
        -continue=chainRun \
        `pwd`/DEF >&! blastz.2.out &

    # chr19 failed with out-of-mem, so try it on kolossus
    # moved to hgwdev by request....
    ssh kolossus
    cd /cluster/data/panTro2/bed/blastz.hg18/axtChain/run
    csh chain.csh panTro2.2bit:chr19: chain/panTro2.2bit:chr19:.chain >&! \
        chainChr19.log &
    # Create run.time file and remove liftedChain so we can continue

    /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
        -chainMinScore=5000 -chainLinearGap=medium -bigClusterHub=pk \
        -continue=chainMerge \
        `pwd`/DEF >&! blastz.3.out &

    # SWAP ALIGNMENTS TO PANTRO2 (2006-03-19 kate)

    /cluster/bin/scripts/doBlastzChainNet.pl -swap \
        -workhorse=hgwdev64 \
        /cluster/data/panTro2/bed/blastz.hg18/DEF >&! swap.log &


########################
# BLASTZ MACAQUE rheMac2 (2006-03-14 kate)

    ssh pk
    cd /cluster/data/panTro2/bed
    mkdir blastz.rheMac2.2006-03-14
    ln -s blastz.rheMac2.2006-03-14 blastz.rheMac2
    cd blastz.rheMac2

    cat << '_EOF_' > DEF
# chimp vs monkey
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7.x86_64
BLASTZ_ABRIDGE_REPEATS=0

# TARGET: Chimp panTro2
SEQ1_DIR=/scratch/hg/panTro2/panTro2.2bit
SEQ1_CHUNK=10000000
SEQ1_LAP=10000
SEQ1_LEN=/cluster/bluearc/panTro2/chrom.sizes

# QUERY: Macaque rheMac2 - single chunk big enough to run entire genome
SEQ2_DIR=/scratch/hg/rheMac2/rheMac2.2bit
SEQ2_LEN=/scratch/hg/rheMac2/chrom.sizes
SEQ2_CHUNK=3000000000
SEQ2_LAP=0

BASE=/cluster/data/panTro2/bed/blastz.rheMac2.2006-03-14
TMPDIR=/scratch/tmp
'_EOF_'

    # NOTE: probably should have used chainMinScore=3000
    # << happy emacs
    /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
        -chainMinScore=5000 -chainLinearGap=medium -bigClusterHub=pk \
        -blastzOutRoot /san/sanvol1/scratch/panTro2/blastz.rheMac2 \
        `pwd`/DEF >&! blastz.out &

    # Started Mar 14 18:40
    # Done Mar 15 18:50

    # Copy MAF files to san for use in multiple alignment
    set dir = /san/sanvol1/scratch/panTro2/mafNet
    mkdir -p $dir
    cp -rp mafNet $dir/rheMac2

    ssh hgwdev featureBits panTro2 chainRheMac2Link
        # crashes out-of-mem on hgwdev (try on kolossus)

    # SWAP ALIGNMENTS TO PANTRO2 (2006-03-15 kate)

    /cluster/bin/scripts/doBlastzChainNet.pl -swap \
        /cluster/data/panTro2/bed/blastz.rheMac2/DEF >&! swap.log &

        # failed due to missing file hgwdev:/scratch/hg/rheMac2/chrom.sizes
        # so I copied the file and ran the "loadUp" script
    ssh hgwdev
    cd /cluster/data/rheMac2/bed/blastz.panTro2.swap/axtChain
    nice loadUp.csh >&! loadUp.log &


########################
# BLASTZ DOG canFam2 (2006-03-15 kate)

    ssh pk
    cd /cluster/data/panTro2/bed
    mkdir blastz.canFam2.2006-03-15
    ln -s blastz.canFam2.2006-03-15 blastz.canFam2
    cd blastz.canFam2

    cat << '_EOF_' > DEF
# chimp vs dog
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7.x86_64

# Specific settings for dog (per Webb email to Brian Raney)
BLASTZ_ABRIDGE_REPEATS=1
# NOTE: must use nibs with repeat abridging

# TARGET: Chimp panTro2
SEQ1_DIR=/scratch/hg/panTro2/nib
SEQ1_SMSK=/cluster/bluearc/panTro2/linSpecRep/notInOthers
SEQ1_LEN=/scratch/hg/panTro2/chrom.sizes
SEQ1_IN_CONTIGS=0 
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: Dog CanFam2 - single chunk big enough to run entire genome
SEQ2_DIR=/scratch/hg/canFam2/nib
SEQ2_LEN=/cluster/bluearc/canFam2/chrom.sizes
SEQ2_SMSK=/san/sanvol1/scratch/canFam2/linSpecRep.notInHuman
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=200000000
SEQ2_LAP=0

BASE=/cluster/data/panTro2/bed/blastz.canFam2.2006-03-15
TMPDIR=/scratch/tmp
'_EOF_'
    # << happy emacs

    /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
        -blastzOutRoot /san/sanvol1/scratch/panTro2/blastz.canFam2 \
	`pwd`/DEF >&! blastz.out &
    #	Started 2006-03-15 15:40

    # Failed due to missing chimp nibs on small cluster /scratch/hg
    # copied them over manually, then continued, running from
    # fileserver, as pk is down

    /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=3000 -chainLinearGap=medium \
        -continue=chainRun \
        -blastzOutRoot /san/sanvol1/scratch/panTro2/blastz.canFam2 \
	`pwd`/DEF >&! blastz.2.out &
    #	Started 2006-03-16 17:50

    # Failed due to missing chrom.sizes on hgwdev:/scratch/hg/panTro2
    # Copied manually then continued

    /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -continue=load \
	`pwd`/DEF >&! blastz.3.out &



#########################################################################
# BLASTZ galGal2 (2006-03-18 kate)

    ssh pk
    cd /cluster/data/panTro2/bed/
    mkdir blastz.galGal2.2006-03-18
    ln -s blastz.galGal2.2006-03-18 blastz.galGal2
    cd blastz.galGal2

    cat << '_EOF_' > DEF
# chimp vs chicken
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin:/parasol/bin
    
BLASTZ=blastz.v7
BLASTZ_ABRIDGE_REPEATS=1 
    
# TARGET: Chimp panTro2
SEQ1_DIR=/scratch/hg/panTro2/nib
SEQ1_SMSK=/cluster/bluearc/panTro2/linSpecRep/notInOthers
SEQ1_LEN=/scratch/hg/panTro2/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000
    
# QUERY: Chicken galGal2 - single chunk big enough for whole chroms at once
SEQ2_DIR=/scratch/hg/galGal2/nib
SEQ2_LEN=/scratch/hg/galGal2/chrom.sizes
SEQ2_SMSK=/scratch/hg/galGal2/linSpecRep
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=200000000
SEQ2_LAP=0

BASE=/cluster/data/panTro2/bed/blastz.galGal2.2006-03-18
TMPDIR=/scratch/tmp
'_EOF_'
    #   << happy emacs

    /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
        -bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
        -blastzOutRoot /san/sanvol1/scratch/panTro2/blastz.galGal2 \
        `pwd`/DEF >&! blastz.out &

    # error in net step -- can't find all.chain for some reason
    # try restarting
    /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
        -bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
        -continue=net \
        `pwd`/DEF >&! blastz.2.out &


############################################################################
# GENSCAN PREDICTIONS (2006-03-18 kate)

    ssh hgwdev
    cd /cluster/data/panTro2/bed
    mkdir genscan
    cd genscan
    cvs co hg3rdParty/genscanlinux

    ssh kkstore01
    cd /cluster/data/panTro2/bed/genscan
    # Make 3 subdirectories for genscan to put their output files in
    mkdir -p gtf pep subopt

    ls /cluster/data/panTro2/{?{,?},6_hla_hap1}/chr*.fa.masked  > genome.list
        
    ssh kki
    cd /cluster/data/panTro2/bed/genscan
    # Create template file, gsub, for gensub2.  For example (3-line file):
    cat << '_EOF_' > gsub
#LOOP
/cluster/bin/x86_64/gsBig {check in line+ $(path1)} {check out line gtf/$(root1).gtf} -trans={check out line pep/$(root1).pep} -subopt={check out line subopt/$(root1).bed} -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=2400000
#ENDLOOP
'_EOF_'
    # << this line makes emacs coloring happy
    gensub2 genome.list single gsub jobList
    para create jobList
        # 52 jobs written to batch
    para try
    para check
    para push

    # DONE TO HERE

    # Convert these to chromosome level files as so:     
    ssh kkstore01
    cd /cluster/data/panTro2/bed/genscan
    liftUp genscan.gtf ../../jkStuff/liftAll.lft warn gtf/*.gtf
    liftUp genscanSubopt.bed ../../jkStuff/liftAll.lft warn subopt/*.bed
    cat pep/*.pep > genscan.pep

    # Load into the database as so:
    ssh hgwdev
    cd /cluster/data/panTro2/bed/genscan
    ldHgGene panTro2 genscan genscan.gtf
        # Read 41471 transcripts in 303679 lines in 1 files
    hgPepPred panTro2 generic genscanPep genscan.pep
    hgLoadBed panTro2 genscanSubopt genscanSubopt.bed
        # Loaded 535541 elements of size 6


#######################################################################
#  OPOSSUM BLASTZ - (WORKING - 2006-03-20 - Hiram)
    ssh pk
    mkdir /cluster/data/panTro2/bed/blastzMonDom4.2006-03-20
    cd /cluster/data/panTro2/bed
    ln -s blastzMonDom4.2006-03-20 blastz.monDom4
    cd /cluster/data/panTro2/bed/blastzMonDom4.2006-03-20

    cat << '_EOF_' > DEF
# chimp vs. opossum
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/parasol/bin

BLASTZ=blastz.v7.x86_64

# settings for more distant organism alignments
BLASTZ_H=2000
BLASTZ_Y=3400
BLASTZ_L=10000
BLASTZ_K=2200
BLASTZ_M=50
BLASTZ_Q=/cluster/data/blastz/HoxD55.q
BLASTZ_ABRIDGE_REPEATS=0

# TARGET: Chimp (panTro2)
SEQ1_DIR=/scratch/hg/panTro2/nib
SEQ1_LEN=/scratch/hg/panTro2/chrom.sizes
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: Opossum monDom4
SEQ2_DIR=/san/sanvol1/scratch/monDom4/monDom4.2bit
SEQ2_LEN=/san/sanvol1/scratch/monDom4/chrom.sizes
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=30000000
SEQ2_LAP=0

BASE=/cluster/data/panTro2/bed/blastzMonDom4.2006-03-20
TMPDIR=/scratch/tmp
'_EOF_'
    #	<< happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    #	running 2006-03-20 11:30


# SWAP CHAINS/NET RN4 (DONE 3/27/06 angie)
    # This run used the updated chr9.nib.
    ssh kkstore01
    mkdir /cluster/data/panTro2/bed/blastz.rn4.swap
    cd /cluster/data/panTro2/bed/blastz.rn4.swap
    doBlastzChainNet.pl -swap /cluster/data/rn4/bed/blastz.panTro2/DEF \
      -workhorse kkr8u00 >& do.log & tail -f do.log
    ln -s blastz.rn4.swap /cluster/data/panTro2/bed/blastz.rn4


