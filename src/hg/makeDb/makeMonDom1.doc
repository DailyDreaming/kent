#!/bin/csh -f # set emacs mode
exit; # don't actually run this like a script :)

#	Creating the assembly for Monodelphis domestica
#	South American, Short-tailed Opossum
#	http://www.genome.gov/11510687
#	http://www.genome.gov/12512285

# DOWNLOAD SEQUENCE (DONE - 2004-12-01 - Hiram)

ssh kksilo

mkdir -p /cluster/store8/monDom1/broad.mit.edu
ln -s /cluster/store8/monDom1 /cluster/data/monDom1
cd /cluster/data/monDom1/broad.mit.edu
#	Set user name and password in your $HOME/.netrc
wget --timestamping "ftp://ftp.broad.mit.edu/*"
#	takes a couple hours
#	What we have:
ls -ogrt
#	total 4071636
#	-rw-rw-r--    1        3992 Oct 18 16:45 assembly.format
#	-rw-rw-r--    1  1196876365 Oct 18 16:52 contigs.bases.gz
#	-rw-rw-r--    1   539154819 Oct 18 17:24 contigs.quals.gz
#	-rwxrwxr-x    1     4418102 Oct 18 17:52 supercontigs.summary
#	-rwxrwxrwx    1     3910827 Oct 18 17:52 supercontigs
#	-rw-rw-r--    1    23299859 Oct 18 17:52 reads.unplaced.gz
#	-rw-rw-r--    1   645129395 Oct 18 17:52 reads.placed.gz
#	-rw-rw-r--    1    10757748 Oct 18 17:52 assembly.agp
#	-rw-rw-r--    1  1199683639 Oct 19 17:15 assembly.agp.fasta.gz
#	-rw-rw-r--    1   541975023 Oct 19 17:34 assembly.agp.qual.gz
time gunzip *.gz
#	That took almost 2 hours on a busy kksilo
ls -ogrt
#	total 29983148
#	-rw-rw-r--    1        3992 Oct 18 16:45 assembly.format
#	-rw-rw-r--    1  3537338236 Oct 18 16:52 contigs.bases
#	-rw-rw-r--    1 10472323694 Oct 18 17:24 contigs.quals
#	-rwxrwxr-x    1     4418102 Oct 18 17:52 supercontigs.summary
#	-rwxrwxrwx    1     3910827 Oct 18 17:52 supercontigs
#	-rw-rw-r--    1   146964359 Oct 18 17:52 reads.unplaced
#	-rw-rw-r--    1  2273830873 Oct 18 17:52 reads.placed
#	-rw-rw-r--    1    10757748 Oct 18 17:52 assembly.agp
#	-rw-rw-r--    1  3608989613 Oct 19 17:15 assembly.agp.fasta
#	-rw-rw-r--    1 10614160078 Oct 19 17:34 assembly.agp.qual

# DATA INTEGRITY VERIFICATION
ssh kksilo
mkdir /cluster/data/monDom1/dataCheck
cd /cluster/data/monDom1/dataCheck
grep "^>" ../broad.mit.edu/contigs.bases | sed -e "s/^>//" > contigs.names
#	2 minutes
#	Check for duplicates, should be same line count
sort  contigs.names | wc
#	109065  109065 1415800
sort -u  contigs.names | wc
#	109065  109065 1415800

sort contigs.names | head -3
#	contig_0
#	contig_1
#	contig_10
sort contigs.names | tail -3
#	contig_99997
#	contig_99998
#	contig_99999
wc contigs.names
#	109065  109065 1415800 contigs.names
grep "^>" ../broad.mit.edu/contigs.quals \
	| sed -e "s/^>//" > contigs.quals.names
#	6 minutes
sum -r contigs*
#	35350  1383 contigs.names
#	35350  1383 contigs.quals.names
awk '{print $6}' ../broad.mit.edu/assembly.agp \
	| grep contig_ > assembly.agp.contig.names
#	The assembly agp contig list appears to be the same contig list
sort -u  contigs.names | sum -r
#	18868  1383
sort -u  assembly.agp.contig.names | sum -r
#	18868  1383
awk '{print $1}' ../broad.mit.edu/assembly.agp \
	| sort -u > assembly.agp.scaffold.names
wc assembly.agp.scaffold.names
#	19348   19348  279110 assembly.agp.scaffold.names
head -3 assembly.agp.scaffold.names
#	scaffold_0
#	scaffold_1
#	scaffold_10
tail -3 assembly.agp.scaffold.names
#	scaffold_9997
#	scaffold_9998
#	scaffold_9999
grep "^>" ../broad.mit.edu/assembly.agp.fasta | sed -e "s/^>//; s/\..*//" > assembly.fasta.scaffold.names
#	2 minutes
#	There are some duplicates in this fasta file:
sort -u  assembly.fasta.scaffold.names | wc
#	19348   19348  279110
wc  assembly.fasta.scaffold.names 
#	19576   19576  282523 assembly.fasta.scaffold.names
#	For example:
grep "^>scaffold_13303" ../broad.mit.edu/assembly.agp.fasta
#	>scaffold_13303.1-5000000 (MonodelphisPreliminaryAssemblyOct04)
#	>scaffold_13303.5000001-10000000 (MonodelphisPreliminaryAssemblyOct04)
#	>scaffold_13303.10000001-15000000 (MonodelphisPreliminaryAssemblyOct04)
#	>scaffold_13303.15000001-20000000 (MonodelphisPreliminaryAssemblyOct04)
#	>scaffold_13303.20000001-22286839 (MonodelphisPreliminaryAssemblyOct04)
faCount ../broad.mit.edu/assembly.agp.fasta > faCount.assembly.agp.fasta
#   seq          len               A              C               G
# total   3563247205      1085390300      660684418       660336426
#              T             N             cpg
#     1085697086      71138975        16821709
grep scaffold_ faCount.assembly.agp.fasta > scaffolds.faCount
#	Taking a look at those counts, the smallest scaffold is 1000
#	bases.  The largest ones are broken into 5,000,000 base chunks
#	as evidenced by the duplicate example above.
faCount ../broad.mit.edu/contigs.bases > faCount.contigs
#   seq          len               A              C               G
# total   3492108230      1085390300      660684418       660336426
#              T             N             cpg
#     1085697086             0        16821709
grep contig_ faCount.contigs > contigs.faCount
#	The contigs range in size from 85 bases to 658,080
#	The bulk of them start at a size of 1000

# COMBINE scaffold fasta pieces into single chunks, remove the extra
#	base-range info from the names.
ssh kksilo
cd /cluster/data/monDom1/broad.mit.edu
cat << '_EOF_' collapseScaffolds.sh
#!/bin/sh
#
awk '
BEGIN { name="" }
/^>/ {
    id=$1
    sub(">","",id)
    sub("\\..*","",id)
    if (!match(name,id)) {
        printf ">%s\n", id
        name=id
        }
}
/^[^>]/ { print }
' assembly.agp.fasta
'_EOF_'
    # << this line keeps emacs coloring happy

chmod +x collapseScaffolds.sh
time ./collapseScaffolds.sh > scaffolds.fa
#	11 minutes
# make sure we have not damaged the sequence:
time faCount scaffolds.fa | tail -2
#	4 minutes
# total   3563247205      1085390300      660684418       660336426
#      1085697086      71138975        16821709
#	Those are the same numbers as above

#  SPLIT SCAFFOLDS by name into a three level directory hierarchy

ssh kksilo
mkdir /cluster/data/monDom1/scaffolds
cd /cluster/data/monDom1/scaffolds
time faSplit byname ../broad.mit.edu/scaffolds.fa scaffolds -outDirDepth=3
