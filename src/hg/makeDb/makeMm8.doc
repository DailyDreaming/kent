#!/bin/csh -f # set emacs mode
exit; # don't actually run this like a script :)

# This file describes browser build for the mouse
# genome, February 2006, ncbi mouse_36 - Mm8
#
#	"$Id: makeMm8.doc,v 1.22 2006/04/06 00:41:44 galt Exp $"
#
#######################################################################
# DOWNLOAD THE MOUSE SEQUENCE FROM NCBI (DONE - 2006-02-14 - Hiram)
#
#	Examine disk space issues, find some goodly amount of space
    ssh kkstore01
    mkdir /cluster/store9/mm8
    ln -s /cluster/store9/mm8 /cluster/data/mm8
    cd /cluster/data/mm8
    mkdir ncbi
    cd ncbi
    cp -p /cluster/data/mm7/ncbi/.wgetrc .
    WGETRC=`pwd`/.wgetrc
    export WGETRC
    wget --timestamping --force-directories --directory-prefix=. \
	--dont-remove-listing --recursive --level=4 --no-parent \
	--no-host-directories --cut-dirs=1 \
	ftp://ftp-private.ncbi.nih.gov/mouse_36
    #	Downloaded: 2,201,934,141 bytes in 50 files
    #	real    44m48.975s

    #	The pre-release sequence, Feb 27th:
    mkdir /cluster/data/mm8/pre_release
    cd /cluster/data/mm8/pre_release
    #	The .wgetrc is the anonymous user
    WGETRC=`pwd`/.wgetrc
    export WGETRC
    wget --timestamping --force-directories --directory-prefix=. \
	--dont-remove-listing --recursive --level=4 --no-parent \
	--no-host-directories --cut-dirs=3 \
	ftp://ftp.ncbi.nih.gov/genomes/M_musculus/pre_release

#  Fixup the agp and seq_contig.md files to add chrM
#  No chrM or chrMT was delivered.  Copy from previous assembly
    ssh kkstore01
    cd /cluster/data/mm8/ncbi/chrfasta
    cp -p /cluster/data/mm7/ncbi/chrfasta/chrM.fa.gz .
    cd ../contigfasta
    cp -p /cluster/data/mm7/ncbi/contigfasta/chrM.fa.gz .
#	with a fixed up header line to be like all the others:
#	>lcl|chrM.fa gi|34538597|ref|NC_005089.1| Mus musculus mitochondrion, complete genome

    cd /cluster/data/mm8
    zcat ncbi/allrefcontig.chr.agp.gz > allrefcontig.chr.agp
    echo -e "chrM\t1\t16299\t1\tF\tAY172335.1\t1\t16299\t+" >> \
	allrefcontig.chr.agp
    gzip allrefcontig.chr.agp
    #	I don't see allcontig.agp being used anywhere else ?
    # zcat ncbi/allcontig.agp.gz > allcontig.agp
    # echo -e "NC_005089\t1\t16299\t1\tF\tAY172335\t\t1\t16299\t+" >> \
    #	    allcontig.agp
    # gzip allcontig.agp
    zcat ncbi/seq_contig.md.gz | egrep -v "Celera|129_substrain" \
	| sed -e "238i\
10090\tM\t0\t0\t+\tstart\t-1\tCONTIG\tC57BL/6J\t10\n\
10090\tM\t1\t16299\t+\tNC_005089\tGI:34538597\tCONTIG\tC57BL/6J\tna\n\
10090\tM\t16299\t16299\t+\tend\t-2\tCONTIG\tC57BL/6J\t10" > seq_contig.md
    #	(curiously, this sed command would not work on hgwdev,
    #	only when logged into kkstore01 ?)
    #	The line number 238 was found by checking the contents of
    #	ncbi/seq_contig.md.gz (after the egrep filter) and it was
    #	the line starting with:
    #	10090   Un|NT_039877    1       35798
    #	Wanted this chrM information before that line.
    #   summarize sequence counts

    mkdir faCounts
    time faCount ncbi/chrfasta/chr*.fa.gz > faCounts/chrfasta.faCount 2>&1 &
    #	about 1.5 minutes
    time faCount ncbi/contigfasta/chr*.fa.gz > \
	faCounts/contigfasta.faCount 2>&1 &
    #	about 3 minutes
    time zcat ncbi/chrfasta/chr*.fa.gz | grep "^>" > \
	faCounts/chrfasta.headers 2>&1 &
    time zcat ncbi/contigfasta/chr*.fa.gz | grep "^>" > \
	faCounts/contigfasta.headers 2>&1 &
    #	about 2 minutes each for the above two zcat/greps

#############################################################################
#  BREAK UP SEQUENCE INTO 5 MB CHUNKS at NON-BRIDGED CONTIGS
#			(DONE - 2006-02-14 - Hiram)
#########  Are these necessary ?  They may no longer be needed.
#########  TRF can run on full chroms on the kki kluster
#	It would be better to use . in place of the /cluster/data/mm8
#	for the outputDir argument to splitFaIntoContigs so this script
#	is independent of specific locations, thus it works in .
    ssh kkstore01
    cd /cluster/data/mm8
    for F in ncbi/chrfasta/chr*.fa.gz
    do
	CHR=`basename ${F} | sed -e "s/.fa.gz//; s/chr//"`
	echo ${CHR} ${F}
	mkdir -p "${CHR}"
	zcat allrefcontig.chr.agp.gz | \
	    perl -we "while(<>){if (/^chr${CHR}\t/) {print;}}" > \
		${CHR}/chr${CHR}.agp
	zcat ncbi/chrfasta/chr${CHR}.fa.gz | \
	    perl -wpe 's/^>lcl\|(chr\w+)\.fa.*/>$1/' | \
		splitFaIntoContigs ${CHR}/chr${CHR}.agp \
		    stdin /cluster/data/mm8 -nSize=5000000
    done
    #	The above loop takes about 5 minutes
    #	Some of these in the chr1 directory got overwritten on 2006-02-27
    #	during an attempt to verify that the pre-release directory at
    #	NCBI was the same as what we worked with here.

#############################################################################
# CREATE CHROM-LEVEL AGP AND FASTA FOR _RANDOMS (DONE 2006-02-14 - Hiram)
    ssh kkstore01
    mkdir /cluster/data/mm8/jkStuff
    cd /cluster/data/mm8
    mkdir Un tmp
    cp -p /cluster/data/mm7/jkStuff/ncbiFixAgp ./jkStuff
    zcat allrefcontig.chr.agp.gz | ./jkStuff/ncbiFixAgp /dev/stdin > \
	allrefcontig.chr.ordered.agp
    #	Set the appropriate release number here, this one is 35
    #	Fetch the script from the previous assembly
    sed -e "s/buildNum = 35/buildNum = 36/" \
	/cluster/data/mm7/jkStuff/ncbiToRandomAgps > \
	    jkStuff/ncbiToRandomAgps
    chmod +x jkStuff/ncbiToRandomAgps
    #	NOTE ! * ! This mm8 contig.idmap now includes the celera assembly
    #	Filter that out for use here.
    #	There were two broken lines that began _36 - they were removed
    #	after I reported them and the contig.idmap.gz file here was
    #	updated later.
    zcat ncbi/contig.idmap.gz | grep ref_strain | grep -v "^_36" \
	| ./jkStuff/ncbiToRandomAgps seq_contig.md \
		allrefcontig.chr.ordered.agp \
                        /dev/stdin . 2> dbg
    for C in ? ??
    do
	if [ -s ${C}/chr${C}_random.ctg.agp ]; then
	    echo "building ${C}/chr${C}_random.fa"
	    rm -f ./tmp.fa
	    zcat ncbi/contigfasta/chr${C}.fa.gz | \
		perl -wpe 's/^>lcl\|(Mm\w+)\s+.*$/>$1/' > ./tmp.fa
	    agpToFa -verbose=2 -simpleMulti \
		${C}/chr${C}_random.ctg.agp chr${C}_random \
		    ${C}/chr${C}_random.fa ./tmp.fa
	    rm -f ./tmp.fa
	fi
    done > tmp/agpToFa.out 2>&1
    #	the above loop takes about 3 minutes, examine the tmp/agpToFa.out
    #	record for any errors

    #	We need the lift information from these random.ctg.agp files
    cp -p /cluster/data/mm7/jkStuff/agpToLift.pl ./jkStuff
    for AGP in ?/*_random.ctg.agp ??/*_random.ctg.agp
do
    CHR=`dirname ${AGP}`
    echo ${CHR}
    mkdir -p ${CHR}/lift
    ./jkStuff/agpToLift.pl ${AGP} > ${CHR}/lift/ctg_random.lft
done
    # Clean these up to avoid confusion later... they're easily rebuilt
    #   with the ncbiToRandomAgps script above
    rm ?/*_random.ctg.agp ??/*_random.ctg.agp
    gzip seq_contig.md allrefcontig.chr.ordered.agp

#############################################################################
# BREAK UP _RANDOMS INTO 5 MB CHUNKS AT NON-BRIDGED CONTIGS
#					(DONE 2006-02-14 - Hiram)
    ssh kkstore01
    cd /cluster/data/mm8
    for C in ? ??
    do
	if [ -s ${C}/chr${C}_random.fa ]; then
	    splitFaIntoContigs  -nSize=5000000 ${C}/chr${C}_random.agp \
		${C}/chr${C}_random.fa .
	    mkdir -p ${C}/lift
	    rm -f ${C}/lift/rOut.lst ${C}/lift/random.lft ${C}/lift/random.lst
	    mv ${C}_random/lift/oOut.lst ${C}/lift/rOut.lst
	    mv ${C}_random/lift/ordered.lft ${C}/lift/random.lft
	    mv ${C}_random/lift/ordered.lst ${C}/lift/random.lst
	    rmdir ${C}_random/lift
	    rm ${C}_random/chr${C}_random.agp ${C}_random/chr${C}_random.fa
	    rm -rf ${C}/chr${C}_random_*
	    mv ${C}_random/chr${C}_random_* ${C}
	    rmdir ${C}_random
	fi
    done > tmp/split.out 2>&1
    #	the above loop takes less than a minute
    #	scan the tmp/split.out file for possible errors

#############################################################################
# MAKE LIFTALL.LFT (DONE - 2006-02-14 - Hiram)
    ssh kkstore01
    cd /cluster/data/mm8
    cat ?/lift/*.lft ??/lift/*.lft > jkStuff/liftAll.lft

#############################################################################
# CREATING DATABASE (DONE - 2006-02-14 - Hiram)
    ssh kkstore01
    cd /cluster/data/mm8
    faToTwoBit ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa \
	mm8.2bit
    twoBitInfo mm8.2bit stdout | sort -rn +1 > chrom.sizes
    grep -v random chrom.sizes | cut -f1 | sed -e "s/chr//" > chrom.lst
    twoBitInfo mm8.2bit stdout |
        awk '{printf "%s\t%s\t/gbdb/mm8/mm8.2bit\n", $1,$2}' > chromInfo.tab

    ssh hgwdev
    cd /cluster/data/mm8
    hgsql -e "create database mm8;" mysql
    #	Make sure we have enough room (eventually ~ 70Gb) for mysql tables:
    df -h | grep mysql
    #	/dev/sda1             472G  225G  223G  51% /var/lib/mysql2
    #	/dev/sdc1             1.8T  1.5T  190G  89% /var/lib/mysql

    # CREATING GRP TABLE FOR TRACK GROUPING (DONE - 2006-02-14 - Hiram)
    #   Use any of the newest databases to ensure that the organization
    #   of the grp table is up to date
    ssh hgwdev
    hgsql mm8 -e "create table grp (PRIMARY KEY(NAME)) select * from hg18.grp"
    hgsql mm8 < $HOME/kent/src/hg/lib/chromInfo.sql
    hgsql mm8 -e 'load data local infile "chromInfo.tab" into table chromInfo;'

    # Enter mm8 into dbDb and defaultDb so test browser knows about it:
    hgsql -e 'INSERT INTO dbDb (name, description, nibPath, organism, \
        defaultPos, active, orderKey, genome, scientificName, \
        htmlPath, hgNearOk, hgPbOk, sourceName) \
        VALUES("mm8", "Feb 2006", "/gbdb/mm8", "Mouse", \
        "chr6:28912411-28925620", 1, 22, "Mouse", \
        "Mus musculus", "/gbdb/mm8/html/description.html", 0, 0, \
        "NCBI Build 36");' -h localhost hgcentraltest
    #	Reset default position to be like Mm7, 2006-03-09 - Hiram
    hgsql -e \
'update dbDb set defaultPos="chr12:50258170-50263946" where name="mm8";' \
	hgcentraltest
    #	Do *NOT* set default genome on genome-test until ready for release
    # hgsql hgcentraltest \
    #	-e 'update defaultDb set name="mm8" where genome="Mouse";'
    # start a new entry in the trackDb hierarchy
    cd $HOME/kent/src/hg/makeDb/trackDb/mouse
    mkdir mm8
    cvs add mm8
    cd mm8
    cp ../mm7/description.html .
    vi description.html - fixup text for this assembly
    cvs add description.html
    cvs commit
    cd ../..
    vi makefile - add mm8 to the list
    mkdir /cluster/data/mm8/html
    mkdir /gbdb/mm8
    ln -s /cluster/data/mm8/html /gbdb/mm8/html
    ln -s /cluster/data/mm8/mm8.2bit /gbdb/mm8/mm8.2bit
    cp -p mouse/mm8/description.html /gbdb/mm8/html
    make DBS=mm8

#############################################################################
#  GOLD GAP tracks (DONE - 2006-02-14 - Hiram)
    ssh hgwdev
    cd /cluster/data/mm8
    #	make sure these tmp contig agp files are gone, easily generated
    #	as above with jkStuff/ncbiToRandomAgps
    mkdir ffa
    zcat ncbi/sequence.inf.gz > ffa/sequence.inf
    hgGoldGapGl -chromLst=chrom.lst mm8 /cluster/data/mm8 .
    featureBits mm8 gold
    #	2567283971 bases of 2567283971 (100.000%) in intersection
    featureBits mm7 gold
    #	2583394090 bases of 2583394090 (100.000%) in intersection
    featureBits mm6 gold
    #	2597150411 bases of 2597150411 (100.000%) in intersection
    featureBits mm5 gold
    #	2615483787 bases of 2615483787 (100.000%) in intersection
    featureBits mm4 gold
    #	2627444668 bases of 2627444668 (100.000%) in intersection

    featureBits mm8 gap
    #	97171117 bases of 2567283971 (3.785%) in intersection
    featureBits mm7 gap
    #	264323239 bases of 2583394090 (10.232%) in intersection
    featureBits mm6 gap
    #	482483041 bases of 2597150411 (18.577%) in intersection
    featureBits mm5 gap
    #	549468286 bases of 2615483787 (21.008%) in intersection
    featureBits mm4 gap
    #	325167539 bases of 2627444668 (12.376%) in intersection

#############################################################################
# GC5BASE (DONE - 2006-02-14 - Hiram)
    ssh kkstore01
    mkdir -p /cluster/data/mm8/bed/gc5Base
    cd /cluster/data/mm8/bed/gc5Base
    time hgGcPercent -wigOut -doGaps -file=stdout -win=5 mm8 \
        /cluster/data/mm8 | wigEncode stdin gc5Base.wig gc5Base.wib

    #       Calculating gcPercent with window size 5
    #       Using twoBit: /cluster/data/mm8/mm7.2bit
    #       File stdout created
    #	Converted stdin, upper limit 100.00, lower limit 0.00

    #	runs for about 14 minutes

    #	load database
    ssh hgwdev
    cd /cluster/data/mm8/bed/gc5Base
    mkdir /gbdb/mm8/wib
    ln -s `pwd`/gc5Base.wib /gbdb/mm8/wib
    time hgLoadWiggle -pathPrefix=/gbdb/mm8/wib mm8 gc5Base gc5Base.wig
    #	29 second load time

    #	verify index is correct:
    hgsql mm8 -e "show index from gc5Base;"
    #	should see good numbers in Cardinality column

#############################################################################
#  DISTRIBUTE SEQUENCE TO INTERMEDIATE SERVERS FOR KLUSTER RUNS
#	(DONE - 2006-02-14 - Hiram)
    ssh kkstore01
    cd /cluster/data/mm8

    # break up into 500,000 sized chunks for repeat masker runs
TOP=`pwd`
export TOP
for CTG_DIR in ?/chr?_[0-9]* ??/chr??_[0-9]* ?/chr?_random_[0-9]* \
        ??/chr??_random_[0-9]*
do
    ctg=`basename ${CTG_DIR}`
    cd ${CTG_DIR}
    faSplit size ${ctg}.fa 500000 ${ctg}_ -lift=${ctg}.lft -maxN=500000
    cd ${TOP}
done > tmp/ctg_split.out 2>&1
    #	about 3 minutes, check the tmp/ctg_split.out for anything unusual

    #	make a list of the contigs
TOP=`pwd`
export TOP
for CTG_DIR in ?/chr?_[0-9]* ??/chr??_[0-9]* ?/chr?_random_[0-9]* \
        ??/chr??_random_[0-9]*
do
    ctg=`basename ${CTG_DIR}`
    cd ${CTG_DIR}
    ls ${ctg}_* | while read F
    do
        echo ${CTG_DIR}/${F}
    done
    cd ${TOP}
done > contig500K.lst
    #	count 'em
    wc -l contig500K.lst
    #	5772   contig500K.lst

    mkdir /cluster/bluearc/scratch/hg/mm8
    mkdir /cluster/bluearc/scratch/hg/mm8/contigs
    rsync -a --progress --files-from=contig500K.lst . \
        /cluster/bluearc/scratch/hg/mm8/contigs/

    #	verify the contig copy above functioned OK
    cd /cluster/bluearc/scratch/hg/mm8
    find ./contigs -type f | wc -l
    #	 5772

#############################################################################
# SIMPLE REPEAT TRACK (DONE - 2006-02-14 Hiram)
    # TRF can be run in parallel with RepeatMasker
    #   since it doesn't require masked input sequence.
    ssh kkr1u00
    mkdir /iscratch/i/mm8
    cd /iscratch/i/mm8
    mkdir fa
    cd fa
    cp -p /cluster/data/mm8/?/*.fa .
    cp -p /cluster/data/mm8/??/*.fa .

    for R in 2 3 4 5 6 7 8
    do
	rsync -a --progress /iscratch/i/mm8/ kkr${R}u00:/iscratch/i/mm8/
    done

    ssh kki 
    mkdir /cluster/data/mm8/bed/simpleRepeat
    cd /cluster/data/mm8/bed/simpleRepeat

    mkdir trf
    cat << '_EOF_' > runTrf
#!/bin/csh -fe 
#
set path1 = /iscratch/i/mm8/fa/$1
set inputFN = $1  
set outpath = $2
set outputFN = $2:t
mkdir -p /scratch/tmp/$outputFN
cp $path1 /scratch/tmp/$outputFN
pushd .
cd /scratch/tmp/$outputFN
/cluster/bin/i386/trfBig -trf=/cluster/bin/i386/trf $inputFN /dev/null -bedAt=$outputFN -tempDir=/scratch/tmp
popd
rm -f $outpath
cp -p /scratch/tmp/$outputFN/$outputFN $outpath
rm -fr /scratch/tmp/$outputFN/*
rmdir --ignore-fail-on-non-empty /scratch/tmp/$outputFN
'_EOF_'
    # happy emacs
    chmod +x runTrf

    cat << '_EOF_' > template
#LOOP
./runTrf $(path1) {check out line trf/$(root1).bed}
#ENDLOOP
'_EOF_'
    # << keep emacs coloring happy

    ls -1S /iscratch/i/mm8/fa > genome.lst
    gensub2 genome.lst single template jobList
    para create jobList
    para try ... check ... push ... etc
    para time
# Completed: 34 of 34 jobs
# CPU time in finished jobs:      14385s     239.75m     4.00h    0.17d  0.000 y
# IO & Wait Time:                   794s      13.24m     0.22h    0.01d  0.000 y
# Average job time:                 446s       7.44m     0.12h    0.01d
# Longest finished job:            1437s      23.95m     0.40h    0.02d
# Submission to last job:          1685s      28.08m     0.47h    0.02d

    # Load into the database
    ssh hgwdev
    cd /cluster/data/mm8/bed/simpleRepeat
    cat trf/chr*.bed > simpleRepeat.bed
    hgLoadBed -strict mm8 simpleRepeat simpleRepeat.bed \
      -sqlTable=$HOME/src/hg/lib/simpleRepeat.sql
    #	Loaded 1141941 elements of size 16

    featureBits mm8 simpleRepeat
    # 77752377 bases of 2567283971 (3.029%) in intersection
    featureBits mm7 simpleRepeat
    # 77021175 bases of 2583394090 (2.981%) in intersection
    featureBits mm6 simpleRepeat
    # 83220723 bases of 2597150411 (3.204%) in intersection
    featureBits mm5 simpleRepeat
    # 81414259 bases of 2615483787 (3.113%) in intersection
    featureBits mm4 simpleRepeat
    # 82600648 bases of 2627444668 (3.144%) in intersection
    featureBits mm3 simpleRepeat
    # 75457193 bases of 2505900260 (3.011%) in intersection

#############################################################################
# PROCESS SIMPLE REPEATS INTO MASK (DONE - 2006-02-14 - Hiram)

    # After the simpleRepeats track has been built, make a filtered version
    # of the trf output: keep trf's with period <= 12:
    ssh kkstore01
    cd /cluster/data/mm8/bed/simpleRepeat
    mkdir trfMask
    for F in trf/chr*.bed
    do
	echo "${F} -> ${F/trf\//}"
	awk '{if ($5 <= 12) print;}' ${F} > trfMask/${F/trf\//}
    done

#############################################################################
# REPEATMASKER RUN (after contigs have been distributed to bluearc FS)
#	(DONE - 2006-02-14 - 2006-02-15 - Hiram)
#	Record RM version used:
    cat /cluster/bluearc/RepeatMasker060120/Libraries/version
#   RM database version 20060120
    ssh pk

    #- Make the run directory and job list:
    mkdir /cluster/data/mm8/RMRun
    cd /cluster/data/mm8/RMRun
    cat << '_EOF_' > ../jkStuff/RMMouse
#!/bin/csh -fe
set C = $1:h
set F = $1:t
set R = $F:r
cd /cluster/data/mm8/$C
/bin/mkdir -p /scratch/tmp/mm8/$R
/bin/cp /cluster/bluearc/scratch/hg/mm8/contigs/$1 /scratch/tmp/mm8/$R
pushd /scratch/tmp/mm8/$R
/cluster/bluearc/RepeatMasker060120/RepeatMasker -ali -s -species mus $F
popd
/bin/cp /scratch/tmp/mm8/$R/$R.fa.out ./
if (-e /scratch/tmp/mm8/$R/$R.fa.align) /bin/cp /scratch/tmp/mm8/$R/$R.fa.align ./
if (-e /scratch/tmp/mm8/$R/$R.fa.tbl) /bin/cp /scratch/tmp/mm8/$R/$R.fa.tbl ./
if (-e /scratch/tmp/mm8/$R/$R.fa.cat) /bin/cp /scratch/tmp/mm8/$R/$R.fa.cat ./
/bin/rm -fr /scratch/tmp/mm8/$R/*
/bin/rmdir --ignore-fail-on-non-empty /scratch/tmp/mm8/$R
/bin/rmdir --ignore-fail-on-non-empty /scratch/tmp/mm8
'_EOF_'
    #	happy emacs
    chmod +x ../jkStuff/RMMouse

    cat << '_EOF_' > template
#LOOP
../jkStuff/RMMouse $(path1) {check out line ../$(dir1)/$(root1).fa.out}
#ENDLOOP
'_EOF_'
    #	happy emacs

    gensub2 ../contig500K.lst single template jobList
    para create jobList
    wc -l jobList
    #	5772 jobList
    para try ... check ... push ... etc
# Completed: 6172 of 6172 jobs
# CPU time in finished jobs:   26381042s  439684.03m  7328.07h  305.34d  0.837 y
# IO & Wait Time:                 46088s     768.13m    12.80h    0.53d  0.001 y
# Average job time:                4282s      71.36m     1.19h    0.05d
# Longest finished job:            6370s     106.17m     1.77h    0.07d
# Submission to last job:        127318s    2121.97m    35.37h    1.47d

    #- Lift up the split-contig .out's to contig-level .out's
    ssh kkstore01
    cd /cluster/data/mm8
    for D in ?/chr?_[0-9]* ??/chr??_[0-9]* ?/chr?_random_[0-9]* \
	??/chr??_random_[0-9]*
    do
	CONTIG=`basename ${D}`
	liftUp ${D}/${CONTIG}.fa.out ${D}/${CONTIG}.lft error \
		${D}/${CONTIG}_[0-9]*.fa.out
    done > tmp/RM.lift.outs 2>&1
    #	real    2m32.275s
    #	scan tmp/RM.lift.outs for unusual errors or difficulties

    cat << '_EOF_' > jkStuff/liftRM_out_to_chr.sh
#!/bin/sh
for C in ? ??
do
    echo "lifting ${C}"
    cd ${C}
    if [ -s lift/ordered.lft ]; then
	liftUp chr${C}.fa.out lift/ordered.lft error `cat lift/oOut.lst`
    else
	echo "WARNING: Can not find ${C}/lift/ordered.lft"
    fi
    if [ -s lift/random.lft ]; then
	liftUp chr${C}_random.fa.out lift/random.lft error `cat lift/rOut.lst`
    fi
    cd ..
done
'_EOF_'
    # happy emacs
    chmod +x jkStuff/liftRM_out_to_chr.sh
    ./jkStuff/liftRM_out_to_chr.sh > tmp/liftRM_out_to_chr.out 2>&1
    #	real    0m24.873s
    #	scan the results tmp/liftRM_out_to_chr.out
    #	there is a single: WARNING: Can not find Un/lift/ordered.lft
    #	which is OK
    #	List the final .out files, nothing should be size 0:
    ls -og */*.fa.out | sort -k3,3nr

    #- Load the .out files into the database with:
    ssh hgwdev
    cd /cluster/data/mm8
    hgLoadOut mm8 ?/chr?.fa.out ??/chr??.fa.out ?/chr?_random.fa.out \
	??/chr??_random.fa.out > tmp/hgLoadOut.out 2>&1
    #	about 7 minutes, there are always a few of these errors:

    #	verify everything seems normal compared with previous builds

    featureBits mm8 rmsk
    #	1087735582 bases of 2567283971 (42.369%) in intersection
    featureBits mm7 rmsk
    #	1092611581 bases of 2583394090 (42.294%) in intersection
    featureBits mm6 rmsk
    #	1110222842 bases of 2597150411 (42.748%) in intersection
    featureBits mm5 rmsk
    #	1137310280 bases of 2615483787 (43.484%) in intersection
    featureBits mm4 rmsk
    #	1130883581 bases of 2627444668 (43.041%) in intersection
    featureBits mm3 rmsk
    #	1080265553 bases of 2505900260 (43.109%) in intersection

#############################################################################
# PROCESS REPEAT MASKER AND SIMPLE REPEATS INTO MASKED SEQUENCE
#		(DONE - 2006-02-16 - Hiram)
    ssh kkstore01
    cd /cluster/data/mm8
    time for CHR in ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa
    do
	FA=${CHR#*\/}
	C=${FA%.fa}
	echo -n "repeat masking ${C} ... "
	/cluster/bin/i386/maskOutFa -soft ${CHR} ${CHR}.out ${CHR}
	echo -n "adding simpleRepeats ... "
	/cluster/bin/i386/maskOutFa -softAdd ${CHR} \
		bed/simpleRepeat/trfMask/${C}.bed ${CHR}
	echo "done - ${CHR}"
    done > tmp/addRM_and_Simple.out 2>&1
    #	about 4 minutes

    # you will note the usual warnings about troublesome coordinates
    # in the repeat masker outputs - even more than when they were lifted.

    #	and make the hard masked sequences from these soft masked sequences
    time for CHR in ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa
    do
	echo "maskOutFa ${CHR} hard ${CHR}.masked"
	/cluster/bin/i386/maskOutFa ${CHR} hard ${CHR}.masked
    done > tmp/hardMask.out 2>&1
    #	about 2 minutes

    #	rebuild the nib file
    time faToTwoBit ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa \
	mm8Soft.2bit
    #	2 minutes
    #	verify the sequence is still the same size as before:
    twoBitInfo mm8Soft.2bit stdout | sort -rn +1 | sum -r
    #	20673     1
    sum -r chrom.sizes
    #	20673     1
    #	Let's see how much is masked:
    time twoBitToFa mm8Soft.2bit stdout | faSize stdin
    #	2664455088 bases (97171400 N's 2567283688 real 1477933003 upper
    #	1089350685 lower) in 34 sequences in 1 files
    # and bc says:
    #	1089350685/2664455088 = .408845
    #	1089350685/2567283688 = .424320

    #	replace the former unmasked 2bit file with this new one:
    rm mm8.2bit; mv mm8Soft.2bit mm8.2bit
    #	check the browser, make sure it is functioning OK

    #	Generate fasta file for random contigs
    #	THIS IS OPTIONAL STUFF, not really needed
    cp -p /cluster/data/mm7/jkStuff/lft2BitToFa.pl ./jkStuff

    mkdir randomContigs
    for L in ?/lift/ctg_random.lft ??/lift/ctg_random.lft
do
    D=${L/\/lift*}
    echo $L $D
    ./jkStuff/lft2BitToFa.pl mm8.2bit ${L} \
	> randomContigs/chr${D}_random.ctg.fa
done
    #
    #	Verify these *.ctg.fa files have the same bases as the ordinary
    #	chr*_random.fa files:
    faSize ?/chr?_random.fa ??/chr??_random.fa
    # 20361100 bases (3250000 N's 17111100 real 7094373 upper 10016727 lower)
    #	in 12 sequences in 12 files

    faSize randomContigs/*.ctg.fa
    # 17111100 bases (0 N's 17111100 real 7094373 upper 10016727 lower)
    #	in 77 sequences in 12 files
    #	Note the number of real, upper and lower bases are the same

    #	This random contig business isn't actually needed
    #	Create a 2bit file with the full chrom sequences and these
    #	random contigs for use in blastz:
    # faToTwoBit ?/chr?.fa ??/chr??.fa randomContigs/chr*.ctg.fa \
    #	    mm8Chroms_RandomContigs.2bit

    #	Copy to bluearc unit for kluster runs
    # cp -p mm8.2bit /cluster/bluearc/mm8
    # cp -p mm8Chroms_RandomContigs.2bit /cluster/bluearc/mm8
    #	And the lift file to go with it
    # cat ?/lift/ctg_random.lft ??/lift/ctg_random.lft \
    #	    > jkStuff/Chroms_RandomContigs.lft
    #	cp -p jkStuff/Chroms_RandomContigs.lft /cluster/bluearc/mm8

    #	create full chrom nibs for blastz SEQ1 target with Lin Spec Repeats
    mkdir nib
    for FA in ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa
do
    B=${FA/*\/}
    B=${B/.fa/}
    echo faToNib -softMask ${FA} nib/${B}.nib
    rm -f nib/${B}.nib
    faToNib -softMask ${FA} nib/${B}.nib
done
 
    mkdir /cluster/bluearc/scratch/hg/mm8/nib
    cp -p nib/*.nib /cluster/bluearc/scratch/hg/mm8/nib
    cp -p chrom.sizes /cluster/bluearc/scratch/hg/mm8
    cp -p mm8.2bit /cluster/bluearc/scratch/hg/mm8
    #	The contigs over there are no longer needed
    rm -fr /cluster/bluearc/scratch/hg/mm8/contigs
    #	after lineage specific repeats are created below, this business
    #	can be pushed to the kluster kk nodes and over to the Iservers

#############################################################################
# PREPARE "bigZips" files for public release
#	(DONE 2006-02-16 - Hiram)
    ssh kkstore01
    mkdir /cluster/data/mm8/downloads
    mkdir /cluster/data/mm8/downloads/bigZips
    mkdir /cluster/data/mm8/downloads/chromosomes
    cd /cluster/data/mm8/downloads/chromosomes
    gzip chr*.fa
    #	12 minutes
    #	copy previous release README.txt
    scp hgwdev:/usr/local/apache/htdocs/goldenPath/mm8/chromosomes/README.txt .
    #	edit it to bring it up to date
    cd /cluster/data/mm8/downloads/bigZips
    #	copy previous release README.txt
    scp hgwdev:/usr/local/apache/htdocs/goldenPath/mm8/bigZips/README.txt .
    # edit README.txt to indicate proper version of sequence and
    #	RepeatMasker
    cd /cluster/data/mm8
    cp -p ?/chr*.fa ??/chr*.fa downloads/chromosomes
    tar cvzf downloads/bigZips/chromAgp.tar.gz ?/chr*.agp ??/chr*.agp
    tar cvzf downloads/bigZips/chromFa.tar.gz ?/chr*.fa ??/chr*.fa
    #	12 minutes
    tar cvzf downloads/bigZips/chromFaMasked.tar.gz ?/chr*.fa.masked \
	??/chr*.fa.masked
    tar cvzf downloads/bigZips/chromOut.tar.gz ?/chr*.fa.out ??/chr*.fa.out
    cd /cluster/data/mm8/bed/simpleRepeat
    tar cvzf ../../downloads/bigZips/chromTrf.tar.gz ./trfMask

    # get GenBank native mRNAs and refGene (DONE 2006-02-23)
    #	after the genbank run was complete
    ssh hgwdev
    cd /cluster/data/genbank
    time ./bin/i386/gbGetSeqs -db=mm8 -native GenBank mrna \
	/cluster/data/mm8/downloads/bigZips/mrna.fa
    #	2 minutes
    cd /cluster/data/mm8/downloads/bigZips
    gzip mrna.fa
    cd /cluster/data/mm8/downloads/bigZips
    for I in 1000 2000 5000
    do
	echo "upstream${I} working ... "
	featureBits mm8 refGene:upstream:${I} -fa=stdout \
		| gzip -c > upstream${I}.fa.gz
	echo "upstream${I} done"
    done
    #	real    11m25.493s

    ssh kkstore01
    cd /cluster/data/mm8/downloads/bigZips
    cp -p ../../mm8.2bit .
    md5sum *.gz *.2bit README.txt > md5sum.txt

    ssh hgwdev
    mkdir -p /usr/local/apache/htdocs/goldenPath/mm8
    ln -s /cluster/data/mm8/downloads/bigZips \
	/usr/local/apache/htdocs/goldenPath/mm8/bigZips
    ln -s /cluster/data/mm8/downloads/chromosomes \
	/usr/local/apache/htdocs/goldenPath/mm8/chromosomes

#############################################################################
# PREPARE LINEAGE SPECIFIC REPEAT FILES FOR BLASTZ (DONE - 2006-02-16 - Hiram)

    ssh kkr1u00
    mkdir /iscratch/i/mm8/rmsk
    cd /cluster/data/mm8
    cp -p */chr*.fa.out /iscratch/i/mm8/rmsk
    cd /iscratch/i/mm8
    for R in 2 3 4 5 6 7 8
    do
	rsync -a --progress /iscratch/i/mm8/ kkr${R}u00:/iscratch/i/mm8/
    done
    cd rmsk

    ssh kki
    mkdir /cluster/data/mm8/linSpecRep
    cd /cluster/data/mm8/linSpecRep
    ls -1S /iscratch/i/mm8/rmsk > fa.list
    
    cat << '_EOF_' > mkLSR.csh
#!/bin/csh -fe
pushd /iscratch/i/mm8/rmsk
/cluster/bluearc/RepeatMasker060120/DateRepeats \
	    $1 -query mouse -comp human -comp rat -comp dog -comp cow \
		-comp rabbit
popd
/bin/cp -p /iscratch/i/mm8/rmsk/$1_homo-sapiens_rattus_canis-familiaris_bos-taurus_oryctolagus-cuniculus .
'_EOF_'
    #	happy emacs
    chmod +x mkLSR.csh

    cat << '_EOF_' > template
#LOOP
./mkLSR.csh $(path1) {check out line+ $(path1)_homo-sapiens_rattus_canis-familiaris_bos-taurus_oryctolagus-cuniculus}
#ENDLOOP
'_EOF_'
    #	happy emacs

    gensub2 fa.list single template jobList
    para try ... check ... push ... etc...
    para time
# Completed: 34 of 34 jobs
# CPU time in finished jobs:       1338s      22.29m     0.37h    0.02d  0.000 y
# IO & Wait Time:                   112s       1.87m     0.03h    0.00d  0.000 y
# Average job time:                  43s       0.71m     0.01h    0.00d
# Longest finished job:              92s       1.53m     0.03h    0.00d
# Submission to last job:           181s       3.02m     0.05h    0.00d

    ssh kkstore01
    cd /cluster/data/mm8/linSpecRep
    mkdir notInHuman notInRat notInDog notInCow notInRabbit
    for F in chr*.out_homo-sapiens*
    do
	B=${F/.fa.out*/}
	echo $B 
        /cluster/bin/scripts/extractRepeats 1 ${F} > \
		notInHuman/${B}.out.spec
        /cluster/bin/scripts/extractRepeats 2 ${F} > \
		notInRat/${B}.out.spec
        /cluster/bin/scripts/extractRepeats 3 ${F} > \
		notInDog/${B}.out.spec
        /cluster/bin/scripts/extractRepeats 4 ${F} > \
		notInCow/${B}.out.spec
        XXXXX /cluster/bin/scripts/extractRepeats 4 ${F} > \ XXXXX
		notInRabbit/${B}.out.spec XXXXX
    done
   # NOTE: rabbit should be column 5 instead of 4.
   # This isn't a problem, as we're not using rabbit anyway (see below)

    #	the notInHuman, notInDog, notInCow and notInRabit ended up being
    #	identical.  Only the notInRat was different than them
    #	To check identical
    find . -name "*.out.spec" | \
	while read FN; do echo `cat ${FN} | sum -r` ${FN}; done \
	| sort -k1,1n | sort -t"/" -k3,3
    #	Copy to scratch/hg for use in kluster runs
    mkdir /cluster/bluearc/scratch/hg/mm8/linSpecRep
    mkdir /cluster/bluearc/scratch/hg/mm8/linSpecRep/notInRat
    mkdir /cluster/bluearc/scratch/hg/mm8/linSpecRep/notInOthers
    cp -p notInHuman/* /cluster/bluearc/scratch/hg/mm8/linSpecRep/notInOthers
    cp -p notInRat/* /cluster/bluearc/scratch/hg/mm8/linSpecRep/notInRat
    #	Request this scratch/hg/mm8 directory push to the kk nodes

    #	and we can do the Iservers simply:
    ssh kkr1u00
    cd /iscratch/i/mm8
    #	no longer need these two directories
    rm -fr fa rmsk
    rsync -a --progress /cluster/bluearc/scratch/hg/mm8/ .
    for R in 2 3 4 5 6 7 8
    do
	rsync -a --progress /iscratch/i/mm8/ kkr${R}u00:/iscratch/i/mm8/
    done

############################################################################
#  BLATSERVERS ENTRY (DONE - 2006-02-16 - Hiram)
#	After getting a blat server assigned by the Blat Server Gods,
    ssh hgwdev

    hgsql -e 'INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
	VALUES ("mm8", "blat17", "17784", "1", "0"); \
	INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
	VALUES ("mm8", "blat17", "17785", "0", "1");' \
	    hgcentraltest
    #	test it with some sequence

#########################################################################
# CPGISLANDS (DONE - 2006-02-16 - Hiram)
    ssh hgwdev
    mkdir /cluster/data/mm8/bed/cpgIsland
    cd /cluster/data/mm8/bed/cpgIsland

    # Build software from Asif Chinwalla (achinwal@watson.wustl.edu)
    cvs co hg3rdParty/cpgIslands
    cd hg3rdParty/cpgIslands
    make
    #	gcc readseq.c cpg_lh.c -o cpglh.exe
    cd ../..
    ln -s hg3rdParty/cpgIslands/cpglh.exe .
    
    # cpglh.exe requires hard-masked (N) .fa's.  
    # There may be warnings about "bad character" for IUPAC ambiguous 
    # characters like R, S, etc.  Ignore the warnings.  
    ssh kkstore01
    cd /cluster/data/mm8/bed/cpgIsland
    for F in ../../*/chr*.fa.masked
    do
	FA=${F/*\/}
	C=${FA/.fa.masked/}
	echo "./cpglh.exe ${FA} > ${C}.cpg"
	./cpglh.exe ${F} > ${C}.cpg
    done > cpglh.out 2>&1 &
    #	about 3 minutes 20 seconds

    #	Several chroms have 0 results:
    #	-rw-rw-r--  1     0 Feb 16 15:19 chr10_random.cpg
    #	-rw-rw-r--  1     0 Feb 16 15:20 chr15_random.cpg
    #	-rw-rw-r--  1     0 Feb 16 15:22 chr8_random.cpg
    #	-rw-rw-r--  1     0 Feb 16 15:22 chr9_random.cpg
    #	-rw-rw-r--  1     0 Feb 16 15:22 chrM.cpg
    #	-rw-rw-r--  1     0 Feb 16 15:22 chrX_random.cpg
    #	-rw-rw-r--  1     0 Feb 16 15:22 chrY.cpg

    # Transform cpglh output to bed +
    cat << '_EOF_' > filter.awk
{
$2 = $2 - 1;
width = $3 - $2;
printf("%s\t%d\t%s\t%s %s\t%s\t%s\t%0.0f\t%0.1f\t%s\t%s\n",
       $1, $2, $3, $5,$6, width,
       $6, width*$7*0.01, 100.0*2*$6/width, $7, $9);
}
'_EOF_'
    #	happy emacs
    awk -f filter.awk chr*.cpg | sort -k1,1 -k2,2n > cpgIsland.bed

    ssh hgwdev
    cd /cluster/data/mm8/bed/cpgIsland
    hgLoadBed -strict mm8 cpgIslandExt -tab -noBin \
      -sqlTable=$HOME/kent/src/hg/lib/cpgIslandExt.sql cpgIsland.bed
    #	Reading cpgIsland.bed
    #	Loaded 15963 elements of size 10
    featureBits mm8 cpgIslandExt
    #	10456823 bases of 2567283971 (0.407%) in intersection
    featureBits mm7 cpgIslandExt
    #	10439328 bases of 2583394090 (0.404%) in intersection
    featureBits mm6 cpgIslandExt
    #	10432360 bases of 2597150411 (0.402%) in intersection
    featureBits mm5 cpgIslandExt
    #	10422989 bases of 2615483787 (0.399%) in intersection
    featureBits mm4 cpgIsland
    #	11109692 bases of 2627444668 (0.423%) in intersection
    featureBits mm3 cpgIsland
    #	10102968 bases of 2505900260 (0.403%) in intersection

#########################################################################
# ANDY LAW CPGISSLANDS (DONE - 2006-02-16 - Hiram)
    # See notes in makeGalGal2.doc and makeCanFam2.doc
    ssh kkstore01
    mkdir /cluster/data/mm8/bed/cpgIslandGgfAndy
    cd /cluster/data/mm8/bed/cpgIslandGgfAndy

    #	Build the preProcGgfAndy program in
    #	kent/src/oneShot/preProcGgfAndy into your ~/bin/$MACHTYPE

    # Use masked sequence since this is a mammal...
    for F in ../../*/chr*.fa.masked
    do
	FA=${F/*\/}
	C=${FA/.fa.masked/}
	echo preproc and run on masked "${C} ${F}" 1>/dev/stderr
	~/bin/$MACHTYPE/preProcGgfAndy ${F} \
	| /cluster/home/angie/ggf-andy-cpg-island.pl \
	| perl -wpe 'chomp; ($s,$e,$cpg,$n,$c,$g1,$oE) = split("\t"); $s--;
                   $gc=$c+$g1;  $pCpG=(100.0 * 2 * $cpg / $n);
                   $pGc=(100.0 * $gc / $n);
                   $_="'${C}'\t$s\t$e\tCpG: $cpg\t$n\t$cpg\t$gc\t" .
                        "$pCpG\t$pGc\t$oE\n";'
    done | sort -k1,1 -k2,2n > cpgIslandGgfAndyMasked.bed

    # load into database:
    ssh hgwdev
    cd /cluster/data/mm8/bed/cpgIslandGgfAndy
    sed -e 's/cpgIslandExt/cpgIslandGgfAndyMasked/g' \
      $HOME/kent/src/hg/lib/cpgIslandExt.sql > cpgIslandGgfAndyMasked.sql
    hgLoadBed -strict mm8 cpgIslandGgfAndyMasked -tab -noBin \
      -sqlTable=cpgIslandGgfAndyMasked.sql cpgIslandGgfAndyMasked.bed
    #	Loaded 67442 elements of size 10
    featureBits mm8 cpgIslandExt
    #	10456823 bases of 2567283971 (0.407%) in intersection
    featureBits mm7 cpgIslandExt
    #	10439328 bases of 2583394090 (0.404%) in intersection
    featureBits mm8 cpgIslandGgfAndyMasked
    #	38850121 bases of 2567283971 (1.513%) in intersection
    featureBits mm7 cpgIslandGgfAndyMasked
    #	38774242 bases of 2583394090 (1.501%) in intersection
    wc -l ../cpgIsland/cpgIsland.bed *bed
    #	15963 ../cpgIsland/cpgIsland.bed
    #	67442 cpgIslandGgfAndyMasked.bed

#########################################################################
# BLASTZ HUMAN Hg18 (DONE - 2006-02-16 - 2006-02-18 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastzHg18.2006-02-16
    cd /cluster/data/mm8/bed
    ln -s blastzHg18.2006-02-16 blastz.hg18
    cd blastzHg18.2006-02-16
    #	Started this before the rsync to /scratch/hg/mm8/ had completed,
    #	hence the /cluster/bluearc/scratch/hg/mm8/ location is used
    #	here.

    cat << '_EOF_' > DEF
# mouse vs human
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7.x86_64
BLASTZ_ABRIDGE_REPEATS=1

# TARGET: Mouse Mm8
SEQ1_DIR=/cluster/bluearc/scratch/hg/mm8/nib
SEQ1_SMSK=/cluster/bluearc/scratch/hg/mm8/linSpecRep/notInOthers
SEQ1_LEN=/cluster/bluearc/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY: Human Hg18 - single chunk big enough to run each chrom by itself
SEQ2_DIR=/scratch/hg/hg18/nib
SEQ2_SMSK=/scratch/hg/hg18/linSpecRep/notInMouse
SEQ2_LEN=/scratch/hg/hg18/chrom.sizes
SEQ2_CHUNK=300000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzHg18.2006-02-16
TMPDIR=/scratch/tmp
'_EOF_'
    # << happy emacs

    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    #	Started 2006-02-16 16:15
    #	failed due to pk node difficulties, finish the run.blastz
    #	manually
# Completed: 3724 of 3724 jobs
# CPU time in finished jobs:    5190293s   86504.89m  1441.75h   60.07d  0.165 y
# IO & Wait Time:                259150s    4319.16m    71.99h    3.00d  0.008 y
# Average job time:                1463s      24.39m     0.41h    0.02d
# Longest finished job:           10621s     177.02m     2.95h    0.12d
# Submission to last job:         74153s    1235.88m    20.60h    0.86d

    #	continuing
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-continue=cat `pwd`/DEF > cat.out 2>&1 &
    #	Done 2006-02-17 15:02

    #	Then to swap over to Hg18
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-swap -bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > swap.out 2>&1 &
    #	Started 2006-02-17 15:30

    ssh hgwdev
    time nice -n +19 featureBits mm8 chainHg18Link
    #	984380268 bases of 2567283971 (38.343%) in intersection
    time nice -n +19 featureBits hg18 chainMm8Link
    #	994530182 bases of 2881515245 (34.514%) in intersection

#########################################################################
# BLASTZ RAT Rn4 (DONE - 2006-02-16 - 2006-02-18 - Hiram)
    ssh kkr1u00
    cd /iscratch/i/rn4
    rsync -a --progress /cluster/data/rn4/linSpecRep.notInMouse/ \
	./linSpecRep.notInMouse
    rsync -a --progress /cluster/data/rn4/nib/ ./nib/
    cp -p /cluster/data/rn4/chrom.sizes .
    for R in 2 3 4 5 6 7 8
    do
	rsync -a --progress /iscratch/i/rn4/ kkr${R}u00:/iscratch/i/rn4/
    done

    ssh kk
    mkdir /cluster/data/mm8/bed/blastzRn4.2006-02-16
    cd /cluster/data/mm8/bed
    ln -s blastzRn4.2006-02-16 blastz.rn4
    cd blastzRn4.2006-02-16
    #	Started this before the rsync to /scratch/hg/mm8/ had completed,
    #	hence the /cluster/bluearc/scratch/hg/mm8/ location is used
    #	here.

    cat << '_EOF_' > DEF
# mouse vs rat
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7
BLASTZ_ABRIDGE_REPEATS=1

# TARGET: Mouse Mm8
SEQ1_DIR=/cluster/bluearc/scratch/hg/mm8/nib
SEQ1_SMSK=/cluster/bluearc/scratch/hg/mm8/linSpecRep/notInRat
SEQ1_LEN=/cluster/bluearc/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=20000000
SEQ1_LAP=10000

# QUERY: Rat Rn4 - single chunk big enough to run each chrom by itself
SEQ2_DIR=/iscratch/i/rn4/nib
SEQ2_SMSK=/iscratch/i/rn4/linSpecRep.notInMouse
SEQ2_LEN=/iscratch/i/rn4/chrom.sizes
SEQ2_CHUNK=300000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzRn4.2006-02-16
TMPDIR=/scratch/tmp
'_EOF_'
    # << happy emacs

    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    #	Started 2006-02-16 16:15
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=3000 -chainLinearGap=medium \
	-continue=cat `pwd`/DEF > cat.out 2>&1 &

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=3000 -chainLinearGap=medium \
	-swap `pwd`/DEF > swap.out 2>&1 &

    time nice -n +19 featureBits mm8 chainRn4Link
    #	1770319811 bases of 2567283971 (68.957%) in intersection
    time nice -n +19 featureBits rn4 chainMm8Link
    #	1791093685 bases of 2571531505 (69.651%) in intersection

##############################################################################
# CLONE ENDS - BACEND TRACK (DONE - 2006-02-17 - Hiram)
    ssh kkstore01
    cd /cluster/data/mm8
    # check disk space: 73Gb free
    df -h .
# Filesystem            Size  Used Avail Use% Mounted on
# /export/cluster/store5
#                       1.5T  1.3T   73G  95% /cluster/store5
    mkdir -p bed/cloneend/ncbi
    cd bed/cloneend/ncbi

    wget --timestamping \
	ftp://ftp.ncbi.nih.gov/genomes/CLONEEND/mus_musculus/*

    cd /cluster/data/mm8/bed/cloneend
    # seems like the *.mfa files were split just for convenience
    # concatenate
    for F in ncbi/*.mfa.gz
    do
	zcat ${F}
    done | gzip > all.mfa.gz

    # Convert the title line of the all.mfa file
    cat << '_EOF_' > convert.pl
#!/usr/bin/env perl

use strict;
use warnings;

while (my $line = <>) {
    if ($line !~ m/^>/) {
	print $line
    } else {
        my @fields = split('\|', $line);
	my $fieldCount = scalar(@fields);
        my $printed = 0;
        for (my $i = 0; $i < $fieldCount; $i++) {
                if ($fields[$i] eq "gb" || $fields[$i] eq "dbj") {
                        (my $name, my $vers) = split(/\./,$fields[$i+1]);
                        print ">$name\n";
                        $i= $fieldCount;
                        $printed = 1;
                }
        }
        if (!$printed) {
                die("Failed for $line\n");
        }
    }
}
'_EOF_'
    # < happy emacs
    chmod +x convert.pl
    zcat all.mfa.gz | ./convert.pl | gzip > cloneEnds.fa.gz

    #	make sure nothing got broken:
    faSize all.mfa.gz
# 498162791 bases (16779168 N's 481383623 real 304962409 upper 176421214
# lower) in 789466 sequences in 1 files

    faSize cloneEnds.fa.gz
# 498162791 bases (16779168 N's 481383623 real 304962409 upper 176421214
# lower) in 789466 sequences in 1 files
    #	identical numbers, curiously, these are exactly the same numbers
    #	as were seen during the build of Mm7.  Do these things not
    #	change with time ?

    # concatenate the text files, too
    for F in ncbi/*.txt.gz
    do
	zcat ${F}
    done | gzip > all.txt.gz

    # generate cloneEndPairs.txt and cloneEndSingles.txt
    cp -p /cluster/data/mm7/bed/cloneend/convertTxt.pl .
    zcat all.txt.gz | ./convertTxt.pl stdin
    # Reading in end info
    # Writing out pair info
    # Writing out singleton info
    # 354485 pairs and 78423 singles

    #	faSplit does not function correctly if given a .gz source file
    #	AND, we need the unzipped file for sequence loading below
    gunzip cloneEnds.fa.gz
    # split
    mkdir splitdir
    cd splitdir
    faSplit sequence ../cloneEnds.fa 100 cloneEnds
    #	Check to ensure no breakage:
    cat *.fa | faSize stdin
# 498162791 bases (16779168 N's 481383623 real 304962409 upper 176421214
# lower) in 789466 sequences in 1 files
    #	same numbers as before

    #	Copy to san for cluster runs
    mkdir /san/sanvol1/scratch/mm8/cloneEnds
    cp -p *.fa /san/sanvol1/scratch/mm8/cloneEnds
    rm *
    cd ..
    rmdir splitdir
    #	may as well remove the previous assembly copy:
    rm -fr /san/sanvol1/scratch/mm7/cloneEnds

    # load sequences
    ssh hgwdev
    mkdir /gbdb/mm8/cloneend
    cd /gbdb/mm8/cloneend
    ln -s /cluster/data/mm8/bed/cloneend/cloneEnds.fa .
    cd /tmp
    hgLoadSeq mm8 /gbdb/mm8/cloneend/cloneEnds.fa
    #  Advisory lock created
    # Creating .tab file
    # Adding /gbdb/mm8/cloneend/cloneEnds.fa
    # 789466 sequences
    # Updating seq table
    # Advisory lock has been released
    # All done

############################################################################
# BACEND SEQUENCE ALIGNMENTS (DONE - 2006-02-17 - 2006-02-22 - Hiram)
    ssh kkstore01
    mkdir /cluster/data/mm8/noMask
    cd /cluster/data/mm8/
    #	Need an unmasked sequence for this work
    for CHR in ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa
    do
	C=`basename ${CHR}`
	echo -n "working ${C} ... "
	head -1 ${CHR} > noMask/${C}
	tail +2 ${CHR} | tr [:lower:] [:upper:] >> noMask/${C}
	echo "done"
    done
    mkdir /san/sanvol1/scratch/mm8/noMask
    time cp --verbose -p noMask/chr*.fa /san/sanvol1/scratch/mm8/noMask

    #	Size of mouse non-gap genome: 2567283971
    #	Size of  Hg18 non-gap genome: 2881515245
    #	Adjusting the 1024 number from typical human ooc generation:
    #	1024 * (2567283971 / 2881515245) = 912

    time blat mm8.2bit \
	/dev/null /dev/null -tileSize=11 -makeOoc=11.ooc -repMatch=912
    #	Wrote 29643 overused 11-mers to 11.ooc
    #	real    2m13.206
    # Copy over to the san
    cp -p 11.ooc /san/sanvol1/scratch/mm8

    
    #	and for the kluster run
    ssh pk
    mkdir /cluster/data/mm8/bed/bacends
    cd /cluster/data/mm8/bed/bacends
    mkdir out

    # allow blat to run politely in /tmp while it writes output, then
    # copy results to results file:
    cat << '_EOF_' > runBlat.sh
#!/bin/sh
root1=$1
root2=$2
result=$3
rm -fr /scratch/tmp/${root1}_${root2}
mkdir /scratch/tmp/${root1}_${root2}
pushd /scratch/tmp/${root1}_${root2}
/cluster/bin/x86_64/blat /san/sanvol1/scratch/mm8/noMask/${root1}.fa \
	/san/sanvol1/scratch/mm8/cloneEnds/${root2}.fa \
	-ooc=/san/sanvol1/scratch/mm8/11.ooc ${root1}.${root2}.psl
popd
mkdir -p out/${root2}
rm -f ${result}
mv /scratch/tmp/${root1}_${root2}/${root1}.${root2}.psl ${result}
rm -fr /scratch/tmp/${root1}_${root2}
'_EOF_'
    #	happy emacs
    chmod +x runBlat.sh

    cat << '_EOF_' > template
#LOOP
./runBlat.sh $(root1) $(root2) {check out line+ out/$(root2)/$(root1).$(root2).psl}
#ENDLOOP
'_EOF_'
    # << emacs happy

    ls -1S /san/sanvol1/scratch/mm8/cloneEnds/cloneEnds???.fa > bacEnds.lst
    ls -1S /san/sanvol1/scratch/mm8/noMask/chr*.fa > contig.lst
    gensub2 contig.lst bacEnds.lst template jobList
    para create jobList
    # 3322 jobs written to batch
    para try, check, push, etc ...
# Completed: 3332 of 3332 jobs
# CPU time in finished jobs:     649465s   10824.42m   180.41h    7.52d  0.021 y
# IO & Wait Time:                 11633s     193.88m     3.23h    0.13d  0.000 y
# Average job time:                 198s       3.31m     0.06h    0.00d
# Longest finished job:            1326s      22.10m     0.37h    0.02d
# Submission to last job:        429201s    7153.35m   119.22h    4.97d

    ssh kkstore01
    cd /cluster/data/mm8/bed/bacends
    screen

    mkdir temp
    time pslSort dirs raw.psl temp out/* > pslSort.out 2>&1 &
    #	real    22m4.019s
    #	-rw-rw-r--    1 8422362557 Feb 22 15:35 raw.psl

    time pslReps -nearTop=0.01 -minCover=0.7 -minAli=0.8 -noIntrons \
	raw.psl bacEnds.psl /dev/null > pslReps.out 2>&1 &
    #	real    6m15.981s
    #	-rw-rw-r--    1  197029888 Feb 22 15:37 bacEnds.psl

    cp -p /cluster/data/mm7/bed/bacends/split.pl .
    cp -p /cluster/data/mm7/bed/bacends/header .

    time ./split.pl header < bacEnds.psl
    #	real    0m26.983s


    mv bacEnds.psl bacEnds.psl.save
    time pslSort dirs bacEnds.psl temp split
    #	real    2m19.131s
    #	-rw-rw-r--    1 1227866614 Feb 22 15:48 bacEnds.psl

    # Copy files to final destination and remove
    mkdir /cluster/data/mm8/bacends
    cp -p bacEnds.psl /cluster/data/mm8/bacends

############################################################################
# BACEND PAIRS TRACK (DONE - 2006-02-22 - Hiram)

    ssh kolossus
    cd /cluster/data/mm8/bacends

time /cluster/bin/x86_64/pslPairs -tInsert=10000 -minId=0.91 -noBin -min=25000 \
-max=350000 -slopval=10000 -hardMax=500000 -slop -short -long -orphan \
-mismatch -verbose bacEnds.psl \
	../bed/cloneend/cloneEndPairs.txt all_bacends bacEnds
    #	real    0m47.401s


    # create header required by "rdb" tools
    echo -e \
"chr\tstart\tend\tclone\tscore\tstrand\tall\tfeatures\tstarts\tsizes" > header
    echo -e "10\t10N\t10N\t10\t10N\t10\t10\t10N\t10\t10" >> header

    cat header bacEnds.pairs | \
	/cluster/bin/scripts/row score ge 300 | \
	/cluster/bin/scripts/sorttbl chr start | \
	/cluster/bin/scripts/headchg -del > bacEndPairs.bed
    #	-rw-rw-r--  1   23816801 Feb 22 15:52 bacEndPairs.bed


    cat header bacEnds.slop bacEnds.short bacEnds.long bacEnds.mismatch \
	bacEnds.orphan | /cluster/bin/scripts/row score ge 300 | \
	/cluster/bin/scripts/sorttbl chr start | \
	/cluster/bin/scripts/headchg -del > bacEndPairsBad.bed
    #	-rw-rw-r--  1    6843775 Feb 22 15:54 bacEndPairsBad.bed

    /cluster/bin/scripts/extractPslLoad -noBin bacEnds.psl bacEndPairs.bed \
	bacEndPairsBad.bed >j1.out
    cat j1.out| /cluster/bin/scripts/sorttbl tname tstart >j2.out
    cat j2.out | /cluster/bin/scripts/headchg -del > bacEnds.load.psl
    #	-rw-rw-r--  1  983668200 Feb 22 16:04 bacEnds.load.psl

    rm j1.out j2.out

    #	CHECK bacEndPairs.bed ID's to make sure they have no blanks in them
    awk '{print $5}' bacEndPairs.bed | sort -u
    #	result should be the scores, no extraneous strings:
#	1000
#	300
#	375
#	500
#	750
    #	edit the file and fix it if it has a bad name.

    # load into database
    ssh hgwdev
    cd /cluster/data/mm8/bacends
    hgLoadBed -strict -notItemRgb mm8 bacEndPairs bacEndPairs.bed \
	-sqlTable=$HOME/kent/src/hg/lib/bacEndPairs.sql
    #	Loaded 235440 elements of size 11

    # note - this track isn't pushed to RR, just used for assembly QA
    hgLoadBed -strict -notItemRgb mm8 bacEndPairsBad bacEndPairsBad.bed \
	-sqlTable=$HOME/kent/src/hg/lib/bacEndPairsBad.sql
    #	Loaded 95099 elements of size 11

    # NOTE: truncates file to 0 if -nobin is used
    time hgLoadPsl mm8 -table=all_bacends bacEnds.load.psl
# load of all_bacends did not go as planned: 8132116 record(s), 0 row(s)
# skipped, 1 warning(s) loading psl.tab
#	skipped, 1 warning(s) loading psl.tab
#	real    20m45.055s

    featureBits mm8 all_bacends
# 327086559 bases of 2567283971 (12.741%) in intersection
    featureBits mm7 all_bacends
# 334161740 bases of 2583394090 (12.935%) in intersection
    featureBits mm6 all_bacends
# 336981828 bases of 2597150411 (12.975%) in intersection
    featureBits mm5 all_bacends
# 268502414 bases of 2615483787 (10.266%) in intersection
    featureBits mm4 all_bacends
# 243096171 bases of 2627444668 (9.252%) in intersection

    featureBits mm8 bacEndPairs
# 2572527283 bases of 2567283971 (100.204%) in intersection
    featureBits mm7 bacEndPairs
# 2578837424 bases of 2583394090 (99.824%) in intersection
    featureBits mm6 bacEndPairs
# 2570768812 bases of 2597150411 (98.984%) in intersection
    featureBits mm5 bacEndPairs
# 2567958504 bases of 2615483787 (98.183%) in intersection
    featureBits mm4 bacEndPairs
# 2549945356 bases of 2627444668 (97.050%) in intersection

    featureBits mm8 bacEndPairsBad
# 879222026 bases of 2567283971 (34.247%) in intersection
    featureBits mm7 bacEndPairsBad
# 954662115 bases of 2583394090 (36.954%) in intersection
    featureBits mm6 bacEndPairsBad
# 1006314997 bases of 2597150411 (38.747%) in intersection
    featureBits mm5 bacEndPairsBad
# 541027882 bases of 2615483787 (20.686%) in intersection
    featureBits mm4 bacEndPairsBad
# 1074505863 bases of 2627444668 (40.895%) in intersection

#########################################################################
# GENBANK auto update (DONE - 2006-02-17 - 2006-02-23 - Hiram)
    # align with revised genbank process. drop xeno ESTs.
    ssh hgwdev
    cd ~/kent/src/hg/makeDb/genbank
    cvs update -d -P etc
    # edit etc/genbank.conf to add mm8, it is a copy of mm7 with changes:

# mm8
mm8.serverGenome = /cluster/data/mm8/mm8.2bit
mm8.clusterGenome = /scratch/hg/mm8/mm8.2bit
mm8.ooc = /cluster/data/mm8/11.ooc
mm8.align.unplacedChroms = chrUn_random
mm8.lift = /cluster/data/mm8/jkStuff/liftAll.lft
mm8.refseq.mrna.native.pslCDnaFilter  = ${ordered.refseq.mrna.native.pslCDnaFilter}
mm8.refseq.mrna.xeno.pslCDnaFilter    = ${ordered.refseq.mrna.xeno.pslCDnaFilter}
mm8.genbank.mrna.native.pslCDnaFilter = ${ordered.genbank.mrna.native.pslCDnaFilter}
mm8.genbank.mrna.xeno.pslCDnaFilter   = ${ordered.genbank.mrna.xeno.pslCDnaFilter}
mm8.genbank.est.native.pslCDnaFilter  = ${ordered.genbank.est.native.pslCDnaFilter}
mm8.downloadDir = mm8
mm8.refseq.mrna.xeno.load  = yes
mm8.refseq.mrna.xeno.loadDesc = yes
mm8.mgcTables.default = full
mm8.mgcTables.mgc = all

    #	check that into CVS, then
    # update /cluster/data/genbank/
    make etc-update

    ssh kkstore02
    cd /cluster/data/genbank
    nice bin/gbAlignStep -initial mm8 &
    #	var/build/logs/2006.02.17-16:10:17.mm8.initalign.log
    #	the parasol batch job on kk broke down in:
    #	/cluster/bluearc/genbank/work/initial.mm8/align
    #	go to kk and this directory and get the batch finished
    nice bin/gbAlignStep -continue=finish -initial mm8 &
    #	var/build/logs/2006.02.22-20:26:54.mm8.initalign.log

    # load database when finished
    ssh hgwdev
    cd /cluster/data/genbank
    nice ./bin/gbDbLoadStep -drop -initialLoad  mm8 &
    #	var/dbload/hgwdev/logs/2006.02.23-10:21:36.dbload.log
    #	real    228m59.734s

#########################################################################
# BLASTZ rheMac2 (DONE - 2006-02-17 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastz.rheMac2.2006-02-17
    cd /cluster/data/mm8/bed
    ln -s blastz.rheMac2.2006-02-17 blastz.rheMac2
    cd blastz.rheMac2

    cat << '_EOF_' > DEF
# mouse vs macaca mulatta
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn/x86_64:/cluster/bin/x86_64:/parasol/bin

ALIGN=blastz-run
BLASTZ=blastz.v7.x86_64

# TARGET - mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY - macaca mulatta - big enough chunk to do whole chroms at once
SEQ2_DIR=/san/sanvol1/scratch/rheMac2/rheMac2.2bit
SEQ2_LEN=/san/sanvol1/scratch/rheMac2/rheMac2.sizes 
SEQ2_CHUNK=250000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastz.rheMac2.2006-02-17
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    #	Started 2006-02-17 16:42
    #	crashed due to no copies of mm8 in /scratch/hg/mm8/ on the
    #	Iservers.  Fix that up and get the chain run done.  Continuing.
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-continue=chainMerge `pwd`/DEF > chainMerge.out 2>&1 &

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-swap `pwd`/DEF > swap.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-swap -continue=net `pwd`/DEF > swap.net.out 2>&1 &
    #	failed during a san hiccup,  finish that off, then:
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-swap -continue=load `pwd`/DEF > swap.load.out 2>&1 &

    time nice -n +19 featureBits mm8 chainRheMac2Link
    #	891310108 bases of 2567283971 (34.718%) in intersection
    time nice -n +19 featureBits rheMac2 chainMm8Link
    #	877906099 bases of 2646704109 (33.170%) in intersection

#########################################################################
# BLASTZ canFam2 (DONE - 2006-02-18 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastz.canFam2.2006-02-18
    cd /cluster/data/mm8/bed
    ln -s blastz.canFam2.2006-02-18 blastz.canFam2
    cd blastz.canFam2

    cat << '_EOF_' > DEF
# mouse vs dog
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7.x86_64
BLASTZ_ABRIDGE_REPEATS=1

# TARGET: Mouse Mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_SMSK=/scratch/hg/mm8/linSpecRep/notInOthers
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY: Dog CanFam2 - chunk big enough to do all chroms in single whole pieces
SEQ2_DIR=/scratch/hg/canFam2/nib
SEQ2_SMSK=/san/sanvol1/scratch/canFam2/linSpecRep.notInMouse
SEQ2_LEN=/san/sanvol1/scratch/canFam2/chrom.sizes
SEQ2_CHUNK=200000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzCanFam2.2006-02-18
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-swap `pwd`/DEF > swap.out 2>&1 &

    time nice -n +19 featureBits mm8 chainCanFam2Link
    #	828741604 bases of 2567283971 (32.281%) in intersection
    time nice -n +19 featureBits canFam2 chainMm8Link
    #	816262344 bases of 2384996543 (34.225%) in intersection

#########################################################################
# BLASTZ bosTau2 (DONE - 2006-02-18 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastz.bosTau2.2006-02-18
    cd /cluster/data/mm8/bed
    ln -s blastz.bosTau2.2006-02-18 blastz.bosTau2
    cd blastz.bosTau2

    cat << '_EOF_' > DEF
# mouse vs cow
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7.x86_64

# TARGET: Mouse Mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY: Cow (bosTau2)
#  large enough chunk to do chroms in one piece
SEQ2_DIR=/scratch/hg/bosTau2/bosTau2.noBin0.2bit
SEQ2_LEN=/scratch/hg/bosTau2/noBin0.sizes
SEQ2_CHUNK=150000000
SEQ2_LIMIT=100
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzBosTau.2006-02-18
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-swap `pwd`/DEF > swap.out 2>&1 &

    time nice -n +19 featureBits mm8 chainBosTau2Link
    #	688859641 bases of 2567283971 (26.832%) in intersection
    time nice -n +19 featureBits bosTau2 chainMm8Link
    #	683178156 bases of 2812203870 (24.293%) in intersection

#########################################################################
# BLASTZ galGal2 (DONE - 2006-02-18 - Hiram)
    ssh kk
    mkdir /cluster/data/mm8/bed/blastz.galGal2.2006-02-18
    cd /cluster/data/mm8/bed
    ln -s blastz.galGal2.2006-02-18 blastz.galGal2
    cd blastz.galGal2

    cat << '_EOF_' > DEF
# mouse vs chicken
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7
BLASTZ_ABRIDGE_REPEATS=1

# TARGET: Mouse Mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_SMSK=/scratch/hg/mm8/linSpecRep/notInOthers
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY: Chicken galGal2 - single chunk big enough for whole chroms at once
SEQ2_DIR=/scratch/hg/galGal2/nib
SEQ2_LEN=/scratch/hg/galGal2/chrom.sizes
SEQ2_SMSK=/scratch/hg/galGal2/linSpecRep
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=200000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzGalGal2.2006-02-18
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-continue=cat `pwd`/DEF > cat.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-continue=net `pwd`/DEF > net.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-swap `pwd`/DEF > swap.out 2>&1 &

    time nice -n +19 featureBits mm8 chainGalGal2Link
    #	65517358 bases of 2567283971 (2.552%) in intersection
    time nice -n +19 featureBits galGal2 chainMm8Link
    #	57074100 bases of 1054197620 (5.414%) in intersection

#########################################################################
# BLASTZ dasNov1 (DONE - 2006-02-19 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastz.dasNov1.2006-02-19
    cd /cluster/data/mm8/bed
    ln -s blastz.dasNov1.2006-02-19 blastz.dasNov1
    cd blastz.dasNov1

    cat << '_EOF_' > DEF
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/parasol/bin

BLASTZ=blastz.v7.x86_64

# TARGET: Mouse Mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000


# QUERY - Armadillo dasNov1
SEQ2_DIR=/scratch/hg/dasNov1/dasNov1.2bit
SEQ2_LEN=/scratch/hg/dasNov1/chrom.sizes
SEQ2_LIMIT=100
SEQ2_CHUNK=50000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzDasNov1.2006-02-19
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-continue=cat `pwd`/DEF > cat.out 2>&1 &

    time nice -n +19 featureBits mm8 chainDasNov1Link
    #	431944142 bases of 2567283971 (16.825%) in intersection

#########################################################################
# BLASTZ echTel1 (DONE - 2006-02-19 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastz.echTel1.2006-02-19
    cd /cluster/data/mm8/bed
    ln -s blastz.echTel1.2006-02-19 blastz.echTel1
    cd blastz.echTel1

    cat << '_EOF_' > DEF
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/parasol/bin

BLASTZ=blastz.v7.x86_64

# TARGET: Mouse Mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000


# QUERY - Tenrec echTel1
SEQ2_DIR=/scratch/hg/echTel1/echTel1.2bit
SEQ2_LEN=/scratch/hg/echTel1/chrom.sizes
SEQ2_LIMIT=100
SEQ2_CHUNK=50000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzEchTel1.2006-02-19
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	-continue=cat `pwd`/DEF > cat.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	-continue=chainRun `pwd`/DEF > chain.out 2>&1 &

    time nice -n +19 featureBits mm8 chainEchTel1Link
    #	292970406 bases of 2567283971 (11.412%) in intersection

#########################################################################
# BLASTZ fr1 (DONE - 2006-02-19 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastz.fr1.2006-02-19
    cd /cluster/data/mm8/bed
    ln -s blastz.fr1.2006-02-19 blastz.fr1
    cd blastz.fr1

    cat << '_EOF_' > DEF
# mouse vs. fugu
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin:/parasol/bin
 
BLASTZ=blastz.v7

# Reuse parameters from human-chicken, except L=6000 (more relaxed)
BLASTZ_H=2000
BLASTZ_Y=3400 
BLASTZ_L=6000
BLASTZ_K=2200
BLASTZ_Q=/cluster/data/blastz/HoxD55.q

# TARGET: Mouse Mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY: Fugu - chunk big enough to run the whole chrom at once
SEQ2_DIR=/san/sanvol1/scratch/fr1/nib
SEQ2_LEN=/san/sanvol1/scratch/fr1/chrom.sizes
SEQ2_CHUNK=400000000
SEQ2_LAP=0
 
BASE=/cluster/data/mm8/bed/blastzFr1.2006-02-19
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	-swap `pwd`/DEF > swap.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	-swap -continue=net `pwd`/DEF > swap.net.out 2>&1 &

    time nice -n +19 featureBits mm8 chainFr1Link
    #	48949500 bases of 2567283971 (1.907%) in intersection
    time nice -n +19 featureBits fr1 chainMm8Link
    #	42671288 bases of 315518167 (13.524%) in intersection

#########################################################################
# BLASTZ loxAfr1 (DONE - 2006-02-19 - Hiram)
    ssh kk
    mkdir /cluster/data/mm8/bed/blastz.loxAfr1.2006-02-19
    cd /cluster/data/mm8/bed
    ln -s blastz.loxAfr1.2006-02-19 blastz.loxAfr1
    cd blastz.loxAfr1

    cat << '_EOF_' > DEF
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/parasol/bin

BLASTZ=blastz.v7

# TARGET: Mouse Mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=30000000
SEQ1_LAP=10000

# QUERY - Elephant loxAfr1
SEQ2_DIR=/scratch/hg/loxAfr1/loxAfr1.2bit
SEQ2_LEN=/scratch/hg/loxAfr1/chrom.sizes
SEQ2_LIMIT=100
SEQ2_CHUNK=30000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzLoxAfr1.2006-02-19
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    #	failed during the cat, fixed the script
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=3000 -chainLinearGap=medium \
	-continue=chainRun `pwd`/DEF > chain.out 2>&1 &

    time nice -n +19 featureBits mm8 chainLoxAfr1Link
    #	472168702 bases of 2567283971 (18.392%) in intersection

#########################################################################
# BLASTZ tetNig1 (DONE - 2006-02-19 - Hiram)
    ssh kk
    mkdir /cluster/data/mm8/bed/blastz.tetNig1.2006-02-19
    cd /cluster/data/mm8/bed
    ln -s blastz.tetNig1.2006-02-19 blastz.tetNig1
    cd blastz.tetNig1

    cat << '_EOF_' > DEF
# Mouse vs tetraodon
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7

BLASTZ_H=2000
BLASTZ_Y=3400
BLASTZ_L=6000
BLASTZ_K=2200
BLASTZ_Q=/cluster/data/blastz/HoxD55.q

# TARGET: Mouse Mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY: Tetraodon TetNig1 - single chunk big enough to run whole chroms
SEQ2_DIR=/san/sanvol1/scratch/tetNig1/tetNig1.2bit
SEQ2_LEN=/san/sanvol1/scratch/tetNig1/chrom.sizes
SEQ2_CHUNK=200000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzTetNig1.2006-02-19
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-continue=net `pwd`/DEF > net.out 2>&1 &

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-swap `pwd`/DEF > swap.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-swap -continue=net `pwd`/DEF > swap-net.out 2>&1 &


    time nice -n +19 featureBits mm8 chainTetNig1Link
    #	50358792 bases of 2567283971 (1.962%) in intersection
    time nice -n +19 featureBits tetNig1 chainMm8Link
    #	47024263 bases of 342403326 (13.734%) in intersection

#########################################################################
# BLASTZ oryCun1 (DONE - 2006-02-21 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastz.oryCun1.2006-02-21
    cd /cluster/data/mm8/bed
    ln -s blastz.oryCun1.2006-02-21 blastz.oryCun1
    cd blastz.oryCun1

    cat << '_EOF_' > DEF
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/parasol/bin

BLASTZ=blastz.v7.x86_64

# TARGET: Mouse Mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY - Rabbit oryCun1
SEQ2_DIR=/scratch/hg/oryCun1/oryCun1.2bit
SEQ2_LEN=/scratch/hg/oryCun1/chrom.sizes
SEQ2_LIMIT=100
SEQ2_CHUNK=50000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzOryCun1.2006-02-21
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &

    time nice -n +19 featureBits mm8 chainOryCun1Link
    #	496060619 bases of 2567283971 (19.322%) in intersection

#########################################################################
# BLASTZ xenTro1 (DONE - 2006-02-21 - Hiram)
    ssh kk
    mkdir /cluster/data/mm8/bed/blastz.xenTro1.2006-02-21
    cd /cluster/data/mm8/bed
    ln -s blastz.xenTro1.2006-02-21 blastz.xenTro1
    cd blastz.xenTro1

    cat << '_EOF_' > DEF
# mouse vs. frog
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7

# Specific settings for chicken (per Webb email to Brian Raney)
BLASTZ_H=2000
BLASTZ_Y=3400
BLASTZ_L=8000
BLASTZ_K=2200
BLASTZ_Q=/cluster/data/blastz/HoxD55.q

# TARGET: Mouse Mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY: Frog xenTro1 - single chunk big enough to run two of the
#               largest scaffolds in one job
SEQ2_DIR=/scratch/hg/xenTro1/xenTro1.2bit
SEQ2_LEN=/scratch/hg/xenTro1/chrom.sizes
SEQ2_CHUNK=20000000
SEQ2_LAP=0
SEQ2_LIMIT=100

BASE=/cluster/data/mm8/bed/blastzXenTro1.2006-02-21
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-continue=cat `pwd`/DEF > cat.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-swap `pwd`/DEF > swap.out 2>&1 &

    time nice -n +19 featureBits mm8 chainXenTro1Link
    #	62015601 bases of 2567283971 (2.416%) in intersection
    time nice -n +19 featureBits xenTro1 chainMm8Link
    #	59307185 bases of 1381238994 (4.294%) in intersection

#########################################################################
# BLASTZ monDom4 (DONE - 2006-02-23 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastz.monDom4.2006-02-23
    cd /cluster/data/mm8/bed
    ln -s blastz.monDom4.2006-02-23 blastz.monDom4
    cd blastz.monDom4

    cat << '_EOF_' > DEF
# Mouse vs. opossum
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/parasol/bin

BLASTZ=blastz.v7.x86_64

# Specific settings for chicken (per Webb email to Brian Raney)
BLASTZ_H=2000
BLASTZ_Y=3400
BLASTZ_L=10000
BLASTZ_K=2200
BLASTZ_M=20
BLASTZ_Q=/cluster/data/blastz/HoxD55.q

# TARGET: Mouse (mm8)
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=100000000
SEQ1_LAP=10000

# QUERY: Opossum monDom2
SEQ2_DIR=/cluster/bluearc/scratch/hg/monDom4/monDom4.2bit
SEQ2_LEN=/cluster/bluearc/scratch/hg/monDom4/chrom.sizes
SEQ2_CHUNK=50000000
SEQ2_LIMIT=100
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzMonDom4.2006-02-23
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	-swap `pwd`/DEF > swap.out 2>&1 &

    time nice -n +19 featureBits mm8 chainMonDom4Link
    #	211663336 bases of 2567283971 (8.245%) in intersection
    time nice -n +19 featureBits monDom4 chainMm8Link
    #	210933035 bases of 3501643220 (6.024%) in intersection

#########################################################################
# BLASTZ panTro1 (DONE - 2006-02-23 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastz.panTro1.2006-02-23
    cd /cluster/data/mm8/bed
    ln -s blastz.panTro1.2006-02-23 blastz.panTro1
    cd blastz.panTro1

    cat << '_EOF_' > DEF
# mouse vs chimp
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7.x86_64
BLASTZ_M=50

# TARGET: Mouse Mm7
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY: Chimp PanTro1
SEQ2_DIR=/scratch/hg/panTro1/nib
SEQ2_LEN=/scratch/hg/panTro1/chrom.sizes
SEQ2_CHUNK=30000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzPanTro1.2006-02-23
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-swap `pwd`/DEF > swap.out 2>&1 &

    time nice -n +19 featureBits mm8 chainPanTro1Link
    #	901276629 bases of 2567283971 (35.106%) in intersection
    time nice -n +19 featureBits panTro1 chainMm8Link
    #	901976621 bases of 2733948177 (32.992%) in intersection

#########################################################################
# BLASTZ danRer3 (DONE - 2006-02-28 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastz.danRer3.2006-02-28
    cd /cluster/data/mm8/bed
    ln -s blastz.danRer3.2006-02-28 blastz.danRer3
    cd blastz.danRer3

    cat << '_EOF_' > DEF
# mouse vs zebrafish
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn/x86_64:/cluster/bin/x86_64:/parasol/bin

BLASTZ=blastz.v7.x86_64

# Reuse parameters from hg16-fr1, danRer-hg17 and mm5-danRer
BLASTZ_H=2000
BLASTZ_Y=3400
BLASTZ_L=6000
BLASTZ_K=2200
BLASTZ_M=50
BLASTZ_Q=/cluster/data/blastz/HoxD55.q

# TARGET: Mouse Mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=20000000
SEQ1_LAP=10000

# QUERY: Zebrafish (danRer3)
#  large enough chunk to do complete chroms at once
SEQ2_DIR=/san/sanvol1/scratch/danRer3/chromNib
SEQ2_LEN=/san/sanvol1/scratch/danRer3/chromNib.sizes
SEQ2_CHUNK=100000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzDanRer3.2006-02-28
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    #	real    216m23.425s
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	-swap `pwd`/DEF > swap.out 2>&1 &


    time nice -n +19 featureBits mm8 chainDanRer3Link
    #	53125783 bases of 2567283971 (2.069%) in intersection
    time nice -n +19 featureBits danRer3 chainMm8Link
    #	54831876 bases of 1630323462 (3.363%) in intersection

#############################################################################
# STS MARKERS DATA DOWNLOAD (DONE - 2006-02-23 - 2006-02-28 - Hiram)
    ssh kkstore01
    mkdir -p /cluster/data/mm8/bed/STSmarkers/downloads
    cd /cluster/data/mm8/bed/STSmarkers/downloads
    # these files appear to be new almost every day
    wget --timestamping \
	ftp://ftp.ncbi.nih.gov/repository/UniSTS/UniSTS_mouse.sts
    wget --timestamping \
	ftp://ftp.ncbi.nih.gov/repository/UniSTS/UniSTS.aliases

    #	The new feature in the .aliases file this time are names with
    #	spaces in them !  This changes our parsing business below,
    #	hopefully the spaces in the names won't cause trouble elsewhere.

    wget --timestamping \
ftp://ftp.ncbi.nih.gov/repository/UniSTS/UniSTS_MapReports/Mus_musculus/*

    # these reports from jax.org appear to be changing daily
    wget --timestamping \
	ftp://ftp.informatics.jax.org/pub/reports/MRK_Dump2.rpt
    wget --timestamping \
	ftp://ftp.informatics.jax.org/pub/reports/MRK_Sequence.rpt
    wget --timestamping \
	ftp://ftp.informatics.jax.org/pub/reports/PRB_PrimerSeq.rpt
    ls -ogrt
#	-rw-rw-r--  1      676 Mar 11  2004 README
#	-rw-rw-r--  1   396858 Jan 28  2005 10090.MGI.txt
#	-rw-rw-r--  1   390139 Mar 16  2005 10090.WI_MRC_RH.txt
#	-rw-rw-r--  1   240688 Mar 16  2005 10090.WI-YAC.txt
#	-rw-rw-r--  1   173344 Mar 16  2005 10090.WI-Genetic.txt
#	-rw-rw-r--  1 25691253 Jan 13 16:42 UniSTS.aliases
#	-rw-rw-r--  1  4140920 Feb 22 18:43 UniSTS_mouse.sts
#	-rw-rw-r--  1  4576611 Feb 23 02:22 MRK_Dump2.rpt
#	-rw-rw-r--  1  2549974 Feb 23 02:23 PRB_PrimerSeq.rpt
#	-rw-rw-r--  1  4531489 Feb 23 02:23 MRK_Sequence.rpt
    #	 I note the UniSTS.aliases file is over twice as big as was in
    #	 Mm7 build.  I wonder what got into it ...
    #	What got into it was that it was completely broken.  It appeared
    #	to have a vast section of itself duplicated again in the file.
    #	It was cleaned up via:
    echo -e "#Unique ID\tAliases" > uniqueSTS.aliases
    grep -v "^#" UniSTS.aliases | sort -n | uniq >> uniqueSTS.aliases
    mv UniSTS.aliases UniSTS.aliases.broken
    mv uniqueSTS.aliases UniSTS.aliases

    # back to our work area, update the bed file
    #	to do this we need a new UniSTS_mouse.alias file
    # it is created by a combination of information from several
    # of the above files ! AND ! the previous stsInfoMouse.bed file

    cd /cluster/data/mm8/bed/STSmarkers/downloads
    cp -p /cluster/data/mm7/bed/STSmarkers/downloads/*.sh .
    cp -p /cluster/data/mm7/bed/STSmarkers/downloads/*.pl .
    #	There is a line in the fetchAllAliases.sh script that needs to
    #	be updated, it must point to the previous bed file:
    #   BEDFile=/cluster/data/mm7/bed/STSmarkers/stsInfoMouse.bed
    #	Next time, this should read:
    #   BEDFile=/cluster/data/mm8/bed/STSmarkers/stsInfoMouse.bed

    #	This process has been captured in the script:
    #	/cluster/data/mm5/bed/STSmarkers/downloads/fetchAllAliases.sh
    # which uses a couple of perl scripts in that same directory.
    # briefly it is:
    
    # ./UniSTSParse.pl UniSTS_mouse.sts UniSTS.aliases > UniSTS_mouse_alias.0
    # grep MGI: UniSTS.aliases > MGI.aliases
    # ./stsInfoMouseParse.pl /cluster/store5/mouseMarker/stsInfoMouse.bed > \
    #	stsInfoAliases.txt
    # ./UniSTSParse.pl stsInfoAliases.txt UniSTS.aliases > stsInfo.aliases
    # cat UniSTS_mouse_alias.0 MGI.aliases stsInfo.aliases | sort -u \
    #    | sort -n > UniSTS_mouse.alias

    time ./fetchAllAliases.sh > fetchAllAliases.out 2>&1

    #	Here is a normal set of errors:
# processing UniSTS_mouse.sts to find aliases
# #       ERROR: KNOWN(==OK) duplicate ID: '108991' encountered at line
# #       2384
# processing MGI.aliases
# fetching existing aliases from previous stsInfoMouse.bed file
# found 27648 potential errors in
#	/cluster/data/mm7/bed/STSmarkers/stsInfoMouse.bed
# to see the errors: grep ERROR stsInfoAliases.txt
# verify those stsInfoMouse.bed aliases with UniSTS.aliases

    #	those errors in the previous stsInfoMouse.bed file are an
    #	accumulation of errors from a long long time ago in this chain
    #	of processing.  Some day it might be nice to fix them, but they
    #	don't seem to bother anything, so they continue to be carried
    #	forward, and a couple of new ones are added with each assembly.

    # with that, we can create a new stsInfoMouse.bed file:
    #	Update the m m 7 directory name here to m m 8
    #	for the next build of m m 9
    cd /cluster/data/mm8/bed/STSmarkers
    /cluster/store5/mouseMarker/code/updateBed.pl \
	/cluster/data/mm7/bed/STSmarkers/stsInfoMouse.bed \
	downloads/MRK_Dump2.rpt downloads/PRB_PrimerSeq.rpt \
	downloads/MRK_Sequence.rpt downloads/UniSTS_mouse.alias \
	downloads/UniSTS_mouse.sts | sed -e "s/\t*$//" > newbedfile

    # Yontao updated /cluster/store5/mouseMarker/code/cleanInfo.pl 8/10/04
    /cluster/store5/mouseMarker/code/cleanInfo.pl newbedfile > stsInfoMouse.bed
	
    # copy the stsInfoMouse.bed file from working dir to the marker
    #	info storage fold.  added 2 new steps by Yontao	
    #	be wary of the archive name here, check the directory and get
    #	the name right here.
    mv /cluster/store5/mouseMarker/stsInfoMouse.bed \
	/cluster/store5/mouseMarker/stsInfoMouse.bed_mm7
    cp -p stsInfoMouse.bed /cluster/store5/mouseMarker/stsInfoMouse.bed

    # comparing to previous, numbers increase slightly each time
    wc /cluster/store5/mouseMarker/stsInfoMouse.bed \
	/cluster/store5/mouseMarker/stsInfoMouse.bed_mm7 \
	/cluster/store5/mouseMarker/stsInfoMouse.bed_mm6 \
	/cluster/store5/mouseMarker/stsInfoMouse.bed_mm5
    #	60440   801181  6871232 /cluster/store5/mouseMarker/stsInfoMouse.bed
    #	59843   794642  6802825 /cluster/store5/mouseMarker/stsInfoMouse.bed_mm7
    #	58980   784786  6690105 /cluster/store5/mouseMarker/stsInfoMouse.bed_mm6
    #	58493   778055  6524821 /cluster/store5/mouseMarker/stsInfoMouse.bed_mm5

    # and from that, create new primer fa, epcr, etc:
    /cluster/store5/mouseMarker/code/luConvertPrimerToFa \
	stsInfoMouse.bed mouseP.fa mouseC.fa mouseP.info
    # the mouseC.fa file will be empty, should be more than last time
    wc mouse?.*
    #	     0       0       0 mouseC.fa
    #	305991  305937 6910111 mouseP.fa
    #	 34475  172467 2195057 mouseP.info
    #	340466  478404 9105168 total

    #	the equivalent Mm7 files:
    #      0       0       0 mouseC.fa
    # 300968  300914 6798466 mouseP.fa
    #  33838  169275 2153113 mouseP.info
    # 334806  470189 8951579 total
    #	the equivalent Mm6 files:
    #	     0       0       0 mouseC.fa
    #	293305  293251 6624638 mouseP.fa
    #	 32890  164528 2087271 mouseP.info
    #	326195  457779 8711909 total
    #	the equivalent Mm5 files:
    #	     0       0       0 mouseC.fa
    #	286740  286686 6474893 mouseP.fa
    #	 32232  161234 2044810 mouseP.info
    #	318972  447920 8519703 total

    #	copy the primers over to some filesystem close to the klusters
    #	and split them up to have a small number of sequences in one file
    

    mkdir /cluster/bluearc/mm8/stsMarkers
    cp -p mouseP.fa /cluster/bluearc/mm8/stsMarkers
    cd /cluster/bluearc/mm8/stsMarkers
    cp -p /cluster/data/mm8/11.ooc .
    mkdir split
    #	400 files for 34,475 sequences, == about 80 sequences per file
    faSplit sequence mouseP.fa 400 split/mm_


    # PLEASE NOTE /cluster/bin/i386/blat.2 SPECIFICALLY IS USED HERE. 
    #	This process could convert to a modern version of blat with the
    #	filters as described, for example, in the STS markers build in Hg18

    #  CLUSTER RUN FOR THE STS PRIMERS
    ssh kk
    mkdir /cluster/data/mm8/bed/STSmarkers/primer
    mkdir /cluster/data/mm8/bed/STSmarkers/ePCR
    cd /cluster/data/mm8/bed/STSmarkers/primer
    mkdir out

    #	interestingly, this blat2.2 binary did not function correctly
    #	when given nib files.  It has only about 1/4th of the number of
    #	alignments as it gets when it used fa files for the target
    #	sequence.

    ls -1S /cluster/bluearc/mm8/stsMarkers/split > primers.list
    ls -1S /cluster/bluearc/mm8/stsMarkers/chroms > chr.list

    cat << '_EOF_' > runBlat2.csh
#!/bin/csh -fe
set primer = /cluster/bluearc/mm8/stsMarkers/split/$1
set fa = /cluster/bluearc/mm8/stsMarkers/chroms/$2
set ooc = /cluster/bluearc/mm8/stsMarkers/11.ooc
set root2 = $2:r
mkdir -p out/${root2}
set out = $3

/cluster/bin/i386/blat.2 ${fa} ${primer} -ooc=${ooc} \
        -minMatch=1 -minScore=0 -minIdentity=80 -oneOff ${out}
'_EOF_'
    #	happy emacs
    chmod +x runBlat2.csh

    cat << '_EOF_' > template
#LOOP
./runBlat2.csh $(path1) $(path2) {check out line+ out/$(root2)/$(root1).psl}
#ENDLOOP
'_EOF_'
    #	happy emacs

    gensub2 primers.list chr.list template jobList
    para create jobList
    para try ... check ... push ... etc ...
# Completed: 12104 of 12104 jobs
# CPU time in finished jobs:    1075037s   17917.28m   298.62h   12.44d  0.034 y
# IO & Wait Time:               7444257s  124070.95m  2067.85h   86.16d  0.236 y
# Average job time:                 704s      11.73m     0.20h    0.01d
# Longest finished job:           61869s    1031.15m    17.19h    0.72d
# Submission to last job:        168538s    2808.97m    46.82h    1.95d
    #	some of the jobs got stuck for unknown reasons.  Had to find
    #	them and kill them on their nodes.  Their blat.2 process was
    #	stuck and would not kill.  Don't know what happened there.

    # on the file server
    ssh kkstore01
    cd /cluster/data/mm8/bed/STSmarkers/primer
    time pslSort dirs primers.raw.psl temp out/chr*
    #	-rw-rw-r--   1 586124177 Feb 26 21:28 primers.raw.psl

    #	filter alignments for (qEnd-qStart) vs. (tEnd-tStart)
    #	should not be more than 100 bases different.
    #	This filters out about 1,028,202 alignments, or
    #	%17.4 = 100.0 * 1028202 / 5921712
    time pslSort dirs stdout temp out/chr* | awk -F"\t" '
{ if (((($13 - $12) - ($17 - $16)) > -100) &&
	((($13 - $12) - ($17 - $16)) < 100)) {print}
}
' > primers.psl.100

    rmdir temp

    wc -l *.100 *.psl
    #	5445367 primers.raw.psl
    #	4500528 primers.psl.100
    #	 944839 difference

    # a rough comparison with previous results:
    wc -l /cluster/data/mm7/bed/STSmarkers/primer/primers.psl.100
    #	4893510  102763628  510563575 primers.psl.100
    wc primers.psl  (unfiltered, Mm7)
    #	5921712 124355891 636898117 primers.psl
    wc /cluster/data/mm7/bed/STSmarkers/primer/primers.psl
    #	5724127 120206606 615248041
    wc /cluster/data/mm5/bed/STSmarkers/primer/primers.psl
    #	5719969 120119288 590806241
    wc /cluster/data/mm4/bed/STSmarkers/primer/primers.psl
    #	5745617 120657896 592135728 

    # another kluster run for the ePCR
    ssh pk
    cd /cluster/data/mm8/bed/STSmarkers/ePCR
    ls -1S /cluster/bluearc/mm8/stsMarkers/chroms > chr.list

    #	pick up e-PCR source from
    #	ftp://ftp.ncbi.nlm.nih.gov/pub/schuler/e-PCR/
    #	version 2.3.1 11 Feb 2005
    #	Had to add the following to both re-PCR_main.cpp and
    #	e-PCR_main.cpp to get them to compile on kolossus:
// max and min Copied from /usr/include/mysql/my_global.h
#define max(a, b)       ((a) >? (b))
#define min(a, b)       ((a) <? (b))

    mkdir out
    cat << '_EOF_' > runPCR
#!/bin/csh -fe
/cluster/bin/x86_64/e-PCR /cluster/data/mm8/bed/STSmarkers/mouseP.info \
	/cluster/bluearc/mm8/stsMarkers/chroms/$1 N=1 M=50 W=5 > $2
'_EOF_'
    # emacs happy ?
    chmod +x runPCR

    cat << '_EOF_' > template
#LOOP
./runPCR $(path1) {check out line+ out/$(num1).epcr}
#ENDLOOP
'_EOF_'
    # the mouseP.info was created above
    gensub2 chr.list single template jobList
    para create jobList
    para try
    para check
    para push
    ... etc ...
    # STARTED 2006-02-27 16:24
    #	There is a single job that produces no output:
    ./runPCR chrX_random.fa out/30.epcr
    #	WARNING: 96 STSs have primer shorter than W
    #	WARNING: 21 STSs have ambiguities within W of 3' end
    #	Not sure what's up with that
# Completed: 33 of 34 jobs
# Crashed: 1 jobs
# CPU time in finished jobs:      67601s    1126.69m    18.78h    0.78d  0.002 y
# IO & Wait Time:                  1028s      17.13m     0.29h    0.01d  0.000 y
# Average job time:                2080s      34.66m     0.58h    0.02d
# Longest finished job:            5134s      85.57m     1.43h    0.06d
# Submission to last job:          5134s      85.57m     1.43h    0.06d

    ssh kkstore01
    cd /cluster/data/mm8/bed/STSmarkers/ePCR
    # all those results become all.epcr
    cat out/*.epcr > all.epcr

    # comparing to previous results:
    wc -l all.epcr
    #	58088 all.epcr
    wc -l /cluster/data/mm7/bed/STSmarkers/ePCR/all.epcr
    #	57709 /cluster/data/mm7/bed/STSmarkers/ePCR/all.epcr
    wc -l /cluster/data/mm6/bed/STSmarkers/ePCR/all.epcr
    #	55871 /cluster/data/mm6/bed/STSmarkers/ePCR/all.epcr
    wc /cluster/data/mm5/bed/STSmarkers/ePCR/all.epcr
    #	55677  222708 2945623 /cluster/data/mm5/bed/STSmarkers/ePCR/all.epcr
    wc /cluster/data/mm4/bed/STSmarkers/ePCR/all.epcr
    #	74705  298820 3971712 /cluster/data/mm4/bed/STSmarkers/ePCR/all.epcr
    #	Mm4 seems to be out of whack

    cd /cluster/data/mm8/bed/STSmarkers/primer

    /cluster/bin/scripts/filterSTSPrimers \
    -mouse ../stsInfoMouse.bed primers.psl.100 \
        ../mouseP.info ../ePCR/all.epcr > primers.psl.filter.blat

    #  The output should show an increasing count:
    #	Reading name info
    #	Reading primer info
    #	Processing file
    #	100000
    #	200000
    #	300000
    #	...
    #	4500000
    #	Determining ePCR not found
    #
    wc -l primers.psl.filter.blat
    #	34026 primers.psl.filter.blat
    wc -l /cluster/data/mm7/bed/STSmarkers/primer/primers.psl.filter.blat
    #	33986 /cluster/data/mm7/bed/STSmarkers/primer/primers.psl.filter.blat
    wc -l /cluster/data/mm6/bed/STSmarkers/primer/primers.psl.filter.blat
    #	33128 /cluster/data/mm6/bed/STSmarkers/primer/primers.psl.filter.blat
    wc -l /cluster/data/mm5/bed/STSmarkers/primer/primers.psl.filter.blat
    #	33476 /cluster/data/mm5/bed/STSmarkers/primer/primers.psl.filter.blat

    # create accession_info.rdb
    touch empty_sequence.inf
    /cluster/bin/scripts/compileAccInfo -mouse \
	/cluster/data/mm8 empty_sequence.inf
    # works with errors on missing randoms, etc...:
    # cat: /cluster/data/mm5/11/chr11_random.agp: No such file or directory
    # cat: /cluster/data/mm5/M/chrM_random.agp: No such file or directory
    mv accession_info.rdb accession_info.rdb.tmp
    /cluster/bin/scripts/sorttbl Chr Ord Start < accession_info.rdb.tmp > \
	accession_info.rdb
    rm accession_info.rdb.tmp
    # comparing results to previous
    #	Continuing the trend that began with Mm7, the numbers in
    #	accession_info.rdb continue to decrease.  Even Mm8 has much less
    #	fragments than did mm7:
    #	e.g.:
    [hiram@kkstore01 /cluster/data] wc -l mm8/*/chr*.agp | tail -1
    #	21910 total
    [hiram@kkstore01 /cluster/data] wc -l mm7/*/chr*.agp | tail -1
    #	70125 total
    [hiram@kkstore01 /cluster/data] wc -l mm6/*/chr*.agp | tail -1
    #	170812 total

    wc -l accession_info.rdb
    #	20385 accession_info.rdb
    wc -l /cluster/data/mm7/bed/STSmarkers/primer/accession_info.rdb
    #	44046  484510 3112816 accession_info.rdb
    wc /cluster/data/mm7/bed/STSmarkers/primer/accession_info.rdb
    #	93052 1023576 6824900 accession_info.rdb
    wc /cluster/data/mm5/bed/STSmarkers/primer/accession_info.rdb
    #	131845 1450299 9681940
    wc /cluster/data/mm4/bed/STSmarkers/primer/accession_info.rdb
    #	86935  956289 6374930 

    # creates epcr.not.found.nomatch and epcr.not.found.psl
    #	/cluster/bin/scripts/epcrToPsl
    #	Fixed this script (in mm7) to make it not look for contigs in the usual
    #	manner, we don't have those for this assembly	
    sed -e "s/mm7/mm8/g" /cluster/data/mm7/bed/STSmarkers/primer/epcrToPsl \
	> ./epcrToPsl
    chmod +x epcrToPsl
    ./epcrToPsl -mouse \
	epcr.not.found ../mouseP.info \
	accession_info.rdb /cluster/data/mm8

    # Comparing results to previous:
    wc -l epcr*
    #	 501 epcr.not.found
    #	   0 epcr.not.found.nomatch
    #	 501 epcr.not.found.psl
    #	 158 epcrToPsl
    #	1160 total

    # Mm7 wc epcr*
    wc -l /cluster/data/mm7/bed/STSmarkers/primer/epcr*
    #	 474 /cluster/data/mm7/bed/STSmarkers/primer/epcr.not.found
    #	   0 /cluster/data/mm7/bed/STSmarkers/primer/epcr.not.found.nomatch
    #	 474 /cluster/data/mm7/bed/STSmarkers/primer/epcr.not.found.psl
    #	 158 /cluster/data/mm7/bed/STSmarkers/primer/epcrToPsl
    #	1106 total

    # Mm6 wc epcr*
    wc -l /cluster/data/mm6/bed/STSmarkers/primer/epcr*
    #	 472 /cluster/data/mm6/bed/STSmarkers/primer/epcr.not.found
    #	  63 /cluster/data/mm6/bed/STSmarkers/primer/epcr.not.found.nomatch
    #	 404 /cluster/data/mm6/bed/STSmarkers/primer/epcr.not.found.psl
    #	 158 /cluster/data/mm6/bed/STSmarkers/primer/epcrToPsl
    #	1097 total

    cat primers.psl.filter.blat epcr.not.found.psl > primers.psl.filter
    wc -l primers.psl.filter
    #	34527 primers.psl.filter

    wc -l /cluster/data/mm7/bed/STSmarkers/primer/primers.psl.filter
    #	34460 /cluster/data/mm7/bed/STSmarkers/primer/primers.psl.filter

    wc -l /cluster/data/mm6/bed/STSmarkers/primer/primers.psl.filter
    #	33532 /cluster/data/mm6/bed/STSmarkers/primer/primers.psl.filter

    wc -l /cluster/data/mm5/bed/STSmarkers/primer/primers.psl.filter.lifted
    # 33691 /cluster/data/mm5/bed/STSmarkers/primer/primers.psl.filter.lifted

    # create primers.psl.filter.lifted.initial
    #	if you do not run with scripts in your path, add the PATH business
    PATH=/cluster/bin/scripts:$PATH /cluster/bin/scripts/extractPslInfo \
	primers.psl.filter
    wc -l  primers.psl.filter.initial
    #	34513 primers.psl.filter.initial

    wc -l /cluster/data/mm7/bed/STSmarkers/primer/primers.psl.filter.initial
    #	34443 /cluster/data/mm7/bed/STSmarkers/primer/primers.psl.filter.initial
    wc -l /cluster/data/mm6/bed/STSmarkers/primer/primers.psl.filter.initial
    #	33514 /cluster/data/mm6/bed/STSmarkers/primer/primers.psl.filter.initial
    wc -l \
       /cluster/data/mm5/bed/STSmarkers/primer/primers.psl.filter.lifted.initial
    # 33689 

    # create primers.psl.filter.lifted.initial.acc
    /cluster/bin/scripts/findAccession -agp \
	-mouse primers.psl.filter.initial /cluster/data/mm8
    #	it complains about missing _random items, it is OK
    wc -l primers.psl.filter.initial.acc
    #	34513 primers.psl.filter.initial.acc

    wc -l /cluster/data/mm7/bed/STSmarkers/primer/primers.psl.filter.initial.acc
    #	34443

    # this needs to be -rat as that specifies how to scan the
    # stsInfoMouse.bed file and it does not work if you use -mouse
    /cluster/bin/scripts/getStsId -rat \
	../stsInfoMouse.bed  primers.psl.filter.initial.acc \
	| sort -k4,4n > primers.final
    wc -l primers.final
    #	34513 primers.final
    wc -l /cluster/data/mm7/bed/STSmarkers/primer/primers.final
    #	34443 /cluster/data/mm7/bed/STSmarkers/primer/primers.final

    cd /cluster/data/mm8/bed/STSmarkers
    # stsMarkers.final is empty for mouse
    touch stsMarkers.final dummy
    #	if you do not run with scripts in your path, add the PATH business
    PATH=/cluster/bin/scripts:$PATH /cluster/bin/scripts/combineSeqPrimerPos \
	stsMarkers.final primer/primers.final > stsMarkers_pos.rdb
    wc -l stsMarkers_pos.rdb
    #	33075 stsMarkers_pos.rdb
    wc -l /cluster/data/mm7/bed/STSmarkers/stsMarkers_pos.rdb
    #	32869 /cluster/data/mm7/bed/STSmarkers/stsMarkers_pos.rdb

    wc -l /cluster/data/mm6/bed/STSmarkers/stsMarkers_pos.rdb
    #	31889 /cluster/data/mm6/bed/STSmarkers/stsMarkers_pos.rdb
    wc -l /cluster/data/mm5/bed/STSmarkers/stsMarkers_pos.rdb
    #	32085 /cluster/data/mm5/bed/STSmarkers/stsMarkers_pos.rdb
    wc -l /cluster/data/mm4/bed/STSmarkers/stsMarkers_pos.rdb
    #	31270 /cluster/data/mm4/bed/STSmarkers/stsMarkers_pos.rdb

    /projects/cc/hg/ytlu/bin/script/perl/createStsBed \
	stsInfoMouse.bed  stsMarkers_pos.rdb 500 \
	| sort -k1,1 -k2,2n > stsMapMouse.bed
    wc stsMapMouse.bed  (after filter applied to primers.psl above)
    #	29842  308123 2135776 stsMapMouse.bed
    wc stsMapMouse.bed  (before filter applied to primers.psl above)
    #	30296  312257 2166725 stsMapMouse.bed
    wc /cluster/data/mm7/bed/STSmarkers/stsMapMouse.bed
    #	29079  301678 2097544 stsMapMouse.bed
    wc /cluster/data/mm5/bed/STSmarkers/stsMapMouse.bed
    #	29069  301535 2123622 /cluster/data/mm5/bed/STSmarkers/stsMapMouse.bed

    #  loading STS markers tables
    ssh hgwdev
    cd /cluster/data/mm8/bed/STSmarkers
    cp -p /cluster/data/mm7/bed/STSmarkers/ucscAlias.pl .
    ./ucscAlias.pl stsInfoMouse.bed > ucscStsAlias.tab 2> ucscStsAlias.warnings
    #	this does leave messages in ucscStsAlias.warnings but they seem
    #	to be very similar to Mm6 with just a few new ones
     
    wc ucscStsAlias.tab  (after applying filter to primers.psl above)
    #	144570  433667 3366815 ucscStsAlias.tab
    wc ucscStsAlias.tab  (before applying filter to primers.psl above)
    #	144570  433667 3366815 ucscStsAlias.tab
    wc /cluster/data/mm7/bed/STSmarkers/ucscStsAlias.tab
    #	141585  424725 3284106 ucscStsAlias.tab
    wc /cluster/store6/mm5/bed/STSmarkers/ucscStsAlias.tab
    # 126624  379859 3037850 /cluster/store6/mm5/bed/STSmarkers/ucscStsAlias.tab
     
    #	Use the drop tables if reloading
    #	hgsql -e "drop table stsAlias;" mm8
    hgsql mm8 < ~/kent/src/hg/lib/stsAlias.sql
    hgsql -e \
	'load data local infile "ucscStsAlias.tab" into table stsAlias;' mm8
    #	hgsql -e "drop table stsMapMouseNew;" mm8
    hgsql mm8 < ~/kent/src/hg/lib/stsMapMouseNew.sql
    hgsql -e \
'load data local infile "stsMapMouse.bed" into table stsMapMouseNew;' mm8
    #	hgsql -e "drop table stsInfoMouseNew;" mm8
    hgsql mm8 < ~/kent/src/hg/lib/stsInfoMouseNew.sql
    hgsql -e \
     'load data local infile "stsInfoMouse.bed" into table stsInfoMouseNew;' mm8

    hgLoadPsl -nobin -table=all_sts_primer mm8 primer/primers.psl.filter
    # load of all_sts_primer did not go as planned: 34527 record(s), 0
    # row(s) skipped, 19 warning(s) loading primer/primers.psl.filter

    # load primer sequences	
    mkdir /gbdb/mm8/stsMarker
    ln -s /cluster/data/mm8/bed/STSmarkers/mouseP.fa \
	/gbdb/mm8/stsMarker/mouseP.fa
    # PLEASE NOTE THAT THE If you are going to reload this business, use the
    #	-replace option on this hgLoadSeq
    #	hgLoadSeq -replace mm8 /gbdb/mm8/stsMarker/mouseP.fa
    # otherwise there will be a problem that the seq and extFile tables 
    # will be out of sync. 
    hgLoadSeq mm8 /gbdb/mm8/stsMarker/mouseP.fa
    #  Adding /gbdb/mm8/stsMarker/mouseP.fa
    #  33838 sequences

    featureBits mm8 all_sts_primer
    #	3746196 bases of 2567283971 (0.146%) in intersection
    featureBits mm7 all_sts_primer
    #	3757119 bases of 2583394090 (0.145%) in intersection
    featureBits mm6 all_sts_primer
    #	3677372 bases of 2597150411 (0.142%) in intersection
    featureBits mm8 stsMapMouseNew
    #	4801964 bases of 2567283971 (0.187%) in intersection
    featureBits mm7 stsMapMouseNew
    #	4805958 bases of 2583394090 (0.186%) in intersection
    featureBits mm6 stsMapMouseNew
    #	4638338 bases of 2597150411 (0.179%) in intersection

    hgsql -N mm8 -e "select count(*) from stsAlias;"
    #	141981
    hgsql -N mm7 -e "select count(*) from stsAlias;"
    #	140649
    hgsql -N mm7 -e "select count(*) from stsAlias;"
    #	137738
    hgsql -N mm5 -e "select count(*) from stsAlias;"
    #	122944
    hgsql -N mm8 -e "select count(*) from stsInfoMouseNew;"
    #	60440
    hgsql -N mm7 -e "select count(*) from stsInfoMouseNew;"
    #	59843
    hgsql -N mm7 -e "select count(*) from stsInfoMouseNew;"
    #	58980
    hgsql -N mm5 -e "select count(*) from stsInfoMouseNew;"
    #	58493

    #	compare old and new name lists:
    awk '{print $4}' stsMapMouse.bed | sort -u > mm8.nameList
    awk '{print $4}' /cluster/data/mm7/bed/STSmarkers/stsMapMouse.bed | \
	sort -u > mm7.nameList
    comm -12 mm?.nameList | wc -l
    #	28253   <- 28,253 names in common
    comm -23 mm7.nameList mm8.nameList | wc -l
    #	174     <- 174 unique to mm7 list
    comm -13 mm7.nameList mm8.nameList | wc -l
    #	445     <- 445 unique to mm8 list

    #	previously, Mm6 vs Mm7:
    #	27320   <- 27,320 names in common
    #	188     <- 188 unique to mm6 list
    #	1107    <- 1,107 unique to mm7 list

####################################################################################
# BUILD KNOWN GENES TABLES (STARTED 2/25/06, PART I DONE 2/27/06 Fan)

# First build protein databases, sp060115 and proteins060115
# See makeProteins060115.doc for details.

# Create working subdirectories and temporary databases (kgMm8A)

  ssh hgwdev
  mkdir /cluster/store9/kg
  cd /cluster/store9/kg
  mkdir kgMm8A  
  ln -s /cluster/store9/kg/kgMm8A /cluster/store6/kgDB/bed/kgMm8A
  ln -s /cluster/store9/kg/kgMm8A /cluster/data/mm8/bed/kgMm8A

  hgsql mm8 -e "create database kgMm8A"   
  hgsql mm8 -e "create database kgMm8ATemp"

  mkdir /cluster/bluearc/kgDB/kgMm8A
  mkdir /cluster/bluearc/kgDB/kgMm8A/protBlat
  ln -s /cluster/bluearc/kgDB/kgMm8A/protBlat /cluster/store9/kg/kgMm8A/protBlat
  cd /cluster/store9/kg/kgMm8A/protBlat

# Get all mouse protein sequences

  hgsql -N sp060115 -e \
  'select p.acc, p.val from protein p, accToTaxon x where x.taxon=10090 and p.acc=x.acc'\
  |awk '{print ">" $1;print $2}' >mouseProt.fa

  hgsql -N sp060115 -e \
  'select v.varAcc, p.val from varAcc v, protein p, accToTaxon x where v.parAcc = p.acc and x.taxon=10090   and v.parAcc=x.acc'\
  |awk '{print ">" $1;print $2}' \
  >mouseVarProt.fa

# append var proteins to mouseProt.fa
  cat mouseVarProt.fa >>mouseProt.fa

# Prepare and perform cluster run for protein/genome alignment

  ssh pk
  cd /cluster/data/mm8/bed/kgMm8A/protBlat
  mkdir prot
  faSplit sequence mouseProt.fa 2000 prot/prot
  ls /cluster/bluearc/kgDB/kgMm8A/protBlat/prot/* > prot.lis

  ssh hgwdev
  cd /cluster/data/mm8/bed/kgMm8A/protBlat
  hgsql mm8 -N -e 'select chrom from chromInfo' > chrom.lis
  exit
  
  cat << '_EOF_' > gsub
#LOOP
/cluster/bin/x86_64/blat -t=dnax -q=prot /cluster/data/mm8/nib/$(path1).nib $(path2) {check out line+ /cluster/bluearc/kgDB/kgMm8A/protBlat/result/$(root1)_$(root2).psl}
#ENDLOOP
'_EOF_'

  mkdir result
  gensub2 chrom.lis prot.lis gsub jobList

  para create jobList
  para try
  para check
  para push
  para check ...

# started 8:15 AM 2/25/06, done 3:12 AM 2/26/06.
# Two jobs crashed due to empty result, push again and finished OK in a few minutes.

# Completed: 67354 of 67354 jobs
# CPU time in finished jobs:   12580047s  209667.46m  3494.46h  145.60d  0.399 y
# IO & Wait Time:                237270s    3954.49m    65.91h    2.75d  0.008 y
# Average job time:                 190s       3.17m     0.05h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:           19991s     333.18m     5.55h    0.23d
# Submission to last job:         68128s    1135.47m    18.92h    0.79d

# collect BLAT results

   pslSort -nohead dirs raw.psl temp result
   pslReps -nohead -minCover=0.80 -minAli=0.80 -nearTop=0.002 raw.psl protBlat.psl /dev/null

   ssh hgwdev
   cd /cluster/bluearc/kgDB/kgMm8A/protBlat
   hgLoadPsl mm8 protBlat.psl

# create all_mrna.psl and tight_mrna.psl

   hgsql mm8 -N -e "select * from all_mrna" |cut -f 2-22 >all_mrna.psl

   pslReps -minCover=0.40 -minAli=0.97 -nearTop=0.002 \
           all_mrna.psl tight_mrna.psl /dev/null

# Save a copy of the following mm8 tables, to be used later to construct 
# kgMore and kgEvenmore

all_mrna
gbCdnaInfo
gbExtFile
gbLoaded
gbSeq
gbStatus
refFlat
refGene
refLink
refSeqAli
refSeqStatus
refSeqSummary
xenoMrna
xenoRefFlat
xenoRefGene
xenoRefSeqAli

# Use overlapSelect to get protein and mRNA alignment overlaps   
   overlapSelect  -statsOutput  -dropped=protOut.psl -overlapThreshold=0.90 \
   -selectFmt=psl -inFmt=psl tight_mrna.psl  protBlat.psl protMrna.stat

   overlapSelect  -mergeOutput  -dropped=protOut.psl -overlapThreshold=0.90 -selectFmt=psl \
   -inFmt=psl tight_mrna.psl  protBlat.psl protMrna.out

# Create protein/mRNA pair and protein lists
   cut -f 10,31 protMrna.out|sort -u >spMrna.tab
   cut -f 10    protMrna.out|sort -u >protein.lis
   cp -p protein.lis /cluster/data/mm8/bed/kgMm8A

# Load spMrna.tab into spMrna table in temp DB.
   hgsql kgMm8ATemp < ~/src/hg/lib/spMrna.sql
   hgsql kgMm8ATemp -e 'load data local infile "spMrna.tab" into table spMrna'
   hgsql kgMm8ATemp -e 'create index mrnaID on spMrna(mrnaID)'

# Prepare and perform cluster run of protein/mRNA alignment

# Get mRNA fa file.
   cd /cluster/data/mm8/bed/kgMm8A
   /cluster/data/genbank/bin/i386/gbGetSeqs -native -db=mm8 \
   -gbRoot=/cluster/data/genbank genbank mrna mrna.fa

# Create mrnaSeq table in kgMm8ATemp DB.

   faToTab mrna.fa mrnaSeq.tab

   hgsql kgMm8ATemp -e 'drop table mrnaSeq'
   hgsql kgMm8ATemp <~/src/hg/lib/mrnaSeq.sql
   hgsql kgMm8ATemp -e 'load data local infile "mrnaSeq.tab" into table mrnaSeq'

# Prepare files for cluster run

   cd /cluster/bluearc/kgDB/kgMm8A
   ~/src/hg/protein/KG2.sh kgMm8A mm8 060115

# Perform cluster run of protein/mRNA alignment
   ~/src/hg/protein/KG3.sh kgMm8A mm8 060115

# Collect cluster run results
   cd kgBestMrna

   ls out | sed -e 's/prot/do1 prot/g' >doall

# create do1 with the following 2 lines:
   cat << '_EOF_' > do1
echo processing $1
cat out/$1/*.out >>protMrnaRaw.psl
'_EOF_'

   chmod +x do*
   doall

# Filter out low quality alignments
   pslReps -nohead -singleHit -minAli=0.9 protMrnaRaw.psl protMrnaBlat.psl /dev/null
   cut -f 10,14 protMrnaBlat.psl |sort -u >protMrna.lis
   wc protMrna.lis

# Load BLAT results into temp DB.
   ssh hgwdev
   cd /cluster/store9/kg/kgMm8A/kgBestMrna
   hgsql kgMm8ATemp < ~/src/hg/lib/protMrnaBlat.sql
   hgsql kgMm8ATemp -e 'load data local infile "protMrnaBlat.psl" into table protMrnaBlat'
   hgsql kgMm8ATemp -e 'create index tName on protMrnaBlat(tName)'

# Create CDS files from protein/mRNA alignment results.
   hgsql kgMm8ATemp -N -e \
   'select qName,"_",tName,tStart+1,":",tEnd+3 from protMrnaBlat order by qName,tName,tEnd-tStart desc'\
   |sed 's/\t_\t/_/g'|sed 's/\t:\t/../g' >protMrna.cds

# Create protMrna.psl with proteinID_mrnaID as query ID.
   cut -f 22-30 ../protBlat/protMrna.out > j1.tmp
   cut -f 32-42 ../protBlat/protMrna.out > j2.tmp
   cut -f 10,31 ../protBlat/protMrna.out|sed -e 's/\t/_/g' >j3.tmp
   paste j1.tmp j3.tmp j2.tmp >protMrna.psl
   rm j1.tmp j2.tmp j3.tmp

# Run mrnaToGene to create protMrna.gp
   bash
   mrnaToGene -cdsFile=protMrna.cds protMrna.psl protMrna.gp 2>protMrna.err >protMrna.log
   exit

# move kgBestMrna to /san/sanvol1 to save space on store9

   mv /cluster/store9/kg/kgMm8A/kgBestMrna/clusterRun /san/sanvol1/scratch/fan/mm8/kgMm8A/kgBestMrna
   ln -s /san/sanvol1/scratch/fan/mm8/kgMm8A/kgBestMrna/clusterRun \
   /cluster/store9/kg/kgMm8A/kgBestMrna/clusterRun

# Prepare refGene and all_mrna gp files.

   cd ..
   cp -p base/refGene.tab ref.gp

   hgsql mm8 -N -e \
   'select gbCdnaInfo.acc,cds.name from gbCdnaInfo,cds,all_mrna where all_mrna.qName=gbCdnaInfo.acc and   gbCdnaInfo.cds=cds.id' \
   |sort -u > all_mrna.cds

   cat base/all_mrna.tab |cut -f 2-22 >all_mrna.psl
   bash
   mrnaToGene -cdsFile=all_mrna.cds all_mrna.psl all_mrna.gp 2>all_mrna.err > all_mrna.log
   exit

# Align proteins to RefSeq.

   overlapSelect -inCds -statsOutput -overlapThreshold=0.90 -selectFmt=psl -inFmt=genePred\
   protBlat/protBlat.psl ref.gp ref.stat
   overlapSelect -inCds -dropped=refOut1.gp -overlapThreshold=0.90 -selectFmt=psl -inFmt=genePred\
   protBlat/protBlat.psl ref.gp protRef.gp

   overlapSelect -mergeOutput -selectCds -dropped=protOut1.psl -overlapThreshold=0.80 -inFmt=psl\
   -selectFmt=genePred ref.gp protBlat/protBlat.psl protRef.out

   cut -f 10,22 protRef.out | sort -u >spRef.tab
   cut -f 10 protRef.out    | sort -u >protRef.lis

   hgsql kgMm8ATemp -e 'drop table spRef'
   hgsql kgMm8ATemp <~/src/hg/lib/spRef.sql
   hgsql kgMm8ATemp -e 'load data local infile "spRef.tab" into table spRef'

# Prepare and perform cluster runs for protein/RefSeq alignments

   ~/src/hg/protein/KGRef2.sh kgMm8A mm8 060115
   ~/src/hg/protein/KGRef3.sh kgMm8A mm8 060115

   cd kgBestRef
   ls out | sed -e 's/prot/do1 prot/g' >doall

   cat << '_EOF_' > do1
echo processing $1
cat out/$1/*.out >>protRefRaw.psl
'_EOF_'

   chmod +x do*
   doall

# Filter out low quality alignments.
   pslReps -nohead -singleHit -minAli=0.9 protRefRaw.psl protRefBlat.psl /dev/null
   cut -f 10,14 protRefBlat.psl |sort -u >protRef.lis
   wc protRef.lis

   hgsql kgMm8ATemp -e 'drop table protRefBlat'
   hgsql kgMm8ATemp < ~/src/hg/lib/protRefBlat.sql
   hgsql kgMm8ATemp -e 'load data local infile "protRefBlat.psl" into table protRefBlat'
   hgsql kgMm8ATemp -e 'create index tName on protRefBlat(tName)'

# Run gene-check to filter out invalid gp entries
   cd /cluster/data/mm8/bed/kgMm8A
   cat ref.gp kgBestMrna/protMrna.gp all_mrna.gp >kgCandidate0.gp
   gene-check  -incl-ok -ok-genepred-out kgCandidate0.passed.gp -nib-dir /cluster/data/mm8/nib kgCandidate0.gp kgCandidate0.check

   hgsql kgMm8ATemp -e 'drop table kgCandidate0'
   hgsql kgMm8ATemp < ~/src/hg/lib/kgCandidate0.sql 
   hgsql kgMm8ATemp -e  'load data local infile "kgCandidate0.gp" into table kgCandidate0'

   hgsql kgMm8ATemp -e 'drop table geneCheck'
   hgsql kgMm8ATemp < ~/src/hg/lib/geneCheck.sql
   hgsql kgMm8ATemp -e  'load data local infile "kgCandidate0.check" into table geneCheck ignore 2 lines'

# Run kgCheck to get all KG candidates that pass the KG gene check criteria

   kgCheck kgMm8ATemp mm8 kgCandidate0 geneCheck kgCandidate.tab
   hgsql kgMm8ATemp -e  'drop table kgCandidate'
   hgsql kgMm8ATemp < ~/src/hg/lib/kgCandidate.sql
   hgsql kgMm8ATemp -e  'load data local infile "kgCandidate.tab" into table kgCandidate'
   hgsql kgMm8ATemp -e 'create index alignID on kgCandidate(alignID)'

# Construct the kgCandidateX table that has alignID in the name field. 
   cut -f 2-10 kgCandidate.tab >j2.tmp
   cut -f 11 kgCandidate.tab >j1.tmp
   paste j1.tmp j2.tmp >kgCandidateX.tab

   hgsql kgMm8ATemp -e  'drop table kgCandidateX'
   hgsql kgMm8ATemp < ~/src/hg/lib/kgCandidateX.sql
   hgsql kgMm8ATemp -e  'load data local infile "kgCandidateX.tab" into table kgCandidateX'

# Score protein/mRna and protein/RefSeq alignments

   kgResultBestMrna2 060115 kgMm8ATemp mm8 protMrnaBlat|sort -u >protMrnaBlatScore.tab
   kgResultBestRef2  060115 kgMm8ATemp mm8 protRefBlat|sort -u >protRefScore.tab

# Combine scoring results and load them into temp DB.
   cat protMrnaBlatScore.tab protRefScore.tab >protMrnaScore.tab
   hgsql kgMm8ATemp -e 'drop table protMrnaScore'
   hgsql kgMm8ATemp < ~/src/hg/lib/protMrnaScore.sql
   hgsql kgMm8ATemp -e 'load data local infile "protMrnaScore.tab" into table protMrnaScore'
   hgsql kgMm8ATemp -e 'create index mrnaAcc on protMrnaScore(mrnaAcc)'

# Run kgGetCds to get CDS structure of each gene

   kgGetCds kgMm8ATemp 060115 kgCandidateX jY.tmp
# G171564 does not have cds.
# G171565 does not have cds.
   cat jY.tmp |sort -u >kgCandidateY.tab
   rm jY.tmp
   hgsql kgMm8ATemp -e  'drop table kgCandidateY'
   hgsql kgMm8ATemp < ~/src/hg/lib/kgCandidateY.sql
   hgsql kgMm8ATemp -e  'load data local infile "kgCandidateY.tab" into table kgCandidateY'

# Run kgPickPrep to replace long cds structure string with cdsId.
   kgPickPrep kgMm8ATemp kgCandidateZ.tab
   hgsql kgMm8ATemp -e  'drop table kgCandidateZ'
   hgsql kgMm8ATemp < ~/src/hg/lib/kgCandidateZ.sql
   hgsql kgMm8ATemp -e  'load data local infile "kgCandidateZ.tab" into table kgCandidateZ'
   hgsql kgMm8ATemp -e 'create index cdsId on kgCandidateZ(cdsId)'

# Run kgPick to pick the representative a mrna/protein pair for each unique CDS structure.

   kgPick kgMm8ATemp mm8 sp060115 kg3.tmp dupSpMrna.tmp
   sort -u dupSpMrna.tmp >dupSpMrna.tab

# Create put back list

# gbGetSeqs2, a modified version of gbGetSeqs output the RefSeq IDs at the beginning of each output line.

   gbGetSeqs2 -gbRoot=/cluster/data/genbank db=mm8 -get=ra RefSeq mrna ref.ra
   cat ref.ra | sed -e 's/ /\t/' | sort -u >refRa.tab

   hgsql mm8 -e  'drop table refRa'
   hgsql mm8 < ~/src/hg/lib/refRa.sql
   hgsql mm8 -e  'load data local infile "refRa.tab" into table refRa ignore 1 lines'

    hgsql mm8 -N -e \
'select r.acc, r.attr, r.val from refRa r, refRa r2, refRa r3 where r.attr="selenocysteine" and r.acc=r2.acc and r2.attr="rss" and r2.val="rev" and r3.acc=r.acc and r3.attr="org" and  r3.val="Mus musculus"' \
    >kgPutBack2.tab

    hgsql mm8 -N -e \
'select r.acc, r.attr, r.val from refRa r, refRa r2, refRa r3 where r.attr="cno" and r.val like "%ribosomal frameshift%" and r.acc=r2.acc and r2.attr="rss" and r2.val="rev" and r2.val="rev" and r3.acc=r.acc and r3.attr="org" and r3.val="Mus musculus"' \
    >>kgPutBack2.tab

    hgsql mm8 -N -e \
'select r.acc, r.attr, r.val from refRa r, refRa r2, refRa r3 where r.attr="cno" and r.val like "%non-AUG%" and r.acc=r2.acc and r2.attr="rss" and r2.val="rev" and r2.val="rev" and r3.acc=r.acc and r3.attr="org" and r3.val="Mus musculus"' \
    >>kgPutBack2.tab

    hgsql mm8 -N -e \
    'select r.acc, r.attr, r.val from refRa r, refRa r2, refRa r3 where r.attr="translExcept" and r.acc=r2.acc and r2.attr="rss" and r2.val="rev" and r2.val="rev" and r3.acc=r.acc and r3.attr="org" and r3.val="Mus musculus"' \
    >>kgPutBack2.tab 

    hgsql mm8 -N -e \
'select r.acc, r.attr, r.val from refRa r, refRa r2, refRa r3 where r.attr="exception" and r.acc=r2.acc and r2.attr="rss" and r2.val="rev" and r2.val="rev" and r3.acc=r.acc and r3.attr="org" and r3.val="Mus musculus"' \
    >>kgPutBack2.tab

   hgsql kgMm8ATemp -e 'drop table kgPutBack2'
   hgsql kgMm8ATemp < ~/src/hg/lib/kgPutBack2.sql
   hgsql kgMm8ATemp -e  'load data local infile "kgPutBack2.tab" into table kgPutBack2'

   kgPutBack kgMm8ATemp mm8 sp060115 kgPutBack2 kgPutBack2.gp
# No matching protein found for NM_008523.
# No matching protein found for NM_194444.
# No matching protein found for NM_206941.

# Sort KG genes to make the kg4.gp table file.
   cat kgPutBack2.gp kg3.tmp > kg4.tmp
   ~/kent/src/hg/protein/sortKg.pl kg4.tmp >knownGene.tab

   hgsql kgMm8ATemp -e  'drop table knownGene'
   hgsql kgMm8ATemp < ~/src/hg/lib/knownGene.sql
   hgsql kgMm8ATemp -e  'load data local infile "knownGene.tab" into table knownGene'

# Load data into mm8 knownGene table.
   hgsql mm8 -e  'drop table knownGene'
   hgsql mm8 < ~/src/hg/lib/knownGene.sql
   hgsql mm8 -e  'load data local infile "knownGene.tab" into table knownGene'
  
# Load dupSpMrna table after knownGene table is loaded so that joinerCheck does not complain.

   hgsql mm8 -e  'drop table dupSpMrna'
   hgsql mm8 < ~/src/hg/lib/dupSpMrna.sql
   hgsql mm8 -e  'load data local infile "dupSpMrna.tab" into table dupSpMrna'

# Perform analysis on KG

nice featureBits mm8 knownGene
# 54684224 bases of 2567283971 (2.130%) in intersection
nice featureBits mm8 knownGene:cds
# 28459053 bases of 2567283971 (1.109%) in intersection
  
nice featureBits mm8 refGene
# 46256526 bases of 2567283971 (1.802%) in intersection
nice featureBits mm8 refGene:cds
# 27221018 bases of 2567283971 (1.060%) in intersection
  
nice featureBits mm8 refGene knownGene
# 43441486 bases of 2567283971 (1.692%) in intersection
nice featureBits mm8 refGene:cds knownGene:cds
# 25164531 bases of 2567283971 (0.980%) in intersection

nice featureBits mm7 knownGene
# 53165921 bases of 2583394090 (2.058%) in intersection
nice featureBits mm7 knownGene:cds
# 27531524 bases of 2583394090 (1.066%) in intersection
 
nice featureBits mm7 refGene
# 46425940 bases of 2583394090 (1.797%) in intersection
nice featureBits mm7 refGene:cds
# 27319308 bases of 2583394090 (1.057%) in intersection
 
nice featureBits mm7 refGene knownGene
# 41777202 bases of 2583394090 (1.617%) in intersection
nice featureBits mm7 refGene:cds knownGene:cds
# 24297646 bases of 2583394090 (0.941%) in intersection

# Build knownGeneMrna and knownGenePep tables.

   kgPepMrna kgMm8ATemp mm8 060115
   hgsql mm8 -e  'drop table knownGeneMrna'
   hgsql mm8 < ~/src/hg/lib/knownGeneMrna.sql
   hgsql mm8 -e  'load data local infile "knownGeneMrna.tab" into table knownGeneMrna'
   hgsql mm8 -e  'drop table knownGenePep'
   hgsql mm8 < ~/src/hg/lib/knownGenePep.sql
   hgsql mm8 -e  'load data local infile "knownGenePep.tab" into table knownGenePep'

# Build kgXref table

   kgXref2 kgMm8ATemp 060115 mm8

   hgsql mm8 -e  'drop table kgXref'
   hgsql mm8 < ~/src/hg/lib/kgXref.sql
   hgsql mm8 -e  'load data local infile "kgXref.tab" into table kgXref'

# Build spMrna table

   hgsql mm8 -N -e 'select proteinID, name from knownGene' >kgSpMrna.tab

   hgsql mm8 -e  'drop table spMrna'
   hgsql mm8 <~/src/hg/lib/spMrna.sql
   hgsql mm8 -e 'load data local infile "kgSpMrna.tab" into table spMrna'

# Build kgProtMap table

    ssh hgwdev
    cd /cluster/store9/kg/kgMm8A
    ln -s protBlat/tight_mrna.psl .
    ~/src/hg/protein/kgProtMap2.sh kgMm8A mm8 060115

#####################################
# Build alias tables. (DONE 2/28/06, Fan)		

   ssh hgwdev
   cd /cluster/store9/kg/kgMm8A
   mkdir alias
   cd alias
   kgAliasM mm8 proteins060115

#	kgAliasKgXref reads from mm8.knownGene.proteinID,
#	mm8.knownGene.name, mm8.kgXref.geneSymbol
#	to create kgAliasKgXref.tab

   kgAliasKgXref mm8

#	kgAliasRefseq reads from mm8.knownGene.name,
#	mm8.knownGene.proteinID, mm8.kgXref.refseq
#	to create kgAliasRefseq.tab

   kgAliasRefseq mm8

   hgsql sp060115 -N -e 'select name,gene.val from mm8.knownGene,displayId,gene where displayId.val=proteinID and displayId.acc=gene.acc' \
   | sort -u  > kgAliasP.tab

   hgsql mm8 -N -e 'select name, name from knownGene' >kgAliasDup.tab
   hgsql mm8 -N -e 'select mrnaID, dupMrnaID from dupSpMrna' >>kgAliasDup.tab
   
   cat kgAliasM.tab kgAliasRefseq.tab kgAliasKgXref.tab kgAliasP.tab kgAliasDup.tab| \
   sort |uniq > kgAlias.tab

   hgsql -e "drop table kgAlias;" mm8 
   hgsql mm8 < ~/kent/src/hg/lib/kgAlias.sql
   hgsql mm8 -e 'LOAD DATA local INFILE "kgAlias.tab" into table kgAlias' 

#	kgProtAlias reads from mm8.knownGene.name,
#	mm8.knownGene.proteinID, mm8.knownGene.alignID,
#	proteins060115.spXref3.accession, proteins060115.spSecondaryID, proteins060115.pdbSP.pdb
#	to create kgProtAlias.tab#

   kgProtAlias mm8 060115

   hgsql mm8 -N -e \
   'select kgID, spDisplayID, protAcc from kgXref where protAcc != ""'\
   | sort -u >kgProtAliasNCBI.tab

# include variant splice protein IDs
   
   hgsql mm8 -N -e \
   'select name, proteinID, parAcc from knownGene,sp060115.varAcc where varAcc=proteinID'\
   |sort -u >kgProtAliasDup.tab

# include duplicate protein IDs from dupSpMrna table
   hgsql mm8 -N -e \
   'select name, knownGene.proteinID, dupProteinID from knownGene, dupSpMrna where name=mrnaID'\
   |sort -u >>kgProtAliasDup.tab

# catch parent acc from dupProteinID too
   hgsql mm8 -N -e\
   'select name, knownGene.proteinID, parAcc from knownGene,dupSpMrna,sp060115.varAcc where name=mrnaID and dupProteinID=varAcc.varAcc'\
   |sort -u >>kgProtAliasDup.tab
    cat kgProtAliasNCBI.tab kgProtAlias.tab kgProtAliasDup.tab | sort -u > kgProtAliasAll.tab

    echo "`date` creating table kgProtAlias"
    hgsql mm8 -e "drop table kgProtAlias;"
    hgsql mm8 <~/src/hg/lib/kgProtAlias.sql; 
    hgsql mm8 -e 'LOAD DATA local INFILE "kgProtAliasAll.tab" into table kgProtAlias;'  

# Build kgSpAlias table

    hgsql mm8 -e \
    'select kgXref.kgID, spID, alias from kgXref, kgAlias where kgXref.kgID=kgAlias.kgID' >j.tmp
    hgsql mm8 -e \
    'select kgXref.kgID, spID, alias from kgXref, kgProtAlias where kgXref.kgID=kgProtAlias.kgID'\
    >>j.tmp
    cat j.tmp|sort -u |grep -v 'kgID' >mm8.kgSpAlias.tab
    rm j.tmp

    hgsql mm8 -e 'drop table kgSpAlias';
    hgsql mm8 < ~/src/hg/lib/kgSpAlias.sql
    hgsql mm8 -e 'load data local infile "mm8.kgSpAlias.tab" into table kgSpAlias'

#############################################################################
# 17-WAY VAR_MULTIZ - ALIGNMENTS (DONE - 2006-02-28 - 2006-03-02 - Hiram)
    ssh kkstore01
    mkdir /cluster/data/mm8/bed/multiz17way
    cd /cluster/data/mm8/bed/multiz17way

    #	create tree diagram to guide work below.
    #	This tree was constructed from one that Adam is using for
    #	ENCODE work and a 27-way alignment.  Took that file and
    #	removed some of the entries, adding together the appropriate
    #	distances.

    cat << '_EOF_' > 17way.nh
(((((((((
(human_hg18:0.006690,chimp_panTro1:0.007571):0.024272,
  macaque_rheMac2:0.0592):0.023960,

  ((rat_rn4:0.081728,mouse_mm8:0.077017):0.229273,
      rabbit_oryCun1:0.206767):0.1065):0.023026,

(cow_bosTau2:0.159182,dog_canFam2:0.147731):0.039450):0.028505,

armadillo_dasNov1:0.149862):0.015994,

(elephant_loxAfr1:0.104891,tenrec_echTel1:0.259797):0.040371):0.218400,

monodelphis_monDom4:0.371073):0.189124,

chicken_galGal2:0.454691):0.123297,

xenopus_xenTro1:0.782453):0.156067,

((tetraodon_tetNig1:0.199381,fugu_fr1:0.239894):0.492961,
    zebrafish_danRer3:0.782561):0.156067);
'_EOF_'
    #	happy emacs

    /cluster/bin/phast/draw_tree 17way.nh > 17way.ps
    /cluster/bin/phast/all_dists 17way.nh > 17way.distances.txt
    grep -y mm8 17way.distances.txt | sort -k3,3n
    #	Print out that file for reference, and use the calculated
    #	distances in the table below to order the organisms and check
    #	the button order on the browser.  Zebrafish ends up before
    #	tetraodon and fugu on the browser despite its distance.
    #	And if you can fill in the table below entirely, you have
    #	succeeded in finishing all the alignments required.
    #
#                         featureBits chainLink measures
#                                           chainMm7Link   chain   linearGap
#    distance                       on Mm7      on other   minScore
#  1  0.1587 - rat rn4            (% 68.957)  (% 69.651)   3000     medium
#  2  0.4677 - human hg18         (% 38.343)  (% 34.514)   3000     medium
#  3  0.4686 - chimp panTro1      (% 35.106)  (% 32.992)   3000     medium
#  4  0.4960 - macaque rheMac2    (% 34.718)  (% 33.170)   3000     medium
#  5  0.5131 - rabbit oryCun1     (% 19.322)  (no swap )   3000     medium
#  6  0.6142 - armadillo dasNov1  (% 16.825)  (no swap )   3000     medium
#  7  0.6230 - dog canFam2        (% 32.281)  (% 34.255)   3000     medium
#  8  0.6256 - elephant loxAfr1   (% 18.392)  (no swap )   3000     medium
#  9  0.6344 - cow bosTau2        (% 26.832)  (% 24.293)   3000     medium
# 10  0.7805 - tenrec echTel1     (% 11.412)  (no swap )   5000     loose
# 11  1.0698 - opossum monDom4    (%  8.245)  (%  6.024)   5000     loose
# 12  1.3425 - chicken galGal2    (%  2.552)  (%  5.414)   5000     loose
# 13  1.7936 - frog xenTro1       (%  2.416)  (%  4.294)   5000     loose
# 14  2.0157 - tetraodon tetNig1  (%  1.962)  (% 13.734)   5000     loose
# 15  2.0562 - fugu fr1           (%  1.907)  (% 13.524)   5000     loose
# 16  2.1059 - zebrafish danRer3  (%  2.069)  (%  3.363)   5000     loose

    cd /cluster/data/mm8/bed/multiz17way
    #	bash shell syntax here ...
    export H=/cluster/data/mm8/bed
    mkdir mafLinks
    for G in rn4 hg18 panTro1 rheMac2 oryCun1 dasNov1 canFam2 \
	loxAfr1 bosTau2 echTel1 monDom4 galGal2 xenTro1 tetNig1 fr1 danRer3
    do
	mkdir mafLinks/$G
	if [ ! -d ${H}/blastz.${G}/mafNet ]; then
	echo "missing directory blastz.${G}/mafNet"
		exit 255
	fi
	ln -s ${H}/blastz.$G/mafNet/*.maf.gz ./mafLinks/$G
    done

    #	Copy MAFs to some appropriate NFS server for kluster run
    ssh kkstore01
    mkdir /san/sanvol1/scratch/mm8/multiz17way
    cd /san/sanvol1/scratch/mm8/multiz17way
    rsync -a --copy-links --progress \
	/cluster/data/mm8/bed/multiz17way/mafLinks/ .

    #	We have about 5.9 Gb of data here, takes ~ 10 minutes to copy

    mkdir penn
    cp -p /cluster/bin/penn/multiz.v11.x86_64/multiz-tba/multiz penn
    cp -p /cluster/bin/penn/multiz.v11.x86_64/multiz-tba/maf_project penn
    cp -p /cluster/bin/penn/multiz.v11.x86_64/multiz-tba/autoMZ penn

    # make output dir and run dir
    ssh pk
    cd /cluster/data/mm8/bed/multiz17way/

    # create species list and stripped down tree for autoMZ
    sed 's/[a-z][a-z]*_//g; s/:[0-9\.][0-9\.]*//g; s/;//; /^ *$/d' \
	17way.nh > tmp.nh
    echo `cat tmp.nh` > tree-commas.nh
    echo `cat tree-commas.nh` | sed 's/ //g; s/,/ /g' > tree.nh
    sed 's/[()]//g; s/,/ /g' tree.nh > species.lst

    mkdir -p maf run
    cd run

    #	NOTE: you need to set the db properly in this script

    cat > autoMultiz << '_EOF_'
#!/bin/csh -ef
set db = mm8
set c = $1
set maf = $2
set binDir = /san/sanvol1/scratch/$db/multiz17way/penn
set tmp = /scratch/tmp/$db/multiz.$c
set pairs = /san/sanvol1/scratch/$db/multiz17way
rm -fr $tmp
mkdir -p $tmp
cp ../{tree.nh,species.lst} $tmp
pushd $tmp
foreach s (`cat species.lst`)
    set in = $pairs/$s/$c.maf
    set out = $db.$s.sing.maf
    if ($s == $db) then
	continue
    endif
    if (-e $in.gz) then
	zcat $in.gz > $out
    else if (-e $in) then
	cp $in $out
    else
	echo "##maf version=1 scoring=autoMZ" > $out
    endif
end
set path = ($binDir $path); rehash
$binDir/autoMZ + T=$tmp E=$db "`cat tree.nh`" $db.*.sing.maf $c.maf
popd
cp $tmp/$c.maf $maf
rm -fr $tmp
'_EOF_'
# << happy emacs
    chmod +x autoMultiz

cat  << '_EOF_' > template
#LOOP
autoMultiz $(root1) {check out line+ ../maf/$(root1).maf}
#ENDLOOP
'_EOF_'
# << happy emacs

    awk '{print $1}' /cluster/data/mm8/chrom.sizes > chrom.lst
    gensub2 chrom.lst single template jobList
    para create jobList
    # 34 jobs
    para try ... check ... push ... etc ...
# Completed: 34 of 34 jobs
# CPU time in finished jobs:     209432s    3490.54m    58.18h    2.42d  0.007 y
# IO & Wait Time:                  4685s      78.08m     1.30h    0.05d  0.000 y
# Average job time:                6298s     104.96m     1.75h    0.07d
# Longest finished job:           17491s     291.52m     4.86h    0.20d
# Submission to last job:         17519s     291.98m     4.87h    0.20d

    #	combine results into a single file for loading and gbdb reference
    ssh kkstore01
    cd /cluster/data/mm8/bed/multiz17way
    #	There used to be a mafFilter here with a minScore of 500, but it
    #	turns out that the scores in these maf files are pretty much
    #	useless.  They range from very large negatives to very large
    #	positives.
    time catDir maf > multiz17way.maf
    #	real    12m26.098s
    #	makes an 17 Gb file:
    #	-rw-rw-r--   1 17284343601 Mar  2 10:14 multiz17way.maf

    #	Create per-chrom individual maf files for downloads
    ssh kkstore01
    cd /cluster/data/mm8/bed/multiz17way
    mkdir mafDownloads
    for M in maf/chr*.maf
    do
	B=`basename $M`
	cp -p ${M} mafDownloads/${B}
	gzip mafDownloads/${B}
	echo ${B} done
    done
    #	real    56m24.191s
    #	deliver to downloads
    ssh hgwdev
    ln -s /cluster/data/mm8/bed/multiz17way/mafDownloads \
	/usr/local/apache/htdocs/goldenPath/mm8/multiz17way

    # Load into database
    ssh hgwdev
    cd /cluster/data/mm8/bed/multiz17way
    mkdir /gbdb/mm8/multiz17way
    ln -s /cluster/data/mm8/bed/multiz17way/multiz17way.maf \
	/gbdb/mm8/multiz17way
    time nice -n +19 hgLoadMaf mm8 multiz17way
    #	Loaded 11692972 mafs in 1 files from /gbdb/mm8/multiz17way
    #	real    27m25.451s

    time nice -n +19 hgLoadMafSummary -minSize=10000 -mergeGap=500 \
	-maxSize=50000 mm8 multiz17waySummary multiz17way.maf
    #	Created 5758203 summary blocks from 64958819 components and
    #	11692972 mafs from multiz17way.maf
    #	real    33m54.608s

    #	This was done for Mm7, same image can be reused
    # create tree image:
    #	cat << '_EOF_' > species.nh
# ((((((human,(mouse,rat)),(dog,cow)),opossum),chicken),frog),(tetraodon,zebrafish))
# '_EOF_'
#    /cluster/bin/phast/draw_tree -b -s species.nh > species10.ps
    # photoshop to enhance, reduce the amount of whitespace to make it
    # smaller, then save as jpg
#    cp species10.jpg /usr/local/apache/htdocs/images/phylo/Mm7_17way.jpg

############################################################################
# CREATE CONSERVATION WIGGLE WITH PHASTCONS
#		(DONE - 2006-03-02 - Hiram)

    #	Will skip this estimate for Mm8 since it was well done in Mm7
    #	and in Hg17, skip to the creation of the SS files
# Estimate phastCons parameters
    ssh kkstore01
    mkdir /cluster/data/mm8/bed/multiz17way/cons
    cd /cluster/data/mm8/bed/multiz17way/cons

    # Create a starting-tree.mod based on chr2 (the largest one)
    /cluster/bin/phast/$MACHTYPE/msa_split ../maf/chr2.maf \
	--refseq ../../../2/chr2.fa --in-format MAF \
	--windows 100000000,1000 --out-format SS \
	--between-blocks 5000 --out-root s1
    #	10 minutes

    /cluster/bin/phast/$MACHTYPE/phyloFit -i SS s1.*.ss \
--tree "((((((((((hg18,panTro1),rheMac2),((rn4,mm8),oryCun1)),(bosTau2,canFam2)),dasNov1),(loxAfr1,echTel1)),monDom4),galGal2),xenTro1),((tetNig1,fr1),danRer3))" \
    --out-root starting-tree
    #	real    840m53.157s
    #	That is 14 hours !

    rm s1.*.ss
    # add up the C and G:
    grep BACKGROUND starting-tree.mod | awk '{printf "%0.3f\n", $3 + $4;}'
    #	0.407
    #	This 0.407 is used in the --gc argument below

    #	CONTINUE HERE, no estimation required
    # Create big bad bloated SS files on san filesystem (takes ~ 2h 20m)
    #	Increasing their size this time from 1,000,000 to 10,000,000 to
    #	slow down the phastCons pk jobs
    ssh kkstore01
    mkdir -p  /san/sanvol1/scratch/mm8/cons/ss
    cd  /san/sanvol1/scratch/mm8/cons/ss
    time for C in `awk '{print $1}' /cluster/data/mm8/chrom.sizes`
    do
      if [ -s /cluster/data/mm8/bed/multiz17way/maf/${C}.maf ]; then
	mkdir ${C}
	echo msa_split $C
	chrN=${C/chr/}
	chrN=${chrN/_random/}
	/cluster/bin/phast/$MACHTYPE/msa_split \
	    /cluster/data/mm8/bed/multiz17way/maf/${C}.maf \
	    --refseq /cluster/data/mm8/${chrN}/${C}.fa \
	    --in-format MAF --windows 10000000,0 --between-blocks 5000 \
	    --out-format SS --out-root ${C}/${C}
      fi
    done &
    #	real    101m9.118s

    #  Again, going to SKIP this tuning business this time and use the
    #  previous numbers.

    # Create a random list of 50 1 mb regions  (do not use the _randoms)
    cd /san/sanvol1/scratch/mm8/cons/ss
    ls -1l chr*/chr*.ss | grep -v random | \
	awk '$5 > 4000000 {print $9;}' | randomLines stdin 50 ../randomSs.list

    # Set up parasol directory to calculate trees on these 50 regions
    ssh pk
    mkdir /san/sanvol1/scratch/mm8/cons/treeRun1
    cd /san/sanvol1/scratch/mm8/cons/treeRun1
    mkdir tree log

    #	Tuning this loop should come back to here to recalculate 
    # Create little script that calls phastCons with right arguments
    #	--target-coverage of 0.20 is about right for mouse, will be
    #	tuned exactly below
    cat > makeTree.csh << '_EOF_'
#!/bin/csh -fe
set C=$1:h
mkdir -p log/${C} tree/${C}
    /cluster/bin/phast/$MACHTYPE/phastCons ../ss/$1 \
      /cluster/data/mm8/bed/multiz17way/cons/starting-tree.mod \
      --gc 0.407 --nrates 1,1 --no-post-probs --ignore-missing \
      --expected-lengths 12 --target-coverage 0.17 \
      --quiet --log log/$1 --estimate-trees tree/$1
'_EOF_'
    #	emacs happy
    chmod a+x makeTree.csh

    # Create gensub file
    cat > template << '_EOF_'
#LOOP
makeTree.csh $(path1)
#ENDLOOP
'_EOF_'
    #	happy emacs

    # Make cluster job and run it
    gensub2 ../randomSs.list single template jobList
    para create jobList
    para try/push/check/etc
# Completed: 50 of 50 jobs
# CPU time in finished jobs:     354644s    5910.74m    98.51h    4.10d  0.011 y
# IO & Wait Time:                   352s       5.86m     0.10h    0.00d  0.000 y
# Average job time:                7100s     118.33m     1.97h    0.08d
# Longest finished job:           29358s     489.30m     8.15h    0.34d
# Submission to last job:         29446s     490.77m     8.18h    0.34d

    # Now combine parameter estimates.  We can average the .mod files
    # using phyloBoot.  This must be done separately for the conserved
    # and nonconserved models
    ssh kkstore01
    cd /san/sanvol1/scratch/mm8/cons/treeRun1
    ls -1 tree/chr*/*.cons.mod > cons.list
    time /cluster/bin/phast/$MACHTYPE/phyloBoot --read-mods '*cons.list' \
	--output-average ../ave.cons.mod > cons_summary.txt 2>&1 &
    ls -1 tree/chr*/*.noncons.mod > noncons.list
    /cluster/bin/phast/$MACHTYPE/phyloBoot --read-mods '*noncons.list' \
	--output-average ../ave.noncons.mod > noncons_summary.txt
    cd ..
    cp -p ave.*.mod /cluster/data/mm8/bed/multiz17way/cons

    #	measuring entropy
    #	consEntopy <target coverage> <expected lengths>
    #		 ave.cons.mod ave.noncons.mod --NH 9.78
    #	never stops with the --NH argument
    /cluster/bin/phast/$MACHTYPE/consEntropy .17 12 \
                        ave.cons.mod ave.noncons.mod
XXXX - doesn not work:  2005-11-28
[hiram@kkstore01 /san/sanvol1/scratch/mm8/cons] /cluster/bin/phast/$MACHTYPE/consEntropy .17 12 ave.cons.mod ave.noncons.mod
ERROR: with no separate source alignment, ss_from_msas expects sequences of positive length and no SS object.

#Transition parameters:gamma=0.100000, omega=12.000000, mu=0.083333, nu=0.009259
# Relative entropy: H=1.454874 bits/site
# Required length: N=7.596943 sites
# Total entropy: NH=11.052595 bits

# consEntropy .20 12 ave.cons.mod.1 ave.noncons.mod.1
# Transition params: gamma=0.200000, omega=12.000000, mu=0.083333, nu=0.020833
# Relative entropy: H=1.454874 bits/site
# Required length: N=6.629337 sites
# Total entropy: NH=9.644850 bits

# consEntropy .10 12 ave.cons.mod.2 ave.noncons.mod.2
# Transition params: gamma=0.100000, omega=12.000000, mu=0.083333, nu=0.009259
# Relative entropy: H=1.527815 bits/site
# Required length: N=7.205526 sites
# Total entropy: NH=11.008713 bits

# consEntropy .20 8 ave.cons.mod.3 ave.noncons.mod.3
# Transition params: gamma=0.200000, omega=8.000000, mu=0.125000, nu=0.031250
# Relative entropy: H=1.654878 bits/site
# Required length: N=5.146793 sites
# Total entropy: NH=8.517313 bits

### !!! ***  This one with .17 and 12 is the one that was finally used
# consEntropy .17 12 ave.cons.mod.4 ave.noncons.mod.4
# Transition params: gamma=0.170000, omega=12.000000, mu=0.083333, nu=0.017068
# Relative entropy: H=1.478838 bits/site
# Required length: N=6.753382 sites
# Total entropy: NH=9.987159 bits

    #	SKIP to here passing by the tuning numbers
    ssh pk
    # Create cluster dir to do main phastCons run
    mkdir /san/sanvol1/scratch/mm8/cons/consRun1
    cd /san/sanvol1/scratch/mm8/cons
    cp /san/sanvol1/scratch/mm7/cons/elliotsEncode.mod .
    #	edit, change monDom2 to monDom4, hg17 to hg18, rheMac1 to
    #	rheMac2, rn3 to rn4, mm7 to mm8
    #	It looks like:
ALPHABET: A C G T
ORDER: 0
SUBST_MOD: REV
TRAINING_LNL: -988246.132962
BACKGROUND: 0.295 0.205 0.205 0.295
RATE_MAT:
  -1.165221    0.315494    0.589884    0.259843
   0.189778   -0.878194    0.208718    0.479698
   0.444622    0.261535   -0.885604    0.179447
   0.234867    0.720815    0.215191   -1.170872
TREE: (((((((((((((hg18:0.006690,panTro1:0.007571):0.024272,(colobus_monkey:0.015404,(baboon:0.008258,rheMac2:0.028617):0.008519):0.022120):0.023960,(dusky_titi:0.025662,(owl_monkey:0.012151,marmoset:0.029549):0.008236):0.027158):0.066101,(mouse_lemur:0.059024,galago:0.121375):0.032386):0.017073,((rn4:0.081728,mm8:0.077017):0.229273,oryCun1:0.206767):0.023340):0.023026,(((bosTau2:0.159182,canFam2:0.147731):0.004946,rfbat:0.138877):0.010150,(hedgehog:0.193396,shrew:0.261724):0.054246):0.024354):0.028505,dasNov1:0.149862):0.015994,(loxAfr1:0.104891,echTel1:0.259797):0.040371):0.218400,monDom4:0.371073):0.065268,platypus:0.468116):0.123856,galGal2:0.454691):0.123297,xenTro1:0.782453):0.156067,((tetNig1:0.199381,fr1:0.239894):0.492961,danRer3:0.782561):0.156067);


    cd /san/sanvol1/scratch/mm8/cons/consRun1
    mkdir ppRaw bed

    # Create script to run phastCons with right parameters
    #	These parameters:
    #	--rho 0.28 --expected-length 14 --target-coverage 0.008 --quiet \
    #	were taken from Kate's 17-way in Hg17, including the
    #	-not-informative panTro1
    #	This job is I/O intensive in its output files, thus it is all
    #	working over in /scratch/tmp/
    cat > doPhast << '_EOF_'
#!/bin/csh -fe
mkdir /scratch/tmp/${2}
cp -p ../ss/${1}/${2}.ss ../elliotsEncode.mod /scratch/tmp/${2}
pushd /scratch/tmp/${2} > /dev/null
/cluster/bin/phast/${MACHTYPE}/phastCons ${2}.ss elliotsEncode.mod \
   --rho 0.28 --expected-length 14 --target-coverage 0.008 --quiet \
	--not-informative panTro1 \
	--seqname ${1} --idpref ${1} --viterbi ${2}.bed --score > ${2}.pp
popd > /dev/null
mkdir -p ppRaw/${1}
mkdir -p bed/${1}
mv /scratch/tmp/${2}/${2}.pp ppRaw/${1}
mv /scratch/tmp/${2}/${2}.bed bed/${1}
rm /scratch/tmp/${2}/elliotsEncode.mod
rm /scratch/tmp/${2}/${2}.ss
rmdir /scratch/tmp/${2}
'_EOF_'
    # emacs happy
    chmod a+x doPhast

    #	root1 == chrom name, file1 == ss file name without .ss suffix
    # Create gsub file
    cat > template << '_EOF_'
#LOOP
doPhast $(root1) $(file1)
#ENDLOOP
'_EOF_'
    #	happy emacs

    # Create parasol batch and run it
    ls -1 ../ss/chr*/chr*.ss | sed 's/.ss$//' > in.list

    gensub2 in.list single template jobList
    para create jobList
    para try/check/push/etc.
    #	These jobs are very fast and very I/O intensive, even on the san
    #	they will hang it up as they work at full tilt.
# Completed: 290 of 290 jobs
# CPU time in finished jobs:      12367s     206.11m     3.44h    0.14d  0.000 y
# IO & Wait Time:                  2000s      33.34m     0.56h    0.02d  0.000 y
# Average job time:                  50s       0.83m     0.01h    0.00d
# Longest finished job:              80s       1.33m     0.02h    0.00d
# Submission to last job:           359s       5.98m     0.10h    0.00d

    # combine predictions and transform scores to be in 0-1000 interval
    #	it uses a lot of memory, so on kolossus:
    ssh kolossus
    cd /san/sanvol1/scratch/mm8/cons/consRun1
    #	The sed's and the sort get the file names in chrom,start order
    find ./bed -type f | sed -e "s#/# x #g; s#\.# y #g; s#-# z #g" \
	| sort -k7,7 -k9,9n \
	| sed -e "s# z #-#g; s# y #\.#g; s# x #/#g" | xargs cat \
	| awk '{printf "%s\t%d\t%d\tlod=%d\t%s\n", $1, $2, $3, $5, $5;}' \
	| /cluster/bin/scripts/lodToBedScore /dev/stdin > mostConserved.bed
    #	~ 1 minute
    cp -p mostConserved.bed /cluster/data/mm8/bed/multiz17way

    # Figure out how much is actually covered by the bed files as so:
    #	The 2583393846 comes from the non-n genome size,
    #	from faSize on all chroms:
    ssh kkstore01
    cd /cluster/data/mm8
    faSize ?/chr*.fa ??/chr*.fa
    faSize ?{,?}/chr*.fa
    #	2664455088 bases (97171400 N's 2567283688 real 1477933003 upper
    #	1089350685 lower) in 34 sequences in 34 files

    #	2847717329 bases (264323483 N's 2583393846 real 1489414119
    #	upper 1093979727

    cd /san/sanvol1/scratch/mm8/cons/consRun1
    awk '
{sum+=$3-$2}
END{printf "%% %.2f = 100.0*%d/2567283688\n",100.0*sum/2567283688,sum}' \
	mostConserved.bed
    #	--rho 0.28 --expected-length 14 --target-coverage 0.008
    #		% 5.39 = 100.0*138300407/2567283688

    #	Aiming for %70 coverage in
    #	the following featureBits measurement on CDS:
    # Beware of negative scores when too high.  The logToBedScore
    # will output an error on any negative scores.

    HGDB_CONF=~/.hg.conf.read-only featureBits mm8 \
	-enrichment refGene:cds mostConserved.bed
    #	--rho 0.28 --expected-length 14 --target-coverage 0.008
    #	refGene:cds 1.060%, mostConserved.bed 5.387%, both 0.739%, cover
    #	69.71%, enrich 12.94x

    # Load most conserved track into database
    ssh hgwdev
    cd /cluster/data/mm8/bed/multiz17way
    cp -p /san/sanvol1/scratch/mm8/cons/consRun1/mostConserved.bed .
    time nice -n +19 hgLoadBed -strict mm8 phastConsElements mostConserved.bed
    #	real    2m45.281s
    #	Loaded 1885142 elements of size 5

    #	should measure the same as above
    time nice -n +19 featureBits mm8 -enrichment refGene:cds phastConsElements
    #	refGene:cds 1.060%, phastConsElements 5.387%, both 0.739%, cover
    #	69.71%, enrich 12.94x

    # Create merged posterier probability file and wiggle track data files
    ssh kkstore01
    cd /san/sanvol1/scratch/mm8/cons/consRun1
    # the sed business gets the names sorted by chromName, chromStart
    #	so that everything goes in numerical order into wigEncode
    time nice -n +19 find ./ppRaw -type f \
	| sed -e "s#/# x #g; s#\.# y #g; s#-# z #g" \
	| sort -k7,7 -k9,9n \
	| sed -e "s# z #-#g; s# y #\.#g; s# x #/#g" | xargs cat \
	    | wigEncode stdin phastCons17.wig phastCons17.wib
    #	real    17m8.609s
    #	-rw-rw-r--   1 1963282005 Mar  2 16:49 phastCons17.wib
    #	-rw-rw-r--   1  236751796 Mar  2 16:49 phastCons17.wig



    time nice -n +19 cp -p phastCons17.wi? /cluster/data/mm8/bed/multiz17way/
    #	real    0m33.014s

    #	prepare compressed copy of ascii data values for downloads
    ssh pk
    cd /san/sanvol1/scratch/mm8/cons/consRun1
    cat << '_EOF_' > gzipAscii.sh
#!/bin/sh

TOP=`pwd`
export TOP

mkdir -p phastCons17Scores

for D in ppRaw/chr*
do
    C=${D/ppRaw\/}
    out=phastCons17Scores/${C}.data.gz
    echo "========================== ${C} ${D}"
    find ./${D} -type f | sed -e "s#/# x #g; s#\.# y #g; s#-# z #g" \
	| sort -k7,7 -k9,9n \
	| sed -e "s# z #-#g; s# y #\.#g; s# x #/#g" | xargs cat |
	    gzip > ${out}
done
'_EOF_'
    #	happy emacs
    chmod +x gzipAscii.sh
    time ./gzipAscii.sh
    #	takes about 40 minutes, makes 2.9 Gb of data
    #	copy them for downloads
    ssh hgwdev
    mkdir /cluster/data/mm8/bed/multiz17way/phastCons17Scores
    cd /cluster/data/mm8/bed/multiz17way/phastCons17Scores
    cp -p  /san/sanvol1/scratch/mm8/cons/consRun1/phastCons17Scores/* .
    #	~12 minute copy

    mkdir /usr/local/apache/htdocs/goldenPath/mm8/phastCons17Scores
    cd /usr/local/apache/htdocs/goldenPath/mm8/phastCons17Scores
    ln -s /cluster/data/mm8/bed/multiz17way/phastCons17Scores/*.gz .

    # Load gbdb and database with wiggle.
    ssh hgwdev
    cd /cluster/data/mm8/bed/multiz17way
    ln -s `pwd`/phastCons17.wib /gbdb/mm8/wib/phastCons17.wib
    time nice -n +19 hgLoadWiggle mm8 phastCons17 phastCons17.wig
    #	time nice -n +19 hgLoadWiggle mm8 phastCons17 phastCons17.wig

    #  Create histogram to get an overview of all the data
    ssh hgwdev
    cd /cluster/data/mm8/bed/multiz17way
    time nice -n +19 hgWiggle -doHistogram \
	-hBinSize=0.001 -hBinCount=1000 -hMinVal=0.0 -verbose=2 \
	    -db=mm8 phastCons17 > histogram.data 2>&1
    #	real    26m31.261s
    #	create plot of histogram:

    cat << '_EOF_' | gnuplot > histo.png
set terminal png small color \
        x000000 xffffff xc000ff x66ff66 xffff00 x00ffff xff0000
set size 1.4, 0.8
set key left box
set grid noxtics
set grid ytics
set title " Mouse Mm8 Histogram phastCons17 track"
set xlabel " phastCons17 score"
set ylabel " Relative Frequency"
set y2label " Cumulative Relative Frequency (CRF)"
set y2range [0:1]
set y2tics
set yrange [0:0.02]

plot "histogram.data" using 2:5 title " RelFreq" with impulses, \
        "histogram.data" using 2:7 axes x1y2 title " CRF" with lines
'_EOF_'
    #	happy emacs

    display histo.png &

# MAKE FOLDUTR TABLES (DONE 2006-02-28, Fan)
# First set up directory structure and extract UTR sequence on hgwdev
    ssh hgwdev
    cd /cluster/data/mm8/bed
    rm rnaStruct

    mkdir /san/sanvol1/scratch/mm8/rnaStruct.2006-02-28
    ln -s /san/sanvol1/scratch/mm8/rnaStruct.2006-02-28 rnaStruct
    cd rnaStruct
    mkdir -p utr3/split utr5/split utr3/fold utr5/fold
    utrFa mm8 knownGene utr3 utr3/utr.fa
    utrFa mm8 knownGene utr5 utr5/utr.fa

# Split up files and make files that define job.
    ssh pk
    cd /cluster/data/mm8/bed/rnaStruct
    faSplit sequence utr3/utr.fa 4000 utr3/split/s
    faSplit sequence utr5/utr.fa 4000 utr5/split/s
    ls -1 utr3/split > utr3/in.lst
    ls -1 utr5/split > utr5/in.lst
    cd utr3
    cat > gsub <<end
#LOOP
rnaFoldBig split/\$(path1) fold
#ENDLOOP
end
    cp gsub ../utr5

# Do cluster run for 3' UTRs
    gensub2 in.lst single gsub spec
    para create spec
    para try
    para push
# Completed: 3897 of 3897 jobs
# CPU time in finished jobs:     227530s    3792.17m    63.20h    2.63d  0.007 y
# IO & Wait Time:                 44046s     734.10m    12.23h    0.51d  0.001 y
# Average job time:                  70s       1.16m     0.02h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:            1337s      22.28m     0.37h    0.02d
# Submission to last job:          1886s      31.43m     0.52h    0.02d

# Do cluster run for 5' UTRs 
    cd ../utr5
    gensub2 in.lst single gsub spec
    para create spec
    para try
    para push
# Completed: 3762 of 3762 jobs
# CPU time in finished jobs:      42244s     704.07m    11.73h    0.49d  0.001 y
# IO & Wait Time:                 10250s     170.83m     2.85h    0.12d  0.000 y
# Average job time:                  14s       0.23m     0.00h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:            2014s      33.57m     0.56h    0.02d
# Submission to last job:          2083s      34.72m     0.58h    0.02d

# Load database
    ssh hgwdev
    cd /cluster/data/mm8/bed/rnaStruct/utr5
    hgLoadRnaFold mm8 foldUtr5 fold
    cd ../utr3
    hgLoadRnaFold mm8 foldUtr3 fold

# Clean up
    rm -r split fold err batch.bak
    cd ../utr5
    rm -r split fold err batch.bak

# Build KEGG pathway tables.  (DONE 3/8/06.  Fan)
   ssh hgwdev
   cd /cluster/store9/kg/kgMm8A
   md kegg
   cd kegg

   ~/src/hg/protein/KGpath.sh kgMm8A mm8 060115

   hgsql mm8 -e "drop table keggMapDesc"
   hgsql mm8 -e "drop table keggPathway"
   hgsql mm8 <~/src/hg/lib/keggMapDesc.sql
   hgsql mm8 <~/src/hg/lib/keggPathway.sql
   hgsql mm8 -e 'load data local infile "keggMapDesc.tab" into table keggMapDesc'
   hgsql mm8 -e 'load data local infile "keggPathway.tab" into table keggPathway'
  
# Build CGAP pathway tables

   cd ..
   ~/src/hg/protein/KGcgap.sh kgMm8A mm8 060115

   cat cgapBIOCARTAdesc.tab |sort -u > cgapBIOCARTAdescSorted.tab
   hgsql mm8 -e "drop table cgapAlias"
   hgsql mm8 -e "drop table cgapBiocDesc"
   hgsql mm8 -e "drop table cgapBiocPathway"
   hgsql mm8 <~/src/hg/lib/cgapAlias.sql
   hgsql mm8 <~/src/hg/lib/cgapBiocDesc.sql
   hgsql mm8 <~/src/hg/lib/cgapBiocPathway.sql

   hgsql mm8 -e 'load data local infile "cgapAlias.tab" into table cgapAlias'
   hgsql mm8 -e 'load data local infile "cgapBIOCARTAdescSorted.tab" into table cgapBiocDesc'
   hgsql mm8 -e 'load data local infile "cgapBIOCARTA.tab" into table cgapBiocPathway'

####################################################################################

# BUILD PROTEOME BROWSER TABLES FOR mm8 (DONE 3/8/06, Fan) 

# These are instructions for building tables needed for the Proteome Browser. 
 
# DON'T START THESE UNTIL TABLES FOR KNOWN GENES AND kgProtMap table
# ARE REBUILT.  
# This build is based on proteins DBs dated 060115.

# Create the working directory

    ssh hgwdev
    mkdir /cluster/store9/kg/kgMm8A/pb-2006-03-08
    cd /cluster/data/mm8/bed
    rm pb
    ln -s /cluster/store9/kg/kgMm8A/pb-2006-03-08 pb
    cd pb

# Define pep* tables in mm8 DB

	cat ~/kent/src/hg/lib/pep*.sql > pepAll.sql

#  First edit out pepPred table definition, then

	hgsql mm8 < pepAll.sql

# Build the pepMwAa table

  hgsql proteins060115 -N -e \
"select info.acc, molWeight, aaSize from sp060115.info, sp060115.accToTaxon where accToTaxon.taxon=10090 and accToTaxon.acc = info.acc" > pepMwAa.tab

hgsql mm8 -e 'load data local infile "pepMwAa.tab" into table pepMwAa'

o Build the pepPi table

    hgsql proteins060115 -e \
    "select info.acc from sp060115.info, sp060115.accToTaxon where accToTaxon.taxon=10090 and accToTaxon.acc = info.acc" > protAcc.lis

    hgsql mm8 -N -e 'select proteinID from knownGene where proteinID like "%-%"' | sort -u >> protAcc.lis

    pbCalPi protAcc.lis sp060115 pepPi.tab
    hgsql mm8 -e 'delete from pepPi'
    hgsql mm8 -e 'load data local infile "pepPi.tab" into table mm8.pepPi'

# Calculate and load pep distributions

    pbCalDist sp060115 proteins060115 10090 mm8 >pbCalDist.out
    wc  pbCalDist.out

    hgsql mm8
    load data local infile "pepExonCntDist.tab" into table mm8.pepExonCntDist;
    load data local infile "pepCCntDist.tab" into table mm8.pepCCntDist;
    load data local infile "pepHydroDist.tab" into table mm8.pepHydroDist;
    load data local infile "pepMolWtDist.tab" into table mm8.pepMolWtDist;
    load data local infile "pepResDist.tab" into table mm8.pepResDist;
    load data local infile "pepIPCntDist.tab" into table mm8.pepIPCntDist;
    load data local infile "pepPiDist.tab" into table mm8.pepPiDist;
    quit

# Calculate frequency distributions

    pbCalResStd sp060115 10090 mm8

# Create pbAnomLimit and pbResAvgStd tables

   hgsql mm8 -e "drop table pbAnomLimit"
   hgsql mm8 -e "drop table pbResAvgStd"
   hgsql mm8 < ~/src/hg/lib/pbAnomLimit.sql
   hgsql mm8 < ~/src/hg/lib/pbResAvgStd.sql

   hgsql mm8 -e 'load data local infile "pbResAvgStd.tab" into table mm8.pbResAvgStd;'
   hgsql mm8 -e 'load data local infile "pbAnomLimit.tab" into table mm8.pbAnomLimit;'

# Create pbStamp table for PB
  hgsql mm8 -e "drop table pbStamp"
  hgsql mm8 < ~/src/hg/lib/pbStamp.sql
  hgsql mm7 -N -e 'select * from pbStamp' > pbStamp.tab
  hgsql mm8 -e 'load data local infile "pbStamp.tab" into table mm8.pbStamp'

# ENABLE PB FOR mm8 IN HGCENTRALTEST 

    echo " insert into gdbPdb values('mm8', 'proteins060115')" \
      | hgsql -h genome-testdb hgcentraltest

    echo "update dbDb set hgPbOk = 1 where name = 'mm8';" \
      | hgsql -h genome-testdb hgcentraltest

# Adjust drawing parameters for Proteome Browser stamps

  Now invoke Proteome Browser and adjust various drawing parameters
  (mostly the ymax of each stamp) if necessary, by updating the 
  pbStamp.tab file and then delete and reload the pbStamp table. 

  hgsql mm8 -e "drop table pbStamp"
  hgsql mm8 < ~/src/hg/lib/pbStamp.sql
  hgsql mm8 -e 'load data local infile "pbStamp.tab" into table mm8.pbStamp'

# Perform preliminary review of Proteome Browser for mm8, then
  notify QA for formal review.

# BUILD MISC STUFF FOR KG

# Build mrnaRefseq table

# First make sure the entrez DB is updated. (recently updated on 2/8/06).

    ssh hgwdev
    cd /cluster/store9/kg/kgMm8A

    hgsql entrez -N -e \
     'select mrna, refseq from entrezRefseq, entrezMrna, mm8.all_mrna where qName=mrna and    entrezRefseq.geneID=entrezMrna.geneID' \
      >mrnaRefseq1.tab.tab

    hgsql mm8 -N -e 'select name, name from refGene' >mrnaRefseq2.tab

    cat mrnaRefseq1.tab mrnaRefseq2.tab |sort -u >mrnaRefseq.tab

    hgsql mm8 -e 'drop table mrnaRefseq'
    hgsql mm8 < ~/src/hg/lib/mrnaRefseq.sql
    hgsql mm8 -e 'load data local infile "mrnaRefseq.tab" into table mrnaRefseq'

# CREATE FULL TEXT INDEX FOR KNOWN GENES (DONE 3/8/06 Fan)
# This depends on the go and uniProt databases as well as 
# the kgAlias and kgProAlias tables.  The hgKgGetText takes
# about 5 minutes when the database is not too busy.  The rest
# is real quick.
     ssh hgwdev
     cd /cluster/store9/kg/kgMm8A
     mkdir index
     cd index
     hgKgGetText mm8 knownGene.text
     ixIxx knownGene.text knownGene.ix knownGene.ixx
     ln -s /cluster/store9/kg/kgMm8A/index/knownGene.ix  /gbdb/mm8/knownGene.ix
     ln -s /cluster/store9/kg/kgMm8A/index/knownGene.ixx /gbdb/mm8/knownGene.ixx

# BUILD KNOWN GENE LIST FOR GOOGLE.  
# make knownGeneLists.html mm8GeneList.html mm5GeneList.html rm3GeneList.html

    cd /cluster/data/mm8/bed
    rm -rf knownGeneList/mm8

# Run hgKnownGeneList to generate the tree of HTML pages
# under ./knownGeneList/mm8

    hgKnownGeneList mm8

# copy over to /usr/local/apache/htdocs

    rm -rf /usr/local/apache/htdocs/knownGeneList/mm8
    mkdir -p /usr/local/apache/htdocs/knownGeneList/mm8
    cp -Rfp knownGeneList/mm8/* /usr/local/apache/htdocs/knownGeneList/mm8

##################################################################################
# Create description.html for mm8

mkdir -p ~/kent/src/hg/makeDb/trackDb/mouse/mm8
cd ~/kent/src/hg/makeDb/trackDb/mouse/mm8
cp ../hg17/description.html .

vi description.html
# Change release date and build number and change hg17 to mm8
# Check it into CVS

mkdir -p /cluster/data/mm8/html
cp -p description.html /cluster/data/mm8/html

ln -s /cluster/data/mm8/html/description.html /gbdb/mm8/html/description.html

# BUILD GENE SORTER TABLES (AKA: FAMILY BROWSER) (STARTED 2006-03-08, DONE 2006-02-14 - Fan)
#	This should be done after KG tables are complete from known genes build
#	process.
#
# Cluster together various alt-splicing isoforms.
#	Creates the knownIsoforms and knownCanonical tables
ssh hgwdev
mkdir /cluster/data/mm8/bed/geneSorter.2006-03-08
# remove old symbolic link
rm /cluster/data/mm8/bed/geneSorter
ln -s /cluster/data/mm8/bed/geneSorter.2006-03-08 /cluster/data/mm8/bed/geneSorter
cd /cluster/data/mm8/bed/geneSorter
hgClusterGenes mm8 knownGene knownIsoforms knownCanonical

# Extract peptides from knownGenes into fasta file
# and create a blast database out of them.
mkdir /cluster/data/mm8/bed/geneSorter/blastp
cd /cluster/data/mm8/bed/geneSorter/blastp
pepPredToFa mm8 knownGenePep known.faa
#	You may need to build this binary in src/hg/near/pepPredToFa
/scratch/blast/formatdb -i known.faa -t known -n known
#	This command is in /projects/compbio/bin/$MACH/formatdb

# Copy over database to bluearc
rm -fr /cluster/bluearc/mm8/blastp
mkdir -p /cluster/bluearc/mm8/blastp
cp -p /cluster/data/mm8/bed/geneSorter/blastp/known.* /cluster/bluearc/mm8/blastp

# Split up fasta file into bite sized chunks for cluster
cd /cluster/data/mm8/bed/geneSorter/blastp
mkdir split
faSplit sequence known.faa 8000 split/kg

# Make parasol run directory
ssh pk
mkdir /cluster/data/mm8/bed/geneSorter/blastp/self
cd /cluster/data/mm8/bed/geneSorter/blastp/self
mkdir run
cd run
mkdir out

# Make blast script
cat  << '_EOF_' > blastSome
#!/bin/sh
BLASTMAT=/cluster/bluearc/blast229/data /cluster/bluearc/blast229/blastall \
-p blastp -d /cluster/bluearc/mm8/blastp/known -i $1 -o $2 \
-e 0.01 -m 8 -b 1000
'_EOF_'
    # << keep emacs happy
chmod +x blastSome

# Make gensub2 file
cat  << '_EOF_' > gsub
#LOOP
blastSome {check in line+ $(path1)} {check out line out/$(root1).tab}
#ENDLOOP
'_EOF_'
    # << keep emacs happy

# Create parasol batch
#	'ls ../../split/*.fa' is too much, hence the echo
echo ../../split/*.fa | wordLine stdin > split.lst
gensub2 split.lst single gsub jobList
para create jobList
para try
para push
para check
Completed: 7730 of 7730 jobs
CPU time in finished jobs:      35194s     586.56m     9.78h    0.41d  0.001 y
IO & Wait Time:                 29033s     483.89m     8.06h    0.34d  0.001 y
Average job time:                   8s       0.14m     0.00h    0.00d
Longest running job:                0s       0.00m     0.00h    0.00d
Longest finished job:              43s       0.72m     0.01h    0.00d
Submission to last job:           206s       3.43m     0.06h    0.00d

# Load into database.  This takes about 20 minutes
ssh hgwdev
cd /cluster/data/mm8/bed/geneSorter/blastp/self/run/out
bash
time hgLoadBlastTab mm8 knownBlastTab *.tab
# Scanning through 7730 files
# Loading database with 5270545 rows
# real    13m30.534s

cd /cluster/data/mm8/bed/geneSorter
# Create table that maps between known genes and RefSeq
hgMapToGene mm8 refGene knownGene knownToRefSeq

# Create table that maps between known genes and LocusLink
hgsql --skip-column-names -e "select mrnaAcc,locusLinkId from refLink" mm8 > refToLl.txt
hgMapToGene mm8 refGene knownGene knownToLocusLink -lookup=refToLl.txt
hgsql -e "select count(*) from knownToLocusLink;" mm8
# 27636

# Create table that maps between known genes and Pfam domains
hgMapViaSwissProt mm8 knownGene name proteinID Pfam knownToPfam
hgsql -e "select count(*) from knownToPfam;" mm8
# 29479

############################################################################

### MAKE THE affyU74 TRACK - needed for the Gene Sorter (DONE
#                              
# MAKE THE affyU74 TRACK using Affy consensus sequences instead of 
# target sequences. Recalculate alignments and load data
----------------------------------
# Load up semi-local disk with target sequences for Affy mouse U74 chips.
# ssh kkr1u00
# mkdir -p /iscratch/i/affy
#	This /projects filesystem is not available on kkr1u00
#	but it is on kk
# ssh kk
# cp /projects/compbio/data/microarray/affyGnfMouse/sequences/U74*consensus.fa /iscratch/i/affy

ssh kkr1u00
iSync

# Run cluster job to do alignments
ssh kk
mkdir /cluster/data/mm8/
cd /cluster/data/mm8/bed/affyU74.2006-03-08
mkdir run
cd run
mkdir psl
#echo /scratch/mus/mm8/maskedContigs/*.fa | wordLine stdin > genome.lst
echo /scratch/hg/mm8/nib/*.nib | wordLine stdin > genome.lst
ls -1 /iscratch/i/affy/U74*consensus.fa > affy.lst
cat << '_EOF_' > gsub
#LOOP
/cluster/bin/i386/blat -fine -mask=lower -minIdentity=95 -ooc=/scratch/hg/h/11.ooc $(path1) {check in line+ $(path2)} {check out line+ psl/$(root1)_$(root2).psl}
#ENDLOOP
'_EOF_'
# << this line makes emacs coloring happy

gensub2 genome.lst affy.lst gsub jobList
para create jobList
para try
para check
para push
# Completed: 102 of 102 jobs
# CPU time in finished jobs:       5846s      97.43m     1.62h    0.07d  0.000 y
# IO & Wait Time:                   367s       6.12m     0.10h    0.00d  0.000 y
# Average job time:                  61s       1.02m     0.02h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:             189s       3.15m     0.05h    0.00d
# Submission to last job:           200s       3.33m     0.06h    0.00d

# Do sort, best in genome filter, and convert to chromosome coordinates
# to create affyU74.psl.
ssh kk
cd /cluster/data/mm8/bed/affyU74.2006-03-08/run
pslSort dirs raw.psl tmp psl

# change filter parameters for these sequences. only use alignments that
# cover 30% of sequence and have at least minAli = 0.95.
# minAli = 0.97 too high. low minCover as a lot of n's in these sequences
#pslReps -minCover=0.3 -sizeMatters -minAli=0.95 -nearTop=0.005 raw.psl contig.psl /dev/null
pslReps -minCover=0.3 -sizeMatters -minAli=0.95 -nearTop=0.005 raw.psl ../all_affyU74.psl /dev/null

# Sort by chromosome and load into database.

ssh hgwdev
cd /cluster/data/mm8/bed/affyU74.2006-03-08
pslSortAcc nohead chrom temp all_affyU74.psl
cat chrom/*.psl > affyU74.psl

# shorten qName to "xxxx_at" instead of "U74Xv2:xxxx_at;"
# and reload data into table

mv affyU74.psl affyU74.psl.orig

cut -f 1-9 affyU74.psl.orig >j1.tmp
cut -f 10 affyU74.psl.orig | sed -e 's/:/\t/' | cut -f 2 > j2.tmp
cut -f 11-21 affyU74.psl.orig >j3.tmp
paste j1.tmp j2.tmp j3.tmp >affyU74.psl

hgLoadPsl mm8 affyU74.psl
rm -rf chrom temp run

##   MAKE THE affyGnfU74 TRACKs (DONE 3/8/06, Fan)
# Make bed files and load consensus sequences for Affy U74 chip set.

#This needs to be done after affyU74 is already made.
ssh hgwdev
mkdir -p /cluster/data/mm8/bed/affyGnf.2006-03-08
cd /cluster/data/mm8/bed/affyGnf.2006-03-08
#	may need to build this command in src/hg/affyGnf
~/src/hg/affyGnf/affyPslAndAtlasToBed ../affyU74.2006-03-08/affyU74.psl \
	/projects/compbio/data/microarray/affyGnfMouse/data/data_public_U74 \
	affyGnfU74A.bed affyGnfU74A.exp -newType -chip=U74Av2
~/src/hg/affyGnf/affyPslAndAtlasToBed ../affyU74.2006-03-08/affyU74.psl \
	/projects/compbio/data/microarray/affyGnfMouse/data/U74B_b.txt \
	affyGnfU74B.bed affyGnfU74B.exp -newType -chip=U74Bv2
~/src/hg/affyGnf/affyPslAndAtlasToBed ../affyU74.2006-03-08/affyU74.psl \
	/projects/compbio/data/microarray/affyGnfMouse/data/U74C_b.txt \
	affyGnfU74C.bed affyGnfU74C.exp -newType -chip=U74Cv2

# edit 3 .bed files to shorten qName to "xxxx_at" instead of "U74Xv2:xxxx_at;"
mkdir sav
cp *.bed sav -p
cat sav/affyGnfU74A.bed|sed -e "s/U74Av2://" >affyGnfU74A.bed
cat sav/affyGnfU74B.bed|sed -e "s/U74Bv2://" >affyGnfU74B.bed
cat sav/affyGnfU74C.bed|sed -e "s/U74Cv2://" >affyGnfU74C.bed

# and reload data into table
hgLoadBed -strict mm8 affyGnfU74A affyGnfU74A.bed
hgLoadBed -strict mm8 affyGnfU74B affyGnfU74B.bed
hgLoadBed -strict mm8 affyGnfU74C affyGnfU74C.bed

# Add in sequence data for U74 tracks.
# Copy consensus sequence to /gbdb if it isn't already
# [THE SYM LINKS WERE ALREADY DONE.]
#    mkdir -p /gbdb/hgFixed/affyProbes
    cd /gbdb/hgFixed/affyProbes
    # fix broken symlinks after directory structure changed
    # /projects/compbiodata ----> /projects/compbio/data
    rm U74*
    # make correct symlinks (hartera, 2005-05-03)
    ln -s /projects/compbio/data/microarray/affyGnfMouse/sequences/U74Av2_consensus.fa .
    ln -s /projects/compbio/data/microarray/affyGnfMouse/sequences/U74Bv2_consensus.fa .
    ln -s /projects/compbio/data/microarray/affyGnfMouse/sequences/U74Cv2_consensus.fa .

    # used perl -pi.bak -e 's/;/ /' <file> to remove ";" after probe name
    # ASSUMED THIS IS ALREADY DONE LAST TIME FOR MM4.
    # reload sequences with prefix removed so acc matches name used in
    # other dependent tables
                                                    
    hgLoadSeq -abbr=U74Av2: mm8 /gbdb/hgFixed/affyProbes/U74Av2_consensus.fa
    hgLoadSeq -abbr=U74Bv2: mm8 /gbdb/hgFixed/affyProbes/U74Bv2_consensus.fa
    hgLoadSeq -abbr=U74Cv2: mm8 /gbdb/hgFixed/affyProbes/U74Cv2_consensus.fa

### GNF ATLAS 2  (DONE 3/9/06, Fan)
    # Align probes from GNF1M chip.
    ssh kk
    cd /cluster/data/mm8/bed
    mkdir -p geneAtlas2/run/psl
    cd geneAtlas2/run

    echo /scratch/hg/mm8/nib/*.nib | wordLine stdin > genome.lst

    ls -1 /cluster/bluearc/geneAtlas2/gnf1m.fa > mrna.lst
    echo '#LOOP\nblat -fine -ooc=/scratch/hg/h/mouse11.ooc  $(path1) $(path2) {check out line+ psl/$(root1)_$(root2).psl}\n#ENDLOOP' > gsub
    gensub2 genome.lst mrna.lst gsub spec
    para create spec
    para try
    para check
    para push
    para time
# Completed: 34 of 34 jobs
# CPU time in finished jobs:      53165s     886.08m    14.77h    0.62d  0.002 y
# IO & Wait Time:                   241s       4.02m     0.07h    0.00d  0.000 y
# Average job time:                1571s      26.18m     0.44h    0.02d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:            3929s      65.48m     1.09h    0.05d
# Submission to last job:          3929s      65.48m     1.09h    0.05d

    # Do sort, best in genome filter, and convert to chromosome coordinates
    # to create gnf1h.psl.
    pslSort dirs raw.psl tmp psl
    pslReps -minCover=0.3 -minAli=0.95 -nearTop=0.005 raw.psl ../affyGnf1m.psl /dev/null

    #rm -r contig.psl raw.psl psl

    # Load probes and alignments from GNF1H into database.
    ssh hgwdev
    cd /cluster/data/mm8/bed/geneAtlas2
#    ln -s /projects/compbio/data/microarray/geneAtlas2/mouse/gnf1m.fa /gbdb/hgFixed/affyProbes
    hgLoadPsl mm8 affyGnf1m.psl
    hgLoadSeq mm8 /gbdb/hgFixed/affyProbes/gnf1m.fa

    # Load up track
    hgMapMicroarray gnfAtlas2.bed hgFixed.gnfMouseAtlas2MedianRatio \
    	affyGnf1m.psl
    # Note that the unmapped 5000 records are from all-N sequences.
    hgLoadBed -strict mm8 gnfAtlas2 gnfAtlas2.bed

# MOUSE AFFYMETRIX MOE430 TRACK (TBD)
#    mkdir -p /projects/compbio/data/microarray/affyMouse
    # Download MOE430A and MOE430B consensus sequences from Affymetrix web site
    # http://www.affymetrix.com/support/technical/byproduct.affx?product=moe430
#    unzip MOE430*_consensus.zip

    # check for duplicate probes: there are none, all have unique names
    # check for duplicate probes: 100 from 136745_at to 1367551_a_at
    # remove "consensus:" and ";" from FASTA headers to shorten probeset
    # names for database

#    sed -e 's/consensus://' MOE430A_consensus | sed -e 's/;/ /' > MOE430_all.fa
#    sed -e 's/consensus://' MOE430B_consensus | sed -e 's/;/ /' >> MOE430_all.fa
 
#    cp /projects/compbio/data/microarray/affyMouse/MOE430_all.fa \
#       /cluster/bluearc/affy/

    # THE ABOVE WAS ALREADY TBD)

    # Set up cluster job to align MOE430 consensus sequences to mm8
    ssh kkr1u00
    cd /cluster/data/mm8/bed
    mkdir -p affyMOE430
    cd affyMOE430
#    mkdir -p /iscratch/i/affy
#    cp /cluster/bluearc/affy/MOE430_all.fa /iscratch/i/affy
#    iSync

    ssh kk
    cd /cluster/data/mm8/bed/affyMOE430
    ls -1 /iscratch/i/affy/MOE430_all.fa > affy.lst
    echo /scratch/hg/mm8/nib/*.nib | wordLine stdin > genome.lst

    echo '#LOOP\n/cluster/bin/i386/blat -fine -mask=lower -minIdentity=95 -ooc=/scratch/hg/h/mouse11.ooc  $(path1) $(path2) {check out line+ psl/$(root1)_$(root2).psl}\n#ENDLOOP' > template.sub
    gensub2 genome.lst affy.lst template.sub para.spec
    mkdir psl
    para create para.spec
    # Do the job with usual para try/check/push/time etc.
# Completed: 34 of 34 jobs
# CPU time in finished jobs:       9196s     153.26m     2.55h    0.11d  0.000 y
# IO & Wait Time:                   362s       6.04m     0.10h    0.00d  0.000 y
# Average job time:                 281s       4.69m     0.08h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:             639s      10.65m     0.18h    0.01d
# Submission to last job:           639s      10.65m     0.18h    0.01d

    # Do sort, best in genome filter, and convert to chromosome coordinates
    # to create affyRAE230.psl
    pslSort dirs raw.psl tmp psl

    # only use alignments that cover 30% of sequence and have at least
    # 95% identity in aligned region. 
    # low minCover as a lot of n's in these sequences
    pslReps -minCover=0.3 -sizeMatters -minAli=0.95 -nearTop=0.005 raw.psl affyMOE430.psl /dev/null

    # Load alignments and sequences into database
    ssh hgwdev
    cd /cluster/data/mm8/bed/affyMOE430
    # shorten names in psl file
    sed -e 's/MOE430//' affyMOE430.psl > affyMOE430.psl.bak
    mv affyMOE430.psl.bak affyMOE430.psl

    # load track into database

    hgLoadPsl mm8 affyMOE430.psl
 
    # Add consensus sequences for MOE430
    # Copy sequences to gbdb is they are not there already
#    mkdir -p /gbdb/hgFixed/affyProbes
#    ln -s /projects/compbio/data/microarray/affyMouse/MOE430_all.fa \ 
#       /gbdb/hgFixed/affyProbes

    hgLoadSeq -abbr=MOE430 mm8 /gbdb/hgFixed/affyProbes/MOE430_all.fa
    
    # Clean up
#    rm batch.bak contig.psl raw.psl 
    
    # BELOW TWO THINGS WERE DONE BY RACHEL ALREDAY FOR MM4
    # add entry to trackDb.ra in ~kent/src/hg/makeDb/trackDb/mouse/
    # add affyMOE430.html file and then do make alpha to add to trackDb table

# Create known gene mapping table and expression distance tables
# for GNF Atlas 2.  (The hgExpDistance takes an hour.)

hgMapToGene mm8 affyGnf1m knownGene knownToGnf1m
hgExpDistance mm8 hgFixed.gnfMouseAtlas2MedianRatio \
	hgFixed.gnfMouseAtlas2MedianExps gnfAtlas2Distance -lookup=knownToGnf1m
Have 34863 elements in hgFixed.gnfMouseAtlas2MedianRatio
Got 22937 unique elements in hgFixed.gnfMouseAtlas2MedianRatio

# Create table that maps between known genes and RefSeq
hgMapToGene mm8 refGene knownGene knownToRefSeq
#	may need to build this command in src/hg/near/hgMapToGene

# Create a table that maps between known genes and 
# the nice affy expression data.
hgMapToGene mm8 affyU74  knownGene knownToU74
hgMapToGene mm8 affyMOE430 knownGene knownToMOE430
hgMapToGene mm8 affyMOE430 -prefix=A: knownGene knownToMOE430A

# Format and load Rinn et al sex expression data
mkdir /cluster/data/mm8/bed/rinnSex
cd /cluster/data/mm8/bed/rinnSex
hgMapMicroarray rinnSex.bed hgFixed.mouseRinnSexMedianRatio \
../affyMOE430/affyMOE430.psl
hgLoadBed mm8 rinnSex rinnSex.bed

# Format and load the GNF data
mkdir /cluster/data/mm8/bed/affyGnf95
cd /cluster/data/mm8/bed/affyGnf95
~/src/hg/affyGnf/affyPslAndAtlasToBed -newType ../affyU95.psl \
/projects/compbio/data/microarray/affyGnfHuman/data_public_U95 \
affyGnfU95.tab affyGnfU95Exps.tab -shortOut

#	this .sql load was in preceeding instructions, but this .sql file
#	appears to not exist and it doesn't seem to be needed anyway.
#	Everything below this seems to create tables OK.
#  hgsql mm8 < ~/kent/src/hg/affyGnf/affyGnfU95.sql

# Create table that gives distance in expression space between 
# GNF genes.  These commands take about 15 minutes each
#	The affyGnfU74?Exps arguments appear to be unused in 
# hgExpDistance
cd /cluster/data/mm8/bed/geneSorter
hgExpDistance mm8 affyGnfU74A affyGnfU74AExps affyGnfU74ADistance -lookup=knownToU74
hgExpDistance mm8 affyGnfU74B affyGnfU74BExps affyGnfU74BDistance -lookup=knownToU74
hgExpDistance mm8 affyGnfU74C affyGnfU74CExps affyGnfU74CDistance -lookup=knownToU74

# Create table to map between known genes and GNF Atlas2
# expression data.
    hgMapToGene mm8 gnfAtlas2 knownGene knownToGnfAtlas2 '-type=bed 12'
#	hgsql -e "select count(*) from knownToGnfAtlas2;" mm8
#	row count changed to 22978

# Create expression distance table - takes about an hour
    hgExpDistance mm8 hgFixed.gnfMouseAtlas2MedianRatio \
    	hgFixed.gnfMouseAtlas2MedianExps gnfAtlas2Distance \
	-lookup=knownToGnfAtlas2 &
#	hgsql -e "select count(*) from gnfAtlas2Distance;" mm8
#	row count changed to 22937000 

# HGNEAR PROTEIN BLAST TABLES (DONE 3/14/06 Fan)

    ssh hgwdev
    mkdir /cluster/data/mm8/bed/hgNearBlastp
    cd /cluster/data/mm8/bed/hgNearBlastp
    cat << _EOF_ > config.ra
# Latest mouse vs. other Gene Sorter orgs:
# human, rat, zebrafish, worm, yeast, fly

targetGenesetPrefix mouse
targetDb mm8
queryDbs hg18 rn4 danRer3 ce2 sacCer1 dm2

mm8Fa /cluster/data/mm8/bed/geneSorter/blastp/known.faa 
hg18Fa /cluster/data/hg18/bed/geneSorter/blastp/known.faa
rn4Fa /cluster/data/rn4/bed/blastp/known.faa
danRer3Fa /cluster/data/danRer3/bed/blastp/ensembl.faa
ce2Fa /cluster/data/ce2/bed/blastp/wormPep154.faa
sacCer1Fa /cluster/data/sacCer1/bed/blastp/sgdPep.faa
dm2Fa /cluster/data/dm2/bed/flybase4.1/flybasePep.fa

buildDir /cluster/data/mm8/bed/hgNearBlastp
scratchDir /san/sanvol1/scratch/mm8HgNearBlastp
_EOF_

    doHgNearBlastp.pl config.ra >do.log 

# output was like this:
...
Scanning through 671 files^M
Loading database with 14470 rows^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/mm8.split^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/mm8.formatdb^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/hg18.split^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/hg18.formatdb^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/rn4.split^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/rn4.formatdb^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/danRer3.split^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/danRer3.formatdb^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/ce2.split^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/ce2.formatdb^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/sacCer1.split^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/sacCer1.formatdb^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/dm2.split^M
# ssh -x pk rm -rf /san/sanvol1/scratch/mm8HgNearBlastp/dm2.formatdb^M
# ssh -x pk rmdir /san/sanvol1/scratch/mm8HgNearBlastp^M
^M
 *** All done!^M
 *** Check these tables in mm8:^M
 *** mouseBlastTab hgBlastTab rnBlastTab drBlastTab ceBlastTab scBlastTab dmBlastTab ^M
 *** and mmBlastTab in these databases:^M
 *** hg18 rn4 danRer3 ce2 sacCer1 dm2 ^M

# MAKE ORGANISM-SPECIFIC HGNEARDATA FILES 
    cd ~/kent/src/hg/near/hgNear/hgNearData
    mkdir -p Mouse/mm8
    cd Mouse/mm8
    cp ../mm7/otherOrgs.ra
# Edit ortherOrgs.ra to reflect the latest genomes used in blastp jobs
    vi ortherOrgs.ra
# then check it into CVS.

# ENABLE HGNEAR FOR mm8 IN HGCENTRALTEST
    echo "update dbDb set hgNearOk = 1 where name = 'mm8';" \
      | hgsql -h genome-testdb hgcentraltest

# END OF HGNEAR STUFF

#########################################################################
# BLASTZ panTro2 after chr9 re-masked (WORKING - 2006-03-28 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastzPanTro2.2006-03-28
    cd /cluster/data/mm8/bed
    rm blastz.panTro2
    ln -s blastzPanTro2.2006-03-28 blastz.panTro2
    cd blastz.panTro2

    cat << '_EOF_' > DEF
# mouse vs chimp
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7.x86_64
BLASTZ_ABRIDGE_REPEATS=1

# TARGET: Mouse Mm7
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_SMSK=/cluster/bluearc/scratch/hg/mm8/linSpecRep/notInOthers
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY: Chimp PanTro2
SEQ2_DIR=/scratch/hg/panTro2/nib
SEQ2_LEN=/scratch/hg/panTro2/chrom.sizes
SEQ2_SMSK=/cluster/bluearc/panTro2/linSpecRep/notInRodent
SEQ2_CHUNK=50000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzPanTro2.2006-03-28
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    #	broken during blastz run due to panassas failure
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-continue=cat `pwd`/DEF > cat.out 2>&1 &
    XXXX - running 2006-03-29
    
    time nice -n +19 featureBits mm8 chainPanTro1Link
    #	901276629 bases of 2567283971 (35.106%) in intersection
    time nice -n +19 featureBits panTro2 chainMm8Link
    #	901976621 bases of 2733948177 (32.992%) in intersection


#########################################################################
# BLASTZ panTro2 (DONE - 2006-03-15 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastz.panTro2.2006-02-23
    cd /cluster/data/mm8/bed
    ln -s blastz.panTro2.2006-02-23 blastz.panTro2
    cd blastz.panTro2

    cat << '_EOF_' > DEF
# mouse vs chimp
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7.x86_64
BLASTZ_ABRIDGE_REPEATS=1

# TARGET: Mouse Mm7
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_SMSK=/cluster/bluearc/scratch/hg/mm8/linSpecRep/notInOthers
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY: Chimp PanTro2
SEQ2_DIR=/scratch/hg/panTro2/nib
SEQ2_LEN=/scratch/hg/panTro2/chrom.sizes
SEQ2_SMSK=/cluster/bluearc/panTro2/linSpecRep/notInRodent
SEQ2_CHUNK=50000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzPanTro2.2006-03-15
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    #	broken during chain step due to missing files on the Iservers
    #	completed chain run manually, then continuing
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-continue=chainMerge `pwd`/DEF > chainMerge.out 2>&1 &
    #	broken during loadUp due to script bug, ran loadUp.csh manually
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-swap `pwd`/DEF > swap.out 2>&1 &
XXXX running 2006-03-21 13:50
    
    time nice -n +19 featureBits mm8 chainPanTro1Link
    #	901276629 bases of 2567283971 (35.106%) in intersection
    time nice -n +19 featureBits panTro2 chainMm8Link
    #	901976621 bases of 2733948177 (32.992%) in intersection


#############################################################################
# UPDATED mm8.knownToVisiGene (2006-03-15 galt)
ssh hgwdev
knownToVisiGene mm8

#############################################################################
# BLASTZ SELF (DONE - 2006-03-20 - 2006-03-22 - Hiram)
#	using chain min score of 10,000 to cut down on volumn of data
    ssh pk
    mkdir /cluster/data/mm8/bed/blastzSelf.2006-03-20
    cd /cluster/data/mm8/bed
    ln -s blastzSelf.2006-03-20 blastz.mm8
    cd blastzSelf.2006-03-20

    cat << '_EOF_' > DEF
# mouse vs mouse
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7.x86_64
BLASTZ_H=2000
BLASTZ_M=200

# TARGET: Mouse Mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: Mouse Mm8
SEQ2_DIR=/scratch/hg/mm8/nib
SEQ2_LEN=/scratch/hg/mm8/chrom.sizes
SEQ2_CHUNK=10000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzSelf.2006-03-20
TMPDIR=/scratch/tmp
'_EOF_'
    #	<< happy emacs

    cd /cluster/data/mm8/bed/blastzSelf.2006-03-20
    time /cluster/home/hiram/kent/src/utils/doBlastzChainNet.pl -verbose=2 \
	-chainMinScore=10000 -chainLinearGap=medium -bigClusterHub=pk \
	`pwd`/DEF > blastz.out 2>&1 &
    #	broke during the load step due to doBlastz script changes,
    #	finished the load manually, then:
    time /cluster/home/hiram/kent/src/utils/doBlastzChainNet.pl -verbose=2 \
	-chainMinScore=10000 -chainLinearGap=medium -bigClusterHub=pk \
	-continue=download `pwd`/DEF > download.out 2>&1 &

    ssh kolossus
    cd /cluster/data/mm8/bed/blastzSelf.2006-03-20
    time HGDB_CONF=~/.hg.conf.read-only featureBits mm8 \
	chainSelfLink >fb.mm8.chainSelfLink 2>&1
    cat fb.mm8.chainSelfLink
    #	362483673 bases of 2567283971 (14.119%) in intersection

#############################################################################
# UPDATED mm8.knownToVisiGene (2006-04-05 galt)
ssh hgwdev
knownToVisiGene mm8

