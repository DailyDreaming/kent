#!/bin/csh -f # set emacs mode
exit; # don't actually run this like a script :)

# This file describes browser build for the mouse
# genome, February 2006, ncbi mouse_36 - Mm8
#
#	"$Id: makeMm8.doc,v 1.6 2006/02/24 23:33:53 hiram Exp $"
#
#######################################################################
# DOWNLOAD THE MOUSE SEQUENCE FROM NCBI (DONE - 2006-02-14 - Hiram)
#
#	Examine disk space issues, find some goodly amount of space
    ssh kkstore01
    mkdir /cluster/store9/mm8
    ln -s /cluster/store9/mm8 /cluster/data/mm8
    cd /cluster/data/mm8
    mkdir ncbi
    cd ncbi
    cp -p /cluster/data/mm7/ncbi/.wgetrc .
    WGETRC=`pwd`/.wgetrc
    export WGETRC
    wget --timestamping --force-directories --directory-prefix=. \
	--dont-remove-listing --recursive --level=4 --no-parent \
	--no-host-directories --cut-dirs=1 \
	ftp://ftp-private.ncbi.nih.gov/mouse_36
    #	Downloaded: 2,201,934,141 bytes in 50 files
    #	real    44m48.975s

XXXX - running 2006-02-14 11:26

#  Fixup the agp and seq_contig.md files to add chrM
#  No chrM or chrMT was delivered.  Copy from previous assembly
    ssh kkstore01
    cd /cluster/data/mm8/ncbi/chrfasta
    cp -p /cluster/data/mm7/ncbi/chrfasta/chrM.fa.gz .
    cd ../contigfasta
    cp -p /cluster/data/mm7/ncbi/contigfasta/chrM.fa.gz .
#	with a fixed up header line to be like all the others:
#	>lcl|chrM.fa gi|34538597|ref|NC_005089.1| Mus musculus mitochondrion, complete genome

    cd /cluster/data/mm8
    zcat ncbi/allrefcontig.chr.agp.gz > allrefcontig.chr.agp
    echo -e "chrM\t1\t16299\t1\tF\tAY172335.1\t1\t16299\t+" >> \
	allrefcontig.chr.agp
    gzip allrefcontig.chr.agp
    zcat ncbi/allcontig.agp.gz > allcontig.agp
    echo -e "NC_005089\t1\t16299\t1\tF\tAY172335\t\t1\t16299\t+" >> \
	allcontig.agp
    gzip allcontig.agp
    zcat ncbi/seq_contig.md.gz | egrep -v "Celera|129_substrain" \
	| sed -e "238i\
10090\tM\t0\t0\t+\tstart\t-1\tCONTIG\tC57BL/6J\t10\n\
10090\tM\t1\t16299\t+\tNC_005089\tGI:34538597\tCONTIG\tC57BL/6J\tna\n\
10090\tM\t16299\t16299\t+\tend\t-2\tCONTIG\tC57BL/6J\t10" > seq_contig.md
    #	(curiously, this sed command would not work on hgwdev,
    #	only when logged into kkstore01 ?)
    #	The line number 238 was found by checking the contents of
    #	ncbi/seq_contig.md.gz (after the egrep filter) and it was
    #	the line starting with:
    #	10090   Un|NT_039877    1       35798
    #	Wanted this chrM information before that line.
    #   summarize sequence counts

    mkdir faCounts
    time faCount ncbi/chrfasta/chr*.fa.gz > faCounts/chrfasta.faCount 2>&1 &
    #	about 1.5 minutes
    time faCount ncbi/contigfasta/chr*.fa.gz > \
	faCounts/contigfasta.faCount 2>&1 &
    #	about 3 minutes
    time zcat ncbi/chrfasta/chr*.fa.gz | grep "^>" > \
	faCounts/chrfasta.headers 2>&1 &
    time zcat ncbi/contigfasta/chr*.fa.gz | grep "^>" > \
	faCounts/contigfasta.headers 2>&1 &
    #	about 2 minutes each for the above two zcat/greps

#############################################################################
#  BREAK UP SEQUENCE INTO 5 MB CHUNKS at NON-BRIDGED CONTIGS
#			(DONE - 2006-02-14 - Hiram)
    ssh kkstore01
    cd /cluster/data/mm8
    for F in ncbi/chrfasta/chr*.fa.gz
    do
	CHR=`basename ${F} | sed -e "s/.fa.gz//; s/chr//"`
	echo ${CHR} ${F}
	mkdir -p "${CHR}"
	zcat allrefcontig.chr.agp.gz | \
	    perl -we "while(<>){if (/^chr${CHR}\t/) {print;}}" > \
		${CHR}/chr${CHR}.agp
	zcat ncbi/chrfasta/chr${CHR}.fa.gz | \
	    perl -wpe 's/^>lcl\|(chr\w+)\.fa.*/>$1/' | \
		splitFaIntoContigs ${CHR}/chr${CHR}.agp \
		    stdin /cluster/data/mm8 -nSize=5000000
    done
    #	The above loop takes about 5 minutes

#############################################################################
# CREATE CHROM-LEVEL AGP AND FASTA FOR _RANDOMS (DONE 2006-02-14 - Hiram)
    ssh kkstore01
    mkdir /cluster/data/mm8/jkStuff
    cd /cluster/data/mm8
    mkdir Un tmp
    cp -p /cluster/data/mm7/jkStuff/ncbiFixAgp ./jkStuff
    zcat allrefcontig.chr.agp.gz | ./jkStuff/ncbiFixAgp /dev/stdin > \
	allrefcontig.chr.ordered.agp
    #	Set the appropriate release number here, this one is 35
    #	Fetch the script from the previous assembly
    sed -e "s/buildNum = 35/buildNum = 36/" \
	/cluster/data/mm7/jkStuff/ncbiToRandomAgps > \
	    jkStuff/ncbiToRandomAgps
    chmod +x jkStuff/ncbiToRandomAgps
    #	NOTE ! * ! This mm8 contig.idmap now includes the celera assembly
    #	Filter that out for use here.
    #	There were two broken lines that began _36 - they were removed
    #	after I reported them and the contig.idmap.gz file here was
    #	updated later.
    zcat ncbi/contig.idmap.gz | grep ref_strain | grep -v "^_36" \
	| ./jkStuff/ncbiToRandomAgps seq_contig.md \
		allrefcontig.chr.ordered.agp \
                        /dev/stdin . 2> dbg
    for C in ? ??
    do
	if [ -s ${C}/chr${C}_random.ctg.agp ]; then
	    echo "building ${C}/chr${C}_random.fa"
	    rm -f ./tmp.fa
	    zcat ncbi/contigfasta/chr${C}.fa.gz | \
		perl -wpe 's/^>lcl\|(Mm\w+)\s+.*$/>$1/' > ./tmp.fa
	    agpToFa -verbose=2 -simpleMulti \
		${C}/chr${C}_random.ctg.agp chr${C}_random \
		    ${C}/chr${C}_random.fa ./tmp.fa
	    rm -f ./tmp.fa
	fi
    done > tmp/agpToFa.out 2>&1
    #	the above loop takes about 3 minutes, examine the tmp/agpToFa.out
    #	record for any errors

    #	We need the lift information from these random.ctg.agp files
    cp -p /cluster/data/mm7/jkStuff/agpToLift.pl ./jkStuff
    for AGP in ?/*_random.ctg.agp ??/*_random.ctg.agp
do
    CHR=`dirname ${AGP}`
    echo ${CHR}
    mkdir -p ${CHR}/lift
    ./jkStuff/agpToLift.pl ${AGP} > ${CHR}/lift/ctg_random.lft
done
    # Clean these up to avoid confusion later... they're easily rebuilt
    #   with the ncbiToRandomAgps script above
    rm ?/*_random.ctg.agp ??/*_random.ctg.agp
    gzip seq_contig.md allrefcontig.chr.ordered.agp

#############################################################################
# BREAK UP _RANDOMS INTO 5 MB CHUNKS AT NON-BRIDGED CONTIGS
#					(DONE 2006-02-14 - Hiram)
    ssh kkstore01
    cd /cluster/data/mm8
    for C in ? ??
    do
	if [ -s ${C}/chr${C}_random.fa ]; then
	    splitFaIntoContigs  -nSize=5000000 ${C}/chr${C}_random.agp \
		${C}/chr${C}_random.fa .
	    mkdir -p ${C}/lift
	    rm -f ${C}/lift/rOut.lst ${C}/lift/random.lft ${C}/lift/random.lst
	    mv ${C}_random/lift/oOut.lst ${C}/lift/rOut.lst
	    mv ${C}_random/lift/ordered.lft ${C}/lift/random.lft
	    mv ${C}_random/lift/ordered.lst ${C}/lift/random.lst
	    rmdir ${C}_random/lift
	    rm ${C}_random/chr${C}_random.agp ${C}_random/chr${C}_random.fa
	    rm -rf ${C}/chr${C}_random_*
	    mv ${C}_random/chr${C}_random_* ${C}
	    rmdir ${C}_random
	fi
    done > tmp/split.out 2>&1
    #	the above loop takes less than a minute
    #	scan the tmp/split.out file for possible errors

#############################################################################
# MAKE LIFTALL.LFT (DONE - 2006-02-14 - Hiram)
    ssh kkstore01
    cd /cluster/data/mm8
    cat ?/lift/*.lft ??/lift/*.lft > jkStuff/liftAll.lft

#############################################################################
# CREATING DATABASE (DONE - 2006-02-14 - Hiram)
    ssh kkstore01
    cd /cluster/data/mm8
    faToTwoBit ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa \
	mm8.2bit
    twoBitInfo mm8.2bit stdout | sort -rn +1 > chrom.sizes
    grep -v random chrom.sizes | cut -f1 | sed -e "s/chr//" > chrom.lst
    twoBitInfo mm8.2bit stdout |
        awk '{printf "%s\t%s\t/gbdb/mm8/mm8.2bit\n", $1,$2}' > chromInfo.tab

    ssh hgwdev
    cd /cluster/data/mm8
    hgsql -e "create database mm8;" mysql
    #	Make sure we have enough room (eventually ~ 70Gb) for mysql tables:
    df -h | grep mysql
    #	/dev/sda1             472G  225G  223G  51% /var/lib/mysql2
    #	/dev/sdc1             1.8T  1.5T  190G  89% /var/lib/mysql

    # CREATING GRP TABLE FOR TRACK GROUPING (DONE - 2006-02-14 - Hiram)
    #   Use any of the newest databases to ensure that the organization
    #   of the grp table is up to date
    ssh hgwdev
    hgsql mm8 -e "create table grp (PRIMARY KEY(NAME)) select * from hg18.grp"
    hgsql mm8 < $HOME/kent/src/hg/lib/chromInfo.sql
    hgsql mm8 -e 'load data local infile "chromInfo.tab" into table chromInfo;'

    # Enter mm8 into dbDb and defaultDb so test browser knows about it:
    hgsql -e 'INSERT INTO dbDb (name, description, nibPath, organism, \
        defaultPos, active, orderKey, genome, scientificName, \
        htmlPath, hgNearOk, hgPbOk, sourceName) \
        VALUES("mm8", "Feb 2006", "/gbdb/mm8", "Mouse", \
        "chr6:28912411-28925620", 1, 22, "Mouse", \
        "Mus musculus", "/gbdb/mm8/html/description.html", 0, 0, \
        "NCBI Build 36");' -h localhost hgcentraltest
    #	Do *NOT* set default genome on genome-test until ready for release
    # hgsql hgcentraltest \
    #	-e 'update defaultDb set name="mm8" where genome="Mouse";'
    # start a new entry in the trackDb hierarchy
    cd $HOME/kent/src/hg/makeDb/trackDb/mouse
    mkdir mm8
    cvs add mm8
    cd mm8
    cp ../mm7/description.html .
    vi description.html - fixup text for this assembly
    cvs add description.html
    cvs commit
    cd ../..
    vi makefile - add mm8 to the list
    mkdir /cluster/data/mm8/html
    mkdir /gbdb/mm8
    ln -s /cluster/data/mm8/html /gbdb/mm8/html
    ln -s /cluster/data/mm8/mm8.2bit /gbdb/mm8/mm8.2bit
    cp -p mouse/mm8/description.html /gbdb/mm8/html
    make DBS=mm8

#############################################################################
#  GOLD GAP tracks (DONE - 2006-02-14 - Hiram)
    ssh hgwdev
    cd /cluster/data/mm8
    #	make sure these tmp contig agp files are gone, easily generated
    #	as above with jkStuff/ncbiToRandomAgps
    mkdir ffa
    zcat ncbi/sequence.inf.gz > ffa/sequence.inf
    hgGoldGapGl -chromLst=chrom.lst mm8 /cluster/data/mm8 .
    featureBits mm8 gold
    #	2567283971 bases of 2567283971 (100.000%) in intersection
    featureBits mm7 gold
    #	2583394090 bases of 2583394090 (100.000%) in intersection
    featureBits mm6 gold
    #	2597150411 bases of 2597150411 (100.000%) in intersection
    featureBits mm5 gold
    #	2615483787 bases of 2615483787 (100.000%) in intersection
    featureBits mm4 gold
    #	2627444668 bases of 2627444668 (100.000%) in intersection

    featureBits mm8 gap
    #	97171117 bases of 2567283971 (3.785%) in intersection
    featureBits mm7 gap
    #	264323239 bases of 2583394090 (10.232%) in intersection
    featureBits mm6 gap
    #	482483041 bases of 2597150411 (18.577%) in intersection
    featureBits mm5 gap
    #	549468286 bases of 2615483787 (21.008%) in intersection
    featureBits mm4 gap
    #	325167539 bases of 2627444668 (12.376%) in intersection

#############################################################################
# GC5BASE (DONE - 2006-02-14 - Hiram)
    ssh kkstore01
    mkdir -p /cluster/data/mm8/bed/gc5Base
    cd /cluster/data/mm8/bed/gc5Base
    time hgGcPercent -wigOut -doGaps -file=stdout -win=5 mm8 \
        /cluster/data/mm8 | wigEncode stdin gc5Base.wig gc5Base.wib

    #       Calculating gcPercent with window size 5
    #       Using twoBit: /cluster/data/mm8/mm7.2bit
    #       File stdout created
    #	Converted stdin, upper limit 100.00, lower limit 0.00

    #	runs for about 14 minutes

    #	load database
    ssh hgwdev
    cd /cluster/data/mm8/bed/gc5Base
    mkdir /gbdb/mm8/wib
    ln -s `pwd`/gc5Base.wib /gbdb/mm8/wib
    time hgLoadWiggle -pathPrefix=/gbdb/mm8/wib mm8 gc5Base gc5Base.wig
    #	29 second load time

    #	verify index is correct:
    hgsql mm8 -e "show index from gc5Base;"
    #	should see good numbers in Cardinality column

#############################################################################
#  DISTRIBUTE SEQUENCE TO INTERMEDIATE SERVERS FOR KLUSTER RUNS
#	(DONE - 2006-02-14 - Hiram)
    ssh kkstore01
    cd /cluster/data/mm8

    # break up into 500,000 sized chunks for repeat masker runs
TOP=`pwd`
export TOP
for CTG_DIR in ?/chr?_[0-9]* ??/chr??_[0-9]* ?/chr?_random_[0-9]* \
        ??/chr??_random_[0-9]*
do
    ctg=`basename ${CTG_DIR}`
    cd ${CTG_DIR}
    faSplit size ${ctg}.fa 500000 ${ctg}_ -lift=${ctg}.lft -maxN=500000
    cd ${TOP}
done > tmp/ctg_split.out 2>&1
    #	about 3 minutes, check the tmp/ctg_split.out for anything unusual

    #	make a list of the contigs
TOP=`pwd`
export TOP
for CTG_DIR in ?/chr?_[0-9]* ??/chr??_[0-9]* ?/chr?_random_[0-9]* \
        ??/chr??_random_[0-9]*
do
    ctg=`basename ${CTG_DIR}`
    cd ${CTG_DIR}
    ls ${ctg}_* | while read F
    do
        echo ${CTG_DIR}/${F}
    done
    cd ${TOP}
done > contig500K.lst
    #	count 'em
    wc -l contig500K.lst
    #	5772   contig500K.lst

    mkdir /cluster/bluearc/scratch/hg/mm8
    mkdir /cluster/bluearc/scratch/hg/mm8/contigs
    rsync -a --progress --files-from=contig500K.lst . \
        /cluster/bluearc/scratch/hg/mm8/contigs/

    #	verify the contig copy above functioned OK
    cd /cluster/bluearc/scratch/hg/mm8
    find ./contigs -type f | wc -l
    #	 5772

#############################################################################
# SIMPLE REPEAT TRACK (DONE - 2006-02-14 Hiram)
    # TRF can be run in parallel with RepeatMasker
    #   since it doesn't require masked input sequence.
    ssh kkr1u00
    mkdir /iscratch/i/mm8
    cd /iscratch/i/mm8
    mkdir fa
    cd fa
    cp -p /cluster/data/mm8/?/*.fa .
    cp -p /cluster/data/mm8/??/*.fa .

    for R in 2 3 4 5 6 7 8
    do
	rsync -a --progress /iscratch/i/mm8/ kkr${R}u00:/iscratch/i/mm8/
    done

    ssh kki 
    mkdir /cluster/data/mm8/bed/simpleRepeat
    cd /cluster/data/mm8/bed/simpleRepeat

    mkdir trf
    cat << '_EOF_' > runTrf
#!/bin/csh -fe 
#
set path1 = /iscratch/i/mm8/fa/$1
set inputFN = $1  
set outpath = $2
set outputFN = $2:t
mkdir -p /scratch/tmp/$outputFN
cp $path1 /scratch/tmp/$outputFN
pushd .
cd /scratch/tmp/$outputFN
/cluster/bin/i386/trfBig -trf=/cluster/bin/i386/trf $inputFN /dev/null -bedAt=$outputFN -tempDir=/scratch/tmp
popd
rm -f $outpath
cp -p /scratch/tmp/$outputFN/$outputFN $outpath
rm -fr /scratch/tmp/$outputFN/*
rmdir --ignore-fail-on-non-empty /scratch/tmp/$outputFN
'_EOF_'
    # happy emacs
    chmod +x runTrf

    cat << '_EOF_' > template
#LOOP
./runTrf $(path1) {check out line trf/$(root1).bed}
#ENDLOOP
'_EOF_'
    # << keep emacs coloring happy

    ls -1S /iscratch/i/mm8/fa > genome.lst
    gensub2 genome.lst single template jobList
    para create jobList
    para try ... check ... push ... etc
    para time
# Completed: 34 of 34 jobs
# CPU time in finished jobs:      14385s     239.75m     4.00h    0.17d  0.000 y
# IO & Wait Time:                   794s      13.24m     0.22h    0.01d  0.000 y
# Average job time:                 446s       7.44m     0.12h    0.01d
# Longest finished job:            1437s      23.95m     0.40h    0.02d
# Submission to last job:          1685s      28.08m     0.47h    0.02d

    # Load into the database
    ssh hgwdev
    cd /cluster/data/mm8/bed/simpleRepeat
    cat trf/chr*.bed > simpleRepeat.bed
    hgLoadBed -strict mm8 simpleRepeat simpleRepeat.bed \
      -sqlTable=$HOME/src/hg/lib/simpleRepeat.sql
    #	Loaded 1141941 elements of size 16

    featureBits mm8 simpleRepeat
    # 77752377 bases of 2567283971 (3.029%) in intersection
    featureBits mm7 simpleRepeat
    # 77021175 bases of 2583394090 (2.981%) in intersection
    featureBits mm6 simpleRepeat
    # 83220723 bases of 2597150411 (3.204%) in intersection
    featureBits mm5 simpleRepeat
    # 81414259 bases of 2615483787 (3.113%) in intersection
    featureBits mm4 simpleRepeat
    # 82600648 bases of 2627444668 (3.144%) in intersection
    featureBits mm3 simpleRepeat
    # 75457193 bases of 2505900260 (3.011%) in intersection

#############################################################################
# PROCESS SIMPLE REPEATS INTO MASK (DONE - 2006-02-14 - Hiram)

    # After the simpleRepeats track has been built, make a filtered version
    # of the trf output: keep trf's with period <= 12:
    ssh kkstore01
    cd /cluster/data/mm8/bed/simpleRepeat
    mkdir trfMask
    for F in trf/chr*.bed
    do
	echo "${F} -> ${F/trf\//}"
	awk '{if ($5 <= 12) print;}' ${F} > trfMask/${F/trf\//}
    done

#############################################################################
# REPEATMASKER RUN (after contigs have been distributed to bluearc FS)
#	(DONE - 2006-02-14 - 2006-02-15 - Hiram)
#	Record RM version used:
    cat /cluster/bluearc/RepeatMasker060120/Libraries/version
#   RM database version 20060120
    ssh pk

    #- Make the run directory and job list:
    mkdir /cluster/data/mm8/RMRun
    cd /cluster/data/mm8/RMRun
    cat << '_EOF_' > ../jkStuff/RMMouse
#!/bin/csh -fe
set C = $1:h
set F = $1:t
set R = $F:r
cd /cluster/data/mm8/$C
/bin/mkdir -p /scratch/tmp/mm8/$R
/bin/cp /cluster/bluearc/scratch/hg/mm8/contigs/$1 /scratch/tmp/mm8/$R
pushd /scratch/tmp/mm8/$R
/cluster/bluearc/RepeatMasker060120/RepeatMasker -ali -s -species mus $F
popd
/bin/cp /scratch/tmp/mm8/$R/$R.fa.out ./
if (-e /scratch/tmp/mm8/$R/$R.fa.align) /bin/cp /scratch/tmp/mm8/$R/$R.fa.align ./
if (-e /scratch/tmp/mm8/$R/$R.fa.tbl) /bin/cp /scratch/tmp/mm8/$R/$R.fa.tbl ./
if (-e /scratch/tmp/mm8/$R/$R.fa.cat) /bin/cp /scratch/tmp/mm8/$R/$R.fa.cat ./
/bin/rm -fr /scratch/tmp/mm8/$R/*
/bin/rmdir --ignore-fail-on-non-empty /scratch/tmp/mm8/$R
/bin/rmdir --ignore-fail-on-non-empty /scratch/tmp/mm8
'_EOF_'
    #	happy emacs
    chmod +x ../jkStuff/RMMouse

    cat << '_EOF_' > template
#LOOP
../jkStuff/RMMouse $(path1) {check out line ../$(dir1)/$(root1).fa.out}
#ENDLOOP
'_EOF_'
    #	happy emacs

    gensub2 ../contig500K.lst single template jobList
    para create jobList
    wc -l jobList
    #	5772 jobList
    para try ... check ... push ... etc
XXX - running - 2006-02-14 15:40

# Completed: 6172 of 6172 jobs
# CPU time in finished jobs:   26381042s  439684.03m  7328.07h  305.34d  0.837 y
# IO & Wait Time:                 46088s     768.13m    12.80h    0.53d  0.001 y
# Average job time:                4282s      71.36m     1.19h    0.05d
# Longest finished job:            6370s     106.17m     1.77h    0.07d
# Submission to last job:        127318s    2121.97m    35.37h    1.47d

    #- Lift up the split-contig .out's to contig-level .out's
    ssh kkstore01
    cd /cluster/data/mm8
    for D in ?/chr?_[0-9]* ??/chr??_[0-9]* ?/chr?_random_[0-9]* \
	??/chr??_random_[0-9]*
    do
	CONTIG=`basename ${D}`
	liftUp ${D}/${CONTIG}.fa.out ${D}/${CONTIG}.lft error \
		${D}/${CONTIG}_[0-9]*.fa.out
    done > tmp/RM.lift.outs 2>&1
    #	real    2m32.275s
    #	scan tmp/RM.lift.outs for unusual errors or difficulties

    cat << '_EOF_' > jkStuff/liftRM_out_to_chr.sh
#!/bin/sh
for C in ? ??
do
    echo "lifting ${C}"
    cd ${C}
    if [ -s lift/ordered.lft ]; then
	liftUp chr${C}.fa.out lift/ordered.lft error `cat lift/oOut.lst`
    else
	echo "WARNING: Can not find ${C}/lift/ordered.lft"
    fi
    if [ -s lift/random.lft ]; then
	liftUp chr${C}_random.fa.out lift/random.lft error `cat lift/rOut.lst`
    fi
    cd ..
done
'_EOF_'
    # happy emacs
    chmod +x jkStuff/liftRM_out_to_chr.sh
    ./jkStuff/liftRM_out_to_chr.sh > tmp/liftRM_out_to_chr.out 2>&1
    #	real    0m24.873s
    #	scan the results tmp/liftRM_out_to_chr.out
    #	there is a single: WARNING: Can not find Un/lift/ordered.lft
    #	which is OK
    #	List the final .out files, nothing should be size 0:
    ls -og */*.fa.out | sort -k3,3nr

    #- Load the .out files into the database with:
    ssh hgwdev
    cd /cluster/data/mm8
    hgLoadOut mm8 ?/chr?.fa.out ??/chr??.fa.out ?/chr?_random.fa.out \
	??/chr??_random.fa.out > tmp/hgLoadOut.out 2>&1
    #	about 7 minutes, there are always a few of these errors:

    #	verify everything seems normal compared with previous builds

    featureBits mm8 rmsk
    #	1087735582 bases of 2567283971 (42.369%) in intersection
    featureBits mm7 rmsk
    #	1092611581 bases of 2583394090 (42.294%) in intersection
    featureBits mm6 rmsk
    #	1110222842 bases of 2597150411 (42.748%) in intersection
    featureBits mm5 rmsk
    #	1137310280 bases of 2615483787 (43.484%) in intersection
    featureBits mm4 rmsk
    #	1130883581 bases of 2627444668 (43.041%) in intersection
    featureBits mm3 rmsk
    #	1080265553 bases of 2505900260 (43.109%) in intersection

#############################################################################
# PROCESS REPEAT MASKER AND SIMPLE REPEATS INTO MASKED SEQUENCE
#		(DONE - 2006-02-16 - Hiram)
    ssh kkstore01
    cd /cluster/data/mm8
    time for CHR in ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa
    do
	FA=${CHR#*\/}
	C=${FA%.fa}
	echo -n "repeat masking ${C} ... "
	/cluster/bin/i386/maskOutFa -soft ${CHR} ${CHR}.out ${CHR}
	echo -n "adding simpleRepeats ... "
	/cluster/bin/i386/maskOutFa -softAdd ${CHR} \
		bed/simpleRepeat/trfMask/${C}.bed ${CHR}
	echo "done - ${CHR}"
    done > tmp/addRM_and_Simple.out 2>&1
    #	about 4 minutes

    # you will note the usual warnings about troublesome coordinates
    # in the repeat masker outputs - even more than when they were lifted.

    #	and make the hard masked sequences from these soft masked sequences
    time for CHR in ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa
    do
	echo "maskOutFa ${CHR} hard ${CHR}.masked"
	/cluster/bin/i386/maskOutFa ${CHR} hard ${CHR}.masked
    done > tmp/hardMask.out 2>&1
    #	about 2 minutes

    #	rebuild the nib file
    time faToTwoBit ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa \
	mm8Soft.2bit
    #	2 minutes
    #	verify the sequence is still the same size as before:
    twoBitInfo mm8Soft.2bit stdout | sort -rn +1 | sum -r
    #	20673     1
    sum -r chrom.sizes
    #	20673     1
    #	Let's see how much is masked:
    time twoBitToFa mm8Soft.2bit stdout | faSize stdin
    #	2664455088 bases (97171400 N's 2567283688 real 1477933003 upper
    #	1089350685 lower) in 34 sequences in 1 files
    # and bc says:
    #	1089350685/2664455088 = .408845
    #	1089350685/2567283688 = .424320

    #	replace the former unmasked 2bit file with this new one:
    rm mm8.2bit; mv mm8Soft.2bit mm8.2bit
    #	check the browser, make sure it is functioning OK

    #	Generate fasta file for random contigs
    #	THIS IS OPTIONAL STUFF, not really needed
    cp -p /cluster/data/mm7/jkStuff/lft2BitToFa.pl ./jkStuff

    mkdir randomContigs
    for L in ?/lift/ctg_random.lft ??/lift/ctg_random.lft
do
    D=${L/\/lift*}
    echo $L $D
    ./jkStuff/lft2BitToFa.pl mm8.2bit ${L} \
	> randomContigs/chr${D}_random.ctg.fa
done
    #
    #	Verify these *.ctg.fa files have the same bases as the ordinary
    #	chr*_random.fa files:
    faSize ?/chr?_random.fa ??/chr??_random.fa
    # 20361100 bases (3250000 N's 17111100 real 7094373 upper 10016727 lower)
    #	in 12 sequences in 12 files

    faSize randomContigs/*.ctg.fa
    # 17111100 bases (0 N's 17111100 real 7094373 upper 10016727 lower)
    #	in 77 sequences in 12 files
    #	Note the number of real, upper and lower bases are the same

    #	This random contig business isn't actually needed
    #	Create a 2bit file with the full chrom sequences and these
    #	random contigs for use in blastz:
    # faToTwoBit ?/chr?.fa ??/chr??.fa randomContigs/chr*.ctg.fa \
    #	    mm8Chroms_RandomContigs.2bit

    #	Copy to bluearc unit for kluster runs
    # cp -p mm8.2bit /cluster/bluearc/mm8
    # cp -p mm8Chroms_RandomContigs.2bit /cluster/bluearc/mm8
    #	And the lift file to go with it
    # cat ?/lift/ctg_random.lft ??/lift/ctg_random.lft \
    #	    > jkStuff/Chroms_RandomContigs.lft
    #	cp -p jkStuff/Chroms_RandomContigs.lft /cluster/bluearc/mm8

    #	create full chrom nibs for blastz SEQ1 target with Lin Spec Repeats
    mkdir nib
    for FA in ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa
do
    B=${FA/*\/}
    B=${B/.fa/}
    echo faToNib -softMask ${FA} nib/${B}.nib
    rm -f nib/${B}.nib
    faToNib -softMask ${FA} nib/${B}.nib
done
 
    mkdir /cluster/bluearc/scratch/hg/mm8/nib
    cp -p nib/*.nib /cluster/bluearc/scratch/hg/mm8/nib
    cp -p chrom.sizes /cluster/bluearc/scratch/hg/mm8
    cp -p mm8.2bit /cluster/bluearc/scratch/hg/mm8
    #	The contigs over there are no longer needed
    rm -fr /cluster/bluearc/scratch/hg/mm8/contigs
    #	after lineage specific repeats are created below, this business
    #	can be pushed to the kluster kk nodes and over to the Iservers

#############################################################################
# PREPARE "bigZips" files for public release
#	(DONE 2006-02-16 - Hiram)
    ssh kkstore01
    mkdir /cluster/data/mm8/downloads
    mkdir /cluster/data/mm8/downloads/bigZips
    mkdir /cluster/data/mm8/downloads/chromosomes
    cd /cluster/data/mm8/downloads/chromosomes
    gzip chr*.fa
    #	12 minutes
    #	copy previous release README.txt
    scp hgwdev:/usr/local/apache/htdocs/goldenPath/mm8/chromosomes/README.txt .
    #	edit it to bring it up to date
    cd /cluster/data/mm8/downloads/bigZips
    #	copy previous release README.txt
    scp hgwdev:/usr/local/apache/htdocs/goldenPath/mm8/bigZips/README.txt .
    # edit README.txt to indicate proper version of sequence and
    #	RepeatMasker
    cd /cluster/data/mm8
    cp -p ?/chr*.fa ??/chr*.fa downloads/chromosomes
    tar cvzf downloads/bigZips/chromAgp.tar.gz ?/chr*.agp ??/chr*.agp
    tar cvzf downloads/bigZips/chromFa.tar.gz ?/chr*.fa ??/chr*.fa
    #	12 minutes
    tar cvzf downloads/bigZips/chromFaMasked.tar.gz ?/chr*.fa.masked \
	??/chr*.fa.masked
    tar cvzf downloads/bigZips/chromOut.tar.gz ?/chr*.fa.out ??/chr*.fa.out
    cd /cluster/data/mm8/bed/simpleRepeat
    tar cvzf ../../downloads/bigZips/chromTrf.tar.gz ./trfMask

    # get GenBank native mRNAs and refGene (DONE 2006-02-23)
    #	after the genbank run was complete
    ssh hgwdev
    cd /cluster/data/genbank
    time ./bin/i386/gbGetSeqs -db=mm8 -native GenBank mrna \
	/cluster/data/mm8/downloads/bigZips/mrna.fa
    #	2 minutes
    cd /cluster/data/mm8/downloads/bigZips
    gzip mrna.fa
    cd /cluster/data/mm8/downloads/bigZips
    for I in 1000 2000 5000
    do
	echo "upstream${I} working ... "
	featureBits mm8 refGene:upstream:${I} -fa=stdout \
		| gzip -c > upstream${I}.fa.gz
	echo "upstream${I} done"
    done
    #	real    11m25.493s

    ssh kkstore01
    cd /cluster/data/mm8/downloads/bigZips
    cp -p ../../mm8.2bit .
    md5sum *.gz *.2bit README.txt > md5sum.txt

    ssh hgwdev
    mkdir -p /usr/local/apache/htdocs/goldenPath/mm8
    ln -s /cluster/data/mm8/downloads/bigZips \
	/usr/local/apache/htdocs/goldenPath/mm8/bigZips
    ln -s /cluster/data/mm8/downloads/chromosomes \
	/usr/local/apache/htdocs/goldenPath/mm8/chromosomes

#############################################################################
# PREPARE LINEAGE SPECIFIC REPEAT FILES FOR BLASTZ (DONE - 2006-02-16 - Hiram)

    ssh kkr1u00
    mkdir /iscratch/i/mm8/rmsk
    cd /cluster/data/mm8
    cp -p */chr*.fa.out /iscratch/i/mm8/rmsk
    cd /iscratch/i/mm8
    for R in 2 3 4 5 6 7 8
    do
	rsync -a --progress /iscratch/i/mm8/ kkr${R}u00:/iscratch/i/mm8/
    done
    cd rmsk

    ssh kki
    mkdir /cluster/data/mm8/linSpecRep
    cd /cluster/data/mm8/linSpecRep
    ls -1S /iscratch/i/mm8/rmsk > fa.list
    
    cat << '_EOF_' > mkLSR.csh
#!/bin/csh -fe
pushd /iscratch/i/mm8/rmsk
/cluster/bluearc/RepeatMasker060120/DateRepeats \
	    $1 -query mouse -comp human -comp rat -comp dog -comp cow \
		-comp rabbit
popd
/bin/cp -p /iscratch/i/mm8/rmsk/$1_homo-sapiens_rattus_canis-familiaris_bos-taurus_oryctolagus-cuniculus .
'_EOF_'
    #	happy emacs
    chmod +x mkLSR.csh

    cat << '_EOF_' > template
#LOOP
./mkLSR.csh $(path1) {check out line+ $(path1)_homo-sapiens_rattus_canis-familiaris_bos-taurus_oryctolagus-cuniculus}
#ENDLOOP
'_EOF_'
    #	happy emacs

    gensub2 fa.list single template jobList
    para try ... check ... push ... etc...
    para time
# Completed: 34 of 34 jobs
# CPU time in finished jobs:       1338s      22.29m     0.37h    0.02d  0.000 y
# IO & Wait Time:                   112s       1.87m     0.03h    0.00d  0.000 y
# Average job time:                  43s       0.71m     0.01h    0.00d
# Longest finished job:              92s       1.53m     0.03h    0.00d
# Submission to last job:           181s       3.02m     0.05h    0.00d

    ssh kkstore01
    cd /cluster/data/mm8/linSpecRep
    mkdir notInHuman notInRat notInDog notInCow notInRabbit
    for F in chr*.out_homo-sapiens*
    do
	B=${F/.fa.out*/}
	echo $B 
        /cluster/bin/scripts/extractRepeats 1 ${F} > \
		notInHuman/${B}.out.spec
        /cluster/bin/scripts/extractRepeats 2 ${F} > \
		notInRat/${B}.out.spec
        /cluster/bin/scripts/extractRepeats 3 ${F} > \
		notInDog/${B}.out.spec
        /cluster/bin/scripts/extractRepeats 4 ${F} > \
		notInCow/${B}.out.spec
        /cluster/bin/scripts/extractRepeats 4 ${F} > \
		notInRabbit/${B}.out.spec
    done
    #	the notInHuman, notInDog, notInCow and notInRabit ended up being
    #	identical.  Only the notInRat was different than them
    #	To check identical
    find . -name "*.out.spec" | \
	while read FN; do echo `cat ${FN} | sum -r` ${FN}; done \
	| sort -k1,1n | sort -t"/" -k3,3
    #	Copy to scratch/hg for use in kluster runs
    mkdir /cluster/bluearc/scratch/hg/mm8/linSpecRep
    mkdir /cluster/bluearc/scratch/hg/mm8/linSpecRep/notInRat
    mkdir /cluster/bluearc/scratch/hg/mm8/linSpecRep/notInOthers
    cp -p notInHuman/* /cluster/bluearc/scratch/hg/mm8/linSpecRep/notInOthers
    cp -p notInRat/* /cluster/bluearc/scratch/hg/mm8/linSpecRep/notInRat
    #	Request this scratch/hg/mm8 directory push to the kk nodes

    #	and we can do the Iservers simply:
    ssh kkr1u00
    cd /iscratch/i/mm8
    #	no longer need these two directories
    rm -fr fa rmsk
    rsync -a --progress /cluster/bluearc/scratch/hg/mm8/ .
    for R in 2 3 4 5 6 7 8
    do
	rsync -a --progress /iscratch/i/mm8/ kkr${R}u00:/iscratch/i/mm8/
    done

############################################################################
#  BLATSERVERS ENTRY (DONE - 2006-02-16 - Hiram)
#	After getting a blat server assigned by the Blat Server Gods,
    ssh hgwdev

    hgsql -e 'INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
	VALUES ("mm8", "blat17", "17784", "1", "0"); \
	INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
	VALUES ("mm8", "blat17", "17785", "0", "1");' \
	    hgcentraltest
    #	test it with some sequence

#########################################################################
# CPGISLANDS (DONE - 2006-02-16 - Hiram)
    ssh hgwdev
    mkdir /cluster/data/mm8/bed/cpgIsland
    cd /cluster/data/mm8/bed/cpgIsland

    # Build software from Asif Chinwalla (achinwal@watson.wustl.edu)
    cvs co hg3rdParty/cpgIslands
    cd hg3rdParty/cpgIslands
    make
    #	gcc readseq.c cpg_lh.c -o cpglh.exe
    cd ../..
    ln -s hg3rdParty/cpgIslands/cpglh.exe .
    
    # cpglh.exe requires hard-masked (N) .fa's.  
    # There may be warnings about "bad character" for IUPAC ambiguous 
    # characters like R, S, etc.  Ignore the warnings.  
    ssh kkstore01
    cd /cluster/data/mm8/bed/cpgIsland
    for F in ../../*/chr*.fa.masked
    do
	FA=${F/*\/}
	C=${FA/.fa.masked/}
	echo "./cpglh.exe ${FA} > ${C}.cpg"
	./cpglh.exe ${F} > ${C}.cpg
    done > cpglh.out 2>&1 &
    #	about 3 minutes 20 seconds

    #	Several chroms have 0 results:
    #	-rw-rw-r--  1     0 Feb 16 15:19 chr10_random.cpg
    #	-rw-rw-r--  1     0 Feb 16 15:20 chr15_random.cpg
    #	-rw-rw-r--  1     0 Feb 16 15:22 chr8_random.cpg
    #	-rw-rw-r--  1     0 Feb 16 15:22 chr9_random.cpg
    #	-rw-rw-r--  1     0 Feb 16 15:22 chrM.cpg
    #	-rw-rw-r--  1     0 Feb 16 15:22 chrX_random.cpg
    #	-rw-rw-r--  1     0 Feb 16 15:22 chrY.cpg

    # Transform cpglh output to bed +
    cat << '_EOF_' > filter.awk
{
$2 = $2 - 1;
width = $3 - $2;
printf("%s\t%d\t%s\t%s %s\t%s\t%s\t%0.0f\t%0.1f\t%s\t%s\n",
       $1, $2, $3, $5,$6, width,
       $6, width*$7*0.01, 100.0*2*$6/width, $7, $9);
}
'_EOF_'
    #	happy emacs
    awk -f filter.awk chr*.cpg | sort -k1,1 -k2,2n > cpgIsland.bed

    ssh hgwdev
    cd /cluster/data/mm8/bed/cpgIsland
    hgLoadBed -strict mm8 cpgIslandExt -tab -noBin \
      -sqlTable=$HOME/kent/src/hg/lib/cpgIslandExt.sql cpgIsland.bed
    #	Reading cpgIsland.bed
    #	Loaded 15963 elements of size 10
    featureBits mm8 cpgIslandExt
    #	10456823 bases of 2567283971 (0.407%) in intersection
    featureBits mm7 cpgIslandExt
    #	10439328 bases of 2583394090 (0.404%) in intersection
    featureBits mm6 cpgIslandExt
    #	10432360 bases of 2597150411 (0.402%) in intersection
    featureBits mm5 cpgIslandExt
    #	10422989 bases of 2615483787 (0.399%) in intersection
    featureBits mm4 cpgIsland
    #	11109692 bases of 2627444668 (0.423%) in intersection
    featureBits mm3 cpgIsland
    #	10102968 bases of 2505900260 (0.403%) in intersection

#########################################################################
# ANDY LAW CPGISSLANDS (DONE - 2006-02-16 - Hiram)
    # See notes in makeGalGal2.doc and makeCanFam2.doc
    ssh kkstore01
    mkdir /cluster/data/mm8/bed/cpgIslandGgfAndy
    cd /cluster/data/mm8/bed/cpgIslandGgfAndy

    #	Build the preProcGgfAndy program in
    #	kent/src/oneShot/preProcGgfAndy into your ~/bin/$MACHTYPE

    # Use masked sequence since this is a mammal...
    for F in ../../*/chr*.fa.masked
    do
	FA=${F/*\/}
	C=${FA/.fa.masked/}
	echo preproc and run on masked "${C} ${F}" 1>/dev/stderr
	~/bin/$MACHTYPE/preProcGgfAndy ${F} \
	| /cluster/home/angie/ggf-andy-cpg-island.pl \
	| perl -wpe 'chomp; ($s,$e,$cpg,$n,$c,$g1,$oE) = split("\t"); $s--;
                   $gc=$c+$g1;  $pCpG=(100.0 * 2 * $cpg / $n);
                   $pGc=(100.0 * $gc / $n);
                   $_="'${C}'\t$s\t$e\tCpG: $cpg\t$n\t$cpg\t$gc\t" .
                        "$pCpG\t$pGc\t$oE\n";'
    done | sort -k1,1 -k2,2n > cpgIslandGgfAndyMasked.bed

    # load into database:
    ssh hgwdev
    cd /cluster/data/mm8/bed/cpgIslandGgfAndy
    sed -e 's/cpgIslandExt/cpgIslandGgfAndyMasked/g' \
      $HOME/kent/src/hg/lib/cpgIslandExt.sql > cpgIslandGgfAndyMasked.sql
    hgLoadBed -strict mm8 cpgIslandGgfAndyMasked -tab -noBin \
      -sqlTable=cpgIslandGgfAndyMasked.sql cpgIslandGgfAndyMasked.bed
    #	Loaded 67442 elements of size 10
    featureBits mm8 cpgIslandExt
    #	10456823 bases of 2567283971 (0.407%) in intersection
    featureBits mm7 cpgIslandExt
    #	10439328 bases of 2583394090 (0.404%) in intersection
    featureBits mm8 cpgIslandGgfAndyMasked
    #	38850121 bases of 2567283971 (1.513%) in intersection
    featureBits mm7 cpgIslandGgfAndyMasked
    #	38774242 bases of 2583394090 (1.501%) in intersection
    wc -l ../cpgIsland/cpgIsland.bed *bed
    #	15963 ../cpgIsland/cpgIsland.bed
    #	67442 cpgIslandGgfAndyMasked.bed

#########################################################################
# BLASTZ HUMAN Hg18 (DONE - 2006-02-16 - 2006-02-18 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastzHg18.2006-02-16
    cd /cluster/data/mm8/bed
    ln -s blastzHg18.2006-02-16 blastz.hg18
    cd blastzHg18.2006-02-16
    #	Started this before the rsync to /scratch/hg/mm8/ had completed,
    #	hence the /cluster/bluearc/scratch/hg/mm8/ location is used
    #	here.

    cat << '_EOF_' > DEF
# mouse vs human
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/x86_64:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7.x86_64
BLASTZ_ABRIDGE_REPEATS=1

# TARGET: Mouse Mm8
SEQ1_DIR=/cluster/bluearc/scratch/hg/mm8/nib
SEQ1_SMSK=/cluster/bluearc/scratch/hg/mm8/linSpecRep/notInOthers
SEQ1_LEN=/cluster/bluearc/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY: Human Hg18 - single chunk big enough to run each chrom by itself
SEQ2_DIR=/scratch/hg/hg18/nib
SEQ2_SMSK=/scratch/hg/hg18/linSpecRep/notInMouse
SEQ2_LEN=/scratch/hg/hg18/chrom.sizes
SEQ2_CHUNK=300000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzHg18.2006-02-16
TMPDIR=/scratch/tmp
'_EOF_'
    # << happy emacs

    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    #	Started 2006-02-16 16:15
    #	failed due to pk node difficulties, finish the run.blastz
    #	manually
# Completed: 3724 of 3724 jobs
# CPU time in finished jobs:    5190293s   86504.89m  1441.75h   60.07d  0.165 y
# IO & Wait Time:                259150s    4319.16m    71.99h    3.00d  0.008 y
# Average job time:                1463s      24.39m     0.41h    0.02d
# Longest finished job:           10621s     177.02m     2.95h    0.12d
# Submission to last job:         74153s    1235.88m    20.60h    0.86d

    #	continuing
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-continue=cat `pwd`/DEF > cat.out 2>&1 &
    #	Done 2006-02-17 15:02

    #	Then to swap over to Hg18
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-swap -bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > swap.out 2>&1 &
    #	Started 2006-02-17 15:30

#########################################################################
# BLASTZ RAT Rn4 (DONE - 2006-02-16 - 2006-02-18 - Hiram)
    ssh kkr1u00
    cd /iscratch/i/rn4
    rsync -a --progress /cluster/data/rn4/linSpecRep.notInMouse/ \
	./linSpecRep.notInMouse
    rsync -a --progress /cluster/data/rn4/nib/ ./nib/
    cp -p /cluster/data/rn4/chrom.sizes .
    for R in 2 3 4 5 6 7 8
    do
	rsync -a --progress /iscratch/i/rn4/ kkr${R}u00:/iscratch/i/rn4/
    done

    ssh kk
    mkdir /cluster/data/mm8/bed/blastzRn4.2006-02-16
    cd /cluster/data/mm8/bed
    ln -s blastzRn4.2006-02-16 blastz.rn4
    cd blastzRn4.2006-02-16
    #	Started this before the rsync to /scratch/hg/mm8/ had completed,
    #	hence the /cluster/bluearc/scratch/hg/mm8/ location is used
    #	here.

    cat << '_EOF_' > DEF
# mouse vs rat
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin:/parasol/bin

BLASTZ=blastz.v7
BLASTZ_ABRIDGE_REPEATS=1

# TARGET: Mouse Mm8
SEQ1_DIR=/cluster/bluearc/scratch/hg/mm8/nib
SEQ1_SMSK=/cluster/bluearc/scratch/hg/mm8/linSpecRep/notInRat
SEQ1_LEN=/cluster/bluearc/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=20000000
SEQ1_LAP=10000

# QUERY: Rat Rn4 - single chunk big enough to run each chrom by itself
SEQ2_DIR=/iscratch/i/rn4/nib
SEQ2_SMSK=/iscratch/i/rn4/linSpecRep.notInMouse
SEQ2_LEN=/iscratch/i/rn4/chrom.sizes
SEQ2_CHUNK=300000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastzRn4.2006-02-16
TMPDIR=/scratch/tmp
'_EOF_'
    # << happy emacs

    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    #	Started 2006-02-16 16:15
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=3000 -chainLinearGap=medium \
	-continue=cat `pwd`/DEF > cat.out 2>&1 &

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=3000 -chainLinearGap=medium \
	-swap `pwd`/DEF > swap.out 2>&1 &

##############################################################################
# CLONE ENDS - BACEND TRACK (DONE - 2006-02-17 - Hiram)
    ssh kkstore01
    cd /cluster/data/mm8
    # check disk space: 73Gb free
    df -h .
# Filesystem            Size  Used Avail Use% Mounted on
# /export/cluster/store5
#                       1.5T  1.3T   73G  95% /cluster/store5
    mkdir -p bed/cloneend/ncbi
    cd bed/cloneend/ncbi

    wget --timestamping \
	ftp://ftp.ncbi.nih.gov/genomes/CLONEEND/mus_musculus/*

    cd /cluster/data/mm8/bed/cloneend
    # seems like the *.mfa files were split just for convenience
    # concatenate
    for F in ncbi/*.mfa.gz
    do
	zcat ${F}
    done | gzip > all.mfa.gz

    # Convert the title line of the all.mfa file
    cat << '_EOF_' > convert.pl
#!/usr/bin/env perl

use strict;
use warnings;

while (my $line = <>) {
    if ($line !~ m/^>/) {
	print $line
    } else {
        my @fields = split('\|', $line);
	my $fieldCount = scalar(@fields);
        my $printed = 0;
        for (my $i = 0; $i < $fieldCount; $i++) {
                if ($fields[$i] eq "gb" || $fields[$i] eq "dbj") {
                        (my $name, my $vers) = split(/\./,$fields[$i+1]);
                        print ">$name\n";
                        $i= $fieldCount;
                        $printed = 1;
                }
        }
        if (!$printed) {
                die("Failed for $line\n");
        }
    }
}
'_EOF_'
    # < happy emacs
    chmod +x convert.pl
    zcat all.mfa.gz | ./convert.pl | gzip > cloneEnds.fa.gz

    #	make sure nothing got broken:
    faSize all.mfa.gz
# 498162791 bases (16779168 N's 481383623 real 304962409 upper 176421214
# lower) in 789466 sequences in 1 files

    faSize cloneEnds.fa.gz
# 498162791 bases (16779168 N's 481383623 real 304962409 upper 176421214
# lower) in 789466 sequences in 1 files
    #	identical numbers, curiously, these are exactly the same numbers
    #	as were seen during the build of Mm7.  Do these things not
    #	change with time ?

    # concatenate the text files, too
    for F in ncbi/*.txt.gz
    do
	zcat ${F}
    done | gzip > all.txt.gz

    # generate cloneEndPairs.txt and cloneEndSingles.txt
    cp -p /cluster/data/mm7/bed/cloneend/convertTxt.pl .
    zcat all.txt.gz | ./convertTxt.pl stdin
    # Reading in end info
    # Writing out pair info
    # Writing out singleton info
    # 354485 pairs and 78423 singles

    #	faSplit does not function correctly if given a .gz source file
    #	AND, we need the unzipped file for sequence loading below
    gunzip cloneEnds.fa.gz
    # split
    mkdir splitdir
    cd splitdir
    faSplit sequence ../cloneEnds.fa 100 cloneEnds
    #	Check to ensure no breakage:
    cat *.fa | faSize stdin
# 498162791 bases (16779168 N's 481383623 real 304962409 upper 176421214
# lower) in 789466 sequences in 1 files
    #	same numbers as before

    #	Copy to san for cluster runs
    mkdir /san/sanvol1/scratch/mm8/cloneEnds
    cp -p *.fa /san/sanvol1/scratch/mm8/cloneEnds
    rm *
    cd ..
    rmdir splitdir
    #	may as well remove the previous assembly copy:
    rm -fr /san/sanvol1/scratch/mm7/cloneEnds

    # load sequences
    ssh hgwdev
    mkdir /gbdb/mm8/cloneend
    cd /gbdb/mm8/cloneend
    ln -s /cluster/data/mm8/bed/cloneend/cloneEnds.fa .
    cd /tmp
    hgLoadSeq mm8 /gbdb/mm8/cloneend/cloneEnds.fa
    #  Advisory lock created
    # Creating .tab file
    # Adding /gbdb/mm8/cloneend/cloneEnds.fa
    # 789466 sequences
    # Updating seq table
    # Advisory lock has been released
    # All done

############################################################################
# BACEND SEQUENCE ALIGNMENTS (DONE - 2006-02-17 - 2006-02-22 - Hiram)
    ssh kkstore01
    mkdir /cluster/data/mm8/noMask
    cd /cluster/data/mm8/
    #	Need an unmasked sequence for this work
    for CHR in ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa
    do
	C=`basename ${CHR}`
	echo -n "working ${C} ... "
	head -1 ${CHR} > noMask/${C}
	tail +2 ${CHR} | tr [:lower:] [:upper:] >> noMask/${C}
	echo "done"
    done
    mkdir /san/sanvol1/scratch/mm8/noMask
    time cp --verbose -p noMask/chr*.fa /san/sanvol1/scratch/mm8/noMask

    #	Size of mouse non-gap genome: 2567283971
    #	Size of  Hg18 non-gap genome: 2881515245
    #	Adjusting the 1024 number from typical human ooc generation:
    #	1024 * (2567283971 / 2881515245) = 912

    time blat mm8.2bit \
	/dev/null /dev/null -tileSize=11 -makeOoc=11.ooc -repMatch=912
    #	Wrote 29643 overused 11-mers to 11.ooc
    #	real    2m13.206
    # Copy over to the san
    cp -p 11.ooc /san/sanvol1/scratch/mm8

    
    #	and for the kluster run
    ssh pk
    mkdir /cluster/data/mm8/bed/bacends
    cd /cluster/data/mm8/bed/bacends
    mkdir out

    # allow blat to run politely in /tmp while it writes output, then
    # copy results to results file:
    cat << '_EOF_' > runBlat.sh
#!/bin/sh
root1=$1
root2=$2
result=$3
rm -fr /scratch/tmp/${root1}_${root2}
mkdir /scratch/tmp/${root1}_${root2}
pushd /scratch/tmp/${root1}_${root2}
/cluster/bin/x86_64/blat /san/sanvol1/scratch/mm8/noMask/${root1}.fa \
	/san/sanvol1/scratch/mm8/cloneEnds/${root2}.fa \
	-ooc=/san/sanvol1/scratch/mm8/11.ooc ${root1}.${root2}.psl
popd
mkdir -p out/${root2}
rm -f ${result}
mv /scratch/tmp/${root1}_${root2}/${root1}.${root2}.psl ${result}
rm -fr /scratch/tmp/${root1}_${root2}
'_EOF_'
    #	happy emacs
    chmod +x runBlat.sh

    cat << '_EOF_' > template
#LOOP
./runBlat.sh $(root1) $(root2) {check out line+ out/$(root2)/$(root1).$(root2).psl}
#ENDLOOP
'_EOF_'
    # << emacs happy

    ls -1S /san/sanvol1/scratch/mm8/cloneEnds/cloneEnds???.fa > bacEnds.lst
    ls -1S /san/sanvol1/scratch/mm8/noMask/chr*.fa > contig.lst
    gensub2 contig.lst bacEnds.lst template jobList
    para create jobList
    # 3322 jobs written to batch
    para try, check, push, etc ...
    XXX - STARTED - 2006-02-17 - Hiram
# Completed: 3332 of 3332 jobs
# CPU time in finished jobs:     649465s   10824.42m   180.41h    7.52d  0.021 y
# IO & Wait Time:                 11633s     193.88m     3.23h    0.13d  0.000 y
# Average job time:                 198s       3.31m     0.06h    0.00d
# Longest finished job:            1326s      22.10m     0.37h    0.02d
# Submission to last job:        429201s    7153.35m   119.22h    4.97d

    ssh kkstore01
    cd /cluster/data/mm8/bed/bacends
    screen

    mkdir temp
    time pslSort dirs raw.psl temp out/* > pslSort.out 2>&1 &
    #	real    22m4.019s
    #	-rw-rw-r--    1 8422362557 Feb 22 15:35 raw.psl

    time pslReps -nearTop=0.01 -minCover=0.7 -minAli=0.8 -noIntrons \
	raw.psl bacEnds.psl /dev/null > pslReps.out 2>&1 &
    #	real    6m15.981s
    #	-rw-rw-r--    1  197029888 Feb 22 15:37 bacEnds.psl

    cp -p /cluster/data/mm7/bed/bacends/split.pl .
    cp -p /cluster/data/mm7/bed/bacends/header .

    time ./split.pl header < bacEnds.psl
    #	real    0m26.983s


    mv bacEnds.psl bacEnds.psl.save
    time pslSort dirs bacEnds.psl temp split
    #	real    2m19.131s
    #	-rw-rw-r--    1 1227866614 Feb 22 15:48 bacEnds.psl

    # Copy files to final destination and remove
    mkdir /cluster/data/mm8/bacends
    cp -p bacEnds.psl /cluster/data/mm8/bacends

############################################################################
# BACEND PAIRS TRACK (DONE - 2006-02-22 - Hiram)

    ssh kolossus
    cd /cluster/data/mm8/bacends

time /cluster/bin/x86_64/pslPairs -tInsert=10000 -minId=0.91 -noBin -min=25000 \
-max=350000 -slopval=10000 -hardMax=500000 -slop -short -long -orphan \
-mismatch -verbose bacEnds.psl \
	../bed/cloneend/cloneEndPairs.txt all_bacends bacEnds
    #	real    0m47.401s


    # create header required by "rdb" tools
    echo -e \
"chr\tstart\tend\tclone\tscore\tstrand\tall\tfeatures\tstarts\tsizes" > header
    echo -e "10\t10N\t10N\t10\t10N\t10\t10\t10N\t10\t10" >> header

    cat header bacEnds.pairs | \
	/cluster/bin/scripts/row score ge 300 | \
	/cluster/bin/scripts/sorttbl chr start | \
	/cluster/bin/scripts/headchg -del > bacEndPairs.bed
    #	-rw-rw-r--  1   23816801 Feb 22 15:52 bacEndPairs.bed


    cat header bacEnds.slop bacEnds.short bacEnds.long bacEnds.mismatch \
	bacEnds.orphan | /cluster/bin/scripts/row score ge 300 | \
	/cluster/bin/scripts/sorttbl chr start | \
	/cluster/bin/scripts/headchg -del > bacEndPairsBad.bed
    #	-rw-rw-r--  1    6843775 Feb 22 15:54 bacEndPairsBad.bed

    /cluster/bin/scripts/extractPslLoad -noBin bacEnds.psl bacEndPairs.bed \
	bacEndPairsBad.bed >j1.out
    cat j1.out| /cluster/bin/scripts/sorttbl tname tstart >j2.out
    cat j2.out | /cluster/bin/scripts/headchg -del > bacEnds.load.psl
    #	-rw-rw-r--  1  983668200 Feb 22 16:04 bacEnds.load.psl

    rm j1.out j2.out

    #	CHECK bacEndPairs.bed ID's to make sure they have no blanks in them
    awk '{print $5}' bacEndPairs.bed | sort -u
    #	result should be the scores, no extraneous strings:
#	1000
#	300
#	375
#	500
#	750
    #	edit the file and fix it if it has a bad name.

    # load into database
    ssh hgwdev
    cd /cluster/data/mm8/bacends
    hgLoadBed -strict -notItemRgb mm8 bacEndPairs bacEndPairs.bed \
	-sqlTable=$HOME/kent/src/hg/lib/bacEndPairs.sql
    #	Loaded 235440 elements of size 11

    # note - this track isn't pushed to RR, just used for assembly QA
    hgLoadBed -strict -notItemRgb mm8 bacEndPairsBad bacEndPairsBad.bed \
	-sqlTable=$HOME/kent/src/hg/lib/bacEndPairsBad.sql
    #	Loaded 95099 elements of size 11

    # NOTE: truncates file to 0 if -nobin is used
    time hgLoadPsl mm8 -table=all_bacends bacEnds.load.psl
# load of all_bacends did not go as planned: 8132116 record(s), 0 row(s)
# skipped, 1 warning(s) loading psl.tab
#	skipped, 1 warning(s) loading psl.tab
#	real    20m45.055s

    featureBits mm8 all_bacends
# 327086559 bases of 2567283971 (12.741%) in intersection
    featureBits mm7 all_bacends
# 334161740 bases of 2583394090 (12.935%) in intersection
    featureBits mm6 all_bacends
# 336981828 bases of 2597150411 (12.975%) in intersection
    featureBits mm5 all_bacends
# 268502414 bases of 2615483787 (10.266%) in intersection
    featureBits mm4 all_bacends
# 243096171 bases of 2627444668 (9.252%) in intersection

    featureBits mm8 bacEndPairs
# 2572527283 bases of 2567283971 (100.204%) in intersection
    featureBits mm7 bacEndPairs
# 2578837424 bases of 2583394090 (99.824%) in intersection
    featureBits mm6 bacEndPairs
# 2570768812 bases of 2597150411 (98.984%) in intersection
    featureBits mm5 bacEndPairs
# 2567958504 bases of 2615483787 (98.183%) in intersection
    featureBits mm4 bacEndPairs
# 2549945356 bases of 2627444668 (97.050%) in intersection

    featureBits mm8 bacEndPairsBad
# 879222026 bases of 2567283971 (34.247%) in intersection
    featureBits mm7 bacEndPairsBad
# 954662115 bases of 2583394090 (36.954%) in intersection
    featureBits mm6 bacEndPairsBad
# 1006314997 bases of 2597150411 (38.747%) in intersection
    featureBits mm5 bacEndPairsBad
# 541027882 bases of 2615483787 (20.686%) in intersection
    featureBits mm4 bacEndPairsBad
# 1074505863 bases of 2627444668 (40.895%) in intersection

#########################################################################
# GENBANK auto update (DONE - 2006-02-17 - 2006-02-23 - Hiram)
    # align with revised genbank process. drop xeno ESTs.
    ssh hgwdev
    cd ~/kent/src/hg/makeDb/genbank
    cvs update -d -P etc
    # edit etc/genbank.conf to add mm8, it is a copy of mm7 with changes:

# mm8
mm8.serverGenome = /cluster/data/mm8/mm8.2bit
mm8.clusterGenome = /scratch/hg/mm8/mm8.2bit
mm8.ooc = /cluster/data/mm8/11.ooc
mm8.align.unplacedChroms = chrUn_random
mm8.lift = /cluster/data/mm8/jkStuff/liftAll.lft
mm8.refseq.mrna.native.pslCDnaFilter  = ${ordered.refseq.mrna.native.pslCDnaFilter}
mm8.refseq.mrna.xeno.pslCDnaFilter    = ${ordered.refseq.mrna.xeno.pslCDnaFilter}
mm8.genbank.mrna.native.pslCDnaFilter = ${ordered.genbank.mrna.native.pslCDnaFilter}
mm8.genbank.mrna.xeno.pslCDnaFilter   = ${ordered.genbank.mrna.xeno.pslCDnaFilter}
mm8.genbank.est.native.pslCDnaFilter  = ${ordered.genbank.est.native.pslCDnaFilter}
mm8.downloadDir = mm8
mm8.refseq.mrna.xeno.load  = yes
mm8.refseq.mrna.xeno.loadDesc = yes
mm8.mgcTables.default = full
mm8.mgcTables.mgc = all

    #	check that into CVS, then
    # update /cluster/data/genbank/
    make etc-update

    ssh kkstore02
    cd /cluster/data/genbank
    nice bin/gbAlignStep -initial mm8 &
    #	var/build/logs/2006.02.17-16:10:17.mm8.initalign.log
    #	the parasol batch job on kk broke down in:
    #	/cluster/bluearc/genbank/work/initial.mm8/align
    #	go to kk and this directory and get the batch finished
    nice bin/gbAlignStep -continue=finish -initial mm8 &
    #	var/build/logs/2006.02.22-20:26:54.mm8.initalign.log

    # load database when finished
    ssh hgwdev
    cd /cluster/data/genbank
    nice ./bin/gbDbLoadStep -drop -initialLoad  mm8 &
    #	var/dbload/hgwdev/logs/2006.02.23-10:21:36.dbload.log
    #	real    228m59.734s

#########################################################################
# BLASTZ rheMac2 (WORKING - 2006-02-17 - Hiram)
    ssh pk
    mkdir /cluster/data/mm8/bed/blastz.rheMac2.2006-02-17
    cd /cluster/data/mm8/bed
    ln -s blastz.rheMac2.2006-02-17 blastz.rheMac2
    cd blastz.rheMac2

    cat << '_EOF_' > DEF
# mouse vs macaca mulatta
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn/x86_64:/cluster/bin/x86_64:/parasol/bin

ALIGN=blastz-run
BLASTZ=blastz.v7.x86_64

# TARGET - mm8
SEQ1_DIR=/scratch/hg/mm8/nib
SEQ1_LEN=/scratch/hg/mm8/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY - macaca mulatta - big enough chunk to do whole chroms at once
SEQ2_DIR=/san/sanvol1/scratch/rheMac2/rheMac2.2bit
SEQ2_LEN=/san/sanvol1/scratch/rheMac2/rheMac2.sizes 
SEQ2_CHUNK=250000000
SEQ2_LAP=0

BASE=/cluster/data/mm8/bed/blastz.rheMac2.2006-02-17
TMPDIR=/scratch/tmp
'_EOF_'
    #	happy emacs

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    #	Started 2006-02-17 16:42
    #	crashed due to no copies of mm8 in /scratch/hg/mm8/ on the
    #	Iservers.  Fix that up and get the chain run done.  Continuing.
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-continue=chainMerge `pwd`/DEF > chainMerge.out 2>&1 &

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &

canFam2 on pk
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-swap `pwd`/DEF > swap.out 2>&1 &
bosTau2 on pk
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-swap `pwd`/DEF > swap.out 2>&1 &
galGal2 on kk
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-continue=cat `pwd`/DEF > cat.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-continue=net `pwd`/DEF > net.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-swap `pwd`/DEF > swap.out 2>&1 &

rheMac2 on pk
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-swap `pwd`/DEF > swap.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-swap -continue=net `pwd`/DEF > swap.net.out 2>&1 &
    #	failed during a san hiccup,  finish that off, then:
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-swap -continue=load `pwd`/DEF > swap.load.out 2>&1 &

dasNov1 on pk 2006-02-19
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	-continue=cat `pwd`/DEF > cat.out 2>&1 &
echTel1 on pk 2006-02-19
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	-continue=cat `pwd`/DEF > cat.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	-continue=chainRun `pwd`/DEF > chain.out 2>&1 &
fr1 on pk 2006-02-19 (started on kk)
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	-swap `pwd`/DEF > swap.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	-swap -continue=net `pwd`/DEF > swap.net.out 2>&1 &
loxAfr1 on kk 2006-02-19
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &
    #	failed during the cat, fixed the script
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=3000 -chainLinearGap=medium \
	-continue=chainRun `pwd`/DEF > chain.out 2>&1 &
tetNig1 on kk 2006-02-10
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-continue=net `pwd`/DEF > net.out 2>&1 &

    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-swap `pwd`/DEF > swap.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-swap -continue=net `pwd`/DEF > swap-net.out 2>&1 &

oryCun1 on pk 2006-02-21
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &

xenTro1 on kk 2006-02-21
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-continue=cat `pwd`/DEF > cat.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=kk -chainMinScore=5000 -chainLinearGap=loose \
	-swap `pwd`/DEF > swap.out 2>&1 &
monDom4 on pk 2006-02-23
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	`pwd`/DEF > blastz.out 2>&1 &
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose \
	-swap `pwd`/DEF > swap.out 2>&1 &
panTro1 on pk 2006-02-23
    time /cluster/bin/scripts/doBlastzChainNet.pl -verbose=2 \
	-bigClusterHub=pk -chainMinScore=3000 -chainLinearGap=medium \
	`pwd`/DEF > blastz.out 2>&1 &

#############################################################################
# STS MARKERS DATA DOWNLOAD (DONE - 2005-09-29 - 2005-10-07 - Hiram)
#	Applied a filter to primers.psl - 2005-10-20 - Hiram
    ssh kkstore01
    mkdir -p /cluster/data/mm8/bed/STSmarkers/downloads
    cd /cluster/data/mm8/bed/STSmarkers/downloads
    # these files appear to be new almost every day
    wget --timestamping \
	ftp://ftp.ncbi.nih.gov/repository/UniSTS/UniSTS_mouse.sts
    wget --timestamping \
	ftp://ftp.ncbi.nih.gov/repository/UniSTS/UniSTS.aliases

    #	The new feature in the .aliases file this time are names with
    #	spaces in them !  This changes our parsing business below,
    #	hopefully the spaces in the names won't cause trouble elsewhere.

    wget --timestamping \
ftp://ftp.ncbi.nih.gov/repository/UniSTS/UniSTS_MapReports/Mus_musculus/*

    # these reports from jax.org appear to be changing daily
    wget --timestamping \
	ftp://ftp.informatics.jax.org/pub/reports/MRK_Dump2.rpt
    wget --timestamping \
	ftp://ftp.informatics.jax.org/pub/reports/MRK_Sequence.rpt
    wget --timestamping \
	ftp://ftp.informatics.jax.org/pub/reports/PRB_PrimerSeq.rpt
    ls -ogrt
#	-rw-rw-r--  1      676 Mar 11  2004 README
#	-rw-rw-r--  1   396858 Jan 28  2005 10090.MGI.txt
#	-rw-rw-r--  1   390139 Mar 16  2005 10090.WI_MRC_RH.txt
#	-rw-rw-r--  1   240688 Mar 16  2005 10090.WI-YAC.txt
#	-rw-rw-r--  1   173344 Mar 16  2005 10090.WI-Genetic.txt
#	-rw-rw-r--  1 25691253 Jan 13 16:42 UniSTS.aliases
#	-rw-rw-r--  1  4140920 Feb 22 18:43 UniSTS_mouse.sts
#	-rw-rw-r--  1  4576611 Feb 23 02:22 MRK_Dump2.rpt
#	-rw-rw-r--  1  2549974 Feb 23 02:23 PRB_PrimerSeq.rpt
#	-rw-rw-r--  1  4531489 Feb 23 02:23 MRK_Sequence.rpt
    #	 I note the UniSTS.aliases file is over twice as big as was in
    #	 Mm7 build.  I wonder what got into it ...
    #	What got into it was that it was completely broken.  It appeared
    #	to have a vast section of itself duplicated again in the file.
    #	It was cleaned up via:
    echo -e "#Unique ID\tAliases" > uniqueSTS.aliases
    grep -v "^#" UniSTS.aliases | sort -n | uniq >> uniqueSTS.aliases
    mv UniSTS.aliases UniSTS.aliases.broken
    mv uniqueSTS.aliases UniSTS.aliases

    # back to our work area, update the bed file
    #	to do this we need a new UniSTS_mouse.alias file
    # it is created by a combination of information from several
    # of the above files ! AND ! the previous stsInfoMouse.bed file

    cd /cluster/data/mm8/bed/STSmarkers/downloads
    cp -p /cluster/data/mm7/bed/STSmarkers/downloads/*.sh .
    cp -p /cluster/data/mm7/bed/STSmarkers/downloads/*.pl .
    #	There is a line in the fetchAllAliases.sh script that needs to
    #	be updated, it must point to the previous bed file:
    #   BEDFile=/cluster/data/mm7/bed/STSmarkers/stsInfoMouse.bed
    #	Next time, this should read:
    #   BEDFile=/cluster/data/mm8/bed/STSmarkers/stsInfoMouse.bed

    #	This process has been captured in the script:
    #	/cluster/data/mm5/bed/STSmarkers/downloads/fetchAllAliases.sh
    # which uses a couple of perl scripts in that same directory.
    # briefly it is:
    
    # ./UniSTSParse.pl UniSTS_mouse.sts UniSTS.aliases > UniSTS_mouse_alias.0
    # grep MGI: UniSTS.aliases > MGI.aliases
    # ./stsInfoMouseParse.pl /cluster/store5/mouseMarker/stsInfoMouse.bed > \
    #	stsInfoAliases.txt
    # ./UniSTSParse.pl stsInfoAliases.txt UniSTS.aliases > stsInfo.aliases
    # cat UniSTS_mouse_alias.0 MGI.aliases stsInfo.aliases | sort -u \
    #    | sort -n > UniSTS_mouse.alias

    time ./fetchAllAliases.sh > fetchAllAliases.out 2>&1

    #	Here is a normal set of errors:
# processing UniSTS_mouse.sts to find aliases
# #       ERROR: KNOWN(==OK) duplicate ID: '108991' encountered at line
# #       2384
# processing MGI.aliases
# fetching existing aliases from previous stsInfoMouse.bed file
# found 27648 potential errors in
#	/cluster/data/mm7/bed/STSmarkers/stsInfoMouse.bed
# to see the errors: grep ERROR stsInfoAliases.txt
# verify those stsInfoMouse.bed aliases with UniSTS.aliases

    #	those errors in the previous stsInfoMouse.bed file are an
    #	accumulation of errors from a long long time ago in this chain
    #	of processing.  Some day it might be nice to fix them, but they
    #	don't seem to bother anything, so they continue to be carried
    #	forward, and a couple of new ones are added with each assembly.

    # with that, we can create a new stsInfoMouse.bed file:
    #	Update the m m 7 directory name here to m m 8
    #	for the next build of m m 9
    cd /cluster/data/mm8/bed/STSmarkers
    /cluster/store5/mouseMarker/code/updateBed.pl \
	/cluster/data/mm7/bed/STSmarkers/stsInfoMouse.bed \
	downloads/MRK_Dump2.rpt downloads/PRB_PrimerSeq.rpt \
	downloads/MRK_Sequence.rpt downloads/UniSTS_mouse.alias \
	downloads/UniSTS_mouse.sts | sed -e "s/\t*$//" > newbedfile

    # Yontao updated /cluster/store5/mouseMarker/code/cleanInfo.pl 8/10/04
    /cluster/store5/mouseMarker/code/cleanInfo.pl newbedfile > stsInfoMouse.bed
	
    # copy the stsInfoMouse.bed file from working dir to the marker
    #	info storage fold.  added 2 new steps by Yontao	
    #	be wary of the archive name here, check the directory and get
    #	the name right here.
    mv /cluster/store5/mouseMarker/stsInfoMouse.bed \
	/cluster/store5/mouseMarker/stsInfoMouse.bed_mm7
    cp -p stsInfoMouse.bed /cluster/store5/mouseMarker/stsInfoMouse.bed

    # comparing to previous, numbers increase slightly each time
    wc /cluster/store5/mouseMarker/stsInfoMouse.bed \
	/cluster/store5/mouseMarker/stsInfoMouse.bed_mm7 \
	/cluster/store5/mouseMarker/stsInfoMouse.bed_mm6 \
	/cluster/store5/mouseMarker/stsInfoMouse.bed_mm5
    #	60440   801181  6871232 /cluster/store5/mouseMarker/stsInfoMouse.bed
    #	59843   794642  6802825 /cluster/store5/mouseMarker/stsInfoMouse.bed_mm7
    #	58980   784786  6690105 /cluster/store5/mouseMarker/stsInfoMouse.bed_mm6
    #	58493   778055  6524821 /cluster/store5/mouseMarker/stsInfoMouse.bed_mm5

    # and from that, create new primer fa, epcr, etc:
    /cluster/store5/mouseMarker/code/luConvertPrimerToFa \
	stsInfoMouse.bed mouseP.fa mouseC.fa mouseP.info
    # the mouseC.fa file will be empty, should be more than last time
    wc mouse?.*
    #	     0       0       0 mouseC.fa
    #	305991  305937 6910111 mouseP.fa
    #	 34475  172467 2195057 mouseP.info
    #	340466  478404 9105168 total

    #	the equivalent Mm7 files:
    #      0       0       0 mouseC.fa
    # 300968  300914 6798466 mouseP.fa
    #  33838  169275 2153113 mouseP.info
    # 334806  470189 8951579 total
    #	the equivalent Mm6 files:
    #	     0       0       0 mouseC.fa
    #	293305  293251 6624638 mouseP.fa
    #	 32890  164528 2087271 mouseP.info
    #	326195  457779 8711909 total
    #	the equivalent Mm5 files:
    #	     0       0       0 mouseC.fa
    #	286740  286686 6474893 mouseP.fa
    #	 32232  161234 2044810 mouseP.info
    #	318972  447920 8519703 total

    #	copy the primers over to some filesystem close to the klusters
    #	and split them up to have a small number of sequences in one file
    

    mkdir /cluster/bluearc/mm8/stsMarkers
    cp -p mouseP.fa /cluster/bluearc/mm8/stsMarkers
    cd /cluster/bluearc/mm8/stsMarkers
    cp -p /cluster/data/mm8/11.ooc .
    mkdir split
    #	400 files for 34,475 sequences, == about 80 sequences per file
    faSplit sequence mouseP.fa 400 split/mm_


    # PLEASE NOTE /cluster/bin/i386/blat.2 SPECIFICALLY IS USED HERE. 
    #	This process could convert to a modern version of blat with the
    #	filters as described, for example, in the STS markers build in Hg18

    #  CLUSTER RUN FOR THE STS PRIMERS
    ssh kk
    mkdir /cluster/data/mm8/bed/STSmarkers/primer
    mkdir /cluster/data/mm8/bed/STSmarkers/ePCR
    cd /cluster/data/mm8/bed/STSmarkers/primer
    mkdir out

    ls -1S /cluster/bluearc/mm8/stsMarkers/split > primers.list
    ls -1S /scratch/hg/mm8/nib > nib.list

    cat << '_EOF_' > runBlat2.csh
#!/bin/csh -fe
set primer = /cluster/bluearc/mm8/stsMarkers/split/$1
set nib = /scratch/hg/mm8/nib/$2
set ooc = /cluster/bluearc/mm8/stsMarkers/11.ooc
set root2 = $2:r
mkdir -p out/${root2}
set out = $3

/cluster/bin/i386/blat.2 ${nib} ${primer} -ooc=${ooc} \
	-minMatch=1 -minScore=0 -minIdentity=80 -oneOff ${out}
'_EOF_'
    #	happy emacs
    chmod +x runBlat2.csh


    cat << '_EOF_' > template
#LOOP
./runBlat2.csh $(path1) $(path2) {check out line+ out/$(root2)/$(root1).psl}
#ENDLOOP
'_EOF_'
    #	happy emacs

    gensub2 primers.list nib.list template jobList
    para create jobList
    para try ... check ... push ... etc ...
# Completed: 12104 of 12104 jobs
# CPU time in finished jobs:     358835s    5980.59m    99.68h    4.15d  0.011 y
# IO & Wait Time:                 39162s     652.69m    10.88h    0.45d  0.001 y
# Average job time:                  33s       0.55m     0.01h    0.00d
# Longest finished job:             162s       2.70m     0.04h    0.00d
# Submission to last job:           864s      14.40m     0.24h    0.01d


    # on the file server
    ssh kkstore01
    cd /cluster/data/mm8/bed/STSmarkers/primer
    time pslSort dirs primers.raw.psl temp out/chr*
    #	12104 files in 34 dirs
    #	Got 12104 files 110 files per mid file

    #	filter alignments for (qEnd-qStart) vs. (tEnd-tStart)
    #	should not be more than 100 bases different.
    #	This filters out about 1,028,202 alignments, or
    #	%17.4 = 100.0 * 1028202 / 5921712
    pslSort dirs stdout temp out/chr* | awk -F"\t" '
{ if (((($13 - $12) - ($17 - $16)) > -100) &&
	((($13 - $12) - ($17 - $16)) < 100)) {print}
}
' > primers.psl.100

    rmdir temp

    wc -l *.100 *.psl
    #	1079936 primers.psl.100
    #	1346128 primers.raw.psl
    #    266192 difference


    # a rough comparison with previous results:
    wc -l /cluster/data/mm7/bed/STSmarkers/primer/primers.psl.100
    #	4893510  102763628  510563575 primers.psl.100
    wc primers.psl  (unfiltered, Mm7)
    #	5921712 124355891 636898117 primers.psl
    wc /cluster/data/mm7/bed/STSmarkers/primer/primers.psl
    #	5724127 120206606 615248041
    wc /cluster/data/mm5/bed/STSmarkers/primer/primers.psl
    #	5719969 120119288 590806241
    wc /cluster/data/mm4/bed/STSmarkers/primer/primers.psl
    #	5745617 120657896 592135728 

    # another kluster run for the ePCR
    ssh pk
    cd /cluster/data/mm8/bed/STSmarkers/ePCR
    ls -1S /san/sanvol1/scratch/mm8/fasta/chr*.fa > contig.lst

    #	pick up e-PCR source from
    #	ftp://ftp.ncbi.nlm.nih.gov/pub/schuler/e-PCR/
    #	version 2.3.1 11 Feb 2005
    #	Had to add the following to both re-PCR_main.cpp and
    #	e-PCR_main.cpp to get them to compile on kolossus:
// max and min Copied from /usr/include/mysql/my_global.h
#define max(a, b)       ((a) >? (b))
#define min(a, b)       ((a) <? (b))

    mkdir epcr.out
    cat << '_EOF_' > runPCR.csh
#!/bin/csh -fe
/cluster/bin/x86_64/e-PCR $1 $2 N=1 M=50 W=5 > $3
'_EOF_'
    # emacs happy ?
    chmod +x runPCR.csh

    cat << '_EOF_' > template
#LOOP
./runPCR.csh /san/sanvol1/scratch/mm8//STSmarkers/mouseP.info $(path1) {check out line+ epcr.out/$(num1).epcr}
#ENDLOOP
'_EOF_'
    # the mouseP.info was created above
    gensub2 contig.lst single template jobList
    para create jobList
    para try
    para check
    para push
    ... etc ...
    # STARTED 2005-09-30 11:45
# Completed: 40 of 40 jobs
# CPU time in finished jobs:      62439s    1040.64m    17.34h    0.72d  0.002 y
# IO & Wait Time:                   180s       3.01m     0.05h    0.00d  0.000 y
# Average job time:                1565s      26.09m     0.43h    0.02d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:            4582s      76.37m     1.27h    0.05d
# Submission to last job:          4608s      76.80m     1.28h    0.05d

    ssh kkstore01
    cd /cluster/data/mm8/bed/STSmarkers/ePCR
    # all those results become all.epcr
    cat epcr.out/*.epcr > all.epcr

    # comparing to previous results:
    wc all.epcr
    #	57709  230836 3185188 all.epcr
    wc /cluster/data/mm7/bed/STSmarkers/ePCR/all.epcr
    #	55871  223484 3086148 all.epcr
    wc /cluster/data/mm5/bed/STSmarkers/ePCR/all.epcr
    #	55677  222708 2945623 /cluster/data/mm5/bed/STSmarkers/ePCR/all.epcr
    wc /cluster/data/mm4/bed/STSmarkers/ePCR/all.epcr
    #	74705  298820 3971712 /cluster/data/mm4/bed/STSmarkers/ePCR/all.epcr
    #	Mm4 seems to be out of whack

    cd /cluster/data/mm8/bed/STSmarkers/primer

    /cluster/bin/scripts/filterSTSPrimers \
    -mouse ../stsInfoMouse.bed primers.psl.100 \
        ../mouseP.info ../ePCR/all.epcr > primers.psl.filter.blat

    #  The output should show an increasing count:
    #	Reading name info
    #	Reading primer info
    #	Processing file
    #	100000
    #	200000
    #	300000
    #	...
    #	5700000
    #	Determining ePCR not found
    #
    wc primers.psl.filter.blat  (after filter applied above to primers.psl)
    #	33986  713706 3637462 primers.psl.filter.blat
    wc primers.psl.filter.blat  (before filter applied above to primers.psl)
    #	34674  728154 3718714 primers.psl.filter.blat
    wc /cluster/data/mm7/bed/STSmarkers/primer/primers.psl.filter.blat
    #	33662  706902 3605847 primers.psl.filter.blat
    wc /cluster/data/mm5/bed/STSmarkers/primer/primers.psl.filter.blat
    #	33476  702996 3442402 
    wc /cluster/data/mm4/bed/STSmarkers/primer/primers.psl.filter.blat
    #	32729  687309 3331894
    #	It appears Mm4 became sane after the filter

    # create accession_info.rdb
    touch empty_sequence.inf
    /cluster/bin/scripts/compileAccInfo -mouse \
	/cluster/data/mm8 empty_sequence.inf
    # works with errors on missing randoms, etc...:
    # cat: /cluster/data/mm5/11/chr11_random.agp: No such file or directory
    # cat: /cluster/data/mm5/M/chrM_random.agp: No such file or directory
    mv accession_info.rdb accession_info.rdb.tmp
    /cluster/bin/scripts/sorttbl Chr Ord Start < accession_info.rdb.tmp > \
	accession_info.rdb
    rm accession_info.rdb.tmp
    # comparing results to previous
    #	There is a dramatic decrease in Mm7 - this appears to be due to
    #	the lower numbers of fragments in the agp files.
    #	e.g.:
    [hiram@pk /cluster/data] wc mm7/*/chr*.agp | tail -1
    #	170812 1459570 9240332 total
    [hiram@pk /cluster/data] wc mm8/*/chr*.agp | tail -1
    #	70125  605050 3696903 total

    wc accession_info.rdb
    #	44046  484510 3112816 accession_info.rdb
    wc /cluster/data/mm7/bed/STSmarkers/primer/accession_info.rdb
    #	93052 1023576 6824900 accession_info.rdb
    wc /cluster/data/mm5/bed/STSmarkers/primer/accession_info.rdb
    #	131845 1450299 9681940
    wc /cluster/data/mm4/bed/STSmarkers/primer/accession_info.rdb
    #	86935  956289 6374930 

    # creates epcr.not.found.nomatch and epcr.not.found.psl
    #	/cluster/bin/scripts/epcrToPsl
    #	Fixed this script (in mm7) to make it not look for contigs in the usual
    #	manner, we don't have those for this assembly	
    sed -e "s/mm7/mm8/g" /cluster/data/mm7/bed/STSmarkers/primer/epcrToPsl \
	> ./epcrToPsl
    ./epcrToPsl -mouse \
	epcr.not.found ../mouseP.info \
	accession_info.rdb /cluster/data/mm8

    # Comparing results to previous:
    wc epcr*
    #	 474  1896 17400 epcr.not.found
    #	   0     0     0 epcr.not.found.nomatch
    #	 474  9954 47288 epcr.not.found.psl
    #	 158   535  4308 epcrToPsl
    #	1106 12385 68996 total

    # Mm6 wc epcr*
    wc /cluster/data/mm7/bed/STSmarkers/primer/epcr*
    #	 467    1868   17135 epcr.not.found
    #	  63     756    6041 epcr.not.found.nomatch
    #	 404    8484   40254 epcr.not.found.psl
    #	 158     535    4308 epcrToPsl
    #	1092   11643   67738 total

    # Mm5 wc epcr*
    wc /cluster/data/mm5/bed/STSmarkers/primer/epcr*
    #	 463    1852   17080 epcr.not.found
    #	  61     732    5845 epcr.not.found.nomatch
    #	 398    8358   38591 epcr.not.found.psl
    #	 402    8442   39011 epcr.not.found.psl.orig
    #	1324   19384  100527 total

    # Mm4 wc epcr*
    wc /cluster/data/mm4/bed/STSmarkers/primer/epcr*
    #	328    1312   12011 epcr.not.found
    #	 57     684    5474 epcr.not.found.nomatch
    #	266    5586   25711 epcr.not.found.psl
    #	163     552    4370 epcrToPsl
    #	814    8134   47566 total

    cat primers.psl.filter.blat epcr.not.found.psl > primers.psl.filter
    wc primers.psl.filter  (after filter applied above to primers.psl)
    #	34460  723660 3684750 primers.psl.filter
    wc primers.psl.filter  (before filter applied above to primers.psl)
    #	35148  738108 3766002 primers.psl.filter

    wc /cluster/data/mm7/bed/STSmarkers/primer/primers.psl.filter
    #	34066  715386 3646101 primers.psl.filter

    wc /cluster/data/mm5/bed/STSmarkers/primer/primers.psl.filter.lifted
    # 33691  707511 3601164 primers.psl.filter.lifted

    # create primers.psl.filter.lifted.initial
    PATH=/cluster/bin/scripts:$PATH /cluster/bin/scripts/extractPslInfo \
	primers.psl.filter
    wc primers.psl.filter.initial (after filter applied above to primers.psl)
    #	34443  206658 1833793 primers.psl.filter.initial
    wc primers.psl.filter.initial (before filter applied above to primers.psl)
    #	35131  210786 1870800 primers.psl.filter.initial
    wc /cluster/data/mm7/bed/STSmarkers/primer/primers.psl.filter.initial
    #	34048  204288 1815222 primers.psl.filter.initial
    wc /cluster/data/mm5/bed/STSmarkers/primer/primers.psl.filter.lifted.initial
    # 33689  202134 1799016 primers.psl.filter.lifted.initial

    # create primers.psl.filter.lifted.initial.acc
    /cluster/bin/scripts/findAccession -agp \
	-mouse primers.psl.filter.initial /cluster/data/mm8
    #	it complains about missing _random items, it is OK
    wc primers.psl.filter.initial.acc (after filter applied above to primers.psl)
    #	34443  241101 2160540 primers.psl.filter.initial.acc
    wc primers.psl.filter.initial.acc (before filter applied above to primers.psl)
    #	35131  245917 2204115 primers.psl.filter.initial.acc
    wc /cluster/data/mm7/bed/STSmarkers/primer/primers.psl.filter.initial.acc
    #	34048  238336 2154798 primers.psl.filter.initial.acc

    wc /cluster/data/mm5/bed/STSmarkers/primer/primers.psl.filter.lifted.initial.acc
    # 33689  235823 2158029 primers.psl.filter.lifted.initial.acc

    # this needs to be -rat as that specifies how to scan the
    # stsInfoMouse.bed file and it does not work if you use -mouse
    /cluster/bin/scripts/getStsId -rat \
	../stsInfoMouse.bed  primers.psl.filter.initial.acc \
	> primers.initial.acc.trans
    wc primers.initial.acc.trans  (after filter applied above to primers.psl)
    #	34443  241101 1830431 primers.initial.acc.trans
    wc primers.initial.acc.trans  (before filter applied above to primers.psl)
    #	35131  245917 1867180 primers.initial.acc.trans
    wc /cluster/data/mm7/bed/STSmarkers/primer/primers.initial.acc.trans
    wc primers.initial.acc.trans
    #	34041  238287 1829724 primers.initial.acc.trans
    #	I don't see any of these errors in the Mm7 build:
    #	No id for 61645_RH126840
    #	No id for 4187_D10MIT171.2
    #	No id for 63449_RH125771
    #	No id for 67188_PMC99911P4
    #	No id for 8839_D6MIT360.1
    #	No id for 62732_RH126829
    #	No id for 63746_RH127126

    sort -k 4n primers.initial.acc.trans > primers.final
    wc primers.final  (after filter applied above to primers.psl)
    #	34443  241101 1830431 primers.final
    wc primers.final  (before filter applied above to primers.psl)
    #	35131  245917 1867180 primers.final
    wc /cluster/data/mm7/bed/STSmarkers/primer/primers.final 
    #	34041  238287 1829724 primers.final
    wc /cluster/data/mm5/bed/STSmarkers/primer/primers.final 
    #	33689  235823 1834889 /cluster/data/mm5/bed/STSmarkers/primer/primers.final

    rm primers.initial.acc.trans

    cd /cluster/data/mm8/bed/STSmarkers
    # stsMarkers.final is empty for mouse
    touch stsMarkers.final dummy
    PATH=/cluster/bin/scripts:$PATH /cluster/bin/scripts/combineSeqPrimerPos \
	stsMarkers.final primer/primers.final > stsMarkers_pos.rdb
    wc stsMarkers_pos.rdb  (after filter applied to primers.psl above)
    #	32869  230083 1868276 stsMarkers_pos.rdb
    wc stsMarkers_pos.rdb  (before filter applied to primers.psl above)
    #	33421  233947 1903951 stsMarkers_pos.rdb
    wc /cluster/data/mm7/bed/STSmarkers/stsMarkers_pos.rdb
    #	32350  226450 1909506 stsMarkers_pos.rdb
    wc /cluster/data/mm5/bed/STSmarkers/stsMarkers_pos.rdb
    # 32085  224595 1862816 /cluster/data/mm5/bed/STSmarkers/stsMarkers_pos.rdb
    wc /cluster/data/mm4/bed/STSmarkers/stsMarkers_pos.rdb
    # 31270  218890 1869417 /cluster/data/mm4/bed/STSmarkers/stsMarkers_pos.rdb

    /projects/cc/hg/ytlu/bin/script/perl/createStsBed \
	stsInfoMouse.bed  stsMarkers_pos.rdb 500 > stsMapMouse.bed
    wc stsMapMouse.bed  (after filter applied to primers.psl above)
    #	29842  308123 2135776 stsMapMouse.bed
    wc stsMapMouse.bed  (before filter applied to primers.psl above)
    #	30296  312257 2166725 stsMapMouse.bed
    wc /cluster/data/mm7/bed/STSmarkers/stsMapMouse.bed
    #	29079  301678 2097544 stsMapMouse.bed
    wc /cluster/data/mm5/bed/STSmarkers/stsMapMouse.bed
    #	29069  301535 2123622 /cluster/data/mm5/bed/STSmarkers/stsMapMouse.bed

    #  loading STS markers tables
    ssh hgwdev
    cd /cluster/data/mm8/bed/STSmarkers
    cp -p /cluster/data/mm7/bed/STSmarkers/ucscAlias.pl .
    ./ucscAlias.pl stsInfoMouse.bed > ucscStsAlias.tab 2> ucscStsAlias.warnings
    #	this does leave messages in ucscStsAlias.warnings but they seem
    #	to be very similar to Mm6 with just a few new ones
     
    wc ucscStsAlias.tab  (after applying filter to primers.psl above)
    #	144570  433667 3366815 ucscStsAlias.tab
    wc ucscStsAlias.tab  (before applying filter to primers.psl above)
    #	144570  433667 3366815 ucscStsAlias.tab
    wc /cluster/data/mm7/bed/STSmarkers/ucscStsAlias.tab
    #	141585  424725 3284106 ucscStsAlias.tab
    wc /cluster/store6/mm5/bed/STSmarkers/ucscStsAlias.tab
    # 126624  379859 3037850 /cluster/store6/mm5/bed/STSmarkers/ucscStsAlias.tab
     
    hgsql -e "drop table stsAlias;" mm8
    hgsql mm8 < ~/kent/src/hg/lib/stsAlias.sql
    hgsql -e \
	'load data local infile "ucscStsAlias.tab" into table stsAlias;' mm8
    hgsql -e "drop table stsMapMouseNew;" mm8
    hgsql mm8 < ~/kent/src/hg/lib/stsMapMouseNew.sql
    hgsql -e \
'load data local infile "stsMapMouse.bed" into table stsMapMouseNew;' mm8
    hgsql -e "drop table stsInfoMouseNew;" mm8
    hgsql mm8 < ~/kent/src/hg/lib/stsInfoMouseNew.sql
    hgsql -e \
     'load data local infile "stsInfoMouse.bed" into table stsInfoMouseNew;' mm8

    hgLoadPsl -nobin -table=all_sts_primer mm8 primer/primers.psl.filter
    #	load of all_sts_primer did not go as planned: 34460 record(s),
    #	0 row(s) skipped, 21 warning(s) loading primer/primers.psl.filter

    #	load of all_sts_primer did not go as planned: 35148 record(s), 0
    #	row(s) skipped, 21 warning(s) loading primer/primers.psl.filter

    # load primer sequences	
    mkdir /gbdb/mm8/stsMarker
    ln -s /cluster/data/mm8/bed/STSmarkers/mouseP.fa \
	/gbdb/mm8/stsMarker/mouseP.fa
    # PLEASE NOTE THAT THE If you are going to reload this business, use the
    #	-replace option on this hgLoadSeq
    #	hgLoadSeq -replace mm8 /gbdb/mm8/stsMarker/mouseP.fa
    # otherwise there will be a problem that the seq and extFile tables 
    # will be out of sync. 
    hgLoadSeq mm8 /gbdb/mm8/stsMarker/mouseP.fa
    #  Adding /gbdb/mm8/stsMarker/mouseP.fa
    #  33838 sequences

    #	After applying the filter to primers.psl above  (and in mm7 too)
    featureBits mm8 all_sts_primer
    #	3757119 bases of 2583394090 (0.145%) in intersection
    featureBits mm7 all_sts_primer
    #	3706406 bases of 2597150411 (0.143%) in intersection
    featureBits mm8 stsMapMouseNew
    #	4805958 bases of 2583394090 (0.186%) in intersection
    featureBits mm7 stsMapMouseNew
    #	4638338 bases of 2597150411 (0.179%) in intersection

    #	Before applying the filter to primers.psl above
    featureBits mm8 all_sts_primer
    #	3794153 bases of 2583394090 (0.147%) in intersection
    featureBits mm7 all_sts_primer
    #	3735649 bases of 2597150411 (0.144%) in intersection
    featureBits mm5 all_sts_primer
    #	3727268 bases of 2615483787 (0.143%) in intersection
    featureBits mm8 stsMapMouseNew
    #	4917456 bases of 2583394090 (0.190%) in intersection
    featureBits mm7 stsMapMouseNew
    #	4736039 bases of 2597150411 (0.182%) in intersection
    featureBits mm5 stsMapMouseNew
    #	4719679 bases of 2615483787 (0.180%) in intersection

    hgsql -N mm8 -e "select count(*) from stsAlias;"
    #	140649
    hgsql -N mm7 -e "select count(*) from stsAlias;"
    #	137738
    hgsql -N mm5 -e "select count(*) from stsAlias;"
    #	122944
    hgsql -N mm8 -e "select count(*) from stsInfoMouseNew;"
    #	59843
    hgsql -N mm7 -e "select count(*) from stsInfoMouseNew;"
    #	58980
    hgsql -N mm5 -e "select count(*) from stsInfoMouseNew;"
    #	58493

    #	compare old and new name lists:
    awk '{print $4}' /cluster/data/mm7/bed/STSmarkers/stsMapMouse.bed | \
	sort -u > mm7.nameList
    awk '{print $4}' stsMapMouse.bed | sort -u > mm8.nameList
    #	After applying the filter to primers.psl above  (and in mm7 too)
    comm -12 mm?.nameList | wc
    #	27320   27320  265970		<- 27,320 names in common
    comm -23 mm7.nameList mm8.nameList | wc
    #	188     188    1695		<- 188 unique to mm7 list
    comm -13 mm7.nameList mm8.nameList | wc
    #	1107    1107   12626		<- 1,107 unique to mm8 list

    #	Before applying the filter to primers.psl above
    comm -12 mm?.nameList | wc
    #	27658   27658  268827		<- 27,658 names in commmon
    comm -23 mm7.nameList mm8.nameList | wc
    #	197     197    1781		<- 197 unique to mm7 list
    comm -13 mm7.nameList mm8.nameList | wc
    #	1184    1184   13480		<- 1,184 unique to mm8 list

    #	Mm6 vs Mm5:
    #	27454   27454  266951		<- 27,545 names in common
    #	182     182    1685		<- 182 unique to mm5 list
    #	1625    1625   15090		<- 1,625 unique to mm7 list

