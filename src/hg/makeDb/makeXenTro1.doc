#!/bin/csh -f # set emacs mode
exit; # don't actually run this like a script :)

# DOWNLOAD SEQUENCE (DONE 10/15/04 Fan)
    ssh kksilo
    mkdir /cluster/store8/xenTro1
    cd /cluster/data
    ln -s /cluster/store8/xenTro1 xenTro1
    cd /cluster/data/xenTro1
    mkdir downloads
    cd downloads

    wget --timestamp ftp://ftp.jgi-psf.org/pub/JGI_data/Frog/v3.0/xenopus.041015.fasta.gz
    wget --timestamp ftp://ftp.jgi-psf.org/pub/JGI_data/Frog/v3.0/xenopus.041015.allmasked.gz
    wget --timestamp ftp://ftp.jgi-psf.org/pub/JGI_data/Frog/v3.0/repeats_lib/xt3.lib1.fasta.gz

    gzip -d *.gz

    cd ..

# SPLIT SCAFFOLDS (DONE 10/17/04, Fan)

  ssh kksilo
  cd /cluster/data/xenTro1
  mkdir scaffolds

# /cluster/bin/i386/faSplit byname downloads/xenopus.041015.fasta scaffolds -outDirDepth=3
# Tried above and as noted by Heather before, not sure why these didn't get put under scaffolds 
# directory, removed 1, 2, 3, ....  Tried it differently.

  cd scaffolds
  /cluster/bin/i386/faSplit byname ../downloads/xenopus.041015.fasta scaffolds -outDirDepth=3
  cd ..

  # generate list
  find scaffolds -print > scaffolds.list.0
  grep fa scaffolds.list.0 > scaffolds.list

# MAKE 2BIT NIB FILE (DONE 10/18/04, Fan)

  ssh kksilo
  cd /cluster/data/xenTro1/downloads
  /cluster/bin/i386/faToTwoBit xenopus.041015.fasta xenTro1.2bit
# The xenopus.041015.fasta file has 70 bases each line instead of 50.
# Created a specialized twoBitToFa70 program to generate 70 bases fa file.
  /cluster/bin/i386/twoBitToFa70 xenTro1.2bit check70.fa
# diff got memory exhausted error on kksilo
# went to kolossus and did diff between check70.fa and xenopus.041015.fasta.
# they are identical except xenopus.041015.fasta has some empty lines at end of
# some records
  mv xenTro1.2bit ..
  ssh hgwdev
  mkdir /gbdb/xenTro1
  mkdir /gbdb/xenTro1/nib
  ln -s /cluster/data/xenTro1/xenTro1.2bit /gbdb/xenTro1/nib

# CREATE DATABASE

  ssh hgwdev
  hgsql hg17
  create database xenTro1;
  use xenTro1;
  create table grp (PRIMARY KEY(NAME)) select * from hg17.grp;
  # add rows to hgcentraltest on hgwbeta in dbDb and defaultDb
  # set orderKey past chicken, before Zebrafish

# CREATE AGP FILES AND GAP/GOLD TABLES (DONE JK 10/23/04)
  ssh kksilo
  cd /cluster/data/xenTro1
  hgFakeAgp downloads/xenopus.041015.fasta xenTro1.agp
  
  ssh hgwdev
  cd /cluster/data/xenTro1
  hgGoldGapGl xenTro1 xenTro1.agp

# CREATE CHROMINFO TABLE (DONE 10/18/04, Fan)
# an improvement here would be to have getMaxCoord output the 2bit file name
  ssh hgwdev
  cd /cluster/data/xenTro1
  faSize -detailed=on downloads/xenopus.041015.fasta \
    | awk '{printf("%s\t%s\t%s\n", $1, $2, "/gbdb/xenTro1/nib/xenTro1.2bit");}' \
    > chromInfo.tab
  hgsql xenTro1 < ~/src/hg/lib/chromInfo.sql
  hgsql xenTro1 -e 'load data local infile "chromInfo.tab" into table chromInfo'

# REPEATMASKER (DONE,10/20/04, Fan)
# using the split scaffold fa files generated earlier
# do a trial run
  ssh hgwdev
  cd /cluster/data/xenTro1/scaffolds/0/0/0
  /cluster/bluearc/RepeatMasker/RepeatMasker -ali -s -spec bos SCAFFOLD1000.fa
# configure
  cd /cluster/data/xenTro1
  cp -p downloads/xt3.lib1.fasta /cluster/bluearc/RepeatMasker/Libraries/xt3_JGI.lib
  cp /cluster/data/anoGam1/jkStuff/RMAnopheles jkStuff/RMXenTro
  # edit jkStuff/RMXenTro to change all references anoGam1 --> xenTro1
  # and use the following line to run RepeatMasker
  # /cluster/bluearc/RepeatMasker/RepeatMasker -ali -s -xsmall -lib /cluster/bluearc/RepeatMasker/Librari
es/xt3_JGI.lib $2
  mkdir RMRun

  # /bin/csh makeJoblist-RM.csh  
  # what the above line is for?

  cd scaffolds
  foreach i (0 1 2 3 4 5 6 7 8 9)
    cd $i
    foreach j (0 1 2 3 4 5 6 7 8 9)
      cd $j
      foreach k (0 1 2 3 4 5 6 7 8 9)
        cd $k
        foreach f (*.fa)
          echo /cluster/data/xenTro1/jkStuff/RMXenTro \
	       /cluster/data/xenTro1/scaffolds/$i/$j/$k $f \
	      '{'check out line+ /cluster/data/xenTro1/scaffolds/$i/$j/$k/$f.out'}' \
	  >> /cluster/data/xenTro1/RMRun/RMJobs
	end
      cd ..
      end
    cd ..
    end
  cd ..
  end

  # do the run
  ssh kk
  cd /cluster/data/xenTro1/RMRun
  para create RMJobs
  para try
  para check
  para push
  para check
  para time
# Completed: 27064 of 27064 jobs
# CPU time in finished jobs:    8152873s  135881.22m  2264.69h   94.36d  0.259 y
# IO & Wait Time:                287040s    4784.00m    79.73h    3.32d  0.009 y
# Average job time:                 312s       5.20m     0.09h    0.00d
# Longest job:                    46100s     768.33m    12.81h    0.53d
# Submission to last job:         46220s     770.33m    12.84h    0.53d

# Our RepeatMasker results are not exactly the same as JGI's, but close.
# JGI has not provided .out files requested earlier as of 10/24/04.
# With Jim's approval, proceeded with our RepeatMasker results.
# Note: Jim earlier went ahead with JGI's repeat masked result for 
# his blastz run.
+-----------+-----------+-------------+------------+------------+------------+
| sum(a)    | sum(b)    | sum(abBoth) | sum(aOnly) | sum(bOnly) | sum(total) |
+-----------+-----------+-------------+------------+------------+------------+
| 177141183 | 177367102 |   174224057 |    2917126 |    3143045 | 1630713514 |
+-----------+-----------+-------------+------------+------------+------------+

  # concatenate into one output file; took about 90 minutes
  ssh kksilo
  cd /cluster/data/xenTro1
  mkdir repeats
  /bin/tcsh concatRM.tcsh
  cd repeats
  head -2 repeats.all >repeats.out
  fgrep scaffold_ repeats.all |grep -v >>repeats.out

  # get the header (first 2 lines) to make hgLoadOut happy
  head -2 repeats.all >repeats.out

  # filter out no repetitive sequence found ... message lines
  fgrep scaffold_ repeats.all |grep -v 'no repetitive' >>repeats.out
  
  ssh hgwdev
  cd /cluster/data/xenTro1/repeats
  hgLoadOut -nosplit xenTro1 repeats.out
  hgsql xenTro1
  rename table repeats_rmsk to rmsk

  # select count(*) from rmsk;
  # 1140362
  # select count(*) from rmsk where repName like "TE_ORF%";
  # 164354

# SIMPLE REPEATS (DONE 10/22/04, Fan)
# put the results throughout the scaffold 0/0/0 directories,
# same as RepeatMasker, to avoid too many files in the same directory
  ssh kksilo
  cd /cluster/data/xenTro1
  mkdir bed
  cd bed
  mkdir simpleRepeat
  cd simpleRepeat

  # /bin/csh makeJoblist-trf.csh

  # do the run; took about 12 hours
  tcsh trf-run.csh > trf.log

  # concatenate into one output file; took about an hour
  /bin/tcsh concatTRF.csh

  # load
  ssh hgwdev
  cd /cluster/data/xenTro1/bed/simpleRepeat
  /cluster/bin/i386/hgLoadBed xenTro1 simpleRepeat trf.bed \
    -sqlTable=/cluster/home/fanhsu/src/hg/lib/simpleRepeat.sql

  # Reading trf.all
  # Loaded 505308 elements of size 16
  # Sorted
  # Saving bed.tab
  # Loading xenTro1

# CREATE MASKED FA USING REPEATMASKER AND FILTERED TRF FILES (DONE Oct. 22, 2004, Fan) 

  ssh kksilo
  cd /cluster/data/xenTro1
  /cluster/bin/i386/maskOutFa -soft downloads/xenopus.041015.fasta repeats/repeats.out xenTro1.softmask.fa

  # 1 warnings about negative rEnd
  # WARNING: negative rEnd: -18 scaffold_69:2353795-2354532 XL1723L
  # matches select count(*) from rmsk where repEnd < 0;

  /cluster/bin/i386/maskOutFa -softAdd xenTro1.softmask.fa bed/simpleRepeat/trf.bed xenTro1.softmask2.fa

  # hard masking (Ns instead of lower case) for download files

# REGENERATE 2BIT NIB (DONE, 10/22/04, Fan)
  ssh kksilo
  cd /cluster/data/xenTro1
  /cluster/bin/i386/faToTwoBit xenTro1.softmask2.fa xenTro1.softmask.2bit
  /cluster/bin/i386/twoBitToFa xenTro1.softmask.2bit check.softmask.fa
  diff -q xenTro1.softmask2.fa check.softmask.fa
# They are the same.
  mv xenTro1.2bit xenTro1.2bit.unmasked
  mv xenTro1.softmask.2bit xenTro1.2bit

# MAKE 11.OOC FILE FOR BLAT (DONE, 10/22/04, Fan)
  ssh kkr1u00
  mkdir /cluster/data/xenTro1/bed/ooc
  cd /cluster/data/xenTro1/bed/ooc
  ls -1 /cluster/data/xenTro1/xenTro1.2bit > nib.lst
  mkdir /cluster/bluearc/xenTro1
  /cluster/bin/i386/blat nib.lst /dev/null /dev/null -tileSize=11 \
    -makeOoc=/cluster/bluearc/xenTro1/11.ooc -repMatch=540
  # Wrote 26600 overused 11-mers to /cluster/bluearc/xenTro1/11.ooc
  cp -p /cluster/bluearc/xenTro1/11.ooc /iscratch/i/xenTro1/
  iSync

# GENBANK (DONE, 10/26/04, Fan)
  ssh hgwdev
  cd /cluster/home/fanhsu/kent/src/hg/makeDb/genbank
  # check for missing commits
  diff /cluster/data/genbank/etc/genbank.conf etc/genbank.conf
  # edit etc/genbank.conf and add these lines, starting with the comment:
  # xenTro1 (X. tropicalis)
  # could get rid of the nib in this path, 2bit isn't a nib (4bit) ???

# xenTro1 (X. tropicalis) 27064 scaffolds!
# This uses the mondo 2bit file functionality, where multiple
# sequences from a two bit are alignmed from a single jobs.
# Genbank X. tropicalis
#     5365 mRNAs
#   423107 ESTs
# partation 2bit into 5000 parts for initial build
xenTro1.genome = /iscratch/i/xenTro1/nib/xenTro1.2bit
xenTro1.mondoTwoBitParts = 5000
xenTro1.lift = no
xenTro1.refseq.mrna.native.load = no
xenTro1.genbank.mrna.xeno.load = no
xenTro1.genbank.est.xeno.load = no
xenTro1.downloadDir = xenTro1
xenTro1.perChromTables = no

cvs update etc/genbank.conf
cvs commit etc/genbank.conf
# revision: 1.64

  # edit src/lib/gbGenome.c
  make
  cvs commit -m "added frog" src/lib/gbGenome.c
  # revision 1.21

  # edit src/align/gbBlat
  make
  cvs commit -m "added frog" src/align/gbBlat
  # revision 1.33

  make install-server

  ssh eieio
  cd /cluster/data/genbank
  bin/gbAlignStep -srcDb=genbank -type=mrna -initial -verbose=1 xenTro1 &
  # logged to 
  # /cluster/data/genbank/var/build/logs/YYMMDDHHMMSS.xenTro1.initalign.log
  # load
  ssh hgwdev
  cd /cluster/data/genbank
  nice bin/gbDbLoadStep -verbose=1 -drop -initialLoad xenTro1
  # logged to /cluster/data/genbank/var/dbload/hgwdev/logs/YYMMDDHHMMSS.dbload.log

  # ESTs required modification to the build process to deal with the huge
  # number of scaffolds.  Once completed, the following line was
  # added to genbank.conf to enable it's uses:
    xenTro1.mondoTwoBitParts = 5000
  ssh eieio
  cd /cluster/data/genbank
  bin/gbAlignStep -initial -srcDb=genbank -type=est xenTro1
  
  # load the ESTs, reloading mRNAs as well
  ssh hgwdev
  cd /cluster/data/genbank
  nice bin/gbDbLoadStep -drop -initialLoad xenTro1

  # add xenTro1 to list of databases to align in
  # ~/src/hg/makeDb/genbank/etc/align-genbank
  # CVS update and check in the file.

# GC5BASE - (DONE 2004-10-27 - Hiram)
    ssh kksilo
    mkdir /cluster/data/xenTro1/bed/gc5Base
    cd /cluster/data/xenTro1/bed/gc5Base
    hgGcPercent -wigOut -doGaps -file=stdout -win=5 xenTro1 \
      /cluster/data/xenTro1 | wigBedToBinary stdin gc5Base.wig gc5Base.wib
    #       Calculating gcPercent with window size 5
    #       Using twoBit: /cluster/data/xenTro1/xenTro1.2bit
    #       File stdout created
    #	Converted stdin, upper limit 100.00, lower limit 0.00
    #	real    332m59.680s
    #	user    150m45.460s
    #	sys     157m28.750s

    #	Now load those results into the database
    ssh hgwdev
    cd /cluster/data/xenTro1/bed/gc5Base
    mkdir /gbdb/xenTro1/wib
    ln -s `pwd`/gc5Base.wib /gbdb/xenTro1/wib
    hgLoadWiggle -pathPrefix=/gbdb/xenTro1/wib xenTro1 gc5Base gc5Base.wig

# PRODUCING GENSCAN PREDICTIONS (DONE 10/27/04 Fan)
  
    ssh hgwdev
    mkdir /cluster/data/xenTro1/bed/genscan
    cd /cluster/data/xenTro1/bed/genscan
    # Check out hg3rdParty/genscanlinux to get latest genscan:
    cvs co hg3rdParty/genscanlinux

    # create hard masked .fa files
    ssh kksilo
    cd /cluster/store8/xenTro1
    maskOutFa xenTro1.softmask2.fa hard xenTro1.hardmask2.fa
    /cluster/bin/i386/faSplit about xenTro1.hardmask2.fa 2000000 hardMasked2/

    # Run on small cluster (more mem than big cluster).
    ssh kki
    cd /cluster/data/xenTro1/bed/genscan
    # Make 3 subdirectories for genscan to put their output files in
    mkdir gtf pep subopt
    # Generate a list file, genome.list, of all the hard-masked contigs that 
    # *do not* consist of all-N's (which would cause genscan to blow up)
    rm -f genome.list
    touch genome.list

    foreach f ( `ls -1S /cluster/data/xenTro1/hardMasked2/*` )
      egrep '[ACGT]' $f > /dev/null
      if ($status == 0) echo $f >> genome.list
    end     
    wc -l genome.list
    # Create template file, gsub, for gensub2.  For example (3-line file):
    cat << '_EOF_' > gsub
#LOOP
/cluster/bin/x86_64/gsBig {check in line+ $(path1)} {check out line gtf/$(root1).gtf} -trans={check out 
line pep/$(root1).pep} -subopt={check out line subopt/$(root1).bed} -exe=hg3rdParty/genscanlinux/genscan -
par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=2400000
#ENDLOOP
'_EOF_'
    # << this line makes emacs coloring happy
    gensub2 genome.list single gsub jobList
    para create jobList
    para try, check, push, check, ...
# Completed: 645 of 648 jobs
# Crashed: 3 jobs
# CPU time in finished jobs:      43701s     728.35m    12.14h    0.51d  0.001 y
# IO & Wait Time:                  4362s      72.70m     1.21h    0.05d  0.000 y
# Average job time:                  75s       1.24m     0.02h    0.00d
# Longest job:                      435s       7.25m     0.12h    0.01d
# Submission to last job:          3641s      60.68m     1.01h    0.04d

    # If there are crashes, diagnose with "para problems".  
    # If a job crashes due to genscan running out of memory, re-run it 
    # manually with "-window=1200000" instead of "-window=2400000".
    ssh kkr7u00
    cd /cluster/data/xenTro1/bed/Genscan

/cluster/bin/x86_64/gsBig /cluster/data/xenTro1/hardMasked2/05.fa gtf/05.gtf -trans=pep/05.pep -
subopt=subopt/05.bed -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -
tmp=/tmp -window=1200000

/cluster/bin/x86_64/gsBig /cluster/data/xenTro1/hardMasked2/76.fa gtf/76.gtf -trans=pep/76.pep -
subopt=subopt/76.bed -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -
tmp=/tmp -window=1200000

/cluster/bin/x86_64/gsBig /cluster/data/xenTro1/hardMasked2/116.fa gtf/116.gtf -trans=pep/116.pep -
subopt=subopt/116.bed -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -
tmp=/tmp -window=1200000

    ls -1 gtf | wc -l
#    648
    endsInLf gtf/*

    # Convert these to chromosome level files as so:
    ssh kksilo
    cd /cluster/data/xenTro1/bed/genscan

    cat gtf/*.gtf >genscan.gtf
    cat pep/*.pep > genscan.pep
    cat subopt/*.bed >genscanSubopt.bed

    # Load into the database as so:
    ssh hgwdev
    cd /cluster/data/xenTro1/bed/genscan
    ldHgGene -gtf -genePredExt xenTro1 genscan genscan.gtf
    hgPepPred xenTro1 generic genscanPep genscan.pep
    hgLoadBed xenTro1 genscanSubopt genscanSubopt.bed

    nice featureBits xenTro1 genscan
    # 63766483 bases of 1381238994 (4.617%) in intersection

