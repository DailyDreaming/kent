# This file describes browser build for the mouse
# genome, March 2005, ncbi mouse_34 - Mm6
#
#	"$Id: makeMm6.doc,v 1.12 2005/03/25 00:32:37 hiram Exp $"
#
# DOWNLOAD THE MOUSE SEQUENCE FROM NCBI (DONE - 2005-03-09 - Hiram)
#
#	Examine disk space issues, summarize mm5 usage:
    ssh kksilo
    cd /cluster/store6
    du -hsc mm5
#	476G    mm5
#    That is a lot of disk space for an assembly, I wonder if it needs
#    some cleaning.  Our last vestige of large amounts of space is on
#    store10, thus:
    ssh kksilo
    mkdir /cluster/store10/mm6
    ln -s /cluster/store10/mm6 /cluster/data/mm6
    mkdir /cluster/data/mm6/ncbi
    cd /cluster/data/mm6/ncbi
#	set the login name and password in a .wgetrc file in this
#	directory, permissions 600, its format:
#	login = hgpguest
#	passwd = xxxx
    WGETRC=`pwd`/.wgetrc
    export WGETRC
    wget --timestamping --force-directories --directory-prefix=. \
	--dont-remove-listing --recursive --level=4 --no-parent \
	--no-host-directories --cut-dirs=1 \
	ftp://ftp-private.ncbi.nih.gov/mouse_34
#	Downloaded: 1,586,892,564 bytes in 57 files
#
#	NOTE: chrY - radical change from mm5 - most of it was moved into
#	chrY_random
#	Notes from Deanna Church:
##############################################################################
# There are some general stats on chromosome lengths and N50s (for this build
# and compared to Build 33) as well as a comparison to the non-sequence based
# maps. 

# Before there is too much alarm I want to point out that there is a fair
# amount of N50 variation from chromosome to chromosome, as well as a few
# chromosomes that have significantly different N50 than in Build 33. The most
# severe case is Mmu2 (36 Mb in Build 34 vs 90 Mb in Build 33). Remember Mmu2
# was not automatically assembled and this drop is due to gaps being
# purposefully introduced. A couple of auto-assembled chromosomes also saw
# drops in N50 (Mmu5 down ~13Mb and Mmu13 down about 6 Mb)- however, this is
# also likely due to clones having been introduced to the TPF. In these cases,
# many of the clones have no sequence- and there is likely no WGS to hold
# things together either. So, I don't think this by itself is cause for
# concern- the N50 for these two chromosomes is still >19 Mb, so they are very
# contiguous.

# On the plus side, Mmu14 has an N50 increase of 41 Mb, Mmu12 has an increase
# of 24 Mb and Mmu8 has an increase of 13 Mb. 

# The genome average N50 increased from 23.2 Mb to 26.2 Mb.
##############################################################################

#  No chrM or chrMT was delivered.  Pick up NC_005089.1 fasta file
#	for chrM sequence from NCBI and place in this ncbi download
#	directory as chrM in both chrfasta and contigfasta
#	with a fixed up header line to be like all the others:
#	>lcl|chrM.fa gi|34538597|ref|NC_005089.1| Mus musculus mitochondrion, complete genome

#  Fixup the agp and contig.idmap files to add chrM
    cd /cluster/data/mm6
    zcat ncbi/allrefcontig.chr.agp.gz > allrefcontig.chr.agp
    echo -e "chrM\t1\t16299\t1\tF\tAY172335.1\t1\t16299\t+" >> \
	allrefcontig.chr.agp
    gzip allrefcontig.chr.agp
    zcat ncbi/allcontig.agp.gz > allcontig.agp
    echo -e "NC_005089\t1\t16299\t1\tF\tAY172335\t\t1\t16299\t+" >> \
	allcontig.agp
    gzip allcontig.agp
    zcat ncbi/seq_contig.md.gz | sed -e "6991i\
10090\tM\t0\t0\t+\tstart\t-1\tCONTIG\tC57BL/6J\t10\n\
10090\tM\t1\t16299\t+\tNC_005089\tGI:34538597\tCONTIG\tC57BL/6J\tna\n\
10090\tM\t16299\t16299\t+\tend\t-2\tCONTIG\tC57BL/6J\t10" > seq_contig.md
    #	The line number 6991 was found by checking the contents of
    #	ncbi/seq_contig.md.gz and it was the line starting with:
    #	10090^IUn|NT_039766^I1^I4412^
    #	Wanted this chrM information before that line.  I tried to get
    #	this work with a match and insert, but for some unknown reason
    #	it would not function:
    #	sed -e "#NT_039769#i\
    #		....  this is supposed to work, I don't know why it does not
    #  And even more curiously, this command cut and paste did NOT work
    #	on hgwdev in my login.  Mysteries of environment.  Only worked
    #	on kksilo.
    gzip seq_contig.md
#   summarize sequence counts
    mkdir faCounts
    time faCount ncbi/chrfasta/chr*.fa.gz > faCounts/chrfasta.faCount 2>&1 &
    time faCount ncbi/contigfasta/chr*.fa.gz > \
	faCounts/contigfasta.faCount 2>&1 &
    #	about 3 minutes each for the above two faCounts
    time zcat ncbi/chrfasta/chr*.fa.gz | grep "^>" > \
	faCounts/chrfasta.headers 2>&1 &
    time zcat ncbi/contigfasta/chr*.fa.gz | grep "^>" > \
	faCounts/contigfasta.headers 2>&1 &
    #	about 2 minutes each for the above two zcat/greps

#  BREAK UP SEQUENCE INTO 5 MB CHUNKS at NON-BRIDGED CONTIGS
#			(DONE - 2005-03-09 - Hiram)
    ssh kksilo
    cd /cluster/data/mm6
    for F in ncbi/chrfasta/chr*.fa.gz
    do
	CHR=`basename ${F} | sed -e "s/.fa.gz//; s/chr//"`
	echo ${CHR} ${F}
	mkdir -p "${CHR}"
	zcat allrefcontig.chr.agp.gz | \
	    perl -we "while(<>){if (/^chr${CHR}\t/) {print;}}" > \
		${CHR}/chr${CHR}.agp
	zcat ncbi/chrfasta/chr${CHR}.fa.gz | \
	    perl -wpe 's/^>lcl\|(chr\w+)\.fa.*/>$1/' | \
		splitFaIntoContigs ${CHR}/chr${CHR}.agp \
		    stdin /cluster/data/mm6 -nSize=5000000
    done
    #	The above loop takes about 5 minutes

# CREATE CHROM-LEVEL AGP AND FASTA FOR _RANDOMS (DONE 2005-03-09 - Hiram)
    ssh kksilo
    mkdir /cluster/data/mm6/jkStuff
    cd /cluster/data/mm6
    mkdir Un tmp
    cp -p /cluster/data/mm5/jkStuff/ncbiFixAgp ./jkStuff
    zcat allrefcontig.chr.agp.gz | ./jkStuff/ncbiFixAgp /dev/stdin | gzip > \
	allrefcontig.chr.ordered.agp.gz
    #	Set the appropriate release number here, this one is 34
    sed -e "s/buildNum = 33/buildNum = 34/" \
	/cluster/data/mm5/jkStuff/ncbiToRandomAgps > \
	    jkStuff/ncbiToRandomAgps
    chmod +x jkStuff/ncbiToRandomAgps
    gunzip seq_contig.md.gz allrefcontig.chr.ordered.agp.gz
    ./jkStuff/ncbiToRandomAgps seq_contig.md allrefcontig.chr.ordered.agp \
                        ncbi/contig.idmap .
    #  The chrUn_random.agp created by this is too large with the 5000
    #  gaps.  it will work with 1000 gaps, so fixup the chrUn_random
    #  agp:
    ./jkStuff/ncbiToRandomAgps -gapLen 1000 -chrom Un \
	seq_contig.md allrefcontig.chr.ordered.agp ncbi/contig.idmap .
    for C in ? ??
    do
	if [ -s ${C}/chr${C}_random.ctg.agp ]; then
	    echo "building ${C}/chr${C}_random.fa"
	    rm -f ./tmp.fa
	    zcat ncbi/contigfasta/chr${C}.fa.gz | \
		perl -wpe 's/^>lcl\|(Mm\w+)\s+.*$/>$1/' > ./tmp.fa
	    $HOME/bin/i386/agpToFa -verbose=2 -simpleMulti \
		${C}/chr${C}_random.ctg.agp chr${C}_random \
		    ${C}/chr${C}_random.fa ./tmp.fa
	    rm -f ./tmp.fa
	fi
    done > tmp/agpToFa.out 2>&1
    #	the above loop takes about 6 minutes, examine the tmp/agpToFa.out
    #	record for any errors
    # Clean these up to avoid confusion later... they're easily rebuilt
    #   with the ncbiToRandomAgps script above
    rm ?/*_random.ctg.agp ??/*_random.ctg.agp
    gzip seq_contig.md allrefcontig.chr.ordered.agp

# BREAK UP _RANDOMS INTO 5 MB CHUNKS AT NON-BRIDGED CONTIGS
#					(DONE 2005-03-09 - Hiram)
    ssh kksilo
    cd /cluster/data/mm6
    for C in ? ??
    do
	if [ -s ${C}/chr${C}_random.fa ]; then
	    splitFaIntoContigs  -nSize=5000000 ${C}/chr${C}_random.agp \
		${C}/chr${C}_random.fa .
	    mkdir -p ${C}/lift
	    rm -f ${C}/lift/rOut.lst ${C}/lift/random.lft ${C}/lift/random.lst
	    mv ${C}_random/lift/oOut.lst ${C}/lift/rOut.lst
	    mv ${C}_random/lift/ordered.lft ${C}/lift/random.lft
	    mv ${C}_random/lift/ordered.lst ${C}/lift/random.lst
	    rmdir ${C}_random/lift
	    rm ${C}_random/chr${C}_random.agp ${C}_random/chr${C}_random.fa
	    rm -rf ${C}/chr${C}_random_*
	    mv ${C}_random/chr${C}_random_* ${C}
	    rmdir ${C}_random
	fi
    done > tmp/split.out 2>&1
    #	the above loop takes less than a minute
    #	scan the tmp/split.out file for possible errors

# MAKE LIFTALL.LFT (DONE - 2005-03-10 - Hiram)
    ssh kksilo
    cd /cluster/data/mm6
    cat ?/lift/*.lft ??/lift/*.lft > jkStuff/liftAll.lft

# CREATING DATABASE (DONE - 2005-03-10 - Hiram)
    ssh kksilo
    cd /cluster/data/mm6
    faToTwoBit ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa \
	mm6.2bit
    twoBitInfo mm6.2bit stdout | sort -rn +1 > chrom.sizes
    grep -v random chrom.sizes | cut -f1 | sed -e "s/chr//" > chrom.lst
    twoBitInfo mm6.2bit stdout |
        awk '{printf "%s\t%s\t/gbdb/mm6/mm6.2bit\n", $1,$2}' > chromInfo.tab

    ssh hgwdev
    cd /cluster/data/mm6
    hgsql -e "create database mm6;" mysql
    #	Make sure we have enough room (eventually ~ 70Gb) for mysql tables:
    df -h | grep mysql
    #	/dev/sda1             472G  227G  222G  51% /var/lib/mysql2
    #	/dev/sdc1             1.8T  728G  933G  44% /var/lib/mysql

    # CREATING GRP TABLE FOR TRACK GROUPING (DONE - 2005-03-10 - Hiram)
    #   Use any of the newest databases to ensure that the organization
    #   of the grp table is up to date
    ssh hgwdev
    hgsql mm6 -e "create table grp (PRIMARY KEY(NAME)) select * from hg17.grp"
    hgsql mm6 < $HOME/kent/src/hg/lib/chromInfo.sql
    hgsql mm6 -e 'load data local infile "chromInfo.tab" into table chromInfo;'

    # Enter mm6 into dbDb and defaultDb so test browser knows about it:
    hgsql -e 'INSERT INTO dbDb (name, description, nibPath, organism, \
        defaultPos, active, orderKey, genome, scientificName, \
        htmlPath, hgNearOk, hgPbOk, sourceName) \
        VALUES("mm6", "March 2005", "/gbdb/mm6", "Mouse", \
        "chr6:28912411-28925620", 1, 24, "Mouse", \
        "Mus musculus", "/gbdb/mm6/html/description.html", 0, 0, \
        "NCBI Build 34");' -h localhost hgcentraltest
    #	do this defaultDb entry later after there is something to see
    #	on this browser.
    hgsql -e 'INSERT INTO defaultDb (name, genome) VALUES("mm6", "Mouse")' \
        -h localhost hgcentraltest
    # start a new entry in the trackDb hierarchy
    cd $HOME/kent/src/hg/makeDb/trackDb/mouse
    mkdir mm6
    cvs add mm6
    cd mm6
    cp ../mm5/description.html .
    vi description.html - fixup text for this assembly
    cvs add description.html
    cvs commit
    cd ../..
    vi trackDb.ra - add mm6 to the list
    mkdir /cluster/data/mm6/html
    mkdir /gbdb/mm6
    ln -s /cluster/data/mm6/html /gbdb/mm6/html
    ln -s /cluster/data/mm6/mm6.2bit /gbdb/mm6/mm6.2bit
    cp -p mouse/mm6/description.html /gbdb/mm6/html
    make DBS=mm6 ZOO_DBS=""

#  GOLD GAP tracks (DONE - 2005-03-10 - Hiram)
    ssh hgwdev
    cd /cluster/data/mm6
    #	make sure these tmp contig agp files are gone, easily generated
    #	as above with jkStuff/ncbiToRandomAgps
    rm -f */chr*.ctg.agp
    mkdir ffa
    zcat ncbi/sequence.inf.gz > ffa/sequence.inf
    hgGoldGapGl -chromLst=chrom.lst mm6 /cluster/data/mm6 .
    featureBits mm6 gold
    #	2597150411 bases of 2597150411 (100.000%) in intersection
    featureBits mm5 gold
    #	2615483787 bases of 2615483787 (100.000%) in intersection
    featureBits mm4 gold
    #	2627444668 bases of 2627444668 (100.000%) in intersection

    featureBits mm6 gap
    #	482483041 bases of 2597150411 (18.577%) in intersection
    featureBits mm5 gap
    #	549468286 bases of 2615483787 (21.008%) in intersection
    featureBits mm4 gap
    #	325167539 bases of 2627444668 (12.376%) in intersection

#  DISTRIBUTE SEQUENCE TO INTERMEDIATE SERVERS FOR KLUSTER RUNS
    ssh kksilo
    mkdir /cluster/bluearc/mm6
    cd /cluster/data/mm6
    mkdir /cluster/bluearc/mm6/chrom
    cp -p */*.fa /cluster/bluearc/mm6/chrom

    # break up into 500,000 sized chunks for repeat masker runs
TOP=`pwd`
export TOP
for CTG_DIR in ?/chr?_[0-9]* ??/chr??_[0-9]* ?/chr?_random_[0-9]* \
        ??/chr??_random_[0-9]*
do
    ctg=`basename ${CTG_DIR}`
    cd ${CTG_DIR}
    faSplit size ${ctg}.fa 500000 ${ctg}_ -lift=${ctg}.lft -maxN=500000
    cd ${TOP}
done > tmp/ctg_split.out 2>&1
    #	about 3 minutes, check the tmp/ctg_split.out for anything unusual

    #	make a list of the contigs
TOP=`pwd`
export TOP
for CTG_DIR in ?/chr?_[0-9]* ??/chr??_[0-9]* ?/chr?_random_[0-9]* \
        ??/chr??_random_[0-9]*
do
    ctg=`basename ${CTG_DIR}`
    cd ${CTG_DIR}
    ls ${ctg}_* | while read F
    do
        echo ${CTG_DIR}/${F}
    done
    cd ${TOP}
done > contig500K.lst
    #	count 'em
    wc contig500K.lst
    #	6678   6678 176765 contig500K.lst

    mkdir -p /panasas/store/mm6/contigs
    rsync -a --progress --files-from=contig500K.lst . \
        /panasas/store/mm6/contigs/

    ssh kkr1u00
    mkdir /iscratch/i/mm6
    cd /iscratch/i/mm6
    cp -p /cluster/bluearc/mm6/chrom/* .
    /cluster/bin/iSync
    #	verify the contig copy above functioned OK
    find /panasas/store/mm6/contigs -type f | wc
    #	6678    6678  443885

# SIMPLE REPEAT TRACK (DONE - 2005-03-10 Hiram)
    # TRF can be run in parallel with RepeatMasker on the file server
    #   since it doesn't require masked input sequence.
    #   Run this on the rack 9 cluster     
    ssh kk9 
    mkdir /cluster/data/mm6/bed/simpleRepeat
    cd /cluster/data/mm6/bed/simpleRepeat
    mkdir trf
    cat << '_EOF_' > runTrf
#!/bin/csh -fe 
#
set path1 = $1
set inputFN = $1:t  
set outpath = $2
set outputFN = $2:t
mkdir -p /tmp/$outputFN
cp $path1 /tmp/$outputFN
pushd .
cd /tmp/$outputFN
/cluster/bin/i386/trfBig -trf=/cluster/bin/i386/trf $inputFN /dev/null -bedAt=$outputFN -tempDir=/tmp
popd
rm -f $outpath
cp -p /tmp/$outputFN/$outputFN $outpath
rm -fr /tmp/$outputFN/*
rmdir --ignore-fail-on-non-empty /tmp/$outputFN
'_EOF_'
    # << keep emacs coloring happy
    chmod +x runTrf

cat << '_EOF_' > gsub
#LOOP
./runTrf {check in line+ $(path1)}  {check out line trf/$(root1).bed}
#ENDLOOP
'_EOF_'
    # << keep emacs coloring happy

    ls -1S /iscratch/i/mm6/chrom/chr*.fa > genome.lst
    gensub2 genome.lst single gsub jobList
    para create jobList
    #	be gentle on the start up of these things since each starting
    #	job is a copy of the .fa file, a 'para try' starts 10 jobs
    #	there are only 40 total jobs
    para try
    sleep 30
    para check
    para try
    sleep 30
    para check
    para try
    sleep 30
    para check
    para try
    para check ... all 40 are running at this point, some are already done
    para time
Completed: 40 of 40 jobs
CPU time in finished jobs:      20946s     349.11m     5.82h    0.24d  0.001 y
IO & Wait Time:                  5543s      92.38m     1.54h    0.06d  0.000 y
Average job time:                 662s      11.04m     0.18h    0.01d
Longest running job:                0s       0.00m     0.00h    0.00d
Longest finished job:            1934s      32.23m     0.54h    0.02d
Submission to last job:          1934s      32.23m     0.54h    0.02d

    # Load into the database
    ssh hgwdev
    cd /cluster/data/mm6/bed/simpleRepeat
    cat trf/chr*.bed > simpleRepeat.bed
    hgLoadBed mm6 simpleRepeat simpleRepeat.bed \
      -sqlTable=$HOME/src/hg/lib/simpleRepeat.sql
    #	Loaded 1152810 elements of size 16

    featureBits mm6 simpleRepeat
    #	83220723 bases of 2597150411 (3.204%) in intersection
    featureBits mm5 simpleRepeat
    # 81414259 bases of 2615483787 (3.113%) in intersection
    featureBits mm4 simpleRepeat
    # 82600648 bases of 2627444668 (3.144%) in intersection
    featureBits mm3 simpleRepeat
    # 75457193 bases of 2505900260 (3.011%) in intersection

# PROCESS SIMPLE REPEATS INTO MASK (DONE - 2005-03-14 - DONE)

    # After the simpleRepeats track has been built, make a filtered version
    # of the trf output: keep trf's with period <= 12:
    ssh kksilo
    cd /cluster/data/mm6/bed/simpleRepeat
    mkdir trfMask
    for F in trf/chr*.bed
    do
	echo "${F} -> ${F/trf\//}"
	awk '{if ($5 <= 12) print;}' ${F} > trfMask/${F/trf\//}
    done


# REPEATMASKER RUN (after contigs have been distributed to panasas FS)
#	(DONE - 2005-03-10 - 2005-03-14 - Hiram)
#  RM Version: RepBase Update 9.11, RM database version 20050112
#	/cluster/bluearc/RepeatMasker050112
    ssh kk

    #- Make the run directory and job list:
    cd /cluster/data/mm6
    cat << '_EOF_' > jkStuff/RMMouse
#!/bin/csh -fe

cd /cluster/data/mm6/$1
pushd .
/bin/mkdir -p /tmp/mm6/$2
/bin/cp /panasas/store/mm6/contigs/$1/$2 /tmp/mm6/$2
cd /tmp/mm6/$2
/cluster/bluearc/RepeatMasker050112/RepeatMasker -ali -s -species mus $2
popd
/bin/cp /tmp/mm6/$2/$2.out ./
if (-e /tmp/mm6/$2/$2.align) /bin/cp /tmp/mm6/$2/$2.align ./
if (-e /tmp/mm6/$2/$2.tbl) /bin/cp /tmp/mm6/$2/$2.tbl ./
if (-e /tmp/mm6/$2/$2.cat) /bin/cp /tmp/mm6/$2/$2.cat ./
/bin/rm -fr /tmp/mm6/$2/*
/bin/rmdir --ignore-fail-on-non-empty /tmp/mm6/$2
/bin/rmdir --ignore-fail-on-non-empty /tmp/mm6
'_EOF_'
    chmod +x jkStuff/RMMouse

    mkdir -p RMRun
    rm -f RMRun/RMJobs
    cat contig500K.lst | while read C
    do
	D=`dirname ${C}`
	F=`basename ${C}`
	echo /cluster/data/mm6/jkStuff/RMMouse ${D} ${F} \
		'{'check out line+ /cluster/data/mm6/${D}/${F}.out'}'
    done >> RMRun/RMJobs

    #- Do the run
    ssh kk
    cd /cluster/data/mm6/RMRun
    para create RMJobs
    para try, para check, para check, para push, para check,...
# Completed: 6678 of 6678 jobs
# CPU time in finished jobs:   45303442s  755057.37m 12584.29h  524.35d  1.437 y
# IO & Wait Time:                100211s    1670.18m    27.84h    1.16d  0.003 y
# Average job time:                6799s     113.32m     1.89h    0.08d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:           10760s     179.33m     2.99h    0.12d
# Submission to last job:        121602s    2026.70m    33.78h    1.41d
    #	had cluster contention with other jobs

    #- Lift up the split-contig .out's to contig-level .out's
    ssh kksilo
    cd /cluster/data/mm6
    for D in ?/chr?_[0-9]* ??/chr??_[0-9]* ?/chr?_random_[0-9]* \
	??/chr??_random_[0-9]*
    do
	CONTIG=`basename ${D}`
	liftUp ${D}/${CONTIG}.fa.out ${D}/${CONTIG}.lft warn \
		${D}/${CONTIG}_[0-9]*.fa.out
    done > tmp/RM.lift.outs 2>&1

    cat << '_EOF_' > jkStuff/liftRM_out_to_chr.sh
#!/bin/sh
for C in ? ??
do
    echo "lifting ${C}"
    cd ${C}
    if [ -s lift/ordered.lft ]; then
	liftUp chr${C}.fa.out lift/ordered.lft warn `cat lift/oOut.lst`
    else
	echo "WARNING: Can not find ${C}/lift/ordered.lft"
    fi
    if [ -s lift/random.lft ]; then
	liftUp chr${C}_random.fa.out lift/random.lft warn `cat lift/rOut.lst`
    fi
    cd ..
done
'_EOF_'
    # << keep emacs coloring happy
    chmod +x jkStuff/liftRM_out_to_chr.sh
    ./jkStuff/liftRM_out_to_chr.sh > tmp/liftRM_out_to_chr.out 2>&1
    #	scan the results tmp/liftRM_out_to_chr.out
    #	there is a single: WARNING: Can not find Un/lift/ordered.lft
    #	which is OK
    #	List the final .out files, nothing should be size 0:
    ls -og */*.fa.out

    #- Load the .out files into the database with:
    ssh hgwdev
    cd /cluster/data/mm6
    hgLoadOut mm6 ?/chr?.fa.out ??/chr??.fa.out ?/chr?_random.fa.out \
	??/chr??_random.fa.out
    #	about 7 minutes, there are always a few of these errors:
Strange perc. field -0.1 line 179923 of 1/chr1.fa.out
Strange perc. field -0.1 line 190937 of 1/chr1.fa.out
Strange perc. field -0.1 line 83366 of 5/chr5.fa.out
Strange perc. field -4.5 line 57734 of 7/chr7.fa.out
Strange perc. field -3.1 line 110634 of 10/chr10.fa.out
Strange perc. field -9.2 line 110634 of 10/chr10.fa.out
Strange perc. field -0.7 line 44931 of 14/chr14.fa.out
Strange perc. field -0.1 line 952 of 9/chr9_random.fa.out
Loading up table chrUn_random_rmsk
note: 394 records dropped due to repStart > repEnd
      run with -verbose=2 for details

    #	verify everything seems normal compared with previous builds
    featureBits mm6 rmsk
    #	1110222842 bases of 2597150411 (42.748%) in intersection
    featureBits mm5 rmsk
    #	1137310280 bases of 2615483787 (43.484%) in intersection
    featureBits mm4 rmsk
    #	1130883581 bases of 2627444668 (43.041%) in intersection
    featureBits mm3 rmsk
    #	1080265553 bases of 2505900260 (43.109%) in intersection

    featureBits -countGaps mm6 rmsk
    #	1110222842 bases of 3079633452 (36.050%) in intersection
    featureBits -countGaps mm5 rmsk
    #	1137310280 bases of 3164952073 (35.935%) in intersection
    featureBits -countGaps mm4 rmsk
    #	1130883581 bases of 2952612207 (38.301%) in intersection
    featureBits -countGaps mm3 rmsk
    #	1080265553 bases of 2708220133 (39.888%) in intersection


# GC5BASE (DONE - 2005-03-10 - Hiram)
    ssh hgwdev
    mkdir -p /cluster/data/mm6/bed/gc5Base
    cd /cluster/data/mm6/bed/gc5Base
    hgGcPercent -wigOut -doGaps -file=stdout -win=5 mm6 \
        /cluster/data/mm6 | wigEncode stdin gc5Base.wig gc5Base.wib
    #       Calculating gcPercent with window size 5
    #       Using twoBit: /cluster/data/mm6/mm6.2bit
    #       File stdout created
    #	Converted stdin, upper limit 100.00, lower limit 0.00

    #	runs for about 50 minutes

    mkdir /gbdb/mm6/wib
    ln -s `pwd`/gc5Base.wib /gbdb/mm6/wib
    hgLoadWiggle -pathPrefix=/gbdb/mm6/wib mm6 gc5Base gc5Base.wig

    #	verify index is correct:
    hgsql mm6 -e "show index from gc5Base;"
    #	should see good numbers in Cardinality column, NULL:
    hgsql mm6 -e "analyze table gc5Base;"

# PROCESS REPEAT MASKER AND SIMPLE REPEATS INTO MASKED SEQUENCE
#		(DONE - 2005-03-14 - Hiram)
    ssh kksilo
    cd /cluster/data/mm6
    for CHR in ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa
    do
	FA=${CHR#*\/}
	C=${FA%.fa}
	echo -n "repeat masking ${C} ... "
	/cluster/bin/i386/maskOutFa -soft ${CHR} ${CHR}.out ${CHR}
	echo -n "adding simpleRepeats ... "
	/cluster/bin/i386/maskOutFa -softAdd ${CHR} \
		bed/simpleRepeat/trfMask/${C}.bed ${CHR}
	echo "done - ${CHR}"
    done > tmp/addRM_and_Simple.out 2>&1

    # you will note the usual warnings about troublesome coordinates
    # in the repeat masker outputs - even more than when they were lifted.

    #	and make the hard masked sequences from these soft masked sequences
    for CHR in ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa
    do
	echo "maskOutFa ${CHR} hard ${CHR}.masked"
	/cluster/bin/i386/maskOutFa ${CHR} hard ${CHR}.masked
    done > /tmp/hardMask.out 2>&1

    #	rebuild the nib file
    faToTwoBit ?/chr?.fa ??/chr??.fa ?/chr?_random.fa ??/chr??_random.fa \
	mm6Soft.2bit
    #	verify the sequence is still the same size as before:
    twoBitInfo mm6.2bit stdout | sort -rn +1 | sum -r
    #	62443     1
    sum -r chrom.sizes
    #	62443     1
    #	replace the former unmasked 2bit file with this new one:
    rm mm6.2bit
    mv mm6Soft.2bit mm6.2bit
    #	check the browser, make sure it is functioning OK

    #	Copy to panasas unit for cluster runs
    cp -p mm6.2bit /panasas/store/mm6/mm6.2bit
    mkdir /panasas/store/mm6/fasta
    time cp -p */*.fa */*.fa.masked /panasas/store/mm6/fasta

# PREPARE "bigZips" files for public release
#		(DONE through mrna.fa - 2005-03-15 - Hiram)
    ssh hgwdev
    mkdir -p /usr/local/apache/htdocs/goldenPath/mm6/bigZips
    cd /usr/local/apache/htdocs/goldenPath/mm6/bigZips
    cp -p /usr/local/apache/htdocs/goldenPath/mm5/bigZips/README.txt .
    # edit README.txt to indicate proper version of sequence and
    #	RepeatMasker
    cd /cluster/data/mm6
    tar cvzf /usr/local/apache/htdocs/goldenPath/mm6/bigZips/chromAgp.tar.gz \
	?/chr*.agp ??/chr*.agp
    tar cvzf /usr/local/apache/htdocs/goldenPath/mm6/bigZips/chromFa.tar.gz \
	?/chr*.fa ??/chr*.fa
    tar cvzf /usr/local/apache/htdocs/goldenPath/mm6/bigZips/chromFaMasked.tar.gz \
	?/chr*.fa.masked ??/chr*.fa.masked
    tar cvzf /usr/local/apache/htdocs/goldenPath/mm6/bigZips/chromOut.tar.gz \
	?/chr*.fa.out ??/chr*.fa.out
    cd /cluster/data/mm6/bed/simpleRepeat
    tar cvzf /usr/local/apache/htdocs/goldenPath/mm6/bigZips/chromTrf.tar.gz \
	./trfMask
    # get GenBank native mRNAs
    cd /cluster/data/genbank
    ./bin/i386/gbGetSeqs -db=mm6 -native GenBank mrna \
	/usr/local/apache/htdocs/goldenPath/mm6/bigZips/mrna.fa
    cd /usr/local/apache/htdocs/goldenPath/mm6/bigZips
    gzip mrna.fa
    
    md5sum *.gz > md5sum.txt

# PREPARE LINEAGE SPECIFIC REPEAT FILES FOR BLASTZ (DONE - 2005-03-14 - Hiram)

    ssh kksilo
    mkdir /panasas/store/mm6/rmsk
    cd /cluster/data/mm6
    cp -p */chr*.fa.out /panasas/store/mm6/rmsk
    mkdir /panasas/store/mm6/rmsk.spec
    cd /panasas/store/mm6/rmsk.spec
    ln -s ../rmsk/*.out .

    for FN in chr*.fa.out
    do
	echo ${FN}
	/cluster/bluearc/RepeatMasker050112/DateRepeats \
	    ${FN} -query mouse -comp human -comp rat -comp dog -comp cow
    done
    #	takes about 30 minutes

    cd /panasas/store/mm6
    mkdir linSpecRep.notInHuman
    mkdir linSpecRep.notInRat
    mkdir linSpecRep.notInDog
    mkdir linSpecRep.notInCow
    for F in rmsk.spec/chr*.out_homo-sapiens*
    do
	B=${F/rmsk.spec\/}
	B=${B/.fa.out*/}
	echo $B 
        /cluster/bin/scripts/extractRepeats 1 ${F} > \
		linSpecRep.notInHuman/${B}.out.spec
        /cluster/bin/scripts/extractRepeats 2 ${F} > \
		linSpecRep.notInRat/${B}.out.spec
        /cluster/bin/scripts/extractRepeats 3 ${F} > \
		linSpecRep.notInDog/${B}.out.spec
        /cluster/bin/scripts/extractRepeats 4 ${F} > \
		linSpecRep.notInCow/${B}.out.spec
    done
    #	the notInHuman, notInDog, and notInCow ended up being identical

# NIBS for BLASTZ (DONE - 2005-03-15 - Hiram)
    #	turns out not all the details are worked out with the blastz
    #	script to allow it to use a 2bit file for target.  So, we will
    #	need nib files until then.  Eventually this requirement should
    #	be eliminated.
    ssh kksilo
    cd /cluster/data/mm6
    mkdir nib
    for C in ?/chr?*.fa ??/chr??*.fa
    do
	B=${C/*\/}
	B=${B/.fa/}
	echo faToNib -softMask ${C} nib/${B}.nib
	rm -f nib/${B}.nib
	faToNib -softMask ${C} nib/${B}.nib
    done
    mkdir /panasas/store/mm6/nib
    cp -p nib/* /panasas/store/mm6/nib

#########################################################################
# CONTIG SPLIT UP - (DONE - 2005-03-24 - Hiram)
    #	A first attempt was made to allow the genbank alignments to work
    #	from just the 2bit file, but that leads to some large job
    #	situations and things are not split up as best as they could be.
    #	A survey was taken of the gaps and longest stretch of unbroken
    #	sequence (see /cluster/data/mm6/gapAnalysis/ )
    #	and there are only 30 stretches of sequence longer than 5 Mb
    #	Going to try an faSplit in a 10 Mb basis (this used to be 5
    #	Mb in the past, split on contigs) and see how that goes.

# BREAK UP SEQUENCE INTO 10 MB CHUNKS AT GAPS OF AT LEAST 100
    ssh kksilo
    cd /cluster/data/mm6
    mkdir ctgs10Mb
    mkdir ctgs10Mb/lift
    for C in ? ??
    do
	mkdir ctgs10Mb/${C}
	if [ -s ${C}/chr${C}.fa ]; then
	    echo -n "working: chr${C} ... "
	    $HOME/bin/i386/faSplit -minGapSize=100 \
		-lift=ctgs10Mb/lift/chr${C}.lft gap \
		    ${C}/chr${C}.fa 10000000 ctgs10Mb/${C}/chr${C}_
	fi
	if [ -s ${C}/chr${C}_random.fa ]; then
	    echo -n "working: chr${C}_random ... "
	    $HOME/bin/i386/faSplit -minGapSize=100 \
		-lift=ctgs10Mb/lift/chr${C}_random.lft gap \
		    ${C}/chr${C}_random.fa 10000000 \
			ctgs10Mb/${C}/chr${C}_random_
	fi
    done
    cat ctgs10Mb/lift/*.lft > jkStuff/liftAll.lft
    cp -p jkStuff/liftAll.lft /panasas/store/mm6

#########################################################################
# GENBANK auto update started (WORKING - 2005-03-15 - Hiram)
    ssh eieio
    cd /cluster/data/genbank
    #	edit etc/genbank.conf, add the following section:
# mm6
mm6.genome = /panasas/store/mm6/mm6.2bit
mm6.lift = /panasas/store/mm6/liftAll.lft
mm6.downloadDir = mm6
mm6.genbank.est.xeno.load = yes
mm6.mgcTables.default = full
mm6.mgcTables.mgc = all

    #	Do the refseq's first, they are the quick ones
    nice bin/gbAlignStep -srcDb=refseq -type=mrna -verbose=1 -initial mm6
    #	RUNNING - 2005-03-24 16:22

# Completed: 1384 of 1384 jobs
# CPU time in finished jobs:       2751s      45.85m     0.76h    0.03d  0.000 y
# IO & Wait Time:                  5028s      83.80m     1.40h    0.06d  0.000 y
# Average job time:                   6s       0.09m     0.00h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:              12s       0.20m     0.00h    0.00d
# Submission to last job:            68s       1.13m     0.02h    0.00d

# Completed: 200 of 200 jobs
# CPU time in finished jobs:      31586s     526.43m     8.77h    0.37d  0.001 y
# IO & Wait Time:                  6911s     115.18m     1.92h    0.08d  0.000 y
# Average job time:                 192s       3.21m     0.05h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:            2239s      37.32m     0.62h    0.03d
# Submission to last job:          2239s      37.32m     0.62h    0.03d

    # Load the results from the above
    ssh hgwdev
    cd /cluster/data/genbank
    nice bin/gbDbLoadStep -verbose=1 -drop -initialLoad mm6
    #	check the RefSeq Genes track shows up in the browser
    #	table browser query on RefSeq Genes whole genome, summary stats
    #	indicates 18,305 items covering 716,635,654 (%27.59) bases

    #	To get the genbank started, the above results need to be
    #	moved out of the way.  These things can be removed if there are
    #	no problems to debug
    ssh eieio
    cd /cluster/data/genbank/work
    mv initial.mm6 initial.mm6.refseq.mrna

    cd /cluster/data/genbank
    nice bin/gbAlignStep -srcDb=genbank -type=mrna -verbose=1 -initial mm6
    #	logFile: var/build/logs/2005.03.15-10:18:30.mm6.initalign.log
# Completed: 2400 of 2400 jobs
# CPU time in finished jobs:    5777428s   96290.47m  1604.84h   66.87d  0.183 y
# IO & Wait Time:                261508s    4358.47m    72.64h    3.03d  0.008 y
# Average job time:                2516s      41.94m     0.70h    0.03d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:           47756s     795.93m    13.27h    0.55d
# Submission to last job:         48256s     804.27m    13.40h    0.56d


    # Load the results from the above
    ssh hgwdev
    cd /cluster/data/genbank
    # There is a lock file present, I believe from the previous load:
    [hiram@hgwdev /cluster/data/genbank/var/dbload/hgwdev/run] ls -l
    #	-rw-r--r--    1 hiram    protein        18 Mar 15 10:08 dbload.lock
    # checking that it is actually owned by yourself, it is safe to remove
    #	it.  The next load will not proceed with this lock in place.
    rm var/dbload/hgwdev/run/dbload.lock

    time nice bin/gbDbLoadStep -verbose=1 -drop -initialLoad mm6
    #	22 minute load time

    #	And finally, the big est run - expect several days on this one
    ssh eieio
    cd /cluster/data/genbank/work
    mv initial.mm6 initial.mm6.genbank.mrna

    #	since it is going to run several days, create a screen for it to
    #	run in.  detach and reattach as necessary to view the progress
    #	of the job
    cd /cluster/data/genbank
    screen
    nice bin/gbAlignStep -srcDb=genbank -type=est -verbose=1 -initial mm6
    #	logFile: var/build/logs/2005.03.16-10:26:46.mm6.initalign.log
    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh eieio
    screen -d -r

    #	RUNNING - 2005-03-16 10:43
    #	FAILED - 2005-03-20 21:00 - out of disk space on store3
	the initial.mm6 directory it created in .../work/ was 45 Gb !
	This job needs to be redone, but point genbank.conf at nibs
	instead of the 2bit file.  There are still difficulties
	processing the 2bit file.
    #	The difficulty turned out to be a missing lift parameter in the
    #	genbank.conf file
    #	Mark performed some recovery surgery to this business, ready to
    #	load:
    ssh hgwdev
    cd /cluster/data/genbank
    time nice bin/gbDbLoadStep -verbose=1 -drop -initialLoad mm6
    #	LOADING - 2005-03-23 - 09:30

#########################################################################
# PRODUCING GENSCAN PREDICTIONS (DONE 2005-03-14 - 2005-03-17 Hiram)
    ssh hgwdev
    mkdir /cluster/data/mm6/bed/genscan
    cd /cluster/data/mm6/bed/genscan
    # Check out hg3rdParty/genscanlinux to get latest genscan:
    cvs co hg3rdParty/genscanlinux
    # Run on small cluster (more mem than big cluster).
    ssh kki
    cd /cluster/data/mm6/bed/genscan
    # Make 3 subdirectories for genscan to put their output files in
    mkdir gtf pep subopt
    # Generate a list file, genome.list, of all the hard-masked contigs that 
    # *do not* consist of all-N's (which would cause genscan to blow up)
    ls -1S /panasas/store/mm6/fasta/*.masked > genome.list

    # Create template file, gsub, for gensub2.  For example (3-line file):
    cat << '_EOF_' > gsub
#LOOP
/cluster/bin/x86_64/gsBig {check in line+ $(path1)} {check out line gtf/$(root1).gtf} -trans={check out line pep/$(root1).pep} -subopt={check out line subopt/$(root1).bed} -exe=hg3rdParty/genscanlinux/genscan - par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=2400000
#ENDLOOP
'_EOF_'
    # << keep emacs coloring happy
    gensub2 genome.list single gsub jobList
    para create jobList
    para try, check, push, check, ...
    #	Had two jobs crash:
# Completed: 38 of 40 jobs
# Crashed: 2 jobs
# CPU time in finished jobs:     343416s    5723.60m    95.39h    3.97d  0.011 y
# IO & Wait Time:                  3443s      57.38m     0.96h    0.04d  0.000 y
# Average job time:                9128s     152.13m     2.54h    0.11d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:           27423s     457.05m     7.62h    0.32d
# Submission to last job:         34524s     575.40m     9.59h    0.40d


    # If there are crashes, diagnose with "para problems".  
    para problems > problems.0
    #	Two of them needed to be rerun, adjust window down to 2000000 to
    #	get them to complete.  Lower that number if the error persists.
    ssh kolossus
    cd /cluster/data/mm6/bed/genscan
    /cluster/bin/x86_64/gsBig /panasas/store/mm6/fasta/chr2.fa.masked gtf/chr2.fa.gtf -trans=pep/chr2.fa.pep -subopt=subopt/chr2.fa.bed -exe=hg3rdParty/genscanlinux/genscan - par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=2000000
    /cluster/bin/x86_64/gsBig /panasas/store/mm6/fasta/chr14.fa.masked gtf/chr14.fa.gtf -trans=pep/chr14.fa.pep -subopt=subopt/chr14.fa.bed -exe=hg3rdParty/genscanlinux/genscan - par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=2000000

    # cat the results into single files
    ssh kksilo
    cd /cluster/data/mm6/bed/genscan
    cat gtf/chr?.fa.gtf gtf/chr??.fa.gtf gtf/chr?_random.fa.gtf \
	gtf/chr??_random.fa.gtf > genscan.gtf
    cat subopt/chr?.fa.bed subopt/chr??.fa.bed subopt/chr?_random.fa.bed \
	subopt/chr??_random.fa.bed > genscanSubopt.bed
    cat pep/chr?.fa.pep pep/chr??.fa.pep pep/chr?_random.fa.pep \
	pep/chr??_random.fa.pep > genscan.pep

    # Load into the database as so:
    ssh hgwdev
    cd /cluster/data/mm6/bed/genscan
    ldHgGene mm6 -gtf genscan genscan.gtf
    hgPepPred mm6 generic genscanPep genscan.pep
    hgLoadBed mm6 genscanSubopt genscanSubopt.bed

    #	check the numbers
    featureBits mm6 genscan
    #	54894283 bases of 2597150411 (2.114%) in intersection
    featureBits mm5 genscan
    #	55024722 bases of 2615483787 (2.104%) in intersection
    featureBits mm4 genscan
    #	56164126 bases of 2627444668 (2.138%) in intersection
    featureBits mm3 genscan
    #	51697165 bases of 2505900260 (2.063%) in intersection

    featureBits mm6 genscanSubopt
    #	57856316 bases of 2597150411 (2.228%) in intersection
    featureBits mm5 genscanSubopt
    #	58474899 bases of 2615483787 (2.236%) in intersection
    featureBits mm4 genscanSubopt
    #	59601009 bases of 2627444668 (2.268%) in intersection
    featureBits mm3 genscanSubopt
    #	56085184 bases of 2505900260 (2.238%) in intersection


#########################################################################
#	BLASTZ NOTE:  with the advent of Angie's script to run the
#	blastz process through to chains and nets loaded into the
#	database and download files prepared, it is now a juggling act
#	to see which klusters are available.  The particular options to
#	the script to make it go to one kluster or another are to be
#	determined at run-time.  The typical run-times listed here will
#	be a factor in your choice of kluster to operate on.
#########################################################################
# BLASTZ HUMAN Hg17 (WORKING - 2005-03-14 - Hiram)
    ssh kk
    mkdir /cluster/data/mm6/bed/blastzHg17.2005_03_14
    cd /cluster/data/mm6/bed/blastzHg17.2005_03_14
    cat << '_EOF_' > DEF
# mouse vs. human
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/home/angie/schwartzbin:/cluster/home/kent/bin/i386

ALIGN=blastz-run
BLASTZ=blastz
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=1

# TARGET: Mouse
SEQ1_DIR=/panasas/store/mm6/nib
# not used
SEQ1_RMSK=/panasas/store/mm6/rmsk
# not used
SEQ1_FLAG=-rodent
SEQ1_SMSK=/panasas/store/mm6/linSpecRep.notInHuman
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: Human
SEQ2_DIR=/scratch/hg/hg17/bothMaskedNibs
# RMSK not currently used
SEQ2_RMSK=
# FLAG not currently used
SEQ2_FLAG=
SEQ2_SMSK=/scratch/hg/hg17/linSpecRep.notInMouse
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=30000000
SEQ2_LAP=0

BASE=/cluster/data/mm6/bed/blastzHg17.2005_03_14

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << keep emacs coloring happy

    cp /cluster/data/mm6/chrom.sizes ./S1.len
    sort -rn +1 /cluster/data/hg17/chrom.sizes > S2.len
    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl `pwd`/DEF > \
	blast.run.out 2>&1 &
    #	real    993m28.547s
    #	user    0m0.198s
    #	sys     0m0.171s
    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh kksilo
    screen -d -r
    #	STARTED - 2005-03-17 21:25
    #	FINISHED - 2005-03-18 14:00
# Completed: 45347 of 45347 jobs
# CPU time in finished jobs:   16921981s  282033.02m  4700.55h  195.86d  0.537 y
# IO & Wait Time:               2381711s   39695.18m   661.59h   27.57d  0.076 y
# Average job time:                 426s       7.09m     0.12h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:            9568s     159.47m     2.66h    0.11d
# Submission to last job:         58695s     978.25m    16.30h    0.68d

# Completed: 331 of 331 jobs
# CPU time in finished jobs:        272s       4.54m     0.08h    0.00d  0.000 y
# IO & Wait Time:                  1145s      19.08m     0.32h    0.01d  0.000 y
# Average job time:                   4s       0.07m     0.00h    0.00d
# Longest job:                       24s       0.40m     0.01h    0.00d
# Submission to last job:           265s       4.42m     0.07h    0.00d

    #	The kki batch doChainRun.csh appears to have failed
    #	due to underlying changes in the location of hg17 items
    #	fixup the symlinks which are in a state of flux today, then,
    #	to recover:
    ssh kki
    cd /cluster/data/mm6/bed/blastzHg17.2005_03_14/axtChain/run
    rm -fr chain
    time ./doChainRun.csh
    #	real    22m47.917s
    #	user    0m0.380s
    #	sys     0m0.630s
# Completed: 40 of 40 jobs
# CPU time in finished jobs:       6373s     106.22m     1.77h    0.07d  0.000 y
# IO & Wait Time:                   552s       9.20m     0.15h    0.01d  0.000 y
# Average job time:                 173s       2.89m     0.05h    0.00d
# Longest job:                      662s      11.03m     0.18h    0.01d
# Submission to last job:          1200s      20.00m     0.33h    0.01d

    #	That was the last part of the chainRun step, can now continue:
    ssh kksilo
    cd /cluster/data/mm6/bed/blastzHg17.2005_03_14
    time /cluster/bin/scripts/doBlastzChainNet.pl -continue chainMerge `pwd`/DEF > chainMerge.run.out 2>&1 &
    # STARTED - 2005-03-18 15:00
    # FINISHED 2005-03-18 16:33

#########################################################################
# BLASTZ RAT Rn3 (FIRST TRY - 2005-03-15 - 2005-03-17 - Hiram)
    ssh kksilo
    mkdir /cluster/data/mm6/bed/blastzRn3.2005_03_22
    cd /cluster/data/mm6/bed/blastzRn3.2005_03_22
    cat << '_EOF_' > DEF
# mouse vs. human
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/home/angie/schwartzbin:/cluster/home/kent/bin/i386

ALIGN=blastz-run
BLASTZ=blastz
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=1

# TARGET
# Mouse
SEQ1_DIR=/panasas/store/mm6/nib
# not used
SEQ1_RMSK=/panasas/store/mm6/rmsk
# not used
SEQ1_FLAG=-rodent
SEQ1_SMSK=/panasas/store/mm6/linSpecRep.notInRat
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY
# Rat
SEQ2_DIR=/iscratch/i/rn3/bothMaskedNibs
# RMSK not currently used
SEQ2_RMSK=
# FLAG not currently used
SEQ2_FLAG=
SEQ2_SMSK=/cluster/bluearc/rat/rn3/linSpecRep.notInMouse
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=30000000
SEQ2_LAP=0

BASE=/cluster/data/mm6/bed/blastzRn3.2005_03_15

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << keep emacs coloring happy

    cp /cluster/data/mm6/chrom.sizes ./S1.len
    sort -rn +1 /cluster/data/rn3/chrom.sizes > S2.len
    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl `pwd`/DEF > \
	blast.run.out 2>&1 &
    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh kksilo
    screen -d -r
# Completed: 40713 of 40713 jobs
# CPU time in finished jobs:   18170174s  302836.24m  5047.27h  210.30d  0.576 y
# IO & Wait Time:               1770530s   29508.83m   491.81h   20.49d  0.056 y
# Average job time:                 490s       8.16m     0.14h    0.01d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:           28252s     470.87m     7.85h    0.33d
# Submission to last job:         69864s    1164.40m    19.41h    0.81d

# Completed: 331 of 331 jobs
# CPU time in finished jobs:       1168s      19.46m     0.32h    0.01d  0.000 y
# IO & Wait Time:                  3047s      50.79m     0.85h    0.04d  0.000 y
# Average job time:                  13s       0.21m     0.00h    0.00d
# Longest job:                      119s       1.98m     0.03h    0.00d
# Submission to last job:           359s       5.98m     0.10h    0.00d

# Completed: 40 of 40 jobs
# CPU time in finished jobs:      12274s     204.56m     3.41h    0.14d  0.000 y
# IO & Wait Time:                  1719s      28.66m     0.48h    0.02d  0.000 y
# Average job time:                 350s       5.83m     0.10h    0.00d
# Longest job:                     1016s      16.93m     0.28h    0.01d
# Submission to last job:          1482s      24.70m     0.41h    0.02d

    #	After this was complete, realized that it needs a minScore
    #	filter on the chaining step.   Also, we need some pslChrom files
    #	for Gill's work:
    ssh kksilo
    /cluster/data/mm6/bed/blastzRn3.2005_03_15
    cat << '_EOF_' > mkPslChrom.sh
#!/bin/sh

if [ -d pslChrom ]; then
    mv pslChrom pslChrom.0
    rm -fr pslChrom.0 &
fi

mkdir pslChrom

ls pslParts | sed -e "s/.nib.*//" | sort -u | while read C
do
    echo -n "working: ${C} ... "
    zcat `ls pslParts/${C}.nib* | sort --field-separator=':' -k1,1 -k3,3n` \
            > pslChrom/${C}.psl
    echo "done"
done
'_EOF_'
    # << keep emacs coloring happy
    chmod +x mkPslChrom.sh
    ./mkPslChrom.sh


#########################################################################
# BLASTZ RAT REDONE 2005-03-22 
#	 more stringent BLASTZ parameters and chain filtering
#   COMPLETE 2005-03-23 - swap to place chainMm6 and netMm6 on rn3 browser
    ssh kksilo
    mkdir /cluster/data/mm6/bed/blastzRn3.2005_03_22
    cd /cluster/data/mm6/bed/blastzRn3.2005_03_22
    cat << '_EOF_' > DEF
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/bin/scripts:/cluster/home/angie/schwartzbin/

# mouse vs. rat
#	more stringent parameters to reduce output
BLASTZ_H=2000
BLASTZ_Y=3400
BLASTZ_L=50000
BLASTZ_T=2
# scoring matrix
BLASTZ_Q=/cluster/data/blastz/mus_rat.q 
BLASTZ_ABRIDGE_REPEATS=1
# TARGET: Mouse (mm6)
SEQ1_DIR=/panasas/store/mm6/nib
SEQ1_SMSK=/panasas/store/mm6/linSpecRep.notInRat
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: Rat (rn3)
SEQ2_DIR=/iscratch/i/rn3/bothMaskedNibs
SEQ2_SMSK=/cluster/bluearc/rat/rn3/linSpecRep.notInMouse
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=30000000
SEQ2_LAP=0
SEQ2_LEN=/iscratch/i/bosTau1/chrom.sizes

BASE=/cluster/data/mm6/bed/blastzRn3.2005_03_22

SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << keep emacs coloring happy

    cp /cluster/data/mm6/chrom.sizes ./S1.len
    sort -rn +1 /cluster/data/rn3/chrom.sizes > S2.len
    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl -chainMinScore 5000 \
	`pwd`/DEF > blast.run.out 2>&1 &
    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh kksilo
    screen -d -r
    #	These more strict blastz parameters make this run much faster;
# Completed: 40713 of 40713 jobs
# CPU time in finished jobs:    4813023s   80217.06m  1336.95h   55.71d  0.153 y
# IO & Wait Time:               1788355s   29805.91m   496.77h   20.70d  0.057 y
# Average job time:                 162s       2.70m     0.05h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:            2543s      42.38m     0.71h    0.03d
# Submission to last job:         10945s     182.42m     3.04h    0.13d

# Completed: 331 of 331 jobs
# CPU time in finished jobs:        146s       2.43m     0.04h    0.00d  0.000 y
# IO & Wait Time:                   840s      14.00m     0.23h    0.01d  0.000 y
# Average job time:                   3s       0.05m     0.00h    0.00d
# Longest job:                        7s       0.12m     0.00h    0.00d
# Submission to last job:            66s       1.10m     0.02h    0.00d

# Completed: 40 of 40 jobs
# CPU time in finished jobs:       3870s      64.50m     1.08h    0.04d  0.000 y
# IO & Wait Time:                   364s       6.06m     0.10h    0.00d  0.000 y
# Average job time:                 106s       1.76m     0.03h    0.00d
# Longest job:                      224s       3.73m     0.06h    0.00d
# Submission to last job:           406s       6.77m     0.11h    0.00d

    #	FINISHED - 2005-03-22 15:44

    #	it is helpful to time these commands to make sure everything
    #	is sane.  The times should also be similar, as are the numbers.

    #	check the numbers
    time featureBits mm6 chainRn3
    2705309999 bases of 2597150411 (104.165%) in intersection
    time featureBits mm5 chainRn3
    2646682349 bases of 2615483787 (101.193%) in intersection
    #	These chainRn3 tables on mm6 are much smaller than mm5
    #	There was an attempt during mm5 to run the blastz on rn3 with
    #	the stringent parameters used here, but that ran into
    #	difficulties as there were other tracks depending upon the
    #	older bulky alignments and it was necessary to bring the bulky
    #	alignments back.  There is a vast difference in the number of
    #	chains:  mm5.chr1_chainRn3: 1,865,181 rows, mm6.chr1_chainRn3: 16466
    #	mm5.chr1_chainRn3Link: 18,252,937 rows, mm6.chr1_chainRn3Link: 2,340,447

    #	trying to do the chainLink's requires kolossus, big memory
    ssh kolossus
    #	specify a .hg.conf file with read-only passwords:
    #	these take about 15 and 90 minutes (the mm5's are much larger)
    HGDB_CONF=~/.hg.conf.read-only /usr/bin/time --portability \
	featureBits mm6 chainRn3Link
    #	1652692239 bases of 2597150411 (63.635%) in intersection
    #	real 864.72
    #	user 211.05
    #	sys 66.95

    #	1802980225 bases of 2597150411 (69.421%) in intersection
    HGDB_CONF=~/.hg.conf.read-only /usr/bin/time --portability \
	featureBits mm5 chainRn3Link
    #	1798705001 bases of 2615483787 (68.771%) in intersection


    #	the netRn3 measurements take about 2m30s
    time featureBits mm6 netRn3
    #	2705309999 bases of 2597150411 (104.165%) in intersection
    time featureBits mm5 netRn3
    #	2638255333 bases of 2615483787 (100.871%) in intersection


    #	And then the swap of that:
    time /cluster/bin/scripts/doBlastzChainNet.pl -swap `pwd`/DEF > \
	swap.run.out 2>&1 &
    #	STARTED - 2005-03-22 16:15
    #	FINISHED - 2005-03-22 17:41

    #	check the numbers
    featureBits rn3 chainMm6
    #	2819351420 bases of 2571104688 (109.655%) in intersection
    featureBits rn3 chainMm5
    #	2786666162 bases of 2571104688 (108.384%) in intersection

    featureBits rn3 netMm6
    #	2808675438 bases of 2571104688 (109.240%) in intersection
    featureBits rn3 netMm5
    #	2778454647 bases of 2571104688 (108.065%) in intersection


#########################################################################
# BLASTZ Zebrafish danRer2 (WORKING - 2005-03-17 - Hiram)
    ssh kksilo
    mkdir /cluster/data/mm6/bed/blastzDanRer2.2005_03_17
    cd /cluster/data/mm6/bed/blastzDanRer2.2005_03_17

    cat << '_EOF_' > DEF
# mouse (mm6) vs zebrafish (danRer2)
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin

ALIGN=blastz-run
BLASTZ=blastz

# Reuse parameters from hg16-fr1, danRer-hg17 and mm6-danRer1
BLASTZ_H=2000
BLASTZ_Y=3400
BLASTZ_L=6000
BLASTZ_K=2200
BLASTZ_Q=/cluster/data/blastz/HoxD55.q
BLASTZ_ABRIDGE_REPEATS=0

# TARGET: Mouse
SEQ1_DIR=/panasas/store/mm6/nib
SEQ1_RMSK=
SEQ1_FLAG=
SEQ1_SMSK=
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: Zebrafish (danRer2)
SEQ2_DIR=/iscratch/i/danRer2/nib
SEQ2_RMSK=
SEQ2_FLAG=
SEQ2_SMSK=
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=10000000
SEQ2_LAP=0

BASE=/cluster/data/mm6/bed/blastzDanRer2.2005_03_17

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << keep emacs coloring happy

    cp /cluster/data/mm6/chrom.sizes ./S1.len
    sort -rn +1 /cluster/data/danRer2/chrom.sizes > S2.len
    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl `pwd`/DEF > \
	blast.run.out 2>&1 &
    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh kksilo
    screen -d -r
    #	STARTED - 2005-03-17 10:00
    #	FINISHED - 2005-03-18 01:01
    #	real    494m43.717s
    #	user    0m0.322s
    #	sys     0m0.184s

# Completed: 57263 of 57263 jobs
# CPU time in finished jobs:   14680881s  244681.36m  4078.02h  169.92d  0.466 y
# IO & Wait Time:                320049s    5334.14m    88.90h    3.70d  0.010 y
# Average job time:                 262s       4.37m     0.07h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:            1308s      21.80m     0.36h    0.02d
# Submission to last job:         51993s     866.55m    14.44h    0.60d

# Completed: 331 of 331 jobs
# CPU time in finished jobs:         87s       1.46m     0.02h    0.00d  0.000 y
# IO & Wait Time:                   869s      14.48m     0.24h    0.01d  0.000 y
# Average job time:                   3s       0.05m     0.00h    0.00d
# Longest job:                        8s       0.13m     0.00h    0.00d
# Submission to last job:           161s       2.68m     0.04h    0.00d

# Completed: 40 of 40 jobs
# CPU time in finished jobs:       2496s      41.60m     0.69h    0.03d  0.000 y
# IO & Wait Time:                   295s       4.92m     0.08h    0.00d  0.000 y
# Average job time:                  70s       1.16m     0.02h    0.00d
# Longest job:                      139s       2.32m     0.04h    0.00d
# Submission to last job:           470s       7.83m     0.13h    0.01d


#########################################################################
# BLASTZ FUGU fr1 (WORKING - 2005-03-17 - Hiram)
    ssh kksilo
    mkdir /cluster/data/mm6/bed/blastzFr1.2005_03_17
    cd /cluster/data/mm6/bed/blastzFr1.2005_03_17

    cat << '_EOF_' > DEF
# mouse vs. fugu
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin

ALIGN=blastz-run
BLASTZ=blastz

# Reuse parameters from human-chicken, except L=6000 (more relaxed)
BLASTZ_H=2000
BLASTZ_Y=3400
BLASTZ_L=6000
BLASTZ_K=2200
BLASTZ_Q=/cluster/data/blastz/HoxD55.q
BLASTZ_ABRIDGE_REPEATS=0

# TARGET: Mouse
SEQ1_DIR=/panasas/store/mm6/nib
SEQ1_RMSK=
SEQ1_FLAG=
SEQ1_SMSK=
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: Fugu
SEQ2_DIR=/iscratch/i/fr1/nib
SEQ2_RMSK=
SEQ2_FLAG=
SEQ2_SMSK=
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=10000000
SEQ2_LAP=0

BASE=/cluster/data/mm6/bed/blastzFr1.2005_03_17

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << this line keeps emacs coloring happy

    cp /cluster/data/mm6/chrom.sizes ./S1.len
    sort -rn +1 /cluster/data/fr1/chrom.sizes > S2.len
    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl -bigClusterHub kki \
	`pwd`/DEF > blast.run.out 2>&1 &
    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh kksilo
    screen -d -r
    #	STARTED - 2005-03-17 11:00
    #	FINISHED - 2005-03-19 00:14

#########################################################################
# BLASTZ TETRAODON tetNig1 (TBD - 2005-03-17 - Hiram)
    ssh kksilo
    mkdir /cluster/data/mm6/bed/blastzTetNig1.2005_03_17
    cd /cluster/data/mm6/bed/blastzTetNig1.2005_03_17
    # use same parameters as for danRer1-mm5
    cat << '_EOF_' > DEF
# mouse (mm6) vs Tetraodon (tetNig1)
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin

ALIGN=blastz-run
BLASTZ=blastz

# Reuse parameters from hg16-fr1 and danRer1-hg17.
BLASTZ_H=2000
BLASTZ_Y=3400
BLASTZ_L=6000
BLASTZ_K=2200
BLASTZ_Q=/cluster/data/blastz/HoxD55.q
BLASTZ_ABRIDGE_REPEATS=0

# TARGET: Mouse
SEQ1_DIR=/panasas/store/mm6/nib
SEQ1_RMSK=
SEQ1_FLAG=
SEQ1_SMSK=
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: Tetraodon (tetNig1)
SEQ2_DIR=/iscratch/i/tetNig1/nib
SEQ2_RMSK=
SEQ2_FLAG=
SEQ2_SMSK=
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=10000000
SEQ2_LAP=0

BASE=/cluster/data/mm6/bed/blastzTetNig1.2005_03_17

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << this line keeps emacs coloring happy


    cp /cluster/data/mm6/chrom.sizes ./S1.len
    sort -rn +1 /cluster/data/tetNig1/chrom.sizes > S2.len
    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl -bigClusterHub kk9 \
	`pwd`/DEF > blast.run.out 2>&1 &
    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh kksilo
    screen -d -r
    #	STARTED 2005-03-17 21:30
    #	FINISHED 2005-03-18 05:10
    #	real    461m56.901s
    #	user    0m0.426s
    #	sys     0m0.310s
# Completed: 18867 of 18867 jobs
# CPU time in finished jobs:    2396227s   39937.11m   665.62h   27.73d  0.076 y
# IO & Wait Time:                 53160s     886.00m    14.77h    0.62d  0.002 y
# Average job time:                 130s       2.16m     0.04h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:             591s       9.85m     0.16h    0.01d
# Submission to last job:         26573s     442.88m     7.38h    0.31d

# Completed: 331 of 331 jobs
# CPU time in finished jobs:         27s       0.45m     0.01h    0.00d  0.000 y
# IO & Wait Time:                   798s      13.30m     0.22h    0.01d  0.000 y
# Average job time:                   2s       0.04m     0.00h    0.00d
# Longest job:                        6s       0.10m     0.00h    0.00d
# Submission to last job:           200s       3.33m     0.06h    0.00d

# Completed: 40 of 40 jobs
# CPU time in finished jobs:        688s      11.47m     0.19h    0.01d  0.000 y
# IO & Wait Time:                   169s       2.82m     0.05h    0.00d  0.000 y
# Average job time:                  21s       0.36m     0.01h    0.00d
# Longest job:                       55s       0.92m     0.02h    0.00d
# Submission to last job:           212s       3.53m     0.06h    0.00d



#########################################################################
# CPGISLANDS (DONE - 2005-03-17 - Hiram)
    ssh hgwdev
    mkdir -p /cluster/data/mm6/bed/cpgIsland
    cd /cluster/data/mm6/bed/cpgIsland

    # Build software from Asif Chinwalla (achinwal@watson.wustl.edu)
    cvs co hg3rdParty/cpgIslands
    cd hg3rdParty/cpgIslands
    make
    #	gcc readseq.c cpg_lh.c -o cpglh.exe
    mv cpglh.exe ../..
    
    # cpglh.exe requires hard-masked (N) .fa's.  
    # There may be warnings about "bad character" for IUPAC ambiguous 
    # characters like R, S, etc.  Ignore the warnings.  
    ssh kksilo
    cd /cluster/data/mm6/bed/cpgIsland
    for F in ../../*/chr*.fa.masked
    do
	FA=${F/*\/}
	C=${FA/.fa.masked/}
	echo "./cpglh.exe ${FA} > ${C}.cpg"
	./cpglh.exe ${F} > ${C}.cpg
    done > cpglh.out 2>&1 &

    #	three warnings:
    #	Bad char 0x52 = 'R' at line 164245, base 8212187, sequence chr14
    #	Bad char 0x53 = 'S' at line 167424, base 8371114, sequence chr14
    #	Bad char 0x53 = 'S' at line 167426, base 8371198, sequence chr14
    #	Several chroms have 0 results:
    #	-rw-rw-r--  1     0 Mar 17 12:13 chr10_random.cpg
    #	-rw-rw-r--  1     0 Mar 17 12:18 chr9_random.cpg
    #	-rw-rw-r--  1     0 Mar 17 12:18 chrM.cpg
    #	-rw-rw-r--  1     0 Mar 17 12:18 chrY.cpg
    #	-rw-rw-r--  1     0 Mar 17 12:18 chrY_random.cpg
# XXX - this is interesting that chrY, either one, have nothing.
#	the previous mm5 release did have some on chrY

    # Transform cpglh output to bed +
    cat << '_EOF_' > filter.awk
{
$2 = $2 - 1;
width = $3 - $2;
printf("%s\t%d\t%s\t%s %s\t%s\t%s\t%0.0f\t%0.1f\t%s\t%s\n",
       $1, $2, $3, $5,$6, width,
       $6, width*$7*0.01, 100.0*2*$6/width, $7, $9);
}
'_EOF_'
    # << this line makes emacs coloring happy
    awk -f filter.awk chr*.cpg > cpgIsland.bed

    ssh hgwdev
    cd /cluster/data/mm6/bed/cpgIsland
    hgLoadBed mm6 cpgIslandExt -tab -noBin \
      -sqlTable=$HOME/kent/src/hg/lib/cpgIslandExt.sql cpgIsland.bed
    #	Reading cpgIsland.bed
    #	Loaded 16100 elements of size 10
    #	Sorted
    #	Saving bed.tab
    #	Loading mm6
    featureBits mm6 cpgIslandExt
    #	10432360 bases of 2597150411 (0.402%) in intersection
    featureBits mm5 cpgIslandExt
    #	10422989 bases of 2615483787 (0.399%) in intersection
    featureBits mm4 cpgIsland
    #	11109692 bases of 2627444668 (0.423%) in intersection
    featureBits mm3 cpgIsland
    #	10102968 bases of 2505900260 (0.403%) in intersection


# BUILD KNOWN GENES TABLES (WORKING - 2005-03-18 - Hiram)
#	this does not work - there are no longer LocusLink files
#	from ncbi

    #	using previously built swissProt and proteins DB's:
    #	sp050201 proteins050201

    #	create a temporary DB kgMm6 to assembly the KG data into:
    ssh hgwdev
    hgsql mm6 -e "create database kgMm6"
    #	make sure all the protein utilities are current, evidently they
    #	are not all on the utils build list:
    cd ~/kent/src/hg/protein
    make utils

    #	and create its temporary data space (disk space juggling here)
    #	this /cluster/data/kgDB/ location is used because it is built
    #	into the script.  This process can use 2 to 3 Gb of disk space.
    mkdir /cluster/data/mm6/bed/kgMm6
    ln -s /cluster/data/mm6/bed/kgMm6 /cluster/data/kgDB/bed/kgMm6
    cd /cluster/data/kgDB/bed/kgMm6

    nohup /usr/bin/time --portability ~/kent/src/hg/protein/KGprocess.sh \
	kgMm6 mm6 050201 > kgRun0.out 2>&1 &

XXX - RUNNING - 2005-03-18 09:10
  
  The script was run successfully with the last message:

  	Tue Jun  8 15:36:52 PDT 2004 DONE 

  After initial inspection of tables in kgHg17, do the following
  from mySql prompt:

  alter table kgHg17.cgapAlias rename as hg17.cgapAlias;
  alter table kgHg17.cgapBiocDesc rename as hg17.cgapBiocDesc;
  alter table kgHg17.cgapBiocPathway rename as hg17.cgapBiocPathway;
  alter table kgHg17.dupSpMrna rename as hg17.dupSpMrna;
  alter table kgHg17.keggMapDesc rename as hg17.keggMapDesc;
  alter table kgHg17.keggPathway rename as hg17.keggPathway;
  alter table kgHg17.kgAlias rename as hg17.kgAlias;
  alter table kgHg17.kgProtAlias rename as hg17.kgProtAlias;
  alter table kgHg17.kgXref rename as hg17.kgXref;
  alter table kgHg17.knownGene rename as hg17.knownGene;
  alter table kgHg17.knownGeneLink rename as hg17.knownGeneLink;
  alter table kgHg17.knownGeneMrna rename as hg17.knownGeneMrna;
  alter table kgHg17.knownGenePep rename as hg17.knownGenePep;
  alter table kgHg17.mrnaRefseq rename as hg17.mrnaRefseq;
  alter table kgHg17.spMrna rename as hg17.spMrna;

  hg17.knownGene has 43,401 entries and hg16.knownGene has 43,232 entries.
  and running featireBits shows:
  
   	featureBits hg17 knownGene
   	63983072 bases of 2866216770 (2.232%) in intersection
   
   	featureBits hg16 knownGene
   	63781799 bases of 2865248791 (2.226%) in intersection
  
  Connect to genome-testdb and use hgcentraltest DB.
  Add a new entry in gdbPdb table:
 
        insert into gdbPdb values('hg17', 'proteins040515');


#########################################################################
# BLASTZ Dog canFam1 (WORKING - 2005-03-18 - Hiram)
    ssh kksilo
    mkdir /cluster/data/mm6/bed/blastzCanFam1.2005_03_18
    cd /cluster/data/mm6/bed/blastzCanFam1.2005_03_18

    cat << '_EOF_' > DEF
# mouse vs. dog
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin

ALIGN=blastz-run
BLASTZ=blastz

# Default
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=1

# TARGET: Mouse (mm6)
SEQ1_DIR=/panasas/store/mm6/nib
SEQ1_RMSK=
SEQ1_FLAG=
SEQ1_SMSK=/panasas/store/mm6/linSpecRep.notInDog
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: Dog (canFam1)
SEQ2_DIR=/scratch/hg/canFam1/nib
SEQ2_RMSK=
SEQ2_FLAG=
SEQ2_SMSK=/scratch/hg/canFam1/linSpecRep.notInMouse
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=10000000
SEQ2_LAP=0

BASE=/cluster/data/mm6/bed/blastzCanFam1.2005_03_18

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << keep emacs coloring happy

    cp /cluster/data/mm6/chrom.sizes ./S1.len
    sort -rn +1 /cluster/data/canFam1/chrom.sizes > S2.len
    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl -bigClusterHub kk9 \
	`pwd`/DEF > blast.run.out 2>&1 &
    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh kksilo
    screen -d -r
    #	STARTED - 2005-03-18 09:57
    #	BROKEN - 2005-03-20 11:00 - due to rearrangements on /scratch/
    #		need to regenerate the linSpec not in mouse for canFam1

#########################################################################
# BLASTZ Cow bosTau1 (WORKING - 2005-03-18 - Hiram)
    ssh kksilo
    mkdir /cluster/data/mm6/bed/blastzBosTau1.2005_03_18
    cd /cluster/data/mm6/bed/blastzBosTau1.2005_03_18

    cat << '_EOF_' > DEF
# mouse vs. cow
# TARGET: Mouse (mm6)
SEQ1_DIR=/panasas/store/mm6/nib
SEQ1_CHUNK=10000000
SEQ1_LAP=10000
SEQ1_LEN=/cluster/data/mm6/chrom.sizes

# QUERY: Cow (bosTau1)
SEQ2_DIR=/iscratch/i/bosTau1/nib/bosTau1.2bit
SEQ2_CHUNK=5000000
SEQ2_LAP=0
SEQ2_LEN=/iscratch/i/bosTau1/chrom.sizes

BASE=/cluster/data/mm6/bed/blastzBosTau1.2005_03_18
'_EOF_'
    # << keep emacs coloring happy

    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl \
	`pwd`/DEF > blast.run.out 2>&1 &
    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh kksilo
    screen -d -r
    #	STARTED - 2005-03-18 13:20
    #	BROKEN - 2005-03-20 - 22:03 - power failure to all machines
