#!/bin/csh -f # set emacs mode
exit; # don't actually run this like a script :)

# This file describes how we made the browser database on the 
# Chicken (Gallus gallus) May 2006 release.


#########################################################################
# CREATE BUILD DIRECTORY (DONE 5/14/06 angie)
    ssh kkstore03
    mkdir /cluster/store6/galGal3
    ln -s /cluster/store6/galGal3 /cluster/data/


#########################################################################
# DOWNLOAD MITOCHONDRION GENOME SEQUENCE (DONE 5/14/06 angie)
    mkdir /cluster/data/galGal3/M
    cd /cluster/data/galGal3/M
    # go to http://www.ncbi.nih.gov/ and search Nucleotide for 
    # "gallus mitochondrion genome".  That shows the gi number:
    # 5834843 
    # Use that number in the entrez linking interface to get fasta:
    wget -O chrM.fa \
      'http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Text&db=Nucleotide&uid=5834843&dopt=FASTA'
    # Edit chrM.fa: make sure the long fancy header line says it's the 
    # Gallus gallus mitochondrion complete genome, and then replace the 
    # header line with just ">chrM".


#########################################################################
# DOWNLOAD, UNPACK AND CHECK CHROM FASTA & AGP (DONE 5/14/06 angie)
    mkdir /cluster/data/galGal3/downloads
    cd /cluster/data/galGal3/downloads
    wget ftp://genome.wustl.edu/pub/user/lhillier/private/chicken_060412.tar.gz
    tar xvzf chicken_060412.tar.gz
    cp /dev/null ../chrom.lst
    foreach agp (*.agp)
      set chr = $agp:r
      echo $chr
      set fa = $chr.fa
      if (! -e $fa) then
        echo "*** No fasta for $agp"
        break
      endif
      set c = `echo $chr | sed -e 's/^chr//; s/_random$//;'`
      if (! -d ../$c) mkdir ../$c
      mv $agp $fa ../$c
    end
    cd ..
    # checkAgpAndFa prints out way too much info -- keep the end/stderr only:
    ls -1d ?{,?} E* | sed -e 's@/$@@' > chrom.lst
    foreach c (`cat chrom.lst`)
      foreach agp ($c/chr$c{,_random}.agp)
        if (-e $agp) then
          set fa = $agp:r.fa
          echo checking consistency of $agp and $fa
          checkAgpAndFa $agp $fa | tail -1
        endif
      end
    end
    faSize */chr*.fa
#Total size: mean 19306674.4 sd 39157213.7 min 1028 (chr32) max 200994015 (chr1) median 2031799


#########################################################################
# BREAK UP SEQUENCE INTO 5 MB CHUNKS AT CONTIGS/GAPS (DONE 5/14/06 angie)
    ssh kkstore03
    cd /cluster/data/galGal3
    foreach c (`cat chrom.lst`)
      foreach agp ($c/chr$c{,_random}.agp)
        if (-e $agp) then
          set fa = $agp:r.fa
          echo splitting $agp and $fa
          cp -p $agp $agp.bak
          cp -p $fa $fa.bak
          splitFaIntoContigs $agp $fa . -nSize=5000000
        endif
      end
    end
    # splitFaIntoContigs makes new dirs for _randoms.  Move their contents 
    # back into the main chrom dirs and get rid of the _random dirs.
    foreach d (*_random)
      set base = `echo $d | sed -e 's/_random$//'`
      mv $d/lift/oOut.lst $base/lift/rOut.lst
      mv $d/lift/ordered.lft $base/lift/random.lft
      mv $d/lift/ordered.lst $base/lift/random.lst
      rmdir $d/lift
      mv $d/* $base
      rmdir $d
    end
    # Un/ has Un_random but for some reason o* files were created.  Rename:
    foreach f (Un/lift/*)
      set g = `echo $f | sed -e 's/ordered/random/; s@/o@/r@;'`
      mv $f $g
    end
    # Make a "pseudo-contig" for processing chrM too:
    mkdir M/chrM_1
    sed -e 's/chrM/chrM_1/' M/chrM.fa > M/chrM_1/chrM_1.fa
    mkdir M/lift
    echo "chrM_1/chrM_1.fa.out" > M/lift/oOut.lst
    echo "chrM_1" > M/lift/ordered.lst
    set mSize = `faSize M/chrM.fa | awk '{print $1;}'`
    echo "0	M/chrM_1	$mSize	chrM	$mSize" > M/lift/ordered.lft


#########################################################################
# REPEAT MASKING (DONE 5/15/06 angie)
    #- Split contigs into 500kb chunks, at gaps if possible:
    ssh kkstore03
    cd /cluster/data/galGal3
    foreach c (`cat chrom.lst`)
      foreach d ($c/chr${c}*_?{,?})
        cd $d
        echo "splitting $d"
        set contig = $d:t
        faSplit gap $contig.fa 500000 ${contig}_ -lift=$contig.lft \
            -minGapSize=100
        cd ../..
      end
    end

    #- Make the run directory and job list:
    cd /cluster/data/galGal3
    mkdir jkStuff
    cat << '_EOF_' > jkStuff/RMChicken
#!/bin/csh -fe

cd $1
pushd .
/bin/mkdir -p /tmp/galGal3/$2
/bin/cp $2 /tmp/galGal3/$2/
cd /tmp/galGal3/$2
/cluster/bluearc/RepeatMasker/RepeatMasker -ali -s -spec chicken $2
popd
/bin/cp /tmp/galGal3/$2/$2.out ./
if (-e /tmp/galGal3/$2/$2.align) /bin/cp /tmp/galGal3/$2/$2.align ./
if (-e /tmp/galGal3/$2/$2.tbl) /bin/cp /tmp/galGal3/$2/$2.tbl ./
if (-e /tmp/galGal3/$2/$2.cat) /bin/cp /tmp/galGal3/$2/$2.cat ./
/bin/rm -fr /tmp/galGal3/$2/*
/bin/rmdir --ignore-fail-on-non-empty /tmp/galGal3/$2
/bin/rmdir --ignore-fail-on-non-empty /tmp/galGal3
'_EOF_'
    # << emacs
    chmod +x jkStuff/RMChicken
    mkdir RMRun
    cp /dev/null RMRun/RMJobs
    foreach c (`cat chrom.lst`)
      foreach d ($c/chr${c}{,_random}_?{,?})
          set ctg = $d:t
          foreach f ( $d/${ctg}_?{,?}.fa )
            set f = $f:t
            echo /cluster/data/galGal3/jkStuff/RMChicken \
                 /cluster/data/galGal3/$d $f \
               '{'check out line+ /cluster/data/galGal3/$d/$f.out'}' \
              >> RMRun/RMJobs
          end
      end
    end

    #- Do the run
    ssh pk
    cd /cluster/data/galGal3/RMRun
    para make RMJobs
    para time
#Completed: 2492 of 2492 jobs
#CPU time in finished jobs:    2613579s   43559.64m   725.99h   30.25d  0.083 y
#IO & Wait Time:                 17626s     293.77m     4.90h    0.20d  0.001 y
#Average job time:                1056s      17.60m     0.29h    0.01d
#Longest finished job:            1335s      22.25m     0.37h    0.02d
#Submission to last job:          8741s     145.68m     2.43h    0.10d

    #- Lift up the 500KB chunk .out's to 5MB ("pseudo-contig") level
    ssh kkstore03
    cd /cluster/data/galGal3
    foreach d (*/chr*_?{,?})
      set contig = $d:t
      echo $contig
      liftUp $d/$contig.fa.out $d/$contig.lft warn $d/${contig}_*.fa.out \
        > /dev/null
    end

    #- Lift pseudo-contigs to chromosome level
    foreach c (`cat chrom.lst`)
      echo lifting $c
      cd $c
      if (-e lift/ordered.lft && ! -z lift/ordered.lft) then
        liftUp chr$c.fa.out lift/ordered.lft warn `cat lift/oOut.lst` \
        > /dev/null
      endif
      if (-e lift/random.lft && ! -z lift/random.lft) then
        liftUp chr${c}_random.fa.out lift/random.lft warn `cat lift/rOut.lst` \
        > /dev/null
      endif
      cd ..
    end

    #- Load the .out files into the database with:
    ssh hgwdev
    cd /cluster/data/galGal3
    hgLoadOut galGal3 */chr*.fa.out

    # Compare coverage to previous release:
    featureBits galGal3 rmsk
#102214417 bases of 1042591351 (9.804%) in intersection
    # galGal2 coverage:
#104249260 bases of 1054197620 (9.889%) in intersection
    # Uh-oh -- in the past, a drop in coverage has meant an RM problem.
    # However, spot-checking the per-chrom coverage of galGal2 vs. galGal3,
    # it seems like many small or random chroms have simply had a lot
    # of repetitive sequence cut from them (significant drop in size as well 
    # as drop in coverage), while for many of the large chroms, the coverage 
    # has gone up.  Some chroms grew but the rmsk coverage did not keep up.
    # chrUn is quite a bit smaller (121M --> 53M).  I saved the per-chrom 
    # coverage figures in /cluster/data/galGal3/RMCompare/ .
#galGal2:chr1    24219568        183744490       13.181
#galGal3:chr1    25804441        195192300       13.220
#galGal2:chr1_random     186317  1261352 14.771
#galGal3:chr1_random     12930   213918  6.044
#galGal2:chr10   807202  18954178        4.259
#galGal3:chr10   858376  20484937        4.190
#galGal2:chr10_random    525320  3515812 14.942
#galGal3:chr10_random    644     13679   4.708
#galGal2:chr2    16579726        143798269       11.530	[exception.
#galGal3:chr2    17182793        150358687       11.428	[
#galGal2:chr2_random     4670    53846   8.673		[
#galGal3:chr2_random     16589   127706  12.990		[
#galGal2:chr18   461248  8797585  5.243
#galGal3:chr18   507614  10513347 4.828

#galGal2:chrE22C19W28    2628    47202   5.568
#galGal2:chrE50C23       690     10171   6.784
#galGal3:chrE22C19W28_E50C23     42486   822662  5.164

#galGal2:chrUn   18697113        121198700       15.427
#galGal3:chrUn_random    11075578        53400422        20.741
#galGal2:chrW    530067  4135691 12.817
#galGal3:chrW    133707  233885  57.168
#galGal2:chrW_random     109531  229903  47.642
#galGal3:chrW_random     311315  625108  49.802
#galGal2:chrZ    4629721 30832492        15.016
#galGal3:chrZ    10599358        67536383        15.694
#galGal2:chrZ_random     2172389 14348615 15.140
#galGal3:chrZ_random     115568  309836   37.300
    # So I'm inclined to think that it's most likely not a RepeatMasker bug
    # but a change in the underlying assembly.  Something to run by LaDeana 
    # after reading the release notes...


#########################################################################
# MAKE LIFTALL.LFT (DONE 5/15/06 angie)
    ssh kkstore03
    cd /cluster/data/galGal3
    cat */lift/{ordered,random}.lft > jkStuff/liftAll.lft


#########################################################################
# CREATING DATABASE (DONE 5/15/06 angie)
    ssh hgwdev
    echo 'create database galGal3' | hgsql ''
    # old hgwdev 5/15:
    # We are awfully tight here but at least not out of space:
    df -h /var/lib/mysql
#/dev/sdc1             1.8T  1.6T   65G  97% /var/lib/mysql
    # New hgwdev 5/18:
    df -h /data/mysql
#/dev/sdc1             1.8T  685G  1.1T  40% /data/mysql
    # Copy over the grp table from previous release:
    echo "create table grp (PRIMARY KEY(NAME)) select * from galGal2.grp" \
      | hgsql galGal3


#########################################################################
# GOLD AND GAP TRACKS (DONE 5/15/06 angie)
    ssh hgwdev
    cd /cluster/data/galGal3
    hgGoldGapGl -noGl -chromLst=chrom.lst galGal3 /cluster/data/galGal3 .
    # featureBits complains if there's no chrM_gap, so make one:
    # echo "create table chrM_gap like chr1_gap" | hgsql galGal3
    # oops, that won't work until v4.1, so do this for the time being:
    echo "create table chrM_gap select * from chr1_gap where 0=1" \
    | hgsql galGal3


#########################################################################
# SIMPLE REPEATS (TRF) (DONE 5/15/06 angie)
    # TRF runs pretty quickly now... it takes a few hours total runtime, 
    # so instead of binrsyncing and para-running, just do this on the
    # local fileserver
    ssh kkstore03
    mkdir /cluster/data/galGal3/bed
    mkdir /cluster/data/galGal3/bed/simpleRepeat
    cd /cluster/data/galGal3/bed/simpleRepeat
    mkdir trf
    cp /dev/null jobs.csh
    foreach d (/cluster/data/galGal3/*/chr*_?{,?})
      set ctg = $d:t
      foreach f ($d/${ctg}.fa)
        set fout = $f:t:r.bed
        echo $fout
        echo "/cluster/bin/i386/trfBig -trf=/cluster/bin/i386/trf $f /dev/null -bedAt=trf/$fout -tempDir=/tmp" \
        >> jobs.csh
      end
    end
    csh -efx jobs.csh >&! jobs.log &
    # check on this with
    tail -f jobs.log
    wc -l jobs.csh
#259 jobs.csh
    ls -1 trf | wc -l
#259
    endsInLf trf/*
#trf/chr12_random_1.bed zero length
#trf/chr13_random_1.bed zero length
    # That's OK.
    # When job is done do:
    liftUp simpleRepeat.bed /cluster/data/galGal3/jkStuff/liftAll.lft warn \
      trf/*.bed

    # Load into the database:
    ssh hgwdev
    hgLoadBed galGal3 simpleRepeat \
      /cluster/data/galGal3/bed/simpleRepeat/simpleRepeat.bed \
      -sqlTable=$HOME/kent/src/hg/lib/simpleRepeat.sql
    featureBits galGal3 simpleRepeat
#9650062 bases of 1042591351 (0.926%) in intersection
    # galGal2 coverage:
#8434365 bases of 1054197620 (0.800%) in intersection


#########################################################################
# PROCESS SIMPLE REPEATS INTO MASK (DONE 5/15/06 angie)
    # After the simpleRepeats track has been built, make a filtered version 
    # of the trf output: keep trf's with period <= 12:
    ssh kkstore03
    cd /cluster/data/galGal3/bed/simpleRepeat
    mkdir -p trfMask
    foreach f (trf/chr*.bed)
      awk '{if ($5 <= 12) print;}' $f > trfMask/$f:t
    end
    # Lift up filtered trf output to chrom coords as well:
    cd /cluster/data/galGal3
    mkdir bed/simpleRepeat/trfMaskChrom
    foreach c (`cat chrom.lst`)
      if (-e $c/lift/ordered.lst) then
        perl -wpe 's@(\S+)@bed/simpleRepeat/trfMask/$1.bed@' \
          $c/lift/ordered.lst > $c/lift/oTrf.lst
        liftUp bed/simpleRepeat/trfMaskChrom/chr$c.bed \
          jkStuff/liftAll.lft warn `cat $c/lift/oTrf.lst`
      endif
      if (-e $c/lift/random.lst) then
        perl -wpe 's@(\S+)@bed/simpleRepeat/trfMask/$1.bed@' \
           $c/lift/random.lst > $c/lift/rTrf.lst
        liftUp bed/simpleRepeat/trfMaskChrom/chr${c}_random.bed \
          jkStuff/liftAll.lft warn `cat $c/lift/rTrf.lst`
      endif
    end
    # Here's the coverage for the filtered TRF:
    ssh hgwdev
    cat /cluster/data/galGal3/bed/simpleRepeat/trfMaskChrom/*.bed \
      > /tmp/filtTrf.bed
    featureBits galGal3 /tmp/filtTrf.bed
#4110365 bases of 1042591351 (0.394%) in intersection
    # galGal2 coverage:
#4510381 bases of 1054197620 (0.428%) in intersection


#########################################################################
# MASK SEQUENCE WITH REPEATMASKER AND SIMPLE REPEAT/TRF (DONE 5/15/06 angie)
    # Note: just to keep things consistent, redid chr1 and chr2 2/26 with 
    # the ProcessRepeats-only rerun results (only masking changes were 
    # 5bp in chr1 and 3bp in chr2)
    ssh kkstore03
    cd /cluster/data/galGal3
    # Soft-mask (lower-case) the contig and chr .fa's, 
    # then make hard-masked versions from the soft-masked.  
    set trfCtg=bed/simpleRepeat/trfMask
    set trfChr=bed/simpleRepeat/trfMaskChrom
    foreach f (*/chr*.fa)
      echo "repeat- and trf-masking $f"
      maskOutFa -soft $f $f.out $f
      set chr = $f:t:r
      maskOutFa -softAdd $f $trfChr/$chr.bed $f
      echo "hard-masking $f"
      maskOutFa $f hard $f.masked
    end
    foreach c (`cat chrom.lst`)
      echo "repeat- and trf-masking contigs of chr$c, chr${c}_random"
      foreach d ($c/chr*_?{,?})
        set ctg=$d:t
        set f=$d/$ctg.fa
        maskOutFa -soft $f $f.out $f
        maskOutFa -softAdd $f $trfCtg/$ctg.bed $f
        maskOutFa $f hard $f.masked
      end
    end
    # Make 2bit for blat/browser usage:
    faToTwoBit */chr*.fa galGal3.2bit
    # Make soft-masked nib for blastz:
    mkdir nib
    foreach f (*/chr*.fa)
      faToNib -softMask $f nib/$f:t:r.nib
    end


#########################################################################
# MAKE CHROMINFO TABLE WITH 2BIT (DONE 5/15/06 angie)
    ssh kkstore03
    cd /cluster/data/galGal3
    mkdir bed/chromInfo
    twoBitInfo galGal3.2bit stdout \
    | awk '{print $1 "\t" $2 "\t/gbdb/galGal3/galGal3.2bit";}' \
      > bed/chromInfo/chromInfo.tab

    # Link to 2bit from /gbdb/galGal3/:
    ssh hgwdev
    mkdir /gbdb/galGal3
    ln -s /cluster/data/galGal3/galGal3.2bit /gbdb/galGal3/
    # Load /gbdb/galGal3/galGal3.2bit paths into database and save size info.
    # Make a special chromInfo.sql with large index size so that 
    # chrE22C19W28_E50C23 and chrE22C19W28_E50C23_random don't get collapsed.
    cd /cluster/data/galGal3/bed/chromInfo
    perl -wpe 's/chrom\([0-9]+/chrom\(21/' \
      $HOME/kent/src/hg/lib/chromInfo.sql > chromInfo.sql
    hgLoadSqlTab galGal3 chromInfo chromInfo.sql chromInfo.tab

    hgsql -N galGal3 -e "select chrom,size from chromInfo" \
      > /cluster/data/galGal3/chrom.sizes
    # take a look at chrom.sizes size
    wc chrom.sizes
#     57     114     947 ../../chrom.sizes



#########################################################################
# MAKE 10.OOC, 11.OOC FILES FOR BLAT (DONE 5/15/06 angie)
    # Use -repMatch=380 (based on size -- for human we use 1024, and 
    # chicken size is ~37% of human)
    ssh kkr1u00
    cd /cluster/data/galGal3
    mkdir /cluster/bluearc/galGal3
    blat galGal3.2bit /dev/null /dev/null -tileSize=11 \
      -makeOoc=/cluster/bluearc/galGal3/11.ooc -repMatch=380
#Wrote 13061 overused 11-mers to /cluster/bluearc/galGal3/11.ooc
    blat galGal3.2bit /dev/null /dev/null -tileSize=10 \
      -makeOoc=/cluster/bluearc/galGal3/10.ooc -repMatch=380
#Wrote 166633 overused 10-mers to /cluster/bluearc/galGal3/10.ooc
    mkdir /iscratch/i/galGal3
    cp -p /cluster/bluearc/galGal3/*.ooc /iscratch/i/galGal3/
    iSync


#########################################################################
# PUT NIBS ON /SCRATCH (DONE 5/15/06 angie)
    ssh kkstore03
    mkdir /cluster/bluearc/scratch/hg/galGal3
    rsync -av /cluster/data/galGal3/nib/* /cluster/bluearc/scratch/hg/galGal3/nib/
    cp -p /cluster/data/galGal3/galGal3.2bit /cluster/bluearc/scratch/hg/galGal3/
    # Ask cluster-admin to distribute to /scratch on big & small cluster


#########################################################################
# MAKE HGCENTRALTEST ENTRY AND TRACKDB TABLE (DONE 5/15/06 angie)
    # Make trackDb table so browser knows what tracks to expect:
    ssh hgwdev
    cd ~/kent/src/hg/makeDb/trackDb
    cvsup

    # Add trackDb directories and a description.html
    mkdir chicken/galGal3
    cvs add chicken/galGal3
    cvs add chicken/galGal3/description.html
    cvs ci -m "Initial description for galGal3." chicken/galGal3
    # Edit that makefile to add galGal3 in all the right places and do
    make update DBS=galGal3

    mkdir /gbdb/galGal3/html
    mkdir /cluster/data/galGal3/html
    ln -s /cluster/data/galGal3/html/description.html /gbdb/galGal3/html/
    cvs ci -m "Added galGal3." makefile
    # Go public on genome-test.  In a clean tree (no mods, up-to-date):
    cvs up makefile
    make alpha
    # Note: hgcentral*.genome values must correspond
    # with defaultDb.genome values
    hgsql -h genome-testdb hgcentraltest \
      -e 'INSERT INTO dbDb \
        (name, description, nibPath, organism, \
                defaultPos, active, orderKey, genome, scientificName, \
                htmlPath, hgNearOk, hgPbOk, sourceName) values \
        ("galGal3", "May 2006", "/gbdb/galGal3", "Chicken", \
               "chr2:22845558-23004134", 1, 30, "Chicken", \
                "Gallus Gallus", "/gbdb/galGal3/html/description.html", \
               0, 0, "Chicken Genome Sequencing Consortium May 2006 release");'


#########################################################################
# PRODUCING GENSCAN PREDICTIONS (DONE 5/16/06 angie)
    ssh hgwdev
    mkdir /cluster/data/galGal3/bed/genscan
    cd /cluster/data/galGal3/bed/genscan
    # Check out hg3rdParty/genscanlinux to get latest genscan:
    cvs co hg3rdParty/genscanlinux
    # Run on small cluster (more mem than big cluster).
    ssh kki
    cd /cluster/data/galGal3/bed/genscan
    # Make 3 subdirectories for genscan to put their output files in
    mkdir gtf pep subopt
    # Generate a list file, genome.list, of all the hard-masked contigs that 
    # *do not* consist of all-N's (which would cause genscan to blow up)
    cp /dev/null genome.list
    foreach f ( `ls -1S /cluster/data/galGal3/*/chr*_*/chr*_?{,?}.fa.masked` )
      egrep '[ACGT]' $f > /dev/null
      if ($status == 0) echo $f >> genome.list
    end
    wc -l genome.list
#    259 genome.list
    # Create template file, gsub, for gensub2.  For example (3-line file):
    cat << '_EOF_' > gsub
#LOOP
/cluster/bin/x86_64/gsBig {check in line+ $(path1)} {check out line gtf/$(root1).gtf} -trans={check out line pep/$(root1).pep} -subopt={check out line subopt/$(root1).bed} -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=2400000
#ENDLOOP
'_EOF_'
    # << this line makes emacs coloring happy
    gensub2 genome.list single gsub jobList
    para make jobList
    para time
#Completed: 255 of 259 jobs
#Crashed: 4 jobs
#CPU time in finished jobs:      82258s    1370.97m    22.85h    0.95d  0.003 y
#IO & Wait Time:                  1053s      17.55m     0.29h    0.01d  0.000 y
#Average job time:                 327s       5.45m     0.09h    0.00d
#Longest finished job:           20131s     335.52m     5.59h    0.23d
#Submission to last job:         23171s     386.18m     6.44h    0.27d

    # If there are crashes, diagnose with "para problems" / "para crashed".  
    # If a job crashes due to genscan running out of memory, re-run it 
    # manually with "-window=1200000" instead of "-window=2400000".
    ssh kkr5u00
    cd /cluster/data/galGal3/bed/genscan
    /cluster/bin/x86_64/gsBig /cluster/data/galGal3/4/chr4_13/chr4_13.fa.masked gtf/chr4_13.fa.gtf -trans=pep/chr4_13.fa.pep -subopt=subopt/chr4_13.fa.bed -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=1200000
    /cluster/bin/x86_64/gsBig /cluster/data/galGal3/3/chr3_14/chr3_14.fa.masked gtf/chr3_14.fa.gtf -trans=pep/chr3_14.fa.pep -subopt=subopt/chr3_14.fa.bed -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=1200000
    /cluster/bin/x86_64/gsBig /cluster/data/galGal3/2/chr2_22/chr2_22.fa.masked gtf/chr2_22.fa.gtf -trans=pep/chr2_22.fa.pep -subopt=subopt/chr2_22.fa.bed -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=1200000
    /cluster/bin/x86_64/gsBig /cluster/data/galGal3/Un/chrUn_random_3/chrUn_random_3.fa.masked gtf/chrUn_random_3.fa.gtf -trans=pep/chrUn_random_3.fa.pep -subopt=subopt/chrUn_random_3.fa.bed -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=1200000

    # Convert these to chromosome level files as so:
    ssh kkstore03
    cd /cluster/data/galGal3/bed/genscan
    liftUp genscan.gtf ../../jkStuff/liftAll.lft warn gtf/*.gtf
    liftUp genscanSubopt.bed ../../jkStuff/liftAll.lft warn subopt/*.bed
    cat pep/*.pep > genscan.pep

    # Load into the database as so:
    ssh hgwdev
    cd /cluster/data/galGal3/bed/genscan
    ldHgGene galGal3 genscan genscan.gtf
    hgPepPred galGal3 generic genscanPep genscan.pep
    hgLoadBed galGal3 genscanSubopt genscanSubopt.bed


#########################################################################
# MAKE GCPERCENT (DONE 5/15/06 angie)
    ssh kolossus
    mkdir /cluster/data/galGal3/bed/gc5Base
    cd /cluster/data/galGal3/bed/gc5Base
    hgGcPercent -wigOut -doGaps -file=stdout -win=5 -verbose=2 galGal3 \
       /cluster/data/galGal3 \
    | wigEncode stdin gc5Base.wig gc5Base.wib
    ssh hgwdev
    mkdir /gbdb/galGal3/wib
    cd /cluster/data/galGal3/bed/gc5Base
    ln -s `pwd`/gc5Base.wib /gbdb/galGal3/wib
    hgLoadWiggle -pathPrefix=/gbdb/galGal3/wib galGal3 gc5Base gc5Base.wig


#########################################################################
# CPGISSLANDS (WUSTL) (DONE 5/15/06 angie)
    ssh hgwdev
    mkdir /cluster/data/galGal3/bed/cpgIsland
    cd /cluster/data/galGal3/bed/cpgIsland
    # Build software from Asif Chinwalla (achinwal@watson.wustl.edu)
    cvs co hg3rdParty/cpgIslands
    cd hg3rdParty/cpgIslands
    make
    mv cpglh.exe /cluster/data/galGal3/bed/cpgIsland/
    
    ssh kolossus
    cd /cluster/data/galGal3/bed/cpgIsland
    foreach f (../../*/chr*.fa.masked)
      set fout=$f:t:r:r.cpg
      echo running cpglh on $f to $fout
      nice ./cpglh.exe $f > $fout
    end
    # Transform cpglh output to bed +
    cat << '_EOF_' > filter.awk
/* Input columns: */
/* chrom, start, end, len, CpG: cpgNum, perGc, cpg:gpc, observed:expected */
/* chr1\t 41776\t 42129\t 259\t CpG: 34\t 65.8\t 0.92\t 0.94 */
/* Output columns: */
/* chrom, start, end, name, length, cpgNum, gcNum, perCpg, perGc, obsExp */
/* chr1\t41775\t42129\tCpG: 34\t354\t34\t233\t19.2\t65.8\to0.94 */
{
$2 = $2 - 1;
width = $3 - $2;
printf("%s\t%d\t%s\t%s %s\t%s\t%s\t%0.0f\t%0.1f\t%s\t%s\n",
       $1, $2, $3, $5,$6, width,
       $6, width*$7*0.01, 100.0*2*$6/width, $7, $9);
}
'_EOF_'
    # << this line makes emacs coloring happy
    awk -f filter.awk chr*.cpg > cpgIsland.bed

    # load into database:
    ssh hgwdev
    cd /cluster/data/galGal3/bed/cpgIsland
    hgLoadBed galGal3 cpgIslandExt -tab \
      -sqlTable=$HOME/kent/src/hg/lib/cpgIslandExt.sql cpgIsland.bed


#########################################################################
# CPGISLANDS (ANDY LAW) (DONE 5/15/06 angie)
    # See notes in makeGalGal2.doc
    ssh kolossus
    mkdir /cluster/data/galGal3/bed/cpgIslandGgfAndy
    cd /cluster/data/galGal3/bed/cpgIslandGgfAndy
    #	Build the preProcGgfAndy program in
    #	kent/src/oneShot/preProcGgfAndy into your ~/bin/
    # Use unmasked sequence since this is not a mammal...
    cp /dev/null cpgIslandGgfAndy.bed
    foreach f (../../*/chr*.fa)
      set chr = $f:t:r:r
      echo preproc and run on unmasked $chr
      ~/bin/x86_64/preProcGgfAndy $f \
      | /cluster/home/angie/ggf-andy-cpg-island.pl \
      | perl -wpe 'chomp; ($s,$e,$cpg,$n,$c,$g,$oE) = split("\t"); $s--; \
                   $gc = $c + $g;  $pCpG = (100.0 * 2 * $cpg / $n); \
                   $pGc = (100.0 * $gc / $n); \
                   $_ = "'$chr'\t$s\t$e\tCpG: $cpg\t$n\t$cpg\t$gc\t" . \
                        "$pCpG\t$pGc\t$oE\n";' \
      >> cpgIslandGgfAndy.bed
    end
    wc -l ../cpgIsland/cpgIsland.bed *bed
#  22806 ../cpgIsland/cpgIsland.bed
#  76488 cpgIslandGgfAndy.bed
    # load into database:
    ssh hgwdev
    cd /cluster/data/galGal3/bed/cpgIslandGgfAndy
    sed -e 's/cpgIslandExt/cpgIslandGgfAndy/g' \
      $HOME/kent/src/hg/lib/cpgIslandExt.sql > cpgIslandGgfAndy.sql
    hgLoadBed galGal3 cpgIslandGgfAndy -tab \
      -sqlTable=cpgIslandGgfAndy.sql cpgIslandGgfAndy.bed
    featureBits galGal3 cpgIslandExt
#15533065 bases of 1042591351 (1.490%) in intersection
    featureBits galGal3 cpgIslandGgfAndy
#62026174 bases of 1042591351 (5.949%) in intersection


#########################################################################
# MAKE CHICKEN LINEAGE-SPECIFIC REPEATS (DONE 5/22/06 angie)
    # In an email 2/13/04, Arian said we could treat all human repeats as 
    # lineage-specific, but could exclude these from chicken as ancestral:
    # L3, L3a, L3b, MIR, MIR3, MIRb, MIRm
    ssh kkstore03
    cd /cluster/data/galGal3
    mkdir -p /san/sanvol1/galGal3/linSpecRep
    foreach f (*/chr*.fa.out)
      awk '$10 !~/^(L3|L3a|L3b|MIR|MIR3|MIRb|MIRm)$/ {print;}' $f \
      > /san/sanvol1/galGal3/linSpecRep/$f:t:r:r.out.spec
    end


#########################################################################
# SWAP CHAINS/NET HG18 (DONE 5/23/06 angie)
    ssh kkstore03
    mkdir /cluster/data/galGal3/bed/blastz.hg18.swap
    cd /cluster/data/galGal3/bed/blastz.hg18.swap
    doBlastzChainNet.pl -swap /cluster/data/hg18/bed/blastz.galGal3/DEF \
      >& do.log & tail -f do.log
    ln -s blastz.hg18.swap /cluster/data/galGal3/bed/blastz.hg18
    

#########################################################################
# SWAP CHAINS/NET MM8 (DONE 5/24/06 angie)
    ssh kkstore03
    mkdir /cluster/data/galGal3/bed/blastz.mm8.swap
    cd /cluster/data/galGal3/bed/blastz.mm8.swap
    doBlastzChainNet.pl -swap /cluster/data/mm8/bed/blastz.galGal3/DEF \
      >& do.log & tail -f do.log
    ln -s blastz.mm8.swap /cluster/data/galGal3/bed/blastz.mm8
    

#########################################################################
# SWAP CHAINS/NET RN4 (DONE 5/25/06 angie)
    ssh kkstore03
    mkdir /cluster/data/galGal3/bed/blastz.rn4.swap
    cd /cluster/data/galGal3/bed/blastz.rn4.swap
    doBlastzChainNet.pl -swap /cluster/data/rn4/bed/blastz.galGal3/DEF \
      >& do.log & tail -f do.log
    ln -s blastz.rn4.swap /cluster/data/galGal3/bed/blastz.rn4
    

#########################################################################
# SWAP CHAINS/NET MONDOM4 (DONE 5/26/06 angie)
    ssh kkstore03
    mkdir /cluster/data/galGal3/bed/blastz.monDom4.swap
    cd /cluster/data/galGal3/bed/blastz.monDom4.swap
    doBlastzChainNet.pl -swap /cluster/data/monDom4/bed/blastz.galGal3/DEF \
      >& do.log & tail -f do.log
    ln -s blastz.monDom4.swap /cluster/data/galGal3/bed/blastz.monDom4
    

#########################################################################
# BLASTZ/CHAIN/NET XENTRO2 (DONE 5/27/06 angie)
    ssh pk
    mkdir /cluster/data/galGal3/bed/blastz.xenTro2.2006-05-26
    cd /cluster/data/galGal3/bed/blastz.xenTro2.2006-05-26
    cat << '_EOF_' > DEF
# chicken vs. frog
BLASTZ=/cluster/bin/penn/x86_64/blastz.v7.x86_64

# Use same params as used for galGal3-xenTro1 (see makeXenTro1.doc)
BLASTZ_H=2000
BLASTZ_Y=3400
BLASTZ_L=8000
BLASTZ_K=2200
BLASTZ_Q=/cluster/data/blastz/HoxD55.q

# TARGET: Chicken galGal3
SEQ1_DIR=/san/sanvol1/galGal3/nib
SEQ1_LEN=/cluster/data/galGal3/chrom.sizes
SEQ1_CHUNK=50000000
SEQ1_LAP=10000

# QUERY: Frog xenTro2 - single chunk big enough to run two of the
#               largest scaffolds in one job
SEQ2_DIR=/scratch/hg/xenTro2/xenTro2.2bit
SEQ2_LEN=/san/sanvol1/scratch/xenTro2/chrom.sizes
SEQ2_CHUNK=20000000
SEQ2_LAP=0
SEQ2_LIMIT=100

BASE=/cluster/data/galGal3/bed/blastz.xenTro2.2006-05-26
'_EOF_'
    # << emacs
    doBlastzChainNet.pl -blastzOutRoot=/san/sanvol1/scratch/galGal3XenTro2 \
      -bigClusterHub=pk -chainMinScore=5000 -chainLinearGap=loose DEF \
      >& do.log & tail -f do.log
    ln -s blastz.xenTro2.2006-05-26 /cluster/data/galGal3/bed/blastz.xenTro2


#########################################################################
# SWAP CHAINS/NET DANRER4 (DONE 5/31/06 angie)
    ssh kkstore03
    mkdir /cluster/data/galGal3/bed/blastz.danRer4.swap
    cd /cluster/data/galGal3/bed/blastz.danRer4.swap
    doBlastzChainNet.pl -swap /cluster/data/danRer4/bed/blastz.galGal3/DEF \
      >& do.log & tail -f do.log
    ln -s blastz.danRer4.swap /cluster/data/galGal3/bed/blastz.danRer4
    

#########################################################################
# MULTIZ7WAY
# PHASTCONS
#########################################################################


#########################################################################
# GENBANK AUTO UPDATE (TODO 5//06 angie)
    # align with revised genbank process. drop xeno ESTs.
    cd ~/kent/src/hg/makeDb/genbank
    cvsup
    # edit etc/genbank.conf to add galGal3

# galGal3
galGal3.serverGenome = /cluster/data/galGal3/galGal3.2bit
galGal3.clusterGenome = /iscratch/i/galGal3/galGal3.2bit
galGal3.ooc = /cluster/bluearc/galGal3/11.ooc
galGal3.align.unplacedChroms = chr*_random
galGal3.lift = /cluster/data/galGal3/jkStuff/liftAll.lft
galGal3.refseq.mrna.native.pslCDnaFilter  = ${ordered.refseq.mrna.native.pslCDnaFilter}
galGal3.refseq.mrna.xeno.pslCDnaFilter    = ${ordered.refseq.mrna.xeno.pslCDnaFilter}
galGal3.genbank.mrna.native.pslCDnaFilter = ${ordered.genbank.mrna.native.pslCDnaFilter}
galGal3.genbank.mrna.xeno.pslCDnaFilter   = ${ordered.genbank.mrna.xeno.pslCDnaFilter}
galGal3.genbank.est.native.pslCDnaFilter  = ${ordered.genbank.est.native.pslCDnaFilter}
galGal3.refseq.mrna.native.load = yes
galGal3.refseq.mrna.xeno.load = yes
galGal3.genbank.mrna.xeno.load = yes
galGal3.downloadDir = galGal3

    cvs ci etc/genbank.conf
    # update /cluster/data/genbank/
    make etc-update

    ssh kkstore02
    cd /cluster/data/genbank
    nice bin/gbAlignStep -initial galGal3 &
    # load database when finished
    ssh hgwdev
    cd /cluster/data/genbank
    nice ./bin/gbDbLoadStep -drop -initialLoad galGal3 &

    # enable daily alignment and update of hgwdev
    cd ~/kent/src/makeDb/genbank
    cvsup
    # add galGal3 to:
        etc/align.dbs
        etc/hgwdev.dbs 
    cvs commit
    make etc-update


#########################################################################
# BACENDS
#########################################################################
# STS?
#########################################################################
#########################################################################
