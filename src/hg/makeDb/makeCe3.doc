#!/bin/csh -f # set emacs mode
exit; # don't actually run this like a script :)

# This file describes how to make the browser database for the
# worm C. elegans

###########################################################################
# DOWNLOAD SEQUENCE (DONE, 2005-04-29, hiram)
    ssh eieio
    mkdir /cluster/store5/worm/ce3
    cd /cluster/store5/worm/ce3
    mkdir WS140
    cd WS140
for F in composition.all masked totals
do
    FTP="ftp://ftp.wormbase.org/pub/wormbase/elegans/WS140/CHROMOSOMES/"
    wget "${FTP}/${F}" -O ${F}
done

    #	while fetching chrM, rename it from CHROMOSOME_MtDNA to
    #	CHROMOSOME_M to match the pattern of the others
    FTP="ftp://ftp.wormbase.org/pub/wormbase/elegans/WS140/CHROMOSOMES/"
    wget "${FTP}/CHROMOSOME_MtDNA.dna.gz" -O /dev/stdout | zcat | \
	sed -e "s/MtDNA/M/" | gzip > chrM.fa.gz
    wget "${FTP}/CHROMOSOME_MtDNA.gff.gz" -O /dev/stdout | zcat | \
	sed -e "s/CHROMOSOME_MtDNA/CHROMOSOME_M/g" | gzip > chrM.gff.gz

    #	create agp file for chrM
    echo "M 1 13794 1 F X54252.1 1 13794 +" | sed -e "s/  */\t/g" > \
	chrM.agp

for C in I II III IV V X
do
    FTP="ftp://ftp.wormbase.org/pub/wormbase/elegans/WS140/CHROMOSOMES/"
    wget --timestamping "${FTP}/CHROMOSOME_${C}.dna.gz" -O chr${C}.fa.gz
    wget --timestamping "${FTP}/CHROMOSOME_${C}.gff.gz" -O chr${C}.gff.gz
    wget --timestamping "${FTP}/CHROMOSOME_${C}.agp" -O chr${C}.agp
    echo "done: chr${C}"
done

    faCount *.fa.gz
# #seq                len        A        C        G         T N       cpg
# CHROMOSOME_I   15080552  4838583  2697189  2693560   4851220 0       503702
# CHROMOSOME_II  15279311  4878196  2769211  2762192   4869712 0       492145
# CHROMOSOME_III 13783317  4444530  2449080  2466259   4423448 0       459652
# CHROMOSOME_IV  17493785  5711040  3034769  3017007   5730969 0       522372
# CHROMOSOME_V   20922231  6749806  3711722  3700960   6759743 0       638852
# CHROMOSOME_X   17718850  5746417  3119281  3118287   5734865 0       514715
# chrM              13794     4335     1225     2055     6179  0       110
# total         100291840 32372907 17782477 17760320 323761360        3131548

    cd /cluster/store5/worm/ce3
    # translate to unzipped .fa, all upper case, and
    # rename the agp files so hgGoldGap can find them
    mkdir sangerFa

for C in I II III IV V X M
do
    echo -n "${C} "
    zcat WS140/chr${C}.fa.gz | tr '[a-z]' '[A-Z]' | \
	    sed -e "s/CHROMOSOME_/chr/" > sangerFa/chr${C}.fa
    mkdir -p sangerFa/${C}
    ln -s ${C} sangerFa/chr${C}
    sed -e "s/^/chr/" `pwd`/WS140/chr${C}.agp > sangerFa/${C}/chr${C}.agp
done

#    ln -s `pwd`/WS140/chr${C}.agp sangerFa/${C}/chr${C}.agp

    #	verify faCount still has the same amount of sequence as listed above
    cd sangerFa
    faCount *.fa
    #	you should see the same numbers
    #	the assembly has no N's:
    grep N *.fa
    #	shows nothing

    #	set cluster data symlink for future reference:
    ssh hgwdev
    ln -s /cluster/store5/worm/ce3 /cluster/data/ce3

###########################################################################
# PREPARE Split contigs into 100,000 bp chunks for cluster runs
# (DONE, 2004-04-29, Hiram)
    # next machine
    ssh eieio
    cd /cluster/data/ce3
    rm -fr ./split
    mkdir split
for C in I II III IV V X M
do
    mkdir split/${C}
    faSplit size sangerFa/chr${C}.fa 100000 split/${C}/c -lift=split/chr${C}.lft
done
151 pieces of 151 written
153 pieces of 153 written
138 pieces of 138 written
175 pieces of 175 written
210 pieces of 210 written
178 pieces of 178 written
1 pieces of 1 written

   cat split/*.lft > liftAll.lft
   # copy them to /iscratch/i for cluster rsync
   # next machine
   ssh kkr1u00
   cd /cluster/data/ce3/split
for C in I II III IV V X M
do
    echo -n "${C} "
    mkdir -p /iscratch/i/worms/Celegans3/unmaskedSplit/${C}
    cp -p ${C}/c*.fa /iscratch/i/worms/Celegans3/unmaskedSplit/${C}
done
    #	this iSync takes forever these days because iscratch is so large
    /cluster/bin/iSync
    #	instead, a simple rsync of just this business will get it done
    #	rapidly
for i in 2 3 4 5 6 7 8
do
    rsync -a --progress --delete --rsh=rsh /iscratch/i/worms/ \
	kkr${i}u00:/iscratch/i/worms/
done

############################################################################
# Run RepeatMasker on the chromosomes (DONE, 2005-04-29 - Hiram)
    # next machine
    ssh kk
    cd /cluster/data/ce3
    mkdir jkStuff
    # make run directory and job list, create the script to use 
    # for the RepeatMasker run
    cat << '_EOF_' > jkStuff/RMWorm
#!/bin/csh -fe
#
#       This is a slight rearrangement of the
#       RMChicken script used in makeGalGal2.doc
#       The results here need to go to a different location
#       $1 == chrom name: I II III IV V X M
#       $2 == directory where split contig .fa is found
#       $3 == name of contig .fa file
cd $1
pushd .
cd $2
/bin/mkdir -p /tmp/ce3/$3/$1
/bin/cp $3 /tmp/ce3/$3/$1
cd /tmp/ce3/$3/$1
/cluster/bluearc/RepeatMasker050112/RepeatMasker -alignments -s -species elegans $3
popd
/bin/cp /tmp/ce3/$3/$1/$3.out ./
if( -e /tmp/ce3/$3/$1/$3.align ) /bin/cp /tmp/ce3/$3/$1/$3.align ./
if (-e /tmp/ce3/$3/$1/$3.tbl) /bin/cp /tmp/ce3/$3/$1/$3.tbl ./
if (-e /tmp/ce3/$3/$1/$3.cat) /bin/cp /tmp/ce3/$3/$1/$3.cat ./
/bin/rm -r /tmp/ce3/$3/$1
/bin/rmdir --ignore-fail-on-non-empty /tmp/ce3/$3
/bin/rmdir --ignore-fail-on-non-empty /tmp/ce3
'_EOF_'
    # emacs happy
    chmod +x jkStuff/RMWorm
    # create job list
    mkdir RMRun
    rm -f RMRun/jobList
for C in I II III IV V X M
do
    mkdir /cluster/data/ce3/RMRun/${C}
    for T in /iscratch/i/worms/Celegans3/unmaskedSplit/$C/c*.fa
    do
	D=`dirname $T`
	F=`basename $T`
	echo /cluster/data/ce3/jkStuff/RMWorm ${C} ${D} ${F} \
'{'check out line+ /cluster/data/ce3/RMRun/$C/${F}.out'}'
    done >> RMRun/jobList
done
    # Do the run
    cd /cluster/data/ce3/RMRun
    para create jobList
    para try, para check, para check, para push, para check, ...
XXXX
    #  STARTED 2005-04-29 14:28
# Completed: 1006 of 1006 jobs
# CPU time in finished jobs:    1129254s   18820.90m   313.68h   13.07d  0.036 y
# IO & Wait Time:                  4664s      77.73m     1.30h    0.05d  0.000 y
# Average job time:                1127s      18.79m     0.31h    0.01d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:            1290s      21.50m     0.36h    0.01d
# Submission to last job:          3575s      59.58m     0.99h    0.04d

    # when they are finished, liftUp and load the .out files into the database:
    # next machine
    ssh eieio
    cd /cluster/data/ce3/RMRun
for C in I II III IV V X M
do
    liftUp chr${C}.fa.out /cluster/data/ce3/split/chr${C}.lft warn ${C}/*.fa.out
done

##########################################################################
# CREATE DATABASE
    ssh eieio
    cd /cluster/data/ce3
    faToTwoBit sangerFa/chr*.fa ce3.2bit
    twoBitInfo ce3.2bit stdout | sort -rn +1 > chrom.sizes
    grep -v random chrom.sizes | cut -f1 | sed -e "s/chr//" > chrom.lst
    twoBitInfo ce3.2bit stdout |
        awk '{printf "%s\t%s\t/gbdb/ce3/ce3.2bit\n", $1,$2}' > chromInfo.tab

    ssh hgwdev
    cd /cluster/data/ce3
    hgsql -e "create database ce3;" mysql
    #	Make sure we have enough room (eventually ~ 70Gb) for mysql tables:
    df -h | grep mysql
    #	/dev/sda1             472G  230G  218G  52% /var/lib/mysql2
    #	/dev/sdc1             1.8T  904G  756G  55% /var/lib/mysql

    # CREATING GRP TABLE FOR TRACK GROUPING (DONE - 2005-03-10 - Hiram)
    #   Use any of the newest databases to ensure that the organization
    #   of the grp table is up to date
    ssh hgwdev
    cd /cluster/data/ce3
    hgsql ce3 -e "create table grp (PRIMARY KEY(NAME)) select * from mm6.grp"
    hgsql ce3 < $HOME/kent/src/hg/lib/chromInfo.sql
    hgsql ce3 -e 'load data local infile "chromInfo.tab" into table chromInfo;'

    # Enter ce3 into dbDb and defaultDb so test browser knows about it:
    hgsql -e 'INSERT INTO dbDb (name, description, nibPath, organism, \
        defaultPos, active, orderKey, genome, scientificName, \
        htmlPath, hgNearOk, hgPbOk, sourceName) \
        VALUES("ce3", "March 2005", "/gbdb/ce3", "C. elegans", \
        "chrII:14647078-14667002", 1, 59, "C. elegans", \
        "Caenorhabditis elegans", "/gbdb/ce3/html/description.html", 0, 0, \
        "WormBase v. WS140");' -h localhost hgcentraltest
    #	do this defaultDb entry later after there is something to see
    #	on this browser.
    hgsql -e 'INSERT INTO defaultDb (name, genome) VALUES("ce3", "Mouse")' \
        -h localhost hgcentraltest
    # start a new entry in the trackDb hierarchy
    ssh hgwdev
    # start a new entry in the trackDb hierarchy
    cd $HOME/kent/src/hg/makeDb/trackDb/worm
    mkdir ce3
    cvs add ce3
    cd ce3
    cp ../ce3/description.html .
    vi description.html - fixup text for this assembly
    cvs add description.html
    cvs commit
    cd ../..
    vi makefile - add ce3 to the list
    mkdir /cluster/data/ce3/html
    mkdir /gbdb/ce3
    ln -s /cluster/data/ce3/html /gbdb/ce3/html
    ln -s /cluster/data/ce3/ce3.2bit /gbdb/ce3/ce3.2bit
    cp -p worm/ce3/description.html /gbdb/ce3/html
    make DBS=ce3 ZOO_DBS=""

    cd /cluster/data/ce3/RMRun
    hgLoadOut ce3 chr*.fa.out
# bad rep range [1023, 233] line 2579 of chrII.fa.out 
# bad rep range [2914, 2908] line 2791 of chrIII.fa.out 
#	This result produces: 13238621 bases, 101,554 items, %13.200098

#######################################################################
#  an experiment to see if more repeat masked elements can be found
#	do a second repeat masker run, with a different split to help
#	cover some of the edges that the previous split may have made
#	that cause RM to not find items next to those edges.
#
#	The result of this experiment is that splitting at the 100,000
#	boundary hardly made much of a difference compared to a
#	completely unsplit result.  So, we will go with the traditional
#	split at 100,000 and leave it at that.
#######################################################################

###########################################################################
# PREPARE Split contigs into 103,000 bp chunks for a second RM run
#	This isn't perfect, there are a couple of breaks that are
#	exactly the same as before (seven) but all others are at least
#	1000 different
# (DONE, 2004-04-29, Hiram)
    # next machine
    ssh eieio
    cd /cluster/data/ce3
    rm -fr ./split103
    mkdir split103
for C in I II III IV V X M
do
    mkdir split103/${C}
    faSplit size sangerFa/chr${C}.fa 103000 split103/${C}/c -lift=split103/chr${C}.lft
done
147 pieces of 147 written
149 pieces of 149 written
134 pieces of 134 written
170 pieces of 170 written
204 pieces of 204 written
173 pieces of 173 written
1 pieces of 1 written

   cat split103/*.lft > liftAll103.lft
   # copy them to /iscratch/i for cluster rsync
   # next machine
   ssh kkr1u00
   cd /cluster/data/ce3/split103
for C in I II III IV V X M
do
    echo -n "${C} "
    mkdir -p /iscratch/i/worms/Celegans3/split103/${C}
    cp -p ${C}/c*.fa /iscratch/i/worms/Celegans3/split103/${C}
done
    #	this iSync takes forever these days because iscratch is so large
    /cluster/bin/iSync
    #	instead, a simple rsync of just this business will get it done
    #	rapidly
for i in 2 3 4 5 6 7 8
do
    rsync -a --progress --delete --rsh=rsh /iscratch/i/worms/ \
	kkr${i}u00:/iscratch/i/worms/
done

for C in I II III IV V X M
do
    mkdir /cluster/data/ce3/RMFull/${C}
    for T in /iscratch/i/worms/Celegans3/unmaskedFa/chr${C}.fa
    do
	D=`dirname $T`
	F=`basename $T`
	echo /cluster/data/ce3/jkStuff/RMWorm ${C} ${D} ${F} \
'{'check out line+ /cluster/data/ce3/RMFull/$C/${F}.out'}'
    done >> RMFull/jobList
done
    # Do the run
############################################################################
# Second RepeatMasker on different split size
    # next machine
    ssh kk
    cd /cluster/data/ce3
    # create job list
    mkdir RMRun103
    rm -f RMRun103/jobList
for C in I II III IV V X M
do
    mkdir /cluster/data/ce3/RMRun103/${C}
    for T in /iscratch/i/worms/Celegans3/split103/$C/c*.fa
    do
	D=`dirname $T`
	F=`basename $T`
	echo /cluster/data/ce3/jkStuff/RMWorm ${C} ${D} ${F} \
'{'check out line+ /cluster/data/ce3/RMRun103/$C/${F}.out'}'
    done >> RMRun103/jobList
done
    # Do the run
    cd /cluster/data/ce3/RMRun103
    para create jobList
    para try, para check, para check, para push, para check, ...
    #  STARTED 2005-04-29 15:43
# Completed: 978 of 978 jobs
# CPU time in finished jobs:    1129788s   18829.81m   313.83h   13.08d  0.036 y
# IO & Wait Time:                  5530s      92.16m     1.54h    0.06d  0.000 y
# Average job time:                1161s      19.35m     0.32h    0.01d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:            1313s      21.88m     0.36h    0.02d
# Submission to last job:          2737s      45.62m     0.76h    0.03d

    # when they are finished, liftUp and load the .out files into the database:
    # next machine
    ssh eieio
    cd /cluster/data/ce3/RMRun103
for C in I II III IV V X M
do
 liftUp chr${C}.fa.out /cluster/data/ce3/split103/chr${C}.lft warn ${C}/*.fa.out
done

    # next machine
    ssh hgwdev
    cd /cluster/data/ce3/RMRun103
    hgLoadOut ce3 chr*.fa.out
bad rep range [1023, 233] line 2595 of chrII.fa.out 
bad rep range [2914, 2908] line 2797 of chrIII.fa.out
#	This result produces: 13236863 bases, 101,529 items, %13.198345

#######################################################################
#	The same RM run was done a third time on whole un-split chrom
#	files.  This run took 35 hours on the Iservers kluster.
#	Loading these full chrom results:
#	Not split:              13,238,684 bases, 101,565 items, %13.200161
#	Split at 100,000 bases: 13,238,621 bases, 101,554 items, %13.200098
#	Split at 103,000 bases: 13,236,863 bases, 101,529 items, %13.198345
#	Even the full chroms had problems with coordinates:
# bad rep range [1023, 233] line 2586 of chrII.fa.out 
# bad rep range [2914, 2908] line 2792 of chrIII.fa.out 
#	Combining the two split results:
#	                        13,283,266 bases, 103,117 items, %13.244613
#######################################################################
#	Most interestingly, the hgLoadOut would *not* load the files
#	unless they had been lifted.  It said they were not valid .out
#	files !  So, a fake split at 30,000,000 to create some lft
#	files:  (30,000,000 is too large to cause anything to split)
for C in I II III IV V X M
do
    mkdir splitFull/${C}
    faSplit size sangerFa/chr${C}.fa 30000000 splitFull/${C}/c -lift=splitFull/chr${C}.lft
done
#
#######################################################################
# SIMPLE REPEAT [TRF] TRACK  (DONE - 2005-05-02 - Hiram)
    ssh kki
    mkdir -p /cluster/data/ce3/bed/simpleRepeat
    cd /cluster/data/ce3/bed/simpleRepeat
    mkdir trf
    ls -1S /iscratch/i/worms/Celegans3/unmaskedFa/chr*.fa > genome.lst
    cat << '_EOF_' > gsub
#LOOP
/cluster/bin/i386/trfBig -trf=/cluster/bin/i386/trf {check in line+ $(path1)}  /dev/null -bedAt={check out line trf/$(root1).bed} -tempDir=/tmp
#ENDLOOP
'_EOF_'
    #	happy emacs
                                                                                
    gensub2 genome.lst single gsub jobList
    para create jobList
    para try    # there are only 7, so this runs them all
# Completed: 7 of 7 jobs
# CPU time in finished jobs:       1751s      29.18m     0.49h    0.02d  0.000 y
# IO & Wait Time:                    28s       0.47m     0.01h    0.00d  0.000 y
# Average job time:                 254s       4.24m     0.07h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:             545s       9.08m     0.15h    0.01d
# Submission to last job:           545s       9.08m     0.15h    0.01d

    #  When cluster run is done, combine into one:
    cat trf/*.bed > simpleRepeat.bed

    # Load into the database:
    # next machine
    ssh hgwdev
    cd /cluster/data/ce3/bed/simpleRepeat
    hgLoadBed ce3 simpleRepeat simpleRepeat.bed \
      -sqlTable=$HOME/src/hg/lib/simpleRepeat.sql
    #	Loaded 28637 elements of size 16

#######################################################################
# PROCESS SIMPLE REPEATS AND RMSK INTO MASK (DONE,  2005-05-02 - Hiram)
    # After the simpleRepeats track has been built, make a filtered version
    # of the trf output: keep trf's with period <= 12:
    ssh eieio
    cd /cluster/data/ce3/bed/simpleRepeat
    mkdir -p trfMask
for F in trf/*.bed
do
    T=${F#trf/}
    echo "${F} > trfMask/${T}"
    awk '{if ($5 <= 12) print;}' ${F} > trfMask/${T}
done

#  create Soft and Hard masks from RepeatMaster and TRF outputs:
#  and rebuild the 2bit file using the soft masking in the fa.
#	Might need the nibs for something, so make those too.
    # next machine
    ssh eieio
    cd /cluster/data/ce3
    mkdir softMask
    mkdir nib
    cd /cluster/data/ce3
for C in I II III IV V X M
do
    echo -n "masking chr${C} "
    maskOutFa sangerFa/chr${C}.fa RMRun/chr${C}.fa.out \
                softMask/chr${C}.fa -soft
    maskOutFa softMask/chr${C}.fa \
                bed/simpleRepeat/trfMask/chr${C}.bed \
                softMask/chr${C}.fa -softAdd
    faToNib -softMask softMask/chr${C}.fa nib/chr${C}.nib
done
# masking chrI Writing 15080552 bases in 7540284 bytes
# masking chrII Writing 15279311 bases in 7639664 bytes
# masking chrIII Writing 13783317 bases in 6891667 bytes
# masking chrIV Writing 17493785 bases in 8746901 bytes
# masking chrV Writing 20922231 bases in 10461124 bytes
# masking chrX Writing 17718850 bases in 8859433 bytes
# masking chrM Writing 13794 bases in 6905 bytes

    #	re-create the 2bit file
    rm -f ce3.2bit
    faToTwoBit softMask/chr*.fa ce3.2bit

    # create hard masks 
    mkdir hardMask
for C in I II III IV V X M
do
    echo "masking chr${C}"
    /cluster/bin/i386/maskOutFa softMask/chr${C}.fa hard \
                hardMask/chr${C}.fa
done

    #	copy to iscratch for cluster runs
    ssh kkr1u00
    cd /cluster/data/ce3/softMask
    mkdir -p /iscratch/i/worms/Celegans3/bothMasksFa
    mkdir -p /iscratch/i/worms/Celegans3/nib
    cp -p *.fa /iscratch/i/worms/Celegans3/bothMasksFa
    cd /cluster/data/ce3/nib
    cp -p c*.nib /iscratch/i/worms/Celegans3/nib
    cd /iscratch/i/worms/Celegans3
    cp -p /cluster/data/ce3/ce3.2bit .
    #	no longer need these items
    rm -fr unmaskedSplit split103 unmaskedFa
for i in 2 3 4 5 6 7 8
do
    rsync -a --progress --delete --rsh=rsh /iscratch/i/worms/ \
	kkr${i}u00:/iscratch/i/worms/
done
#######################################################################
#  GOLD AND GAP TABLES (DONE - 2005-05-02 - Hiram)
    ssh hgwdev
    cd /cluster/data/ce3
    awk '{print $1}' chrom.sizes | sed -e "s/chr//" > chrom.lst
    grep -v random chrom.sizes | cut -f1 | sed -e "s/chr//" > chrom.lst
    grep -v random chrom.sizes | cut -f1 > chrom.lst
    hgGoldGapGl -noGl -chromLst=chrom.lst ce3 /cluster/data/ce3 sangerFa
    #
    #	There are no gaps in this assembly, the gap tables are all empty
    #

#######################################################################
# GC5BASE (DONE - 2004-12-08 - Hiram)
    ssh eieio
    mkdir /cluster/data/ce3/bed/gc5Base
    cd /cluster/data/ce3/bed/gc5Base
    hgGcPercent -wigOut -doGaps -file=stdout -win=5 ce3 \
        /cluster/data/ce3 | wigEncode stdin gc5Base.wig gc5Base.wib

    ssh hgwdev
    cd /cluster/data/ce3/bed/gc5Base
    mkdir /gbdb/ce3/wib
    ln -s `pwd`/gc5Base.wib /gbdb/ce3/wib
    hgLoadWiggle ce3 gc5Base gc5Base.wig

#######################################################################
# MAKE SANGER GENE (WORM BASE GENES) TRACK (WORKING, 2005-05-02, Hiram)
   ssh eieio
   mkdir -p /cluster/data/ce3/bed/sangerGene
   cd /cluster/data/ce3/bed/sangerGene
    # the perl trims these files down to a reasonable size.  As they are
    #   they cause ldHgGene to hangup due to memory size.
    # The sed removes CDS before id e.g. from CDS "Y74C9A.2" and the
    # extra quote ", and finally the comments at the ends of the lines
    # which start with `blank semi-colon blank'
for F in I II III IV V X M
do
    echo -n "${F} "
    zcat ../../WS140/chr${F}.gff.gz | \
    sed -e "s/CHROMOSOME_III/chrIII/g" -e "s/CHROMOSOME_II/chrII/g" \
	-e "s/CHROMOSOME_IV/chrIV/g" -e "s/CHROMOSOME_I/chrI/g" \
	-e "s/CHROMOSOME_X/chrX/g" -e "s/CHROMOSOME_V/chrV/g" \
	-e "s/CHROMOSOME_M/chrM/g" \
	-e 's/Sequence "\(.*\)"$/\1/' -e 's/Transcript "\(.*\)"$/\1/' | \
	    perl -ne '@a=split; print if($a[1] =~ m/curated|DNA|RNA/i &&
$a[2] =~ m/intron|exon|cds|sequence|transcri/i);' | \
	sed -e "s/CDS \"//; s/\"//; s/ ; .*//;" > chr${F}.gff
done
    #  check file sizes, should be reasonable
    ls -ogrt
# -rw-rw-r--    1  3524403 May  2 12:47 chrI.gff
# -rw-rw-r--    1  3732465 May  2 12:48 chrII.gff
# -rw-rw-r--    1  3295374 May  2 12:49 chrIII.gff
# -rw-rw-r--    1  3635497 May  2 12:51 chrIV.gff
# -rw-rw-r--    1  4754926 May  2 12:53 chrV.gff
# -rw-rw-r--    1  3896221 May  2 12:55 chrX.gff
# -rw-rw-r--    1     3881 May  2 12:55 chrM.gff

    # now load database with those transformed gff files
    # next machine
    ssh hgwdev
    cd /cluster/data/ce3/bed/sangerGene
    # 2004-05-10, hartera, Reload sangerGene table using extended GenePred
    # format. 2004-05-11, hartera. Extended format frame information does not
    # look correct. Reload without the extended fields.
    ldHgGene ce3 sangerGene *.gff
# Read 23277 transcripts in 431929 lines in 7 files
#  23277 groups 7 seqs 8 sources 10 feature types
#23277 gene predictions
XXXXX Stopped here 2005-05-02 14:30
    
    # Add proteinID field to sangerGene table, used by Gene Sorter
    ssh hgwdev
    cd /cluster/data/ce3/bed/sangerGene
    hgsql -e 'alter table sangerGene add proteinID varchar(40) NOT NULL;' ce3
    # To add index on this column
    hgsql -e 'alter table sangerGene add index(proteinID);' ce3
    # Add Swiss-Prot protein IDs to this column
    # There are 23076 entries in sangerGene and 21780 of the names 
    # are in sangerLinks as orfName
    hgsql -N -e 'select count(*) from sangerGene as g,sangerLinks as l \
           where g.name = l.orfName;' ce3
    # 21780
    # get names from sangerGene and sangerLinks tables
    hgsql -N -e "select name from sangerGene;" ce3 | sort > name.sangerGene
    hgsql -N -e "select orfName from sangerLinks;" ce3 | sort > orfName.sangerLinks
    # get list of names in sangerGene not in sangerLinks
    comm -23 name.sangerGene orfName.sangerLinks > geneNames.notin.sangerLinks
    # Go to the WS120 WormBase mirror site and check SwissProt IDs
    # http://http://ws120.wormbase.org/db/searches/info_dump
    # Some of these genes are non coding RNAs or have no SwissProt ID BUT
    # others in the geneNames.notin.sangerLinks list do have a Swiss-Prot ID 
    # Download IDs in using batches of about 400 for gene names from 
    # geneNames.notin.sangerLinks and add to file, SPIds.wormPep.WS120
    # Create a perl script to parse out Swiss-Prot IDs for those genes that 
    # have them and create the sql statements to insert them into sangerLinks

# CREATE SANGERPEP TABLE (DONE, 2005-08-15, hiram)
#	Must be done after sangerGene table load to have time stamps
#	correct for joinerCheck
    mkdir -p /cluster/data/ce3/bed/sangerPep
    cd /cluster/data/ce3/bed/sangerPep
    # Download peptide sequences from the Sanger Centre ftp site:
    wget -o ce3.fetch.log -r -l1 --no-directories --timestamping \
        ftp://ftp.sanger.ac.uk/pub/databases/wormpep/wormpep140/wormpep140
    # Load into database
    hgPepPred ce3 generic sangerPep wormpep140
    # the sangerPep table is used by the sangerGene track
    gzip wormpep140
    ssh kkr1u00
    cd /iscratch/i/worms/ce3
    zcat /cluster/data/ce3/bed/sangerPep/wormpep140.gz > wormpep140
    mkdir splitPep
    faSplit sequence wormpep140 1000 splitPep/wp
    #	rsync
    for i in 2 3 4 5 6 7 8
do
    rsync -a --progress --delete --rsh=rsh /iscratch/i/worms/ \
	kkr${i}u00:/iscratch/i/worms/
done


# CREATE ORFTOGENE TABLE (Used by hgGene and hgNear) (NOT DONE)
   mkdir /cluster/data/ce3/bed/orfToGene
   cd !$
   # gene_names.txt for WS120 was created and provided by todd.harris@cshl.edu
   # ORF e.g. Y110A7A.10 gene e.g. aap-1
   awk -F '\t' '$2 == "Caenorhabditis elegans" && $3 == "Gene" {printf("%s\t%s\n", $4, $1)}' gene_names.txt > orfToGene.txt
   # reformat this for use in creating Sanger Links with hgWormLinks
   awk 'NF == 2' orfToGene.txt > orfToGene.txt2
   # use perl script to move ORFs with the same gene name onto separate lines
   # and remove lines where there is a gene name with an alternate name
   # in parentheses. this output file is used for Sanger Links
   /cluster/data/ce3/jkStuff/formatorfToGene.pl < orfToGene.txt2 > orfToGene.tab2   
   hgCeOrfToGene ce3 gene_names.txt sangerGene orfToGene

#########################################################################
# BLASTZ HUMAN Cb1 (WORKING - 2005-05-02 Hiram)
#	going to try and do this with ce3 chroms vs the cb1 contigs, and
#	then lift to chrUn
    ssh eieio
    mkdir /cluster/data/ce3/bed/blastzCb1.2005_05_02
    cd /cluster/data/ce3/bed
    ln -s blastzCb1.2005_05_02 blastz.cb1
    cd blastzCb1.2005_05_02

    cat << '_EOF_' > DEF
# briggsae vs. elegans
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/home/angie/schwartzbin:/cluster/home/kent/bin/i386

ALIGN=blastz-run
BLASTZ=blastz
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=0

# TARGET: elegans Ce3
SEQ1_DIR=/iscratch/i/worms/Celegans3/ce3.2bit
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: briggsae cb1
SEQ2_DIR=/iscratch/i/worms/Cbriggsae/cb1.2bit
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=30000000
SEQ2_LAP=0

BASE=/cluster/data/ce3/bed/blastzCb1.2005_05_02

DEF=$BASE/DEF
RAW=$BASE/raw
CDBDIR=$BASE
SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << keep emacs coloring happy

    cp /cluster/data/ce3/chrom.sizes ./S1.len
    sort -rn +1 /cluster/data/cb1/chrom.sizes > S2.len
    #	establish a screen to control this job
    screen
    cd /cluster/data/ce3/bed/blastzCb1.2005_05_02
    time /cluster/bin/scripts/doBlastzChainNet.pl `pwd`/DEF > \
	blast.run.out 2>&1 &
    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh eieio
    screen -d -r
    #	STARTED - 2005-03-17 21:25

    #	swap results to place ce3 alignments onto cb1
    ssh eieio
    cd /cluster/data/ce3/bed/blastzCb1.2005_05_02
    time /cluster/bin/scripts/doBlastzChainNet.pl -swap `pwd`/DEF > \
	swap.run.out 2>&1 &

# BLAT SERVER SETUP (DONE - 2005-06-02 - Hiram)

    hgsql -e 'INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
	VALUES("ce3", "blat15", 17784, 1, 0);' \
	-h localhost hgcentraltest
    hgsql -e 'INSERT INTO blatServers (db, host, port, isTrans, canPcr) \
	VALUES("ce3", "blat15", 17785, 0, 1);' \
	-h localhost hgcentraltest

##########################################################################
#	Convenient rsync for kkr1u00 to copy the worm stuff quickly
    ssh kkr1u00
    for i in 2 3 4 5 6 7 8
do
    rsync -a --progress --delete --rsh=rsh /iscratch/i/worms/ \
	kkr${i}u00:/iscratch/i/worms/
done


##########################################################################
# BLASTZ C. elegans ce3 (DONE - 2005-08-10 - Hiram)
    ssh kk
    mkdir /cluster/data/ce3/bed/blastzCb2.2005_08_10
    cd /cluster/data/ce3/bed/blastzCb2.2005_08_10
    cat << '_EOF_' > DEF
# Ce3 vs Cb2
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin

ALIGN=blastz-run.v7
BLASTZ=blastz.v7
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=0

# TARGET: Cb3
SEQ1_DIR=/iscratch/i/worms/ce3/nib
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: Cb2 - full chroms only, no randoms
SEQ2_DIR=/iscratch/i/worms/cb2/chromNib
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=10000000
SEQ2_LAP=0

BASE=/cluster/data/ce3/bed/blastzCb2.2005_08_10

SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << keep emacs coloring happy

    cp -p /cluster/data/ce3/chrom.sizes ./S1.len
    nibSize /iscratch/i/worms/cb2/chromNib/*.nib | \
	awk '{printf "%s\t%s\n", $2, $3}' | sort -rn +1 > S2.len

    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl -stop chainMerge \
	`pwd`/DEF > blast.run.out 2>&1 &
    #	real    85m16.486s
    #	user    0m1.070s
    #	sys     0m0.200s

    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh kk
    screen -d -r
    #	STARTED - 2005-08-10 16:22
    #	FINISHED - 2005-08-10 17:45
#	blastz kluster run
# Completed: 182 of 182 jobs
# CPU time in finished jobs:     109157s    1819.29m    30.32h    1.26d  0.003 y
# IO & Wait Time:                  1038s      17.30m     0.29h    0.01d  0.000 y
# Average job time:                 605s      10.09m     0.17h    0.01d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:            4811s      80.18m     1.34h    0.06d
# Submission to last job:          4813s      80.22m     1.34h    0.06d

#	doCatRun
# Completed: 14 of 14 jobs
# CPU time in finished jobs:         18s       0.29m     0.00h    0.00d  0.000 y
# IO & Wait Time:                    54s       0.91m     0.02h    0.00d  0.000 y
# Average job time:                   5s       0.09m     0.00h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:              10s       0.17m     0.00h    0.00d
# Submission to last job:            10s       0.17m     0.00h    0.00d

#	doChainRun
# Completed: 7 of 7 jobs
# CPU time in finished jobs:        125s       2.09m     0.03h    0.00d  0.000 y
# IO & Wait Time:                    41s       0.68m     0.01h    0.00d  0.000 y
# Average job time:                  24s       0.40m     0.01h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:              42s       0.70m     0.01h    0.00d
# Submission to last job:            42s       0.70m     0.01h    0.00d

    #	And then, a run with the randomContigs
    
    mkdir /cluster/data/ce3/bed/blastzCb2.2005_08_10/randomContigs
    cd /cluster/data/ce3/bed/blastzCb2.2005_08_10/randomContigs
    cat << '_EOF_' > DEF
# Ce3 vs Cb2
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin

ALIGN=blastz-run.v7
BLASTZ=blastz.v7
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=0

# TARGET: Cb3
SEQ1_DIR=/iscratch/i/worms/ce3/nib
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: Cb2 - full chroms only, no randoms
SEQ2_DIR=/iscratch/i/worms/cb2/randomContigs.2bit
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=10000000
SEQ2_LAP=0

BASE=/cluster/data/ce3/bed/blastzCb2.2005_08_10/randomContigs

SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << keep emacs coloring happy

    cp -p /cluster/data/ce3/chrom.sizes ./S1.len
    twoBitInfo /iscratch/i/worms/cb2/randomContigs.2bit stdout | \
	sort -rn +1 > S2.len

    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl -stop chainMerge \
	`pwd`/DEF > blast.run.out 2>&1 &
    #	real    104m9.081s
    #	user    0m1.180s
    #	sys     0m0.150s

    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh kk
    screen -d -r
#	blastz kluster run
# Completed: 28 of 28 jobs
# CPU time in finished jobs:      36050s     600.84m    10.01h    0.42d  0.001 y
# IO & Wait Time:                   259s       4.31m     0.07h    0.00d  0.000 y
# Average job time:                1297s      21.61m     0.36h    0.02d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:            6144s     102.40m     1.71h    0.07d
# Submission to last job:          6144s     102.40m     1.71h    0.07d

#	doCatRun
# Completed: 14 of 14 jobs
# CPU time in finished jobs:          5s       0.08m     0.00h    0.00d  0.000 y
# IO & Wait Time:                    43s       0.72m     0.01h    0.00d  0.000 y
# Average job time:                   3s       0.06m     0.00h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:               5s       0.08m     0.00h    0.00d
# Submission to last job:             7s       0.12m     0.00h    0.00d

#	doChainRun
# Completed: 7 of 7 jobs
# CPU time in finished jobs:         29s       0.48m     0.01h    0.00d  0.000 y
# IO & Wait Time:                    25s       0.42m     0.01h    0.00d  0.000 y
# Average job time:                   8s       0.13m     0.00h    0.00d
# Longest running job:                0s       0.00m     0.00h    0.00d
# Longest finished job:              16s       0.27m     0.00h    0.00d
# Submission to last job:            16s       0.27m     0.00h    0.00d

    #	Now, lift those results to their chr*_random coordinates:

    ssh kkstore02
    cd /cluster/data/ce3/bed/blastzCb2.2005_08_10/randomContigs/axtChain
    mkdir liftedChain
    for F in chain/*.chain
    do
	C=${F#chain/}
	C=${C/.chain/}
	echo "$F -> liftedChain/$C"
	liftUp -chainQ liftedChain/${C}.lifted.chain \
	    /cluster/bluearc/scratch/hg/cb2/liftRandoms.lft warn $F
    done
    # now merge these lifted chain files with the existing chain files for 
    # the chroms and then sort by score using chainSort 
    cd /cluster/data/ce3/bed/blastzCb2.2005_08_10/axtChain
    # gzipped file is only chains for chromsI-X and chrM so rename
    mv ce3.cb2.all.chain.gz ce3.cb2.chroms.chain.gz
    mv chain chromChain
    mkdir chain chainUnSorted
    # get all chains to be merged in chainUnSorted dir
    cp -p ./chromChain/*.chain ./chainUnSorted/
    # copy contig chains, these are *.lifted.chain so they do not 
    # write over the chrom chains.
    cp -p ../randomContigs/axtChain/liftedChain/*.chain ./chainUnSorted/
    # then merge and sort all these chains. they must be merged and all 
    # sorted together so that all IDs are unique across all chroms.
    # IDs are reassigned by chainMergeSort so that IDs are unique.
    chainMergeSort chainUnSorted/*.chain | gzip > ce3.cb2.all.chain.gz
     # use chainSplit to split this into chains again
    chainSplit chain ce3.cb2.all.chain.gz

    # then pick up the doBlastzChainNet.pl script with the net step
    ssh kk
    cd /cluster/data/ce3/bed/blastzCb2.2005_08_10
    cp -p DEF DEF.chroms
    # edit DEF so SEQ2_DIR=/iscratch/i/worms/cb2/allNib
    #	as need all nib files now
    #	And complete S2.len
    nibSize /iscratch/i/worms/cb2/nib/*.nib | \
	awk '{printf "%s\t%s\n", $2, $3}' | sort -rn +1 > S2.len
    #	establish a screen to control this job
    screen
    time /cluster/bin/scripts/doBlastzChainNet.pl -continue net \
	`pwd`/DEF > net.run.out 2>&1 &
    #	real    5m32.249s
    #	user    0m0.510s
    #	sys     0m0.090s

    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh kk
    screen -d -r

    #	swap results to place ce3 alignments onto cb2
    time /cluster/bin/scripts/doBlastzChainNet.pl -swap `pwd`/DEF > \
	swap.run.out 2>&1 &
    #	real    7m27.028s
    #	user    0m1.770s
    #	sys     0m0.190s

##########################################################################
# BLASTZ C. remanei caeRem1 (DONE - 2005-08-18 - Hiram)
    ssh pk
    mkdir /cluster/data/ce3/bed/blastzCaeRem1.2005_08_18
    cd /cluster/data/ce3/bed/blastzCaeRem1.2005_08_18
    cat << '_EOF_' > DEF
# Ce3 vs Cb2
export PATH=/usr/bin:/bin:/usr/local/bin:/cluster/bin/penn:/cluster/bin/i386:/cluster/home/angie/schwartzbin

ALIGN=blastz-run.v7
BLASTZ=blastz.v7
BLASTZ_H=2000
BLASTZ_ABRIDGE_REPEATS=0

# TARGET: Cb3
SEQ1_DIR=/san/sanvol1/scratch/worms/ce3/nib
SEQ1_IN_CONTIGS=0
SEQ1_CHUNK=10000000
SEQ1_LAP=10000

# QUERY: CaeRem1
SEQ2_DIR=/san/sanvol1/scratch/worms/caeRem1/caeRem1.2bit
SEQ2_IN_CONTIGS=0
SEQ2_CHUNK=10000000
SEQ2_LAP=0

BASE=/cluster/data/ce3/bed/blastzCaeRem1.2005_08_18

SEQ1_LEN=$BASE/S1.len
SEQ2_LEN=$BASE/S2.len
'_EOF_'
    # << keep emacs coloring happy

    cp -p /cluster/data/ce3/chrom.sizes ./S1.len
    twoBitInfo /san/sanvol1/scratch/worms/caeRem1/caeRem1.2bit stdout | \
	sort -rn +1  > S2.len

    #	establish a screen to control this job
    #	altered local copy of doBlastzChainNet.pl to fix santest location
    #	and run everything on pk since the san location is unique here
    #	and these jobs are not going to be very large anyway
    screen
    time ./doBlastzChainNet.pl \
	-bigClusterHub=pk \
	-smallClusterHub=pk \
	-workhorse=pk \
	-fileServer=kkstore02 \
	`pwd`/DEF > blast.run.out 2>&1 &
    #	real    33m25.177s
    #	user    0m0.561s
    #	sys     0m0.222s

    #	detach from screen session: Ctrl-a Ctrl-d
    #	to reattach to this screen session:
    ssh kk
    screen -d -r

    #	swap results to place ce3 alignments onto caeRem1
    cd /cluster/data/ce3/bed/blastzCaeRem1.2005_08_18
    time ./doBlastzChainNet.pl -swap \
	-bigClusterHub=pk \
	-smallClusterHub=pk \
	-workhorse=pk \
	-fileServer=kkstore02 \
	`pwd`/DEF > swap.run.out 2>&1 &
    #	real    17m13.957s
    #	user    0m0.395s
    #	sys     0m0.148s
