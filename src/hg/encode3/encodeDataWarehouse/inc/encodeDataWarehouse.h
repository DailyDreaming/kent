/* encodeDataWarehouse.h was originally generated by the autoSql program, which also 
 * generated encodeDataWarehouse.c and encodeDataWarehouse.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef ENCODEDATAWAREHOUSE_H
#define ENCODEDATAWAREHOUSE_H

#define EDWUSER_NUM_COLS 3

struct edwUser
/* Someone who submits files to or otherwise interacts with big data warehouse */
    {
    struct edwUser *next;  /* Next in singly linked list. */
    char sid[65];	/* sha384 generated base64 encoded unique user ID */
    char access[65];	/* access code - hashed from password and stuff */
    char *email;	/* Email handle, the main identifier. */
    };

void edwUserStaticLoad(char **row, struct edwUser *ret);
/* Load a row from edwUser table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwUser *edwUserLoad(char **row);
/* Load a edwUser from row fetched with select * from edwUser
 * from database.  Dispose of this with edwUserFree(). */

struct edwUser *edwUserLoadAll(char *fileName);
/* Load all edwUser from whitespace-separated file.
 * Dispose of this with edwUserFreeList(). */

struct edwUser *edwUserLoadAllByChar(char *fileName, char chopper);
/* Load all edwUser from chopper separated file.
 * Dispose of this with edwUserFreeList(). */

#define edwUserLoadAllByTab(a) edwUserLoadAllByChar(a, '\t');
/* Load all edwUser from tab separated file.
 * Dispose of this with edwUserFreeList(). */

struct edwUser *edwUserCommaIn(char **pS, struct edwUser *ret);
/* Create a edwUser out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwUser */

void edwUserFree(struct edwUser **pEl);
/* Free a single dynamically allocated edwUser such as created
 * with edwUserLoad(). */

void edwUserFreeList(struct edwUser **pList);
/* Free a list of dynamically allocated edwUser's */

void edwUserOutput(struct edwUser *el, FILE *f, char sep, char lastSep);
/* Print out edwUser.  Separate fields with sep. Follow last field with lastSep. */

#define edwUserTabOut(el,f) edwUserOutput(el,f,'\t','\n');
/* Print out edwUser as a line in a tab-separated file. */

#define edwUserCommaOut(el,f) edwUserOutput(el,f,',',',');
/* Print out edwUser as a comma separated list including final comma. */

#define EDWHOST_NUM_COLS 8

struct edwHost
/* A web host we have collected files from - something like www.ncbi.nlm.gov or google.com */
    {
    struct edwHost *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented host id */
    char *name;	/* Name (before DNS lookup) */
    long long lastOkTime;	/* Last time host was ok in seconds since 1970 */
    long long lastNotOkTime;	/* Last time host was not ok in seconds since 1970 */
    long long firstAdded;	/* Time host was first seen */
    char *errorMessage;	/* If non-empty contains last error message from host. If empty host is ok */
    long long uploadAttempts;	/* Number of times things have been uploaded from this host */
    long long historyBits;	/* Upload history with most recent in least significant bit. 0 for connection failed, 1 for success */
    };

void edwHostStaticLoad(char **row, struct edwHost *ret);
/* Load a row from edwHost table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwHost *edwHostLoad(char **row);
/* Load a edwHost from row fetched with select * from edwHost
 * from database.  Dispose of this with edwHostFree(). */

struct edwHost *edwHostLoadAll(char *fileName);
/* Load all edwHost from whitespace-separated file.
 * Dispose of this with edwHostFreeList(). */

struct edwHost *edwHostLoadAllByChar(char *fileName, char chopper);
/* Load all edwHost from chopper separated file.
 * Dispose of this with edwHostFreeList(). */

#define edwHostLoadAllByTab(a) edwHostLoadAllByChar(a, '\t');
/* Load all edwHost from tab separated file.
 * Dispose of this with edwHostFreeList(). */

struct edwHost *edwHostCommaIn(char **pS, struct edwHost *ret);
/* Create a edwHost out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwHost */

void edwHostFree(struct edwHost **pEl);
/* Free a single dynamically allocated edwHost such as created
 * with edwHostLoad(). */

void edwHostFreeList(struct edwHost **pList);
/* Free a list of dynamically allocated edwHost's */

void edwHostOutput(struct edwHost *el, FILE *f, char sep, char lastSep);
/* Print out edwHost.  Separate fields with sep. Follow last field with lastSep. */

#define edwHostTabOut(el,f) edwHostOutput(el,f,'\t','\n');
/* Print out edwHost as a line in a tab-separated file. */

#define edwHostCommaOut(el,f) edwHostOutput(el,f,',',',');
/* Print out edwHost as a comma separated list including final comma. */

#define EDWSUBMITDIR_NUM_COLS 9

struct edwSubmitDir
/* An external data directory we have collected a submit from */
    {
    struct edwSubmitDir *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented id */
    char *url;	/* Web-mounted directory. Includes protocol, host, and final '/' */
    unsigned hostId;	/* Id of host it's on */
    long long lastOkTime;	/* Last time submit dir was ok in seconds since 1970 */
    long long lastNotOkTime;	/* Last time submit dir was not ok in seconds since 1970 */
    long long firstAdded;	/* Time submit dir was first seen */
    char *errorMessage;	/* If non-empty contains last error message from dir. If empty dir is ok */
    long long uploadAttempts;	/* Number of times uploads attempted fromt this submit directory */
    long long historyBits;	/* Upload history with most recent in least significant bit. 0 for upload failed, 1 for success */
    };

void edwSubmitDirStaticLoad(char **row, struct edwSubmitDir *ret);
/* Load a row from edwSubmitDir table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubmitDir *edwSubmitDirLoad(char **row);
/* Load a edwSubmitDir from row fetched with select * from edwSubmitDir
 * from database.  Dispose of this with edwSubmitDirFree(). */

struct edwSubmitDir *edwSubmitDirLoadAll(char *fileName);
/* Load all edwSubmitDir from whitespace-separated file.
 * Dispose of this with edwSubmitDirFreeList(). */

struct edwSubmitDir *edwSubmitDirLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubmitDir from chopper separated file.
 * Dispose of this with edwSubmitDirFreeList(). */

#define edwSubmitDirLoadAllByTab(a) edwSubmitDirLoadAllByChar(a, '\t');
/* Load all edwSubmitDir from tab separated file.
 * Dispose of this with edwSubmitDirFreeList(). */

struct edwSubmitDir *edwSubmitDirCommaIn(char **pS, struct edwSubmitDir *ret);
/* Create a edwSubmitDir out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubmitDir */

void edwSubmitDirFree(struct edwSubmitDir **pEl);
/* Free a single dynamically allocated edwSubmitDir such as created
 * with edwSubmitDirLoad(). */

void edwSubmitDirFreeList(struct edwSubmitDir **pList);
/* Free a list of dynamically allocated edwSubmitDir's */

void edwSubmitDirOutput(struct edwSubmitDir *el, FILE *f, char sep, char lastSep);
/* Print out edwSubmitDir.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubmitDirTabOut(el,f) edwSubmitDirOutput(el,f,'\t','\n');
/* Print out edwSubmitDir as a line in a tab-separated file. */

#define edwSubmitDirCommaOut(el,f) edwSubmitDirOutput(el,f,',',',');
/* Print out edwSubmitDir as a comma separated list including final comma. */

#define EDWFILE_NUM_COLS 12

struct edwFile
/* A file we are tracking that we intend to and maybe have uploaded */
    {
    struct edwFile *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincrementing file id */
    char licensePlate[17];	/* A abc123 looking license-platish thing */
    unsigned submitId;	/* Links to id in submit table */
    char *submitFileName;	/* File name in submit relative to submit dir */
    char *edwFileName;	/* File name in big data warehouse relative to edw root dir */
    long long startUploadTime;	/* Time when upload started - 0 if not started */
    long long endUploadTime;	/* Time when upload finished - 0 if not finished */
    long long updateTime;	/* Update time (on system it was uploaded from) */
    long long size;	/* File size */
    char md5[33];	/* md5 sum of file contents */
    char *tags;	/* CGI encoded name=val pairs from manifest */
    char *errorMessage;	/* If non-empty contains last error message from upload. If empty upload is ok */
    };

void edwFileStaticLoad(char **row, struct edwFile *ret);
/* Load a row from edwFile table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwFile *edwFileLoad(char **row);
/* Load a edwFile from row fetched with select * from edwFile
 * from database.  Dispose of this with edwFileFree(). */

struct edwFile *edwFileLoadAll(char *fileName);
/* Load all edwFile from whitespace-separated file.
 * Dispose of this with edwFileFreeList(). */

struct edwFile *edwFileLoadAllByChar(char *fileName, char chopper);
/* Load all edwFile from chopper separated file.
 * Dispose of this with edwFileFreeList(). */

#define edwFileLoadAllByTab(a) edwFileLoadAllByChar(a, '\t');
/* Load all edwFile from tab separated file.
 * Dispose of this with edwFileFreeList(). */

struct edwFile *edwFileCommaIn(char **pS, struct edwFile *ret);
/* Create a edwFile out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwFile */

void edwFileFree(struct edwFile **pEl);
/* Free a single dynamically allocated edwFile such as created
 * with edwFileLoad(). */

void edwFileFreeList(struct edwFile **pList);
/* Free a list of dynamically allocated edwFile's */

void edwFileOutput(struct edwFile *el, FILE *f, char sep, char lastSep);
/* Print out edwFile.  Separate fields with sep. Follow last field with lastSep. */

#define edwFileTabOut(el,f) edwFileOutput(el,f,'\t','\n');
/* Print out edwFile as a line in a tab-separated file. */

#define edwFileCommaOut(el,f) edwFileOutput(el,f,',',',');
/* Print out edwFile as a comma separated list including final comma. */

#define EDWSUBMIT_NUM_COLS 9

struct edwSubmit
/* A data submit, typically containing many files.  Always associated with a submit dir. */
    {
    struct edwSubmit *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented submit id */
    char *url;	/* Url to validated.txt format file. We copy this file over and give it a fileId if we can. */
    long long startUploadTime;	/* Time at start of submit */
    long long endUploadTime;	/* Time at end of upload - 0 if not finished */
    char userSid[65];	/* Connects to user table sid field */
    unsigned submitFileId;	/* Points to validated.txt file for submit. */
    unsigned submitDirId;	/* Points to the submitDir */
    unsigned fileCount;	/* Number of files that will be in submit if it were complete. */
    char *errorMessage;	/* If non-empty contains last error message from submit. If empty submit is ok */
    };

void edwSubmitStaticLoad(char **row, struct edwSubmit *ret);
/* Load a row from edwSubmit table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubmit *edwSubmitLoad(char **row);
/* Load a edwSubmit from row fetched with select * from edwSubmit
 * from database.  Dispose of this with edwSubmitFree(). */

struct edwSubmit *edwSubmitLoadAll(char *fileName);
/* Load all edwSubmit from whitespace-separated file.
 * Dispose of this with edwSubmitFreeList(). */

struct edwSubmit *edwSubmitLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubmit from chopper separated file.
 * Dispose of this with edwSubmitFreeList(). */

#define edwSubmitLoadAllByTab(a) edwSubmitLoadAllByChar(a, '\t');
/* Load all edwSubmit from tab separated file.
 * Dispose of this with edwSubmitFreeList(). */

struct edwSubmit *edwSubmitCommaIn(char **pS, struct edwSubmit *ret);
/* Create a edwSubmit out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubmit */

void edwSubmitFree(struct edwSubmit **pEl);
/* Free a single dynamically allocated edwSubmit such as created
 * with edwSubmitLoad(). */

void edwSubmitFreeList(struct edwSubmit **pList);
/* Free a list of dynamically allocated edwSubmit's */

void edwSubmitOutput(struct edwSubmit *el, FILE *f, char sep, char lastSep);
/* Print out edwSubmit.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubmitTabOut(el,f) edwSubmitOutput(el,f,'\t','\n');
/* Print out edwSubmit as a line in a tab-separated file. */

#define edwSubmitCommaOut(el,f) edwSubmitOutput(el,f,',',',');
/* Print out edwSubmit as a comma separated list including final comma. */

#define EDWSUBMITLOG_NUM_COLS 3

struct edwSubmitLog
/* Log of status messages received during submit process */
    {
    struct edwSubmitLog *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented id */
    unsigned submitId;	/* Id in submit table */
    char *message;	/* Some message probably scraped out of stderr or something */
    };

void edwSubmitLogStaticLoad(char **row, struct edwSubmitLog *ret);
/* Load a row from edwSubmitLog table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubmitLog *edwSubmitLogLoad(char **row);
/* Load a edwSubmitLog from row fetched with select * from edwSubmitLog
 * from database.  Dispose of this with edwSubmitLogFree(). */

struct edwSubmitLog *edwSubmitLogLoadAll(char *fileName);
/* Load all edwSubmitLog from whitespace-separated file.
 * Dispose of this with edwSubmitLogFreeList(). */

struct edwSubmitLog *edwSubmitLogLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubmitLog from chopper separated file.
 * Dispose of this with edwSubmitLogFreeList(). */

#define edwSubmitLogLoadAllByTab(a) edwSubmitLogLoadAllByChar(a, '\t');
/* Load all edwSubmitLog from tab separated file.
 * Dispose of this with edwSubmitLogFreeList(). */

struct edwSubmitLog *edwSubmitLogCommaIn(char **pS, struct edwSubmitLog *ret);
/* Create a edwSubmitLog out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubmitLog */

void edwSubmitLogFree(struct edwSubmitLog **pEl);
/* Free a single dynamically allocated edwSubmitLog such as created
 * with edwSubmitLogLoad(). */

void edwSubmitLogFreeList(struct edwSubmitLog **pList);
/* Free a list of dynamically allocated edwSubmitLog's */

void edwSubmitLogOutput(struct edwSubmitLog *el, FILE *f, char sep, char lastSep);
/* Print out edwSubmitLog.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubmitLogTabOut(el,f) edwSubmitLogOutput(el,f,'\t','\n');
/* Print out edwSubmitLog as a line in a tab-separated file. */

#define edwSubmitLogCommaOut(el,f) edwSubmitLogOutput(el,f,',',',');
/* Print out edwSubmitLog as a comma separated list including final comma. */

#define EDWSUBSCRIBINGPROGRAM_NUM_COLS 9

struct edwSubscribingProgram
/* A program that wants to be called when a file arrives or a submit finishes */
    {
    struct edwSubscribingProgram *next;  /* Next in singly linked list. */
    unsigned id;	/* ID of daemon */
    double runOrder;	/* Determines order programs run in. In case of tie lowest id wins. */
    char *filePattern;	/* A string with * and ? wildcards to match files we care about */
    char *hubPattern;	/* A string with * and ? wildcards to match hub URLs we care about */
    char *tagPattern;	/* A string of cgi encoded name=val pairs where vals have wildcards */
    char *onFileStartUpload;	/* A unix command string to run with a %u where file id goes */
    char *onFileEndUpload;	/* A unix command string to run with a %u where file id goes */
    char *onSubmitStartUpload;	/* A unix command string to run with %u where submit id goes */
    char *onSubmitEndUpload;	/* A unix command string to run with %u where submit id goes */
    };

void edwSubscribingProgramStaticLoad(char **row, struct edwSubscribingProgram *ret);
/* Load a row from edwSubscribingProgram table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubscribingProgram *edwSubscribingProgramLoad(char **row);
/* Load a edwSubscribingProgram from row fetched with select * from edwSubscribingProgram
 * from database.  Dispose of this with edwSubscribingProgramFree(). */

struct edwSubscribingProgram *edwSubscribingProgramLoadAll(char *fileName);
/* Load all edwSubscribingProgram from whitespace-separated file.
 * Dispose of this with edwSubscribingProgramFreeList(). */

struct edwSubscribingProgram *edwSubscribingProgramLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubscribingProgram from chopper separated file.
 * Dispose of this with edwSubscribingProgramFreeList(). */

#define edwSubscribingProgramLoadAllByTab(a) edwSubscribingProgramLoadAllByChar(a, '\t');
/* Load all edwSubscribingProgram from tab separated file.
 * Dispose of this with edwSubscribingProgramFreeList(). */

struct edwSubscribingProgram *edwSubscribingProgramCommaIn(char **pS, struct edwSubscribingProgram *ret);
/* Create a edwSubscribingProgram out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubscribingProgram */

void edwSubscribingProgramFree(struct edwSubscribingProgram **pEl);
/* Free a single dynamically allocated edwSubscribingProgram such as created
 * with edwSubscribingProgramLoad(). */

void edwSubscribingProgramFreeList(struct edwSubscribingProgram **pList);
/* Free a list of dynamically allocated edwSubscribingProgram's */

void edwSubscribingProgramOutput(struct edwSubscribingProgram *el, FILE *f, char sep, char lastSep);
/* Print out edwSubscribingProgram.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubscribingProgramTabOut(el,f) edwSubscribingProgramOutput(el,f,'\t','\n');
/* Print out edwSubscribingProgram as a line in a tab-separated file. */

#define edwSubscribingProgramCommaOut(el,f) edwSubscribingProgramOutput(el,f,',',',');
/* Print out edwSubscribingProgram as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* ENCODEDATAWAREHOUSE_H */

