/* encodeDataWarehouse.h was originally generated by the autoSql program, which also 
 * generated encodeDataWarehouse.c and encodeDataWarehouse.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef ENCODEDATAWAREHOUSE_H
#define ENCODEDATAWAREHOUSE_H

#define EDWUSER_NUM_COLS 5

struct edwUser
/* Someone who submits files to or otherwise interacts with big data warehouse */
    {
    struct edwUser *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented user ID */
    char *name;	/* user name */
    char sid[65];	/* sha384 generated user ID - used to identify user in secure way if need be */
    char access[65];	/* access code - sha385'd from password and stuff */
    char *email;	/* Email address - required */
    };

void edwUserStaticLoad(char **row, struct edwUser *ret);
/* Load a row from edwUser table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwUser *edwUserLoad(char **row);
/* Load a edwUser from row fetched with select * from edwUser
 * from database.  Dispose of this with edwUserFree(). */

struct edwUser *edwUserLoadAll(char *fileName);
/* Load all edwUser from whitespace-separated file.
 * Dispose of this with edwUserFreeList(). */

struct edwUser *edwUserLoadAllByChar(char *fileName, char chopper);
/* Load all edwUser from chopper separated file.
 * Dispose of this with edwUserFreeList(). */

#define edwUserLoadAllByTab(a) edwUserLoadAllByChar(a, '\t');
/* Load all edwUser from tab separated file.
 * Dispose of this with edwUserFreeList(). */

struct edwUser *edwUserCommaIn(char **pS, struct edwUser *ret);
/* Create a edwUser out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwUser */

void edwUserFree(struct edwUser **pEl);
/* Free a single dynamically allocated edwUser such as created
 * with edwUserLoad(). */

void edwUserFreeList(struct edwUser **pList);
/* Free a list of dynamically allocated edwUser's */

void edwUserOutput(struct edwUser *el, FILE *f, char sep, char lastSep);
/* Print out edwUser.  Separate fields with sep. Follow last field with lastSep. */

#define edwUserTabOut(el,f) edwUserOutput(el,f,'\t','\n');
/* Print out edwUser as a line in a tab-separated file. */

#define edwUserCommaOut(el,f) edwUserOutput(el,f,',',',');
/* Print out edwUser as a comma separated list including final comma. */

#define EDWHOST_NUM_COLS 9

struct edwHost
/* A web host we have collected files from - something like www.ncbi.nlm.gov or google.com */
    {
    struct edwHost *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented host id */
    char *name;	/* Name (before DNS lookup) */
    long long lastOkTime;	/* Last time host was ok in seconds since 1970 */
    long long lastNotOkTime;	/* Last time host was not ok in seconds since 1970 */
    long long firstAdded;	/* Time host was first seen */
    char *errorMessage;	/* If non-empty contains last error message from host. If empty host is ok */
    long long openSuccesses;	/* Number of times files have been opened ok from this host */
    long long openFails;	/* Number of times files have failed to open from this host */
    long long historyBits;	/* Open history with most recent in least significant bit. 0 for connection failed, 1 for success */
    };

void edwHostStaticLoad(char **row, struct edwHost *ret);
/* Load a row from edwHost table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwHost *edwHostLoad(char **row);
/* Load a edwHost from row fetched with select * from edwHost
 * from database.  Dispose of this with edwHostFree(). */

struct edwHost *edwHostLoadAll(char *fileName);
/* Load all edwHost from whitespace-separated file.
 * Dispose of this with edwHostFreeList(). */

struct edwHost *edwHostLoadAllByChar(char *fileName, char chopper);
/* Load all edwHost from chopper separated file.
 * Dispose of this with edwHostFreeList(). */

#define edwHostLoadAllByTab(a) edwHostLoadAllByChar(a, '\t');
/* Load all edwHost from tab separated file.
 * Dispose of this with edwHostFreeList(). */

struct edwHost *edwHostCommaIn(char **pS, struct edwHost *ret);
/* Create a edwHost out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwHost */

void edwHostFree(struct edwHost **pEl);
/* Free a single dynamically allocated edwHost such as created
 * with edwHostLoad(). */

void edwHostFreeList(struct edwHost **pList);
/* Free a list of dynamically allocated edwHost's */

void edwHostOutput(struct edwHost *el, FILE *f, char sep, char lastSep);
/* Print out edwHost.  Separate fields with sep. Follow last field with lastSep. */

#define edwHostTabOut(el,f) edwHostOutput(el,f,'\t','\n');
/* Print out edwHost as a line in a tab-separated file. */

#define edwHostCommaOut(el,f) edwHostOutput(el,f,',',',');
/* Print out edwHost as a comma separated list including final comma. */

#define EDWSUBMITDIR_NUM_COLS 10

struct edwSubmitDir
/* An external data directory we have collected a submit from */
    {
    struct edwSubmitDir *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented id */
    char *url;	/* Web-mounted directory. Includes protocol, host, and final '/' */
    unsigned hostId;	/* Id of host it's on */
    long long lastOkTime;	/* Last time submit dir was ok in seconds since 1970 */
    long long lastNotOkTime;	/* Last time submit dir was not ok in seconds since 1970 */
    long long firstAdded;	/* Time submit dir was first seen */
    char *errorMessage;	/* If non-empty contains last error message from dir. If empty dir is ok */
    long long openSuccesses;	/* Number of times files have been opened ok from this dir */
    long long openFails;	/* Number of times files have failed to open from this dir */
    long long historyBits;	/* Open history with most recent in least significant bit. 0 for upload failed, 1 for success */
    };

void edwSubmitDirStaticLoad(char **row, struct edwSubmitDir *ret);
/* Load a row from edwSubmitDir table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubmitDir *edwSubmitDirLoad(char **row);
/* Load a edwSubmitDir from row fetched with select * from edwSubmitDir
 * from database.  Dispose of this with edwSubmitDirFree(). */

struct edwSubmitDir *edwSubmitDirLoadAll(char *fileName);
/* Load all edwSubmitDir from whitespace-separated file.
 * Dispose of this with edwSubmitDirFreeList(). */

struct edwSubmitDir *edwSubmitDirLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubmitDir from chopper separated file.
 * Dispose of this with edwSubmitDirFreeList(). */

#define edwSubmitDirLoadAllByTab(a) edwSubmitDirLoadAllByChar(a, '\t');
/* Load all edwSubmitDir from tab separated file.
 * Dispose of this with edwSubmitDirFreeList(). */

struct edwSubmitDir *edwSubmitDirCommaIn(char **pS, struct edwSubmitDir *ret);
/* Create a edwSubmitDir out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubmitDir */

void edwSubmitDirFree(struct edwSubmitDir **pEl);
/* Free a single dynamically allocated edwSubmitDir such as created
 * with edwSubmitDirLoad(). */

void edwSubmitDirFreeList(struct edwSubmitDir **pList);
/* Free a list of dynamically allocated edwSubmitDir's */

void edwSubmitDirOutput(struct edwSubmitDir *el, FILE *f, char sep, char lastSep);
/* Print out edwSubmitDir.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubmitDirTabOut(el,f) edwSubmitDirOutput(el,f,'\t','\n');
/* Print out edwSubmitDir as a line in a tab-separated file. */

#define edwSubmitDirCommaOut(el,f) edwSubmitDirOutput(el,f,',',',');
/* Print out edwSubmitDir as a comma separated list including final comma. */

#define EDWFILE_NUM_COLS 13

struct edwFile
/* A file we are tracking that we intend to and maybe have uploaded */
    {
    struct edwFile *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincrementing file id */
    char licensePlate[17];	/* A abc123 looking license-platish thing */
    unsigned submitId;	/* Links to id in submit table */
    unsigned submitDirId;	/* Links to id in submitDir table */
    char *submitFileName;	/* File name in submit relative to submit dir */
    char *edwFileName;	/* File name in big data warehouse relative to edw root dir */
    long long startUploadTime;	/* Time when upload started - 0 if not started */
    long long endUploadTime;	/* Time when upload finished - 0 if not finished */
    long long updateTime;	/* Update time (on system it was uploaded from) */
    long long size;	/* File size */
    char md5[33];	/* md5 sum of file contents */
    char *tags;	/* CGI encoded name=val pairs from manifest */
    char *errorMessage;	/* If non-empty contains last error message from upload. If empty upload is ok */
    };

void edwFileStaticLoad(char **row, struct edwFile *ret);
/* Load a row from edwFile table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwFile *edwFileLoad(char **row);
/* Load a edwFile from row fetched with select * from edwFile
 * from database.  Dispose of this with edwFileFree(). */

struct edwFile *edwFileLoadAll(char *fileName);
/* Load all edwFile from whitespace-separated file.
 * Dispose of this with edwFileFreeList(). */

struct edwFile *edwFileLoadAllByChar(char *fileName, char chopper);
/* Load all edwFile from chopper separated file.
 * Dispose of this with edwFileFreeList(). */

#define edwFileLoadAllByTab(a) edwFileLoadAllByChar(a, '\t');
/* Load all edwFile from tab separated file.
 * Dispose of this with edwFileFreeList(). */

struct edwFile *edwFileCommaIn(char **pS, struct edwFile *ret);
/* Create a edwFile out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwFile */

void edwFileFree(struct edwFile **pEl);
/* Free a single dynamically allocated edwFile such as created
 * with edwFileLoad(). */

void edwFileFreeList(struct edwFile **pList);
/* Free a list of dynamically allocated edwFile's */

void edwFileOutput(struct edwFile *el, FILE *f, char sep, char lastSep);
/* Print out edwFile.  Separate fields with sep. Follow last field with lastSep. */

#define edwFileTabOut(el,f) edwFileOutput(el,f,'\t','\n');
/* Print out edwFile as a line in a tab-separated file. */

#define edwFileCommaOut(el,f) edwFileOutput(el,f,',',',');
/* Print out edwFile as a comma separated list including final comma. */

#define EDWSUBMIT_NUM_COLS 11

struct edwSubmit
/* A data submit, typically containing many files.  Always associated with a submit dir. */
    {
    struct edwSubmit *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented submit id */
    char *url;	/* Url to validated.txt format file. We copy this file over and give it a fileId if we can. */
    long long startUploadTime;	/* Time at start of submit */
    long long endUploadTime;	/* Time at end of upload - 0 if not finished */
    unsigned userId;	/* Connects to user table id field */
    unsigned submitFileId;	/* Points to validated.txt file for submit. */
    unsigned submitDirId;	/* Points to the submitDir */
    unsigned fileCount;	/* Number of files that will be in submit if it were complete. */
    unsigned oldFiles;	/* Number of files in submission that were already in warehouse. */
    unsigned newFiles;	/* Number of files in submission that are newly uploaded. */
    char *errorMessage;	/* If non-empty contains last error message. If empty submit is ok */
    };

void edwSubmitStaticLoad(char **row, struct edwSubmit *ret);
/* Load a row from edwSubmit table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubmit *edwSubmitLoad(char **row);
/* Load a edwSubmit from row fetched with select * from edwSubmit
 * from database.  Dispose of this with edwSubmitFree(). */

struct edwSubmit *edwSubmitLoadAll(char *fileName);
/* Load all edwSubmit from whitespace-separated file.
 * Dispose of this with edwSubmitFreeList(). */

struct edwSubmit *edwSubmitLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubmit from chopper separated file.
 * Dispose of this with edwSubmitFreeList(). */

#define edwSubmitLoadAllByTab(a) edwSubmitLoadAllByChar(a, '\t');
/* Load all edwSubmit from tab separated file.
 * Dispose of this with edwSubmitFreeList(). */

struct edwSubmit *edwSubmitCommaIn(char **pS, struct edwSubmit *ret);
/* Create a edwSubmit out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubmit */

void edwSubmitFree(struct edwSubmit **pEl);
/* Free a single dynamically allocated edwSubmit such as created
 * with edwSubmitLoad(). */

void edwSubmitFreeList(struct edwSubmit **pList);
/* Free a list of dynamically allocated edwSubmit's */

void edwSubmitOutput(struct edwSubmit *el, FILE *f, char sep, char lastSep);
/* Print out edwSubmit.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubmitTabOut(el,f) edwSubmitOutput(el,f,'\t','\n');
/* Print out edwSubmit as a line in a tab-separated file. */

#define edwSubmitCommaOut(el,f) edwSubmitOutput(el,f,',',',');
/* Print out edwSubmit as a comma separated list including final comma. */

#define EDWSUBSCRIBER_NUM_COLS 7

struct edwSubscriber
/* Subscribers can have programs that are called at various points during data submission */
    {
    struct edwSubscriber *next;  /* Next in singly linked list. */
    unsigned id;	/* ID of subscriber */
    char *name;	/* Name of subscriber */
    double runOrder;	/* Determines order subscribers run in. In case of tie lowest id wins. */
    char *filePattern;	/* A string with * and ? wildcards to match files we care about */
    char *dirPattern;	/* A string with * and ? wildcards to match hub dir URLs we care about */
    char *tagPattern;	/* A cgi-encoded string of tag=wildcard pairs. */
    char *onFileEndUpload;	/* A unix command string to run with a %u where file id goes */
    };

void edwSubscriberStaticLoad(char **row, struct edwSubscriber *ret);
/* Load a row from edwSubscriber table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubscriber *edwSubscriberLoad(char **row);
/* Load a edwSubscriber from row fetched with select * from edwSubscriber
 * from database.  Dispose of this with edwSubscriberFree(). */

struct edwSubscriber *edwSubscriberLoadAll(char *fileName);
/* Load all edwSubscriber from whitespace-separated file.
 * Dispose of this with edwSubscriberFreeList(). */

struct edwSubscriber *edwSubscriberLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubscriber from chopper separated file.
 * Dispose of this with edwSubscriberFreeList(). */

#define edwSubscriberLoadAllByTab(a) edwSubscriberLoadAllByChar(a, '\t');
/* Load all edwSubscriber from tab separated file.
 * Dispose of this with edwSubscriberFreeList(). */

struct edwSubscriber *edwSubscriberCommaIn(char **pS, struct edwSubscriber *ret);
/* Create a edwSubscriber out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubscriber */

void edwSubscriberFree(struct edwSubscriber **pEl);
/* Free a single dynamically allocated edwSubscriber such as created
 * with edwSubscriberLoad(). */

void edwSubscriberFreeList(struct edwSubscriber **pList);
/* Free a list of dynamically allocated edwSubscriber's */

void edwSubscriberOutput(struct edwSubscriber *el, FILE *f, char sep, char lastSep);
/* Print out edwSubscriber.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubscriberTabOut(el,f) edwSubscriberOutput(el,f,'\t','\n');
/* Print out edwSubscriber as a line in a tab-separated file. */

#define edwSubscriberCommaOut(el,f) edwSubscriberOutput(el,f,',',',');
/* Print out edwSubscriber as a comma separated list including final comma. */

#define EDWASSEMBLY_NUM_COLS 6

struct edwAssembly
/* An assembly - includes reference to a two bit file, and a little name and summary info. */
    {
    struct edwAssembly *next;  /* Next in singly linked list. */
    unsigned id;	/* Assembly ID */
    unsigned taxon;	/* NCBI taxon number */
    char *name;	/* Some human readable name to distinguish this from other collections of DNA */
    char *ucscDb;	/* Which UCSC database (mm9?  hg19?) associated with it. */
    unsigned twoBitId;	/* File ID of associated twoBit file */
    long long baseCount;	/* Count of bases */
    };

void edwAssemblyStaticLoad(char **row, struct edwAssembly *ret);
/* Load a row from edwAssembly table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwAssembly *edwAssemblyLoad(char **row);
/* Load a edwAssembly from row fetched with select * from edwAssembly
 * from database.  Dispose of this with edwAssemblyFree(). */

struct edwAssembly *edwAssemblyLoadAll(char *fileName);
/* Load all edwAssembly from whitespace-separated file.
 * Dispose of this with edwAssemblyFreeList(). */

struct edwAssembly *edwAssemblyLoadAllByChar(char *fileName, char chopper);
/* Load all edwAssembly from chopper separated file.
 * Dispose of this with edwAssemblyFreeList(). */

#define edwAssemblyLoadAllByTab(a) edwAssemblyLoadAllByChar(a, '\t');
/* Load all edwAssembly from tab separated file.
 * Dispose of this with edwAssemblyFreeList(). */

struct edwAssembly *edwAssemblyCommaIn(char **pS, struct edwAssembly *ret);
/* Create a edwAssembly out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwAssembly */

void edwAssemblyFree(struct edwAssembly **pEl);
/* Free a single dynamically allocated edwAssembly such as created
 * with edwAssemblyLoad(). */

void edwAssemblyFreeList(struct edwAssembly **pList);
/* Free a list of dynamically allocated edwAssembly's */

void edwAssemblyOutput(struct edwAssembly *el, FILE *f, char sep, char lastSep);
/* Print out edwAssembly.  Separate fields with sep. Follow last field with lastSep. */

#define edwAssemblyTabOut(el,f) edwAssemblyOutput(el,f,'\t','\n');
/* Print out edwAssembly as a line in a tab-separated file. */

#define edwAssemblyCommaOut(el,f) edwAssemblyOutput(el,f,',',',');
/* Print out edwAssembly as a comma separated list including final comma. */

#define EDWQAFILE_NUM_COLS 10

struct edwQaFile
/* For files where we can do some sort of QA analysis, a little information about files here */
    {
    struct edwQaFile *next;  /* Next in singly linked list. */
    unsigned id;	/* ID within QA subsystem */
    unsigned fileId;	/* Pointer to file in main file table */
    long long itemCount;	/* # of items in file: reads for fastqs, lines for beds, bases w/data for wig. */
    long long basesInItems;	/* # of bases in items */
    char *samplePath;	/* Path to a temporary sample file */
    long long sampleCount;	/* # of items in sample if we are just subsampling as we do for reads. */
    long long basesInSample;	/* # of bases in our sample */
    unsigned preferredAssembly;	/* A genome assembly we should map to */
    double propInAsm;	/* The proportion of items that are on the assembly at all. */
    double asmCoverage;	/* The proportion of assembly that is covered. */
    };

void edwQaFileStaticLoad(char **row, struct edwQaFile *ret);
/* Load a row from edwQaFile table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwQaFile *edwQaFileLoad(char **row);
/* Load a edwQaFile from row fetched with select * from edwQaFile
 * from database.  Dispose of this with edwQaFileFree(). */

struct edwQaFile *edwQaFileLoadAll(char *fileName);
/* Load all edwQaFile from whitespace-separated file.
 * Dispose of this with edwQaFileFreeList(). */

struct edwQaFile *edwQaFileLoadAllByChar(char *fileName, char chopper);
/* Load all edwQaFile from chopper separated file.
 * Dispose of this with edwQaFileFreeList(). */

#define edwQaFileLoadAllByTab(a) edwQaFileLoadAllByChar(a, '\t');
/* Load all edwQaFile from tab separated file.
 * Dispose of this with edwQaFileFreeList(). */

struct edwQaFile *edwQaFileCommaIn(char **pS, struct edwQaFile *ret);
/* Create a edwQaFile out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwQaFile */

void edwQaFileFree(struct edwQaFile **pEl);
/* Free a single dynamically allocated edwQaFile such as created
 * with edwQaFileLoad(). */

void edwQaFileFreeList(struct edwQaFile **pList);
/* Free a list of dynamically allocated edwQaFile's */

void edwQaFileOutput(struct edwQaFile *el, FILE *f, char sep, char lastSep);
/* Print out edwQaFile.  Separate fields with sep. Follow last field with lastSep. */

#define edwQaFileTabOut(el,f) edwQaFileOutput(el,f,'\t','\n');
/* Print out edwQaFile as a line in a tab-separated file. */

#define edwQaFileCommaOut(el,f) edwQaFileOutput(el,f,',',',');
/* Print out edwQaFile as a comma separated list including final comma. */

#define EDWQAENRICHTARGET_NUM_COLS 4

struct edwQaEnrichTarget
/* A target for our enrichment analysis. */
    {
    struct edwQaEnrichTarget *next;  /* Next in singly linked list. */
    unsigned id;	/* ID of this enrichment target */
    char *targetName;	/* Something like 'exon' or 'promoter' */
    unsigned targetFile;	/* A simple BED 3 format file that defines target. Bases covered are unique */
    long long targetSize;	/* Total number of bases covered by target */
    };

void edwQaEnrichTargetStaticLoad(char **row, struct edwQaEnrichTarget *ret);
/* Load a row from edwQaEnrichTarget table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwQaEnrichTarget *edwQaEnrichTargetLoad(char **row);
/* Load a edwQaEnrichTarget from row fetched with select * from edwQaEnrichTarget
 * from database.  Dispose of this with edwQaEnrichTargetFree(). */

struct edwQaEnrichTarget *edwQaEnrichTargetLoadAll(char *fileName);
/* Load all edwQaEnrichTarget from whitespace-separated file.
 * Dispose of this with edwQaEnrichTargetFreeList(). */

struct edwQaEnrichTarget *edwQaEnrichTargetLoadAllByChar(char *fileName, char chopper);
/* Load all edwQaEnrichTarget from chopper separated file.
 * Dispose of this with edwQaEnrichTargetFreeList(). */

#define edwQaEnrichTargetLoadAllByTab(a) edwQaEnrichTargetLoadAllByChar(a, '\t');
/* Load all edwQaEnrichTarget from tab separated file.
 * Dispose of this with edwQaEnrichTargetFreeList(). */

struct edwQaEnrichTarget *edwQaEnrichTargetCommaIn(char **pS, struct edwQaEnrichTarget *ret);
/* Create a edwQaEnrichTarget out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwQaEnrichTarget */

void edwQaEnrichTargetFree(struct edwQaEnrichTarget **pEl);
/* Free a single dynamically allocated edwQaEnrichTarget such as created
 * with edwQaEnrichTargetLoad(). */

void edwQaEnrichTargetFreeList(struct edwQaEnrichTarget **pList);
/* Free a list of dynamically allocated edwQaEnrichTarget's */

void edwQaEnrichTargetOutput(struct edwQaEnrichTarget *el, FILE *f, char sep, char lastSep);
/* Print out edwQaEnrichTarget.  Separate fields with sep. Follow last field with lastSep. */

#define edwQaEnrichTargetTabOut(el,f) edwQaEnrichTargetOutput(el,f,'\t','\n');
/* Print out edwQaEnrichTarget as a line in a tab-separated file. */

#define edwQaEnrichTargetCommaOut(el,f) edwQaEnrichTargetOutput(el,f,',',',');
/* Print out edwQaEnrichTarget as a comma separated list including final comma. */

#define EDWQAENRICH_NUM_COLS 8

struct edwQaEnrich
/* An enrichment analysis applied to file. */
    {
    struct edwQaEnrich *next;  /* Next in singly linked list. */
    unsigned id;	/* ID of this enrichment analysis */
    unsigned qaFileId;	/* File we are looking at skeptically */
    unsigned qaEnrichTargetId;	/* Information about an target for this analysis */
    long long targetBaseHits;	/* Number of hits to bases in target */
    long long targetUniqHits;	/* Number of unique bases hit in target */
    double coverage;	/* Coverage of target - just targetUniqHits/targetSize */
    double enrichment;	/* Amount we hit target/amount we hit genome */
    double uniqEnrich;	/* coverage/asmCoverage */
    };

void edwQaEnrichStaticLoad(char **row, struct edwQaEnrich *ret);
/* Load a row from edwQaEnrich table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwQaEnrich *edwQaEnrichLoad(char **row);
/* Load a edwQaEnrich from row fetched with select * from edwQaEnrich
 * from database.  Dispose of this with edwQaEnrichFree(). */

struct edwQaEnrich *edwQaEnrichLoadAll(char *fileName);
/* Load all edwQaEnrich from whitespace-separated file.
 * Dispose of this with edwQaEnrichFreeList(). */

struct edwQaEnrich *edwQaEnrichLoadAllByChar(char *fileName, char chopper);
/* Load all edwQaEnrich from chopper separated file.
 * Dispose of this with edwQaEnrichFreeList(). */

#define edwQaEnrichLoadAllByTab(a) edwQaEnrichLoadAllByChar(a, '\t');
/* Load all edwQaEnrich from tab separated file.
 * Dispose of this with edwQaEnrichFreeList(). */

struct edwQaEnrich *edwQaEnrichCommaIn(char **pS, struct edwQaEnrich *ret);
/* Create a edwQaEnrich out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwQaEnrich */

void edwQaEnrichFree(struct edwQaEnrich **pEl);
/* Free a single dynamically allocated edwQaEnrich such as created
 * with edwQaEnrichLoad(). */

void edwQaEnrichFreeList(struct edwQaEnrich **pList);
/* Free a list of dynamically allocated edwQaEnrich's */

void edwQaEnrichOutput(struct edwQaEnrich *el, FILE *f, char sep, char lastSep);
/* Print out edwQaEnrich.  Separate fields with sep. Follow last field with lastSep. */

#define edwQaEnrichTabOut(el,f) edwQaEnrichOutput(el,f,'\t','\n');
/* Print out edwQaEnrich as a line in a tab-separated file. */

#define edwQaEnrichCommaOut(el,f) edwQaEnrichOutput(el,f,',',',');
/* Print out edwQaEnrich as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* ENCODEDATAWAREHOUSE_H */

