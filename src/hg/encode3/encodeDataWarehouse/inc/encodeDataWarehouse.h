/* encodeDataWarehouse.h was originally generated by the autoSql program, which also 
 * generated encodeDataWarehouse.c and encodeDataWarehouse.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef ENCODEDATAWAREHOUSE_H
#define ENCODEDATAWAREHOUSE_H

#define EDWUSER_NUM_COLS 3

struct edwUser
/* Someone who submits files to or otherwise interacts with big data warehouse */
    {
    struct edwUser *next;  /* Next in singly linked list. */
    char sid[65];	/* sha384 generated base64 encoded unique user ID */
    char access[65];	/* access code - hashed from password and stuff */
    char *email;	/* Email handle, the main identifier. */
    };

void edwUserStaticLoad(char **row, struct edwUser *ret);
/* Load a row from edwUser table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwUser *edwUserLoad(char **row);
/* Load a edwUser from row fetched with select * from edwUser
 * from database.  Dispose of this with edwUserFree(). */

struct edwUser *edwUserLoadAll(char *fileName);
/* Load all edwUser from whitespace-separated file.
 * Dispose of this with edwUserFreeList(). */

struct edwUser *edwUserLoadAllByChar(char *fileName, char chopper);
/* Load all edwUser from chopper separated file.
 * Dispose of this with edwUserFreeList(). */

#define edwUserLoadAllByTab(a) edwUserLoadAllByChar(a, '\t');
/* Load all edwUser from tab separated file.
 * Dispose of this with edwUserFreeList(). */

struct edwUser *edwUserCommaIn(char **pS, struct edwUser *ret);
/* Create a edwUser out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwUser */

void edwUserFree(struct edwUser **pEl);
/* Free a single dynamically allocated edwUser such as created
 * with edwUserLoad(). */

void edwUserFreeList(struct edwUser **pList);
/* Free a list of dynamically allocated edwUser's */

void edwUserOutput(struct edwUser *el, FILE *f, char sep, char lastSep);
/* Print out edwUser.  Separate fields with sep. Follow last field with lastSep. */

#define edwUserTabOut(el,f) edwUserOutput(el,f,'\t','\n');
/* Print out edwUser as a line in a tab-separated file. */

#define edwUserCommaOut(el,f) edwUserOutput(el,f,',',',');
/* Print out edwUser as a comma separated list including final comma. */

#define EDWHOST_NUM_COLS 8

struct edwHost
/* A web host we have collected files from - something like www.ncbi.nlm.gov or google.com */
    {
    struct edwHost *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented host id */
    char *name;	/* Name (before DNS lookup) */
    long long lastOkTime;	/* Last time host was ok in seconds since 1970 */
    long long lastNotOkTime;	/* Last time host was not ok in seconds since 1970 */
    long long firstAdded;	/* Time host was first seen */
    char *errorMessage;	/* If non-empty contains last error message from host. If empty host is ok */
    long long uploadAttempts;	/* Number of times things have been uploaded from this host */
    long long historyBits;	/* Upload history with most recent in least significant bit. 0 for connection failed, 1 for success */
    };

void edwHostStaticLoad(char **row, struct edwHost *ret);
/* Load a row from edwHost table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwHost *edwHostLoad(char **row);
/* Load a edwHost from row fetched with select * from edwHost
 * from database.  Dispose of this with edwHostFree(). */

struct edwHost *edwHostLoadAll(char *fileName);
/* Load all edwHost from whitespace-separated file.
 * Dispose of this with edwHostFreeList(). */

struct edwHost *edwHostLoadAllByChar(char *fileName, char chopper);
/* Load all edwHost from chopper separated file.
 * Dispose of this with edwHostFreeList(). */

#define edwHostLoadAllByTab(a) edwHostLoadAllByChar(a, '\t');
/* Load all edwHost from tab separated file.
 * Dispose of this with edwHostFreeList(). */

struct edwHost *edwHostCommaIn(char **pS, struct edwHost *ret);
/* Create a edwHost out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwHost */

void edwHostFree(struct edwHost **pEl);
/* Free a single dynamically allocated edwHost such as created
 * with edwHostLoad(). */

void edwHostFreeList(struct edwHost **pList);
/* Free a list of dynamically allocated edwHost's */

void edwHostOutput(struct edwHost *el, FILE *f, char sep, char lastSep);
/* Print out edwHost.  Separate fields with sep. Follow last field with lastSep. */

#define edwHostTabOut(el,f) edwHostOutput(el,f,'\t','\n');
/* Print out edwHost as a line in a tab-separated file. */

#define edwHostCommaOut(el,f) edwHostOutput(el,f,',',',');
/* Print out edwHost as a comma separated list including final comma. */

#define EDWSUBMISSIONDIR_NUM_COLS 9

struct edwSubmissionDir
/* An external data directory we have collected a submission from */
    {
    struct edwSubmissionDir *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented id */
    char *url;	/* Web-mounted directory. Includes protocol, host, and final '/' */
    unsigned hostId;	/* Id of host it's on */
    long long lastOkTime;	/* Last time submission dir was ok in seconds since 1970 */
    long long lastNotOkTime;	/* Last time submission dir was not ok in seconds since 1970 */
    long long firstAdded;	/* Time submission dir was first seen */
    char *errorMessage;	/* If non-empty contains last error message from dir. If empty dir is ok */
    long long uploadAttempts;	/* Number of times uploads attempted fromt this submission directory */
    long long historyBits;	/* Upload history with most recent in least significant bit. 0 for upload failed, 1 for success */
    };

void edwSubmissionDirStaticLoad(char **row, struct edwSubmissionDir *ret);
/* Load a row from edwSubmissionDir table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubmissionDir *edwSubmissionDirLoad(char **row);
/* Load a edwSubmissionDir from row fetched with select * from edwSubmissionDir
 * from database.  Dispose of this with edwSubmissionDirFree(). */

struct edwSubmissionDir *edwSubmissionDirLoadAll(char *fileName);
/* Load all edwSubmissionDir from whitespace-separated file.
 * Dispose of this with edwSubmissionDirFreeList(). */

struct edwSubmissionDir *edwSubmissionDirLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubmissionDir from chopper separated file.
 * Dispose of this with edwSubmissionDirFreeList(). */

#define edwSubmissionDirLoadAllByTab(a) edwSubmissionDirLoadAllByChar(a, '\t');
/* Load all edwSubmissionDir from tab separated file.
 * Dispose of this with edwSubmissionDirFreeList(). */

struct edwSubmissionDir *edwSubmissionDirCommaIn(char **pS, struct edwSubmissionDir *ret);
/* Create a edwSubmissionDir out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubmissionDir */

void edwSubmissionDirFree(struct edwSubmissionDir **pEl);
/* Free a single dynamically allocated edwSubmissionDir such as created
 * with edwSubmissionDirLoad(). */

void edwSubmissionDirFreeList(struct edwSubmissionDir **pList);
/* Free a list of dynamically allocated edwSubmissionDir's */

void edwSubmissionDirOutput(struct edwSubmissionDir *el, FILE *f, char sep, char lastSep);
/* Print out edwSubmissionDir.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubmissionDirTabOut(el,f) edwSubmissionDirOutput(el,f,'\t','\n');
/* Print out edwSubmissionDir as a line in a tab-separated file. */

#define edwSubmissionDirCommaOut(el,f) edwSubmissionDirOutput(el,f,',',',');
/* Print out edwSubmissionDir as a comma separated list including final comma. */

#define EDWFILE_NUM_COLS 12

struct edwFile
/* A file we are tracking that we intend to and maybe have uploaded */
    {
    struct edwFile *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincrementing file id */
    char licensePlate[17];	/* A abc123 looking license-platish thing */
    unsigned submissionId;	/* Links to id in submission table */
    char *submitFileName;	/* File name in submission relative to submission dir */
    char *edwFileName;	/* File name in big data warehouse relative to edw root dir */
    long long startUploadTime;	/* Time when upload started - 0 if not started */
    long long endUploadTime;	/* Time when upload finished - 0 if not finished */
    long long updateTime;	/* Update time (on system it was uploaded from) */
    long long size;	/* File size */
    char md5[33];	/* md5 sum of file contents */
    char *tags;	/* CGI encoded name=val pairs from manifest */
    char *errorMessage;	/* If non-empty contains last error message from upload. If empty upload is ok */
    };

void edwFileStaticLoad(char **row, struct edwFile *ret);
/* Load a row from edwFile table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwFile *edwFileLoad(char **row);
/* Load a edwFile from row fetched with select * from edwFile
 * from database.  Dispose of this with edwFileFree(). */

struct edwFile *edwFileLoadAll(char *fileName);
/* Load all edwFile from whitespace-separated file.
 * Dispose of this with edwFileFreeList(). */

struct edwFile *edwFileLoadAllByChar(char *fileName, char chopper);
/* Load all edwFile from chopper separated file.
 * Dispose of this with edwFileFreeList(). */

#define edwFileLoadAllByTab(a) edwFileLoadAllByChar(a, '\t');
/* Load all edwFile from tab separated file.
 * Dispose of this with edwFileFreeList(). */

struct edwFile *edwFileCommaIn(char **pS, struct edwFile *ret);
/* Create a edwFile out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwFile */

void edwFileFree(struct edwFile **pEl);
/* Free a single dynamically allocated edwFile such as created
 * with edwFileLoad(). */

void edwFileFreeList(struct edwFile **pList);
/* Free a list of dynamically allocated edwFile's */

void edwFileOutput(struct edwFile *el, FILE *f, char sep, char lastSep);
/* Print out edwFile.  Separate fields with sep. Follow last field with lastSep. */

#define edwFileTabOut(el,f) edwFileOutput(el,f,'\t','\n');
/* Print out edwFile as a line in a tab-separated file. */

#define edwFileCommaOut(el,f) edwFileOutput(el,f,',',',');
/* Print out edwFile as a comma separated list including final comma. */

#define EDWSUBMISSION_NUM_COLS 9

struct edwSubmission
/* A data submission, typically containing many files.  Always associated with a submission dir. */
    {
    struct edwSubmission *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented submission id */
    char *url;	/* Url to validated.txt format file. We copy this file over and give it a fileId if we can. */
    long long startUploadTime;	/* Time at start of submission */
    long long endUploadTime;	/* Time at end of upload - 0 if not finished */
    char userSid[65];	/* Connects to user table sid field */
    unsigned submitFileId;	/* Points to validated.txt file for submission. */
    unsigned submissionDirId;	/* Points to the submissionDir */
    unsigned fileCount;	/* Number of files that will be in submission if it were complete. */
    char *errorMessage;	/* If non-empty contains last error message from submission. If empty submission is ok */
    };

void edwSubmissionStaticLoad(char **row, struct edwSubmission *ret);
/* Load a row from edwSubmission table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubmission *edwSubmissionLoad(char **row);
/* Load a edwSubmission from row fetched with select * from edwSubmission
 * from database.  Dispose of this with edwSubmissionFree(). */

struct edwSubmission *edwSubmissionLoadAll(char *fileName);
/* Load all edwSubmission from whitespace-separated file.
 * Dispose of this with edwSubmissionFreeList(). */

struct edwSubmission *edwSubmissionLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubmission from chopper separated file.
 * Dispose of this with edwSubmissionFreeList(). */

#define edwSubmissionLoadAllByTab(a) edwSubmissionLoadAllByChar(a, '\t');
/* Load all edwSubmission from tab separated file.
 * Dispose of this with edwSubmissionFreeList(). */

struct edwSubmission *edwSubmissionCommaIn(char **pS, struct edwSubmission *ret);
/* Create a edwSubmission out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubmission */

void edwSubmissionFree(struct edwSubmission **pEl);
/* Free a single dynamically allocated edwSubmission such as created
 * with edwSubmissionLoad(). */

void edwSubmissionFreeList(struct edwSubmission **pList);
/* Free a list of dynamically allocated edwSubmission's */

void edwSubmissionOutput(struct edwSubmission *el, FILE *f, char sep, char lastSep);
/* Print out edwSubmission.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubmissionTabOut(el,f) edwSubmissionOutput(el,f,'\t','\n');
/* Print out edwSubmission as a line in a tab-separated file. */

#define edwSubmissionCommaOut(el,f) edwSubmissionOutput(el,f,',',',');
/* Print out edwSubmission as a comma separated list including final comma. */

#define EDWSUBMISSIONLOG_NUM_COLS 3

struct edwSubmissionLog
/* Log of status messages received during submission process */
    {
    struct edwSubmissionLog *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented id */
    unsigned submissionId;	/* Id in submission table */
    char *message;	/* Some message probably scraped out of stderr or something */
    };

void edwSubmissionLogStaticLoad(char **row, struct edwSubmissionLog *ret);
/* Load a row from edwSubmissionLog table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubmissionLog *edwSubmissionLogLoad(char **row);
/* Load a edwSubmissionLog from row fetched with select * from edwSubmissionLog
 * from database.  Dispose of this with edwSubmissionLogFree(). */

struct edwSubmissionLog *edwSubmissionLogLoadAll(char *fileName);
/* Load all edwSubmissionLog from whitespace-separated file.
 * Dispose of this with edwSubmissionLogFreeList(). */

struct edwSubmissionLog *edwSubmissionLogLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubmissionLog from chopper separated file.
 * Dispose of this with edwSubmissionLogFreeList(). */

#define edwSubmissionLogLoadAllByTab(a) edwSubmissionLogLoadAllByChar(a, '\t');
/* Load all edwSubmissionLog from tab separated file.
 * Dispose of this with edwSubmissionLogFreeList(). */

struct edwSubmissionLog *edwSubmissionLogCommaIn(char **pS, struct edwSubmissionLog *ret);
/* Create a edwSubmissionLog out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubmissionLog */

void edwSubmissionLogFree(struct edwSubmissionLog **pEl);
/* Free a single dynamically allocated edwSubmissionLog such as created
 * with edwSubmissionLogLoad(). */

void edwSubmissionLogFreeList(struct edwSubmissionLog **pList);
/* Free a list of dynamically allocated edwSubmissionLog's */

void edwSubmissionLogOutput(struct edwSubmissionLog *el, FILE *f, char sep, char lastSep);
/* Print out edwSubmissionLog.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubmissionLogTabOut(el,f) edwSubmissionLogOutput(el,f,'\t','\n');
/* Print out edwSubmissionLog as a line in a tab-separated file. */

#define edwSubmissionLogCommaOut(el,f) edwSubmissionLogOutput(el,f,',',',');
/* Print out edwSubmissionLog as a comma separated list including final comma. */

#define EDWSUBSCRIBINGPROGRAM_NUM_COLS 9

struct edwSubscribingProgram
/* A program that wants to be called when a file arrives or a submission finishes */
    {
    struct edwSubscribingProgram *next;  /* Next in singly linked list. */
    unsigned id;	/* ID of daemon */
    double runOrder;	/* Determines order programs run in. In case of tie lowest id wins. */
    char *filePattern;	/* A string with * and ? wildcards to match files we care about */
    char *hubPattern;	/* A string with * and ? wildcards to match hub URLs we care about */
    char *tagPattern;	/* A string of cgi encoded name=val pairs where vals have wildcards */
    char *onFileStartUpload;	/* A unix command string to run with a %u where file id goes */
    char *onFileEndUpload;	/* A unix command string to run with a %u where file id goes */
    char *onSubmissionStartUpload;	/* A unix command string to run with %u where submission id goes */
    char *onSubmissionEndUpload;	/* A unix command string to run with %u where submission id goes */
    };

void edwSubscribingProgramStaticLoad(char **row, struct edwSubscribingProgram *ret);
/* Load a row from edwSubscribingProgram table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubscribingProgram *edwSubscribingProgramLoad(char **row);
/* Load a edwSubscribingProgram from row fetched with select * from edwSubscribingProgram
 * from database.  Dispose of this with edwSubscribingProgramFree(). */

struct edwSubscribingProgram *edwSubscribingProgramLoadAll(char *fileName);
/* Load all edwSubscribingProgram from whitespace-separated file.
 * Dispose of this with edwSubscribingProgramFreeList(). */

struct edwSubscribingProgram *edwSubscribingProgramLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubscribingProgram from chopper separated file.
 * Dispose of this with edwSubscribingProgramFreeList(). */

#define edwSubscribingProgramLoadAllByTab(a) edwSubscribingProgramLoadAllByChar(a, '\t');
/* Load all edwSubscribingProgram from tab separated file.
 * Dispose of this with edwSubscribingProgramFreeList(). */

struct edwSubscribingProgram *edwSubscribingProgramCommaIn(char **pS, struct edwSubscribingProgram *ret);
/* Create a edwSubscribingProgram out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubscribingProgram */

void edwSubscribingProgramFree(struct edwSubscribingProgram **pEl);
/* Free a single dynamically allocated edwSubscribingProgram such as created
 * with edwSubscribingProgramLoad(). */

void edwSubscribingProgramFreeList(struct edwSubscribingProgram **pList);
/* Free a list of dynamically allocated edwSubscribingProgram's */

void edwSubscribingProgramOutput(struct edwSubscribingProgram *el, FILE *f, char sep, char lastSep);
/* Print out edwSubscribingProgram.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubscribingProgramTabOut(el,f) edwSubscribingProgramOutput(el,f,'\t','\n');
/* Print out edwSubscribingProgram as a line in a tab-separated file. */

#define edwSubscribingProgramCommaOut(el,f) edwSubscribingProgramOutput(el,f,',',',');
/* Print out edwSubscribingProgram as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* ENCODEDATAWAREHOUSE_H */

