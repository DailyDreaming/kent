/* bigDataWarehouse.h was originally generated by the autoSql program, which also 
 * generated bigDataWarehouse.c and bigDataWarehouse.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef BIGDATAWAREHOUSE_H
#define BIGDATAWAREHOUSE_H

#define BDWUSER_NUM_COLS 3

struct bdwUser
/* Someone who submits files to or otherwise interacts with big data warehouse */
    {
    struct bdwUser *next;  /* Next in singly linked list. */
    char sid[65];	/* sha384 generated base64 encoded unique user ID */
    char access[65];	/* access code - hashed from password and stuff */
    char *email;	/* Email handle, the main identifier. */
    };

void bdwUserStaticLoad(char **row, struct bdwUser *ret);
/* Load a row from bdwUser table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct bdwUser *bdwUserLoad(char **row);
/* Load a bdwUser from row fetched with select * from bdwUser
 * from database.  Dispose of this with bdwUserFree(). */

struct bdwUser *bdwUserLoadAll(char *fileName);
/* Load all bdwUser from whitespace-separated file.
 * Dispose of this with bdwUserFreeList(). */

struct bdwUser *bdwUserLoadAllByChar(char *fileName, char chopper);
/* Load all bdwUser from chopper separated file.
 * Dispose of this with bdwUserFreeList(). */

#define bdwUserLoadAllByTab(a) bdwUserLoadAllByChar(a, '\t');
/* Load all bdwUser from tab separated file.
 * Dispose of this with bdwUserFreeList(). */

struct bdwUser *bdwUserCommaIn(char **pS, struct bdwUser *ret);
/* Create a bdwUser out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new bdwUser */

void bdwUserFree(struct bdwUser **pEl);
/* Free a single dynamically allocated bdwUser such as created
 * with bdwUserLoad(). */

void bdwUserFreeList(struct bdwUser **pList);
/* Free a list of dynamically allocated bdwUser's */

void bdwUserOutput(struct bdwUser *el, FILE *f, char sep, char lastSep);
/* Print out bdwUser.  Separate fields with sep. Follow last field with lastSep. */

#define bdwUserTabOut(el,f) bdwUserOutput(el,f,'\t','\n');
/* Print out bdwUser as a line in a tab-separated file. */

#define bdwUserCommaOut(el,f) bdwUserOutput(el,f,',',',');
/* Print out bdwUser as a comma separated list including final comma. */

#define BDWHOST_NUM_COLS 8

struct bdwHost
/* A web host we have collected files from - something like www.ncbi.nlm.gov or google.com */
    {
    struct bdwHost *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented host id */
    char *name;	/* Name (before DNS lookup) */
    long long lastOkTime;	/* Last time host was ok in seconds since 1970 */
    long long lastNotOkTime;	/* Last time host was not ok in seconds since 1970 */
    long long firstAdded;	/* Time host was first seen */
    char *errorMessage;	/* If non-empty contains last error message from host. If empty host is ok */
    long long uploadCount;	/* Number of times things have been uploaded from this host */
    long long historyBits;	/* Upload history with most recent in least significant bit. 0 for connection failed, 1 for success */
    };

void bdwHostStaticLoad(char **row, struct bdwHost *ret);
/* Load a row from bdwHost table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct bdwHost *bdwHostLoad(char **row);
/* Load a bdwHost from row fetched with select * from bdwHost
 * from database.  Dispose of this with bdwHostFree(). */

struct bdwHost *bdwHostLoadAll(char *fileName);
/* Load all bdwHost from whitespace-separated file.
 * Dispose of this with bdwHostFreeList(). */

struct bdwHost *bdwHostLoadAllByChar(char *fileName, char chopper);
/* Load all bdwHost from chopper separated file.
 * Dispose of this with bdwHostFreeList(). */

#define bdwHostLoadAllByTab(a) bdwHostLoadAllByChar(a, '\t');
/* Load all bdwHost from tab separated file.
 * Dispose of this with bdwHostFreeList(). */

struct bdwHost *bdwHostCommaIn(char **pS, struct bdwHost *ret);
/* Create a bdwHost out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new bdwHost */

void bdwHostFree(struct bdwHost **pEl);
/* Free a single dynamically allocated bdwHost such as created
 * with bdwHostLoad(). */

void bdwHostFreeList(struct bdwHost **pList);
/* Free a list of dynamically allocated bdwHost's */

void bdwHostOutput(struct bdwHost *el, FILE *f, char sep, char lastSep);
/* Print out bdwHost.  Separate fields with sep. Follow last field with lastSep. */

#define bdwHostTabOut(el,f) bdwHostOutput(el,f,'\t','\n');
/* Print out bdwHost as a line in a tab-separated file. */

#define bdwHostCommaOut(el,f) bdwHostOutput(el,f,',',',');
/* Print out bdwHost as a comma separated list including final comma. */

#define BDWSUBMISSIONDIR_NUM_COLS 9

struct bdwSubmissionDir
/* An external data directory we have collected a submission from */
    {
    struct bdwSubmissionDir *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented id */
    char *url;	/* Web-mounted directory. Includes protocol, host, and final '/' */
    unsigned hostId;	/* Id of host it's on */
    long long lastOkTime;	/* Last time submission dir was ok in seconds since 1970 */
    long long lastNotOkTime;	/* Last time submission dir was not ok in seconds since 1970 */
    long long firstAdded;	/* Time submission dir was first seen */
    char *errorMessage;	/* If non-empty contains last error message from dir. If empty dir is ok */
    long long uploadAttempts;	/* Number of times uploads attempted fromt this submission directory */
    long long historyBits;	/* Upload history with most recent in least significant bit. 0 for upload failed, 1 for success */
    };

void bdwSubmissionDirStaticLoad(char **row, struct bdwSubmissionDir *ret);
/* Load a row from bdwSubmissionDir table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct bdwSubmissionDir *bdwSubmissionDirLoad(char **row);
/* Load a bdwSubmissionDir from row fetched with select * from bdwSubmissionDir
 * from database.  Dispose of this with bdwSubmissionDirFree(). */

struct bdwSubmissionDir *bdwSubmissionDirLoadAll(char *fileName);
/* Load all bdwSubmissionDir from whitespace-separated file.
 * Dispose of this with bdwSubmissionDirFreeList(). */

struct bdwSubmissionDir *bdwSubmissionDirLoadAllByChar(char *fileName, char chopper);
/* Load all bdwSubmissionDir from chopper separated file.
 * Dispose of this with bdwSubmissionDirFreeList(). */

#define bdwSubmissionDirLoadAllByTab(a) bdwSubmissionDirLoadAllByChar(a, '\t');
/* Load all bdwSubmissionDir from tab separated file.
 * Dispose of this with bdwSubmissionDirFreeList(). */

struct bdwSubmissionDir *bdwSubmissionDirCommaIn(char **pS, struct bdwSubmissionDir *ret);
/* Create a bdwSubmissionDir out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new bdwSubmissionDir */

void bdwSubmissionDirFree(struct bdwSubmissionDir **pEl);
/* Free a single dynamically allocated bdwSubmissionDir such as created
 * with bdwSubmissionDirLoad(). */

void bdwSubmissionDirFreeList(struct bdwSubmissionDir **pList);
/* Free a list of dynamically allocated bdwSubmissionDir's */

void bdwSubmissionDirOutput(struct bdwSubmissionDir *el, FILE *f, char sep, char lastSep);
/* Print out bdwSubmissionDir.  Separate fields with sep. Follow last field with lastSep. */

#define bdwSubmissionDirTabOut(el,f) bdwSubmissionDirOutput(el,f,'\t','\n');
/* Print out bdwSubmissionDir as a line in a tab-separated file. */

#define bdwSubmissionDirCommaOut(el,f) bdwSubmissionDirOutput(el,f,',',',');
/* Print out bdwSubmissionDir as a comma separated list including final comma. */

#define BDWFILE_NUM_COLS 14

struct bdwFile
/* A file we are tracking that we intend to and maybe have uploaded */
    {
    struct bdwFile *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincrementing file id */
    char licensePlate[17];	/* A abc123 looking license-platish thing */
    unsigned submissionId;	/* Links to id in submission table */
    char *submitFileName;	/* File name in submission relative to submission dir */
    char *bdwFileName;	/* File name in big data warehouse relative to bdw root dir */
    long long startUploadTime;	/* Time when upload started - 0 if not started */
    long long endUploadTime;	/* Time when upload finished - 0 if not finished */
    long long updateTime;	/* Update time (on system it was uploaded from) */
    long long size;	/* File size */
    char md5[33];	/* md5 sum of file contents */
    char *tags;	/* CGI encoded name=val pairs from manifest */
    char *errorMessage;	/* If non-empty contains last error message from upload. If empty upload is ok */
    long long uploadAttempts;	/* Number of times file upload attempted */
    long long historyBits;	/* Upload history with most recent in least significant bit. 0 for connection failed, 1 for success */
    };

void bdwFileStaticLoad(char **row, struct bdwFile *ret);
/* Load a row from bdwFile table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct bdwFile *bdwFileLoad(char **row);
/* Load a bdwFile from row fetched with select * from bdwFile
 * from database.  Dispose of this with bdwFileFree(). */

struct bdwFile *bdwFileLoadAll(char *fileName);
/* Load all bdwFile from whitespace-separated file.
 * Dispose of this with bdwFileFreeList(). */

struct bdwFile *bdwFileLoadAllByChar(char *fileName, char chopper);
/* Load all bdwFile from chopper separated file.
 * Dispose of this with bdwFileFreeList(). */

#define bdwFileLoadAllByTab(a) bdwFileLoadAllByChar(a, '\t');
/* Load all bdwFile from tab separated file.
 * Dispose of this with bdwFileFreeList(). */

struct bdwFile *bdwFileCommaIn(char **pS, struct bdwFile *ret);
/* Create a bdwFile out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new bdwFile */

void bdwFileFree(struct bdwFile **pEl);
/* Free a single dynamically allocated bdwFile such as created
 * with bdwFileLoad(). */

void bdwFileFreeList(struct bdwFile **pList);
/* Free a list of dynamically allocated bdwFile's */

void bdwFileOutput(struct bdwFile *el, FILE *f, char sep, char lastSep);
/* Print out bdwFile.  Separate fields with sep. Follow last field with lastSep. */

#define bdwFileTabOut(el,f) bdwFileOutput(el,f,'\t','\n');
/* Print out bdwFile as a line in a tab-separated file. */

#define bdwFileCommaOut(el,f) bdwFileOutput(el,f,',',',');
/* Print out bdwFile as a comma separated list including final comma. */

#define BDWSUBMISSION_NUM_COLS 7

struct bdwSubmission
/* A data submission, typically containing many files.  Always associated with a submission dir. */
    {
    struct bdwSubmission *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented submission id */
    char *url;	/* Url to validated.txt format file. We copy this file over and give it a fileId if we can. */
    long long startUploadTime;	/* Time at start of submission */
    long long endUploadTime;	/* Time at end of upload - 0 if not finished */
    char userSid[65];	/* Connects to user table sid field */
    unsigned submitFileId;	/* Points to validated.txt file for submission. */
    char *errorMessage;	/* If non-empty contains last error message from submission. If empty submission is ok */
    };

void bdwSubmissionStaticLoad(char **row, struct bdwSubmission *ret);
/* Load a row from bdwSubmission table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct bdwSubmission *bdwSubmissionLoad(char **row);
/* Load a bdwSubmission from row fetched with select * from bdwSubmission
 * from database.  Dispose of this with bdwSubmissionFree(). */

struct bdwSubmission *bdwSubmissionLoadAll(char *fileName);
/* Load all bdwSubmission from whitespace-separated file.
 * Dispose of this with bdwSubmissionFreeList(). */

struct bdwSubmission *bdwSubmissionLoadAllByChar(char *fileName, char chopper);
/* Load all bdwSubmission from chopper separated file.
 * Dispose of this with bdwSubmissionFreeList(). */

#define bdwSubmissionLoadAllByTab(a) bdwSubmissionLoadAllByChar(a, '\t');
/* Load all bdwSubmission from tab separated file.
 * Dispose of this with bdwSubmissionFreeList(). */

struct bdwSubmission *bdwSubmissionCommaIn(char **pS, struct bdwSubmission *ret);
/* Create a bdwSubmission out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new bdwSubmission */

void bdwSubmissionFree(struct bdwSubmission **pEl);
/* Free a single dynamically allocated bdwSubmission such as created
 * with bdwSubmissionLoad(). */

void bdwSubmissionFreeList(struct bdwSubmission **pList);
/* Free a list of dynamically allocated bdwSubmission's */

void bdwSubmissionOutput(struct bdwSubmission *el, FILE *f, char sep, char lastSep);
/* Print out bdwSubmission.  Separate fields with sep. Follow last field with lastSep. */

#define bdwSubmissionTabOut(el,f) bdwSubmissionOutput(el,f,'\t','\n');
/* Print out bdwSubmission as a line in a tab-separated file. */

#define bdwSubmissionCommaOut(el,f) bdwSubmissionOutput(el,f,',',',');
/* Print out bdwSubmission as a comma separated list including final comma. */

#define BDWSUBMISSIONLOG_NUM_COLS 3

struct bdwSubmissionLog
/* Log of status messages received during submission process */
    {
    struct bdwSubmissionLog *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented id */
    unsigned submissionId;	/* Id in submission table */
    char *message;	/* Some message probably scraped out of stderr or something */
    };

void bdwSubmissionLogStaticLoad(char **row, struct bdwSubmissionLog *ret);
/* Load a row from bdwSubmissionLog table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct bdwSubmissionLog *bdwSubmissionLogLoad(char **row);
/* Load a bdwSubmissionLog from row fetched with select * from bdwSubmissionLog
 * from database.  Dispose of this with bdwSubmissionLogFree(). */

struct bdwSubmissionLog *bdwSubmissionLogLoadAll(char *fileName);
/* Load all bdwSubmissionLog from whitespace-separated file.
 * Dispose of this with bdwSubmissionLogFreeList(). */

struct bdwSubmissionLog *bdwSubmissionLogLoadAllByChar(char *fileName, char chopper);
/* Load all bdwSubmissionLog from chopper separated file.
 * Dispose of this with bdwSubmissionLogFreeList(). */

#define bdwSubmissionLogLoadAllByTab(a) bdwSubmissionLogLoadAllByChar(a, '\t');
/* Load all bdwSubmissionLog from tab separated file.
 * Dispose of this with bdwSubmissionLogFreeList(). */

struct bdwSubmissionLog *bdwSubmissionLogCommaIn(char **pS, struct bdwSubmissionLog *ret);
/* Create a bdwSubmissionLog out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new bdwSubmissionLog */

void bdwSubmissionLogFree(struct bdwSubmissionLog **pEl);
/* Free a single dynamically allocated bdwSubmissionLog such as created
 * with bdwSubmissionLogLoad(). */

void bdwSubmissionLogFreeList(struct bdwSubmissionLog **pList);
/* Free a list of dynamically allocated bdwSubmissionLog's */

void bdwSubmissionLogOutput(struct bdwSubmissionLog *el, FILE *f, char sep, char lastSep);
/* Print out bdwSubmissionLog.  Separate fields with sep. Follow last field with lastSep. */

#define bdwSubmissionLogTabOut(el,f) bdwSubmissionLogOutput(el,f,'\t','\n');
/* Print out bdwSubmissionLog as a line in a tab-separated file. */

#define bdwSubmissionLogCommaOut(el,f) bdwSubmissionLogOutput(el,f,',',',');
/* Print out bdwSubmissionLog as a comma separated list including final comma. */

#define BDWSUBSCRIBINGPROGRAM_NUM_COLS 9

struct bdwSubscribingProgram
/* A program that wants to be called when a file arrives or a submission finishes */
    {
    struct bdwSubscribingProgram *next;  /* Next in singly linked list. */
    unsigned id;	/* ID of daemon */
    double runOrder;	/* Determines order programs run in. In case of tie lowest id wins. */
    char *filePattern;	/* A string with * and ? wildcards to match files we care about */
    char *hubPattern;	/* A string with * and ? wildcards to match hub URLs we care about */
    char *tagPattern;	/* A string of cgi encoded name=val pairs where vals have wildcards */
    char *onFileStartUpload;	/* A unix command string to run with a %u where file id goes */
    char *onFileEndUpload;	/* A unix command string to run with a %u where file id goes */
    char *onSubmissionStartUpload;	/* A unix command string to run with %u where submission id goes */
    char *onSubmissionEndUpload;	/* A unix command string to run with %u where submission id goes */
    };

void bdwSubscribingProgramStaticLoad(char **row, struct bdwSubscribingProgram *ret);
/* Load a row from bdwSubscribingProgram table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct bdwSubscribingProgram *bdwSubscribingProgramLoad(char **row);
/* Load a bdwSubscribingProgram from row fetched with select * from bdwSubscribingProgram
 * from database.  Dispose of this with bdwSubscribingProgramFree(). */

struct bdwSubscribingProgram *bdwSubscribingProgramLoadAll(char *fileName);
/* Load all bdwSubscribingProgram from whitespace-separated file.
 * Dispose of this with bdwSubscribingProgramFreeList(). */

struct bdwSubscribingProgram *bdwSubscribingProgramLoadAllByChar(char *fileName, char chopper);
/* Load all bdwSubscribingProgram from chopper separated file.
 * Dispose of this with bdwSubscribingProgramFreeList(). */

#define bdwSubscribingProgramLoadAllByTab(a) bdwSubscribingProgramLoadAllByChar(a, '\t');
/* Load all bdwSubscribingProgram from tab separated file.
 * Dispose of this with bdwSubscribingProgramFreeList(). */

struct bdwSubscribingProgram *bdwSubscribingProgramCommaIn(char **pS, struct bdwSubscribingProgram *ret);
/* Create a bdwSubscribingProgram out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new bdwSubscribingProgram */

void bdwSubscribingProgramFree(struct bdwSubscribingProgram **pEl);
/* Free a single dynamically allocated bdwSubscribingProgram such as created
 * with bdwSubscribingProgramLoad(). */

void bdwSubscribingProgramFreeList(struct bdwSubscribingProgram **pList);
/* Free a list of dynamically allocated bdwSubscribingProgram's */

void bdwSubscribingProgramOutput(struct bdwSubscribingProgram *el, FILE *f, char sep, char lastSep);
/* Print out bdwSubscribingProgram.  Separate fields with sep. Follow last field with lastSep. */

#define bdwSubscribingProgramTabOut(el,f) bdwSubscribingProgramOutput(el,f,'\t','\n');
/* Print out bdwSubscribingProgram as a line in a tab-separated file. */

#define bdwSubscribingProgramCommaOut(el,f) bdwSubscribingProgramOutput(el,f,',',',');
/* Print out bdwSubscribingProgram as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* BIGDATAWAREHOUSE_H */

