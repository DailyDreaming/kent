/* bigDataWarehouse.h was originally generated by the autoSql program, which also 
 * generated bigDataWarehouse.c and bigDataWarehouse.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef BIGDATAWAREHOUSE_H
#define BIGDATAWAREHOUSE_H

#define BDWUSER_NUM_COLS 3

struct bdwUser
/* Someone who submits files to or otherwise interacts with big data warehouse */
    {
    struct bdwUser *next;  /* Next in singly linked list. */
    char sid[65];	/* sha512 generated unique user ID. */
    char access[65];	/* access code */
    char *email;	/* Email handle, the main identifier. */
    };

void bdwUserStaticLoad(char **row, struct bdwUser *ret);
/* Load a row from bdwUser table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct bdwUser *bdwUserLoad(char **row);
/* Load a bdwUser from row fetched with select * from bdwUser
 * from database.  Dispose of this with bdwUserFree(). */

struct bdwUser *bdwUserLoadAll(char *fileName);
/* Load all bdwUser from whitespace-separated file.
 * Dispose of this with bdwUserFreeList(). */

struct bdwUser *bdwUserLoadAllByChar(char *fileName, char chopper);
/* Load all bdwUser from chopper separated file.
 * Dispose of this with bdwUserFreeList(). */

#define bdwUserLoadAllByTab(a) bdwUserLoadAllByChar(a, '\t');
/* Load all bdwUser from tab separated file.
 * Dispose of this with bdwUserFreeList(). */

struct bdwUser *bdwUserCommaIn(char **pS, struct bdwUser *ret);
/* Create a bdwUser out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new bdwUser */

void bdwUserFree(struct bdwUser **pEl);
/* Free a single dynamically allocated bdwUser such as created
 * with bdwUserLoad(). */

void bdwUserFreeList(struct bdwUser **pList);
/* Free a list of dynamically allocated bdwUser's */

void bdwUserOutput(struct bdwUser *el, FILE *f, char sep, char lastSep);
/* Print out bdwUser.  Separate fields with sep. Follow last field with lastSep. */

#define bdwUserTabOut(el,f) bdwUserOutput(el,f,'\t','\n');
/* Print out bdwUser as a line in a tab-separated file. */

#define bdwUserCommaOut(el,f) bdwUserOutput(el,f,',',',');
/* Print out bdwUser as a comma separated list including final comma. */

#define BDWHUB_NUM_COLS 8

struct bdwHub
/* An external data hub we have collected files from */
    {
    struct bdwHub *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented hub id */
    char *url;	/* Hub url - points to directory containing hub.txt file */
    char *shortLabel;	/* Hub short label from hub.txt file */
    char *longLabel;	/* Hub long label */
    long long lastOkTime;	/* Last time hub was ok in seconds since 1970 */
    long long lastNotOkTime;	/* Last time hub was not ok in seconds since 1970 */
    long long firstAdded;	/* Time hub was first seen */
    char *errorMessage;	/* If non-empty contains last error message from hub. If empty hub is ok */
    };

void bdwHubStaticLoad(char **row, struct bdwHub *ret);
/* Load a row from bdwHub table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct bdwHub *bdwHubLoad(char **row);
/* Load a bdwHub from row fetched with select * from bdwHub
 * from database.  Dispose of this with bdwHubFree(). */

struct bdwHub *bdwHubLoadAll(char *fileName);
/* Load all bdwHub from whitespace-separated file.
 * Dispose of this with bdwHubFreeList(). */

struct bdwHub *bdwHubLoadAllByChar(char *fileName, char chopper);
/* Load all bdwHub from chopper separated file.
 * Dispose of this with bdwHubFreeList(). */

#define bdwHubLoadAllByTab(a) bdwHubLoadAllByChar(a, '\t');
/* Load all bdwHub from tab separated file.
 * Dispose of this with bdwHubFreeList(). */

struct bdwHub *bdwHubCommaIn(char **pS, struct bdwHub *ret);
/* Create a bdwHub out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new bdwHub */

void bdwHubFree(struct bdwHub **pEl);
/* Free a single dynamically allocated bdwHub such as created
 * with bdwHubLoad(). */

void bdwHubFreeList(struct bdwHub **pList);
/* Free a list of dynamically allocated bdwHub's */

void bdwHubOutput(struct bdwHub *el, FILE *f, char sep, char lastSep);
/* Print out bdwHub.  Separate fields with sep. Follow last field with lastSep. */

#define bdwHubTabOut(el,f) bdwHubOutput(el,f,'\t','\n');
/* Print out bdwHub as a line in a tab-separated file. */

#define bdwHubCommaOut(el,f) bdwHubOutput(el,f,',',',');
/* Print out bdwHub as a comma separated list including final comma. */

#define BDWHOST_NUM_COLS 6

struct bdwHost
/* An external host we have collected files from */
    {
    struct bdwHost *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented host id */
    char *name;	/* Name (before DNS lookup) */
    long long lastOkTime;	/* Last time hub was ok in seconds since 1970 */
    long long lastNotOkTime;	/* Last time hub was not ok in seconds since 1970 */
    long long firstAdded;	/* Time host was first seen */
    char *errorMessage;	/* If non-empty contains last error message from host. If empty host is ok */
    };

void bdwHostStaticLoad(char **row, struct bdwHost *ret);
/* Load a row from bdwHost table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct bdwHost *bdwHostLoad(char **row);
/* Load a bdwHost from row fetched with select * from bdwHost
 * from database.  Dispose of this with bdwHostFree(). */

struct bdwHost *bdwHostLoadAll(char *fileName);
/* Load all bdwHost from whitespace-separated file.
 * Dispose of this with bdwHostFreeList(). */

struct bdwHost *bdwHostLoadAllByChar(char *fileName, char chopper);
/* Load all bdwHost from chopper separated file.
 * Dispose of this with bdwHostFreeList(). */

#define bdwHostLoadAllByTab(a) bdwHostLoadAllByChar(a, '\t');
/* Load all bdwHost from tab separated file.
 * Dispose of this with bdwHostFreeList(). */

struct bdwHost *bdwHostCommaIn(char **pS, struct bdwHost *ret);
/* Create a bdwHost out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new bdwHost */

void bdwHostFree(struct bdwHost **pEl);
/* Free a single dynamically allocated bdwHost such as created
 * with bdwHostLoad(). */

void bdwHostFreeList(struct bdwHost **pList);
/* Free a list of dynamically allocated bdwHost's */

void bdwHostOutput(struct bdwHost *el, FILE *f, char sep, char lastSep);
/* Print out bdwHost.  Separate fields with sep. Follow last field with lastSep. */

#define bdwHostTabOut(el,f) bdwHostOutput(el,f,'\t','\n');
/* Print out bdwHost as a line in a tab-separated file. */

#define bdwHostCommaOut(el,f) bdwHostOutput(el,f,',',',');
/* Print out bdwHost as a comma separated list including final comma. */

#define BDWSUBMISSION_NUM_COLS 6

struct bdwSubmission
/* A data submission, typically containing many files. */
    {
    struct bdwSubmission *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented submission id */
    long long startUploadTime;	/* Time at start of submission */
    long long endUploadTime;	/* Time at end of upload - 0 if not finished */
    char userSid[65];	/* Connects to user table sid field */
    unsigned hubId;	/* Connect to hub table id field */
    char *errorMessage;	/* If non-empty contains last error message from host. If empty host is ok */
    };

void bdwSubmissionStaticLoad(char **row, struct bdwSubmission *ret);
/* Load a row from bdwSubmission table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct bdwSubmission *bdwSubmissionLoad(char **row);
/* Load a bdwSubmission from row fetched with select * from bdwSubmission
 * from database.  Dispose of this with bdwSubmissionFree(). */

struct bdwSubmission *bdwSubmissionLoadAll(char *fileName);
/* Load all bdwSubmission from whitespace-separated file.
 * Dispose of this with bdwSubmissionFreeList(). */

struct bdwSubmission *bdwSubmissionLoadAllByChar(char *fileName, char chopper);
/* Load all bdwSubmission from chopper separated file.
 * Dispose of this with bdwSubmissionFreeList(). */

#define bdwSubmissionLoadAllByTab(a) bdwSubmissionLoadAllByChar(a, '\t');
/* Load all bdwSubmission from tab separated file.
 * Dispose of this with bdwSubmissionFreeList(). */

struct bdwSubmission *bdwSubmissionCommaIn(char **pS, struct bdwSubmission *ret);
/* Create a bdwSubmission out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new bdwSubmission */

void bdwSubmissionFree(struct bdwSubmission **pEl);
/* Free a single dynamically allocated bdwSubmission such as created
 * with bdwSubmissionLoad(). */

void bdwSubmissionFreeList(struct bdwSubmission **pList);
/* Free a list of dynamically allocated bdwSubmission's */

void bdwSubmissionOutput(struct bdwSubmission *el, FILE *f, char sep, char lastSep);
/* Print out bdwSubmission.  Separate fields with sep. Follow last field with lastSep. */

#define bdwSubmissionTabOut(el,f) bdwSubmissionOutput(el,f,'\t','\n');
/* Print out bdwSubmission as a line in a tab-separated file. */

#define bdwSubmissionCommaOut(el,f) bdwSubmissionOutput(el,f,',',',');
/* Print out bdwSubmission as a comma separated list including final comma. */

#define BDWFILE_NUM_COLS 11

struct bdwFile
/* A file we are tracking that we intend to and maybe have uploaded */
    {
    struct bdwFile *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincrementing host id */
    unsigned submission;	/* Links to id in submission table */
    char *hubFileName;	/* File name in hub */
    char bdwName;	/* A abc123 looking license-platish thing */
    char *bdwFileName;	/* File name in big data warehouse */
    long long startUploadTime;	/* Time when upload started - 0 if not started */
    long long endUploadTime;	/* Time when upload finished - 0 if not finished */
    long long updateTime;	/* Update time (on hub it was downloaded from) */
    long long size;	/* File size */
    char md5[33];	/* md5 sum of file contents */
    char *tags;	/* CGI encoded name=val pairs from manifest */
    };

void bdwFileStaticLoad(char **row, struct bdwFile *ret);
/* Load a row from bdwFile table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct bdwFile *bdwFileLoad(char **row);
/* Load a bdwFile from row fetched with select * from bdwFile
 * from database.  Dispose of this with bdwFileFree(). */

struct bdwFile *bdwFileLoadAll(char *fileName);
/* Load all bdwFile from whitespace-separated file.
 * Dispose of this with bdwFileFreeList(). */

struct bdwFile *bdwFileLoadAllByChar(char *fileName, char chopper);
/* Load all bdwFile from chopper separated file.
 * Dispose of this with bdwFileFreeList(). */

#define bdwFileLoadAllByTab(a) bdwFileLoadAllByChar(a, '\t');
/* Load all bdwFile from tab separated file.
 * Dispose of this with bdwFileFreeList(). */

struct bdwFile *bdwFileCommaIn(char **pS, struct bdwFile *ret);
/* Create a bdwFile out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new bdwFile */

void bdwFileFree(struct bdwFile **pEl);
/* Free a single dynamically allocated bdwFile such as created
 * with bdwFileLoad(). */

void bdwFileFreeList(struct bdwFile **pList);
/* Free a list of dynamically allocated bdwFile's */

void bdwFileOutput(struct bdwFile *el, FILE *f, char sep, char lastSep);
/* Print out bdwFile.  Separate fields with sep. Follow last field with lastSep. */

#define bdwFileTabOut(el,f) bdwFileOutput(el,f,'\t','\n');
/* Print out bdwFile as a line in a tab-separated file. */

#define bdwFileCommaOut(el,f) bdwFileOutput(el,f,',',',');
/* Print out bdwFile as a comma separated list including final comma. */

#define BDWSUBSCRIBINGPROGRAM_NUM_COLS 8

struct bdwSubscribingProgram
/* A program that wants to be called when a file arrives or a submission finishes */
    {
    struct bdwSubscribingProgram *next;  /* Next in singly linked list. */
    unsigned id;	/* ID of daemon */
    char *filePattern;	/* A string with * and ? wildcards to match files we care about */
    char *hubPattern;	/* A string with * and ? wildcards to match hub URLs we care about */
    char *tagPattern;	/* A string of cgi encoded name=val pairs where vals have wildcards */
    char *onFileStartUpload;	/* A unix command string to run with a %u where file id goes */
    char *onFileEndUpload;	/* A unix command string to run with a %u where file id goes */
    char *onSubmissionStartUpload;	/* A unix command string to run with %u where submission id goes */
    char *onSubmissionEndUpload;	/* A unix command string to run with %u where submission id goes */
    };

void bdwSubscribingProgramStaticLoad(char **row, struct bdwSubscribingProgram *ret);
/* Load a row from bdwSubscribingProgram table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct bdwSubscribingProgram *bdwSubscribingProgramLoad(char **row);
/* Load a bdwSubscribingProgram from row fetched with select * from bdwSubscribingProgram
 * from database.  Dispose of this with bdwSubscribingProgramFree(). */

struct bdwSubscribingProgram *bdwSubscribingProgramLoadAll(char *fileName);
/* Load all bdwSubscribingProgram from whitespace-separated file.
 * Dispose of this with bdwSubscribingProgramFreeList(). */

struct bdwSubscribingProgram *bdwSubscribingProgramLoadAllByChar(char *fileName, char chopper);
/* Load all bdwSubscribingProgram from chopper separated file.
 * Dispose of this with bdwSubscribingProgramFreeList(). */

#define bdwSubscribingProgramLoadAllByTab(a) bdwSubscribingProgramLoadAllByChar(a, '\t');
/* Load all bdwSubscribingProgram from tab separated file.
 * Dispose of this with bdwSubscribingProgramFreeList(). */

struct bdwSubscribingProgram *bdwSubscribingProgramCommaIn(char **pS, struct bdwSubscribingProgram *ret);
/* Create a bdwSubscribingProgram out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new bdwSubscribingProgram */

void bdwSubscribingProgramFree(struct bdwSubscribingProgram **pEl);
/* Free a single dynamically allocated bdwSubscribingProgram such as created
 * with bdwSubscribingProgramLoad(). */

void bdwSubscribingProgramFreeList(struct bdwSubscribingProgram **pList);
/* Free a list of dynamically allocated bdwSubscribingProgram's */

void bdwSubscribingProgramOutput(struct bdwSubscribingProgram *el, FILE *f, char sep, char lastSep);
/* Print out bdwSubscribingProgram.  Separate fields with sep. Follow last field with lastSep. */

#define bdwSubscribingProgramTabOut(el,f) bdwSubscribingProgramOutput(el,f,'\t','\n');
/* Print out bdwSubscribingProgram as a line in a tab-separated file. */

#define bdwSubscribingProgramCommaOut(el,f) bdwSubscribingProgramOutput(el,f,',',',');
/* Print out bdwSubscribingProgram as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* BIGDATAWAREHOUSE_H */

