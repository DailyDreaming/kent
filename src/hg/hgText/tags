!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/darren@hiebert.com/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://darren.hiebert.com/ctags/	/official site/
!_TAG_PROGRAM_VERSION	3.4	/with C, C++, Eiffel, Fortran, and Java  support/
A	../inc/simpleRepeat.h	/^    unsigned A;	\/* Number of A's in repeat unit *\/$/;"	m	struct:simpleRepeat
AA	../../inc/dnautil.h	/^typedef char AA;$/;"	t
AGPFRAG_H	../inc/agpFrag.h	6;"	d
AGPGAP_H	../inc/agpGap.h	6;"	d
ALITYPE_H	../../inc/aliType.h	4;"	d
A_BASE_VAL	../../inc/dnautil.h	27;"	d
AbortHandler	../../inc/errabort.h	/^typedef void (*AbortHandler)();$/;"	t
AllocA	../../inc/common.h	101;"	d
AllocArray	../../inc/common.h	99;"	d
AllocN	../../inc/common.h	104;"	d
AllocVar	../../inc/common.h	95;"	d
ArraySize	../../inc/common.h	49;"	d
BBREPMASK_H	../inc/bbRepMask.h	6;"	d
BED_H	../inc/bed.h	6;"	d
BIGNUM	../../inc/common.h	46;"	d
BIGONE	../../lib/patSpace.c	16;"	d	file:
BIOPOL	../../inc/dnautil.h	/^typedef char BIOPOL;	\/* Biological polymer. *\/$/;"	t
BITS_H	../../inc/bits.h	4;"	d
BLASTPARSE_H	../../inc/blastParse.h	4;"	d
BUFFER_SIZE	../lib/hgConfig.c	14;"	d	file:
BYTE	../../inc/common.h	40;"	d
Bits	../../inc/bits.h	/^typedef unsigned char Bits;$/;"	t
C	../inc/simpleRepeat.h	/^    unsigned C;	\/* Number of C's in repeat unit *\/$/;"	m	struct:simpleRepeat
CDA_H	../../inc/cda.h	10;"	d
CGH_H	../inc/cgh.h	6;"	d
CHROMINFO_H	../inc/chromInfo.h	6;"	d
CHROMINSERTS_H	../inc/chromInserts.h	5;"	d
CLONEPOS_H	../inc/clonePos.h	6;"	d
CODEBIAS_H	../../inc/codebias.h	8;"	d
COMMON_H	../../inc/common.h	12;"	d
COORDCONV_H	../inc/coordConv.h	38;"	d
CPGISLAND_H	../inc/cpgIsland.h	6;"	d
CRUDEALI_H	../../inc/crudeali.h	8;"	d
CTGPOS_H	../inc/ctgPos.h	6;"	d
CUSTOMTRACK_H	../inc/customTrack.h	3;"	d
CYTOBAND_H	../inc/cytoBand.h	6;"	d
C_BASE_VAL	../../inc/dnautil.h	26;"	d
CloneArray	../../inc/common.h	114;"	d
CloneVar	../../inc/common.h	78;"	d
Codon	../../inc/dnautil.h	/^typedef char Codon; \/* Our codon type. *\/$/;"	t
Color	../../inc/memgfx.h	/^typedef unsigned char Color;$/;"	t
CopyArray	../../inc/common.h	111;"	d
DIGRAPH_H	../../inc/diGraph.h	3;"	d
DLIST_H	../../inc/dlist.h	9;"	d
DNA	../../inc/dnautil.h	/^typedef char DNA;$/;"	t
DNASEQ_H	../../inc/dnaseq.h	7;"	d
DNAUTIL_H	../../inc/dnautil.h	18;"	d
DYSTRING_H	../../inc/dystring.h	8;"	d
ENS_H	../../inc/ens.h	8;"	d
EST3_H	../inc/est3.h	6;"	d
ESTPAIR_H	../inc/estPair.h	6;"	d
EXOFISH_H	../inc/exoFish.h	6;"	d
EXPRBED_H	../inc/exprBed.h	6;"	d
ExpandArray	../../inc/common.h	107;"	d
FALSE	../../inc/common.h	34;"	d
FA_H	../../inc/fa.h	7;"	d
FEATUREBITS_H	../inc/featureBits.h	3;"	d
FISHCLONES_H	../inc/fishClones.h	6;"	d
FLYDNA_H	../../inc/flydna.h	9;"	d
FUZZYFIND_H	../../inc/fuzzyFind.h	33;"	d
G	../inc/simpleRepeat.h	/^    unsigned G;	\/* Number of G's in repeat unit *\/$/;"	m	struct:simpleRepeat
GCPERCENT_H	../inc/gcPercent.h	6;"	d
GDF_H	../../inc/gdf.h	9;"	d
GENEGRAPH_H	../../inc/geneGraph.h	10;"	d
GENEGRAPH_H	../inc/geneGraph.h	10;"	d
GENEPRED_H	../inc/genePred.h	6;"	d
GENOFIND_H	../../inc/genoFind.h	5;"	d
GENOMICDUPS_H	../inc/genomicDups.h	6;"	d
GFF_H	../../inc/gff.h	9;"	d
GLDBREP_H	../inc/glDbRep.h	6;"	d
GLOBAL_CONFIG_FILE	../lib/hgConfig.c	9;"	d	file:
GLOBAL_CONFIG_PATH	../lib/hgConfig.c	8;"	d	file:
G_BASE_VAL	../../inc/dnautil.h	28;"	d
GfSaveAli	../../inc/genoFind.h	/^typedef void (*GfSaveAli)(char *chromName, int chromSize, int chromOffset,$/;"	t
GffExon	../../inc/oldGff.h	/^typedef struct gffSegment GffExon;$/;"	t
GffIntron	../../inc/oldGff.h	/^typedef struct gffSegment GffIntron;$/;"	t
GgTransOut	../../inc/geneGraph.h	/^typedef void (*GgTransOut)(struct ggAliInfo *da, int cStart, int cEnd); $/;"	t
GgTransOut	../inc/geneGraph.h	/^typedef void (*GgTransOut)(struct ggAliInfo *da, int cStart, int cEnd); $/;"	t
HASH_H	../../inc/hash.h	8;"	d
HCOMMON_H	../inc/hCommon.h	4;"	d
HDB_H	../inc/hdb.h	4;"	d
HGAP_H	../../inc/hgap.h	8;"	d
HGAP_H	../inc/hgap.h	9;"	d
HGCONFIG_H	../inc/hgConfig.h	2;"	d
HGDB_H	../../inc/hgdb.h	8;"	d
HGDB_H	../inc/hgdb.h	8;"	d
HGID	../../inc/hgap.h	/^typedef unsigned int HGID;	\/* A database ID. *\/$/;"	t
HGID	../inc/hgRelate.h	/^typedef unsigned int HGID;	\/* A database ID. *\/$/;"	t
HGID	../inc/hgap.h	/^typedef unsigned int HGID;	\/* A database ID. *\/$/;"	t
HGRELATE_H	../inc/hgRelate.h	8;"	d
HMMSTATS_H	../../inc/hmmstats.h	9;"	d
ISOCHORES_H	../inc/isochores.h	6;"	d
KEYS_H	../../inc/keys.h	9;"	d
KNOWNINFO_H	../inc/knownInfo.h	6;"	d
KNOWNMORE_H	../inc/knownMore.h	6;"	d
KXTOK_H	../../inc/kxTok.h	6;"	d
LARGEST_CODE	../../lib/gifcomp.c	67;"	d	file:
LFS_H	../inc/lfs.h	6;"	d
LINEFILE_H	../../inc/linefile.h	9;"	d
MADBREP_H	../../inc/maDbRep.h	7;"	d
MAPSTS_H	../inc/mapSts.h	6;"	d
MATOFF_H	../../inc/maToFf.h	7;"	d
MCNBREAKPOINTS_H	../inc/mcnBreakpoints.h	6;"	d
MEMALLOC_H	../../inc/memalloc.h	7;"	d
MEMGFX_H	../../inc/memgfx.h	12;"	d
MG_BLACK	../../inc/memgfx.h	15;"	d
MG_BLUE	../../inc/memgfx.h	18;"	d
MG_CYAN	../../inc/memgfx.h	19;"	d
MG_FREE_COLORS_START	../../inc/memgfx.h	23;"	d
MG_GRAY	../../inc/memgfx.h	22;"	d
MG_GREEN	../../inc/memgfx.h	17;"	d
MG_MAGENTA	../../inc/memgfx.h	20;"	d
MG_RED	../../inc/memgfx.h	16;"	d
MG_WHITE	../../inc/memgfx.h	14;"	d
MG_YELLOW	../../inc/memgfx.h	21;"	d
MOUSESYN_H	../inc/mouseSyn.h	6;"	d
MgFont	../../inc/memgfx.h	/^typedef struct font_hdr MgFont;$/;"	t
NET_H	../../inc/net.h	4;"	d
NIB_H	../../inc/nib.h	4;"	d
NT4_H	../../inc/nt4.h	7;"	d
N_BASE_VAL	../../inc/dnautil.h	29;"	d
OLDGFF_H	../../inc/oldGff.h	11;"	d
OOC_H	../../inc/ooc.h	5;"	d
OOUTILS_H	../inc/ooUtils.h	4;"	d
PATSPACE_H	../../inc/patSpace.h	10;"	d
PEPPRED_H	../inc/pepPred.h	6;"	d
PORTABLE_H	../../inc/portable.h	10;"	d
PSLWSCORE_H	../inc/pslWScore.h	6;"	d
PSL_H	../../inc/psl.h	7;"	d
QASEQ_H	../inc/qaSeq.h	4;"	d
REFALIGN_H	../inc/refAlign.h	6;"	d
REFLINK_H	../inc/refLink.h	6;"	d
REPMASK_H	../../inc/repMask.h	6;"	d
RLE_H	../../inc/rle.h	3;"	d
RMSKOUT_H	../inc/rmskOut.h	6;"	d
RNAGENE_H	../inc/rnaGene.h	6;"	d
ROUGHALI_H	../inc/roughAli.h	6;"	d
ResGetter	../lib/jksql.c	/^typedef MYSQL_RES *	STDCALL ResGetter(MYSQL *mysql);$/;"	t	file:
SAGEEXP_H	../inc/sageExp.h	6;"	d
SAGE_H	../inc/sage.h	6;"	d
SANGER22EXTRA_H	../inc/sanger22extra.h	6;"	d
SEEK_CUR	../../inc/common.h	414;"	d
SEEK_END	../../inc/common.h	418;"	d
SEEK_SET	../../inc/common.h	410;"	d
SHARES_H	../../inc/shaRes.h	8;"	d
SIG_H	../../inc/sig.h	8;"	d
SIMPLEREPEAT_H	../inc/simpleRepeat.h	6;"	d
SNP_H	../inc/snp.h	6;"	d
SOFTBERRYHOM_H	../inc/softberryHom.h	6;"	d
SOFTPROMOTER_H	../inc/softPromoter.h	6;"	d
SPACESAVER_H	../../inc/spaceSaver.h	5;"	d
SQLLIST_H	../../inc/sqlList.h	3;"	d
SQLNUM_H	../../inc/sqlNum.h	4;"	d
STSALIAS_H	../inc/stsAlias.h	6;"	d
STSINFO_H	../inc/stsInfo.h	6;"	d
STSMAP_H	../inc/stsMap.h	6;"	d
STSMARKER_H	../inc/stsMarker.h	6;"	d
SUPSTITCH_H	../../inc/supStitch.h	13;"	d
T	../inc/simpleRepeat.h	/^    unsigned T;	\/* Number of T's in repeat unit *\/$/;"	m	struct:simpleRepeat
TABLE_SIZE	../../lib/gifcomp.c	68;"	d	file:
TRACEINFO_H	../inc/traceInfo.h	6;"	d
TRACKDB_H	../inc/trackDb.h	6;"	d
TRACKTABLE_H	../inc/trackTable.h	6;"	d
TRANS3_H	../../inc/trans3.h	3;"	d
TRUE	../../inc/common.h	33;"	d
T_BASE_VAL	../../inc/dnautil.h	24;"	d
TextBlit	../../inc/memgfx.h	/^typedef void (*TextBlit)(int bitWidth, int bitHeight, int bitX, int bitY,$/;"	t
UBYTE	../../inc/common.h	39;"	d
UBYTE	../../lib/gifcomp.c	64;"	d	file:
UNFIN_H	../../inc/unfin.h	8;"	d
USER_CONFIG_FILE	../lib/hgConfig.c	12;"	d	file:
UWORD	../../inc/common.h	41;"	d
U_BASE_VAL	../../inc/dnautil.h	25;"	d
WABALI_H	../inc/wabAli.h	6;"	d
WEB_H	../../inc/web.h	4;"	d
WORD	../../inc/common.h	42;"	d
WORMDNA_H	../../inc/wormdna.h	8;"	d
WarnHandler	../../inc/errabort.h	/^typedef void (*WarnHandler)(char *format, va_list args);$/;"	t
XAP_H	../../inc/xap.h	5;"	d
XA_H	../../inc/xa.h	8;"	d
XENALIGN_H	../../inc/xenalign.h	8;"	d
XP_H	../../inc/xp.h	4;"	d
ZeroVar	../../inc/common.h	129;"	d
_FILE_OFFSET_BITS	../../inc/common.h	16;"	d
_LARGEFILE_SOURCE	../../inc/common.h	15;"	d
_cgiDir	../../lib/servCrunx.c	/^static char *_cgiDir()$/;"	f	file:
_cgiDir	../../lib/servcis.c	/^static char *_cgiDir()$/;"	f	file:
_cgiDir	../../lib/servcl.c	/^static char *_cgiDir()$/;"	f	file:
_cgiDir	../../lib/servmsII.c	/^static char *_cgiDir()$/;"	f	file:
_cgiDir	../../lib/servpws.c	/^static char *_cgiDir()$/;"	f	file:
_cgiFindInput	../../lib/cheapcgi.c	/^static void _cgiFindInput(char *method)$/;"	f	file:
_cgiRawInput	../../lib/cheapcgi.c	/^char *_cgiRawInput()$/;"	f
_cgiSuffix	../../lib/servCrunx.c	/^static char *_cgiSuffix()$/;"	f	file:
_cgiSuffix	../../lib/servcis.c	/^static char *_cgiSuffix()$/;"	f	file:
_cgiSuffix	../../lib/servcl.c	/^static char *_cgiSuffix()$/;"	f	file:
_cgiSuffix	../../lib/servmsII.c	/^static char *_cgiSuffix()$/;"	f	file:
_cgiSuffix	../../lib/servpws.c	/^static char *_cgiSuffix()$/;"	f	file:
_getGffChar	../../lib/oldGff.c	/^static char _getGffChar(struct gff *gff)$/;"	f	file:
_gffAtEof	../../lib/oldGff.c	/^static boolean _gffAtEof(struct gff *gff)$/;"	f	file:
_gffGetLine	../../lib/oldGff.c	/^static boolean _gffGetLine(struct gff *gff)$/;"	f	file:
_gffIdent	../../lib/oldGff.c	/^static char _gffIdent[] = "##gff-version";$/;"	v	file:
_gffSeekDna	../../lib/oldGff.c	/^static boolean _gffSeekDna(struct gff *gff)$/;"	f	file:
_gffSeekDoubleSharpLine	../../lib/oldGff.c	/^static boolean _gffSeekDoubleSharpLine(struct gff *gff)$/;"	f	file:
_hgTextFullName	../lib/hCommon.c	/^static char *_hgTextFullName = "http:\/\/genome.ucsc.edu\/cgi-bin\/hgText"; \/* Path back to the text browser. *\/$/;"	v	file:
_hgTextName	../lib/hCommon.c	/^static char *_hgTextName = "\/cgi-bin\/hgText"; \/* Path back to the text browser. *\/$/;"	v	file:
_hgTracksFullName	../lib/hCommon.c	/^static char *_hgTracksFullName = "http:\/\/genome.ucsc.edu\/cgi-bin\/hgTracks"; \/* Path back to self. *\/$/;"	v	file:
_hgTracksName	../lib/hCommon.c	/^static char *_hgTracksName = "..\/cgi-bin\/hgTracks"; \/* Path back to self. *\/$/;"	v	file:
_hgcFullName	../lib/hCommon.c	/^static char *_hgcFullName = "http:\/\/genome.ucsc.edu\/cgi-bin\/hgc";	\/* Path to click processing program. *\/$/;"	v	file:
_hgcName	../lib/hCommon.c	/^static char *_hgcName = "..\/cgi-bin\/hgc";	\/* Path to click processing program. *\/$/;"	v	file:
_htmStart	../../lib/htmshell.c	/^void _htmStart(FILE *f, char *title)$/;"	f
_makeTempName	../../lib/servCrunx.c	/^static void _makeTempName(struct tempName *tn, char *base, char *suffix)$/;"	f	file:
_makeTempName	../../lib/servcis.c	/^static void _makeTempName(struct tempName *tn, char *base, char *suffix)$/;"	f	file:
_makeTempName	../../lib/servcl.c	/^static void _makeTempName(struct tempName *tn, char *base, char *suffix)$/;"	f	file:
_makeTempName	../../lib/servmsII.c	/^static void _makeTempName(struct tempName *tn, char *base, char *suffix)$/;"	f	file:
_makeTempName	../../lib/servpws.c	/^static void _makeTempName(struct tempName *tn, char *base, char *suffix)$/;"	f	file:
_mgBpr	../../inc/memgfx.h	74;"	d
_mgFindColor	../../lib/memgfx.c	/^Color _mgFindColor(struct memGfx *mg, unsigned char r, unsigned char g, unsigned char b)$/;"	f
_mgPixAdr	../../inc/memgfx.h	77;"	d
_mgPutDot	../../inc/memgfx.h	80;"	d
_speed	../../lib/servCrunx.c	/^static double _speed()$/;"	f	file:
_speed	../../lib/servcis.c	/^static double _speed()$/;"	f	file:
_speed	../../lib/servcl.c	/^static double _speed()$/;"	f	file:
_speed	../../lib/servmsII.c	/^static double _speed()$/;"	f	file:
_speed	../../lib/servpws.c	/^static double _speed()$/;"	f	file:
a	../../inc/diGraph.h	/^    struct dgNode *a;   \/* Node on incoming side. *\/$/;"	m	struct:dgEdge
aBaseInsert	../inc/refAlign.h	/^    int aBaseInsert;	\/* Number of bases inserted in query *\/$/;"	m	struct:refAlign
aNumInsert	../inc/refAlign.h	/^    unsigned aNumInsert;	\/* Number of inserts in aligned seq *\/$/;"	m	struct:refAlign
aaChars	../../lib/dnautil.c	/^AA aaChars[256];	\/* 0 except for value aa characters.  Converts to upper case rest. *\/$/;"	v
aaFilter	../../lib/dnautil.c	/^void aaFilter(char *in, DNA *out)$/;"	f
aaFilteredSize	../../lib/dnautil.c	/^long aaFilteredSize(char *raw)$/;"	f
aaScore2	../../lib/dnautil.c	/^int aaScore2(AA a, AA b)$/;"	f
aaScoreMatch	../../lib/dnautil.c	/^int aaScoreMatch(AA *a, AA *b, int size)$/;"	f
aaSeq	../../inc/dnaseq.h	/^typedef struct dnaSeq aaSeq;	\/* Preferred use if protein. *\/$/;"	t
aaVal	../../lib/dnautil.c	/^int aaVal[256];$/;"	v
abbreviation	../../lib/dnautil.c	/^    char abbreviation[3];$/;"	m	struct:aminoAcidTable
abortArray	../../lib/errabort.c	/^static AbortHandler abortArray[maxAbortHandlers] = {defaultAbort,};$/;"	v	file:
abortIx	../../lib/errabort.c	/^static int abortIx = 0;$/;"	v	file:
acc3	../inc/estPair.h	/^    char *acc3;	\/* 3' EST accession number *\/$/;"	m	struct:estPair
acc5	../inc/estPair.h	/^    char *acc5;	\/* 5' EST accession number *\/$/;"	m	struct:estPair
accCount	../inc/fishClones.h	/^    unsigned accCount;	\/* Number of accessions associated with the clone *\/$/;"	m	struct:fishClones
accNames	../inc/fishClones.h	/^    char **accNames;	\/* Accession associated with clone *\/$/;"	m	struct:fishClones
accsThatMatchKey	../lib/hgFind.c	/^static struct slName *accsThatMatchKey(char *key, char *field)$/;"	f	file:
addSub	../../lib/intExp.c	/^static int addSub()$/;"	f	file:
addToBigBundleList	../../lib/gfClientLib.c	/^static void addToBigBundleList(struct ssBundle **pOneList, struct hash *bunHash, $/;"	f	file:
addToPatSpace	../../lib/patSpace.c	/^static int addToPatSpace(struct patSpace *ps, int bacIx, int seqIx, struct dnaSeq *seq,int startBlock)$/;"	f	file:
added_chars	../../lib/gifcomp.c	/^static unsigned char *added_chars;$/;"	v	file:
advanceToken	../../lib/keys.c	/^static void advanceToken()$/;"	f	file:
agpFrag	../inc/agpFrag.h	/^struct agpFrag$/;"	s
agpFragCommaIn	../lib/agpFrag.c	/^struct agpFrag *agpFragCommaIn(char **pS, struct agpFrag *ret)$/;"	f
agpFragCommaOut	../inc/agpFrag.h	49;"	d
agpFragFree	../lib/agpFrag.c	/^void agpFragFree(struct agpFrag **pEl)$/;"	f
agpFragFreeList	../lib/agpFrag.c	/^void agpFragFreeList(struct agpFrag **pList)$/;"	f
agpFragLoad	../lib/agpFrag.c	/^struct agpFrag *agpFragLoad(char **row)$/;"	f
agpFragOutput	../lib/agpFrag.c	/^void agpFragOutput(struct agpFrag *el, FILE *f, char sep, char lastSep) $/;"	f
agpFragStaticLoad	../lib/agpFrag.c	/^void agpFragStaticLoad(char **row, struct agpFrag *ret)$/;"	f
agpFragTabOut	../inc/agpFrag.h	46;"	d
agpGap	../inc/agpGap.h	/^struct agpGap$/;"	s
agpGapCommaIn	../lib/agpGap.c	/^struct agpGap *agpGapCommaIn(char **pS, struct agpGap *ret)$/;"	f
agpGapCommaOut	../inc/agpGap.h	48;"	d
agpGapFree	../lib/agpGap.c	/^void agpGapFree(struct agpGap **pEl)$/;"	f
agpGapFreeList	../lib/agpGap.c	/^void agpGapFreeList(struct agpGap **pList)$/;"	f
agpGapLoad	../lib/agpGap.c	/^struct agpGap *agpGapLoad(char **row)$/;"	f
agpGapOutput	../lib/agpGap.c	/^void agpGapOutput(struct agpGap *el, FILE *f, char sep, char lastSep) $/;"	f
agpGapStaticLoad	../lib/agpGap.c	/^void agpGapStaticLoad(char **row, struct agpGap *ret)$/;"	f
agpGapTabOut	../inc/agpGap.h	45;"	d
aliCell	../../lib/xensmall.c	/^struct aliCell$/;"	s	file:
aliMatrix	../../lib/xensmall.c	/^struct aliMatrix$/;"	s	file:
aliPair	../../lib/xensmall.c	/^struct aliPair$/;"	s	file:
aliSig	../../inc/sig.h	10;"	d
aliState	../../lib/xensmall.c	/^struct aliState$/;"	s	file:
alias	../inc/stsAlias.h	/^    char *alias;	\/* STS marker name *\/$/;"	m	struct:stsAlias
aliases	../inc/knownMore.h	/^    char *aliases;	\/* Aliases if any.  Comma and space separated list *\/$/;"	m	struct:knownMore
alignB	../inc/genomicDups.h	/^    unsigned alignB;	\/* bases Aligned *\/$/;"	m	struct:genomicDups
alignComponents	../../lib/gfClientLib.c	/^static boolean alignComponents(struct gfRange *combined, struct ssBundle *bun, $/;"	f	file:
alignSeq	../inc/refAlign.h	/^    char *alignSeq;	\/* Aligned sequence, contains - for human seq inserts *\/$/;"	m	struct:refAlign
allCells	../../lib/xensmall.c	/^    struct aliCell *allCells;$/;"	m	struct:aliMatrix
allClear	../../lib/spaceSaver.c	/^static boolean allClear(bool *b, int count)$/;"	f	file:
allLetters	back_hgText.c	/^static boolean allLetters(char* s)$/;"	f	file:
allLetters	hgText.c	/^static boolean allLetters(char* s)$/;"	f	file:
allSame	../lib/qaSeq.c	/^static boolean allSame(BYTE *b, int size, BYTE val)$/;"	f	file:
allScores	../../lib/xensmall.c	/^    int *allScores;$/;"	m	struct:aliMatrix
allignAdd	../../lib/localmem.c	/^    size_t allignAdd;$/;"	m	struct:lm
allignMask	../../lib/localmem.c	/^    size_t allignMask;$/;"	m	struct:lm
alloc	../../inc/memalloc.h	/^    void * (*alloc)(size_t size);$/;"	m	struct:memHandler
allocNt4	../../lib/nt4.c	/^static struct nt4Seq *allocNt4(size_t baseCount, char *name)$/;"	f	file:
allocPatSpaceLists	../../lib/patSpace.c	/^static int allocPatSpaceLists(struct patSpace *ps)$/;"	f	file:
allocated	../../inc/genoFind.h	/^    void *allocated;                     \/* Storage space for all lists. *\/$/;"	m	struct:genoFind
allocated	../../lib/patSpace.c	/^    psBits *allocated;                   \/* Storage space for all lists. *\/$/;"	m	struct:patSpace
alloced	../../lib/keys.c	/^    int alloced;          \/* Number allocated in table. *\/$/;"	m	struct:kvt
allowOneMismatch	../../inc/genoFind.h	/^    bool allowOneMismatch;		 \/* Allow a single mismatch? *\/$/;"	m	struct:genoFind
altColorB	../inc/trackDb.h	/^    unsigned char altColorB;	\/* Light color blue component 0-255 *\/$/;"	m	struct:trackDb
altColorB	../inc/trackTable.h	/^    unsigned char altColorB;	\/* Light color blue component 0-255 *\/$/;"	m	struct:trackTable
altColorG	../inc/trackDb.h	/^    unsigned char altColorG;	\/* Light color green component 0-255 *\/$/;"	m	struct:trackDb
altColorG	../inc/trackTable.h	/^    unsigned char altColorG;	\/* Light color green component 0-255 *\/$/;"	m	struct:trackTable
altColorR	../inc/trackDb.h	/^    unsigned char altColorR;	\/* Light color red component 0-255 *\/$/;"	m	struct:trackDb
altColorR	../inc/trackTable.h	/^    unsigned char altColorR;	\/* Light color red component 0-255 *\/$/;"	m	struct:trackTable
altGraphCommaIn	../lib/ggDbRep.c	/^struct altGraph *altGraphCommaIn(char **pS)$/;"	f
altGraphFree	../lib/ggDbRep.c	/^void altGraphFree(struct altGraph **pEl)$/;"	f
altGraphFreeList	../lib/ggDbRep.c	/^void altGraphFreeList(struct altGraph **pList)$/;"	f
altGraphLoad	../lib/ggDbRep.c	/^struct altGraph *altGraphLoad(char **row)$/;"	f
altGraphOutput	../lib/ggDbRep.c	/^void altGraphOutput(struct altGraph *el, FILE *f, char sep, char lastSep) $/;"	f
alxSig	../../inc/sig.h	13;"	d
aminoAcidTable	../../lib/dnautil.c	/^struct aminoAcidTable aminoAcidTable[] = $/;"	v
aminoAcidTable	../../lib/dnautil.c	/^struct aminoAcidTable$/;"	s	file:
andHits	../lib/hgFind.c	/^static void andHits(struct hash *aHash, struct slName *aList, $/;"	f	file:
arcsForOverlaps	../lib/ggGraph.c	/^static boolean arcsForOverlaps(struct geneGraph *gg)$/;"	f	file:
arcsForSoftEndedExon	../lib/ggGraph.c	/^static boolean arcsForSoftEndedExon(struct geneGraph *gg, int hardStartIx, int softEndIx)$/;"	f	file:
arcsForSoftStartedExon	../lib/ggGraph.c	/^static boolean arcsForSoftStartedExon(struct geneGraph *gg, int softStartIx, int hardEndIx)$/;"	f	file:
asciiArtDumpDa	../lib/ggDump.c	/^void asciiArtDumpDa(struct ggAliInfo *da, int start, int end)$/;"	f
atEndTag	../../inc/xp.h	/^    void (*atEndTag)(void *userData, char *name, char *text);   \/* Got end. *\/$/;"	m	struct:xp
atStartTag	../../inc/xp.h	/^    void (*atStartTag)(void *userData, char *name, char **atts);  \/* Got start and attributes. *\/$/;"	m	struct:xp
atom	../../lib/intExp.c	/^static int atom()$/;"	f	file:
attBuf	../../inc/xp.h	/^    char *attBuf[128];    	        \/* Attribute buffer as regular string. *\/$/;"	m	struct:xp
attDyBuf	../../inc/xp.h	/^    struct dyString *attDyBuf[128];	\/* Attribute buffer as dynamic string. *\/$/;"	m	struct:xp
attatchQaInfo	../lib/qaSeq.c	/^static void attatchQaInfo(struct hash *hash, char *name, UBYTE *q, int size)$/;"	f	file:
attribs	../inc/refAlign.h	/^    char *attribs;	\/* Comma seperated list of attribute names *\/$/;"	m	struct:refAlign
aves	../inc/sage.h	/^    float *aves;	\/* The average count of all tags for each experiment. *\/$/;"	m	struct:sage
b	../../inc/diGraph.h	/^    struct dgNode *b;   \/* Node on outgoing side. *\/$/;"	m	struct:dgEdge
b	../../inc/memgfx.h	/^    unsigned char r, g, b;$/;"	m	struct:rgbColor
bCmpSeqSource	../../lib/genoFind.c	/^static int bCmpSeqSource(const void *vTarget, const void *vRange)$/;"	f	file:
bac	../../inc/hgap.h	/^    struct hgBac *bac;        \/* Bac this is in. *\/$/;"	m	struct:hgContig
bac	../inc/hgap.h	/^    struct hgBac *bac;        \/* Bac this is in. *\/$/;"	m	struct:hgContig
bacIx	../../inc/patSpace.h	/^    int bacIx;                 \/* Index of .fa file where hit occurs. *\/$/;"	m	struct:patClump
bacIx	../../lib/patSpace.c	/^    bits16 bacIx;          \/* Which bac. *\/$/;"	m	struct:blockPos
baf	../../inc/seqOut.h	/^struct baf$/;"	s
bafFlushLine	../../lib/seqOut.c	/^void bafFlushLine(struct baf *baf)$/;"	f
bafInit	../../lib/seqOut.c	/^void bafInit(struct baf *baf, DNA *needle, int nNumOff,  boolean nCountDown,$/;"	f
bafOut	../../lib/seqOut.c	/^void bafOut(struct baf *baf, char n, char h)$/;"	f
bafSetAli	../../lib/seqOut.c	/^void bafSetAli(struct baf *baf, struct ffAli *ali)$/;"	f
bafSetPos	../../lib/seqOut.c	/^void bafSetPos(struct baf *baf, int nStart, int hStart)$/;"	f
bafStartLine	../../lib/seqOut.c	/^void bafStartLine(struct baf *baf)$/;"	f
bafWriteLine	../../lib/seqOut.c	/^void bafWriteLine(struct baf *baf)$/;"	f
bandEnds	../inc/fishClones.h	/^    char **bandEnds;	\/* End FISH band *\/$/;"	m	struct:fishClones
bandList	../lib/hgFind.c	/^static struct cytoBand *bandList = NULL;$/;"	v	file:
bandStarts	../inc/fishClones.h	/^    char **bandStarts;	\/* Start FISH band *\/$/;"	m	struct:fishClones
baseCount	../../inc/cda.h	/^    int baseCount;$/;"	m	struct:cdaAli
baseCount	../../inc/nt4.h	/^    int baseCount;              \/* Number of bases. *\/$/;"	m	struct:nt4Seq
bases	../../inc/nt4.h	/^    bits32 *bases;              \/* Packed bases. *\/$/;"	m	struct:nt4Seq
bbRepMask	../inc/bbRepMask.h	/^struct bbRepMask$/;"	s
bbRepMaskCommaIn	../lib/bbRepMask.c	/^struct bbRepMask *bbRepMaskCommaIn(char **pS, struct bbRepMask *ret)$/;"	f
bbRepMaskCommaOut	../inc/bbRepMask.h	58;"	d
bbRepMaskFree	../lib/bbRepMask.c	/^void bbRepMaskFree(struct bbRepMask **pEl)$/;"	f
bbRepMaskFreeList	../lib/bbRepMask.c	/^void bbRepMaskFreeList(struct bbRepMask **pList)$/;"	f
bbRepMaskLoad	../lib/bbRepMask.c	/^struct bbRepMask *bbRepMaskLoad(char **row)$/;"	f
bbRepMaskLoadAll	../lib/bbRepMask.c	/^struct bbRepMask *bbRepMaskLoadAll(char *fileName) $/;"	f
bbRepMaskOutput	../lib/bbRepMask.c	/^void bbRepMaskOutput(struct bbRepMask *el, FILE *f, char sep, char lastSep) $/;"	f
bbRepMaskStaticLoad	../lib/bbRepMask.c	/^void bbRepMaskStaticLoad(char **row, struct bbRepMask *ret)$/;"	f
bbRepMaskTabOut	../inc/bbRepMask.h	55;"	d
beCount	../inc/fishClones.h	/^    unsigned beCount;	\/* Number of BAC end sequences associated with this clone *\/$/;"	m	struct:fishClones
beNames	../inc/fishClones.h	/^    char **beNames;	\/* Accessions of BAC ends *\/$/;"	m	struct:fishClones
bed	../inc/bed.h	/^struct bed$/;"	s
bedCmp	../lib/bed.c	/^int bedCmp(const void *va, const void *vb)$/;"	f
bedCmpScore	../lib/bed.c	/^int bedCmpScore(const void *va, const void *vb)$/;"	f
bedCommaIn	../lib/bed.c	/^struct bed *bedCommaIn(char **pS, struct bed *ret)$/;"	f
bedCommaOut	../inc/bed.h	55;"	d
bedCommaOutN	../inc/bed.h	108;"	d
bedFree	../lib/bed.c	/^void bedFree(struct bed **pEl)$/;"	f
bedFreeList	../lib/bed.c	/^void bedFreeList(struct bed **pList)$/;"	f
bedLine	../inc/bed.h	/^struct bedLine$/;"	s
bedLineCmp	../lib/bed.c	/^int bedLineCmp(const void *va, const void *vb)$/;"	f
bedLineFree	../lib/bed.c	/^void bedLineFree(struct bedLine **pBl)$/;"	f
bedLineFreeList	../lib/bed.c	/^void bedLineFreeList(struct bedLine **pList)$/;"	f
bedLineNew	../lib/bed.c	/^struct bedLine *bedLineNew(char *line)$/;"	f
bedList	../inc/customTrack.h	/^    struct bed *bedList;	\/* List of beds. *\/$/;"	m	struct:customTrack
bedLoad	../lib/bed.c	/^struct bed *bedLoad(char **row)$/;"	f
bedLoad12	../lib/bed.c	/^struct bed *bedLoad12(char **row)$/;"	f
bedLoad3	../lib/bed.c	/^struct bed *bedLoad3(char **row)$/;"	f
bedLoad5	../lib/bed.c	/^struct bed *bedLoad5(char **row)$/;"	f
bedLoadN	../lib/bed.c	/^struct bed *bedLoadN(char *row[], int wordCount)$/;"	f
bedOutput	../lib/bed.c	/^void bedOutput(struct bed *el, FILE *f, char sep, char lastSep) $/;"	f
bedOutputN	../lib/bed.c	/^void bedOutputN(struct bed *el, int wordCount, FILE *f, char sep, char lastSep)$/;"	f
bedSortFile	../lib/bed.c	/^void bedSortFile(char *inFile, char *outFile)$/;"	f
bedStaticLoad	../lib/bed.c	/^void bedStaticLoad(char **row, struct bed *ret)$/;"	f
bedTabOut	../inc/bed.h	52;"	d
bedTabOutN	../inc/bed.h	105;"	d
beginBand	../inc/stsMap.h	/^    char *beginBand;	\/* Beginning of range of bands on FISH map *\/$/;"	m	struct:stsMap
beginBand	../inc/stsMarker.h	/^    char *beginBand;	\/* Beginning of range of bands on FISH map *\/$/;"	m	struct:stsMarker
bestMerger	../../lib/fuzzyFind.c	/^boolean bestMerger(struct protoGene *list, enum ffStringency stringency,$/;"	f
bestWayIn	../../lib/supStitch.c	/^    struct ssEdge *bestWayIn;   \/* Dynamic programming best edge in. *\/$/;"	m	struct:ssNode
bfBadHeader	../../lib/blastParse.c	/^static void bfBadHeader(struct blastFile *bf)$/;"	f	file:
bfCheckGraph	../../lib/dgRange.c	/^static boolean bfCheckGraph(struct bfGraph *graph)$/;"	f	file:
bfEdge	../../lib/dgRange.c	/^struct bfEdge$/;"	s	file:
bfError	../../lib/blastParse.c	/^static void bfError(struct blastFile *bf, char *message)$/;"	f	file:
bfFind	../../lib/patSpace.c	/^void bfFind(struct patSpace *ps, int block, struct blockPos *ret)$/;"	f
bfGraph	../../lib/dgRange.c	/^struct bfGraph$/;"	s	file:
bfGraphFree	../../lib/dgRange.c	/^static void bfGraphFree(struct bfGraph **pGraph)$/;"	f	file:
bfGraphFromRangeGraph	../../lib/dgRange.c	/^static struct bfGraph *bfGraphFromRangeGraph(struct diGraph *rangeGraph, $/;"	f	file:
bfNeedNextLine	../../lib/blastParse.c	/^static void bfNeedNextLine(struct blastFile *bf, char **retLine, int *retLineSize)$/;"	f	file:
bfRange	../../lib/dgRange.c	/^struct bfRange $/;"	s	file:
bfSyntax	../../lib/blastParse.c	/^static void bfSyntax(struct blastFile *bf)$/;"	f	file:
bfVertex	../../lib/dgRange.c	/^struct bfVertex$/;"	s	file:
bigInsert	../inc/chromInserts.h	/^struct bigInsert$/;"	s
bigInsertBeforeContig	../lib/chromInserts.c	/^struct bigInsert *bigInsertBeforeContig(struct chromInserts *chromInserts, $/;"	f
bin	../inc/bbRepMask.h	/^    unsigned short bin;	\/* Which bin it's in. *\/$/;"	m	struct:bbRepMask
bin	../inc/lfs.h	/^    short bin;	\/* Bin number for browser speedup *\/$/;"	m	struct:lfs
binFirstShift	../lib/hdb.c	544;"	d	file:
binNextShift	../lib/hdb.c	545;"	d	file:
binOffsets	../lib/hdb.c	/^static int binOffsets[] = {512+64+8+1, 64+8+1, 8+1, 1, 0};$/;"	v	file:
bioScoreMatch	../../lib/supStitch.c	/^static int bioScoreMatch(boolean isProt, char *a, char *b, int size)$/;"	f	file:
bioSeq	../../inc/dnaseq.h	/^typedef struct dnaSeq bioSeq;	\/* Preferred use if either DNA or protein. *\/$/;"	t
bitAlloc	../../lib/bits.c	/^Bits *bitAlloc(int bitCount)$/;"	f
bitAnd	../../lib/bits.c	/^void bitAnd(Bits *a, Bits *b, int bitCount)$/;"	f
bitClear	../../lib/bits.c	/^void bitClear(Bits *b, int bitCount)$/;"	f
bitCountRange	../../lib/bits.c	/^int bitCountRange(Bits *b, int startIx, int bitCount)$/;"	f
bitFree	../../lib/bits.c	/^void bitFree(Bits **pB)$/;"	f
bitNot	../../lib/bits.c	/^void bitNot(Bits *a, int bitCount)$/;"	f
bitOr	../../lib/bits.c	/^void bitOr(Bits *a, Bits *b, int bitCount)$/;"	f
bitReadOne	../../lib/bits.c	/^boolean bitReadOne(Bits *b, int bitIx)$/;"	f
bitScore	../../inc/blastParse.h	/^    int bitScore;                       \/* About 2 bits per aligning nucleotide. *\/$/;"	m	struct:blastBlock
bitSetOne	../../lib/bits.c	/^void bitSetOne(Bits *b, int bitIx)$/;"	f
bitSetRange	../../lib/bits.c	/^void bitSetRange(Bits *b, int startIx, int bitCount)$/;"	f
bit_offset	../../lib/gifcomp.c	/^static short bit_offset;$/;"	v	file:
bits16	../../inc/common.h	44;"	d
bits32	../../inc/common.h	43;"	d
bits32PaddedSize	../../lib/nt4.c	/^static size_t bits32PaddedSize(size_t size)$/;"	f	file:
bitsInByte	../../lib/bits.c	/^static int bitsInByte[256];$/;"	v	file:
blastBlock	../../inc/blastParse.h	/^struct blastBlock$/;"	s
blastBlockFree	../../lib/blastParse.c	/^void blastBlockFree(struct blastBlock **pBb)$/;"	f
blastBlockFreeList	../../lib/blastParse.c	/^void blastBlockFreeList(struct blastBlock **pList)$/;"	f
blastFile	../../inc/blastParse.h	/^struct blastFile$/;"	s
blastFileFree	../../lib/blastParse.c	/^void blastFileFree(struct blastFile **pBf)$/;"	f
blastFileFreeList	../../lib/blastParse.c	/^void blastFileFreeList(struct blastFile **pList)$/;"	f
blastFileNextBlock	../../lib/blastParse.c	/^struct blastBlock *blastFileNextBlock(struct blastFile *bf, $/;"	f
blastFileNextGapped	../../lib/blastParse.c	/^struct blastGappedAli *blastFileNextGapped(struct blastFile *bf, struct blastQuery *bq)$/;"	f
blastFileNextQuery	../../lib/blastParse.c	/^struct blastQuery *blastFileNextQuery(struct blastFile *bf)$/;"	f
blastFileOpenVerify	../../lib/blastParse.c	/^struct blastFile *blastFileOpenVerify(char *fileName)$/;"	f
blastFileReadAll	../../lib/blastParse.c	/^struct blastFile *blastFileReadAll(char *fileName)$/;"	f
blastGappedAli	../../inc/blastParse.h	/^struct blastGappedAli$/;"	s
blastGappedAliFree	../../lib/blastParse.c	/^void blastGappedAliFree(struct blastGappedAli **pBga)$/;"	f
blastGappedAliFreeList	../../lib/blastParse.c	/^void blastGappedAliFreeList(struct blastGappedAli **pList)$/;"	f
blastQuery	../../inc/blastParse.h	/^struct blastQuery$/;"	s
blastQueryFree	../../lib/blastParse.c	/^void blastQueryFree(struct blastQuery **pBq)$/;"	f
blastQueryFreeList	../../lib/blastParse.c	/^void blastQueryFreeList(struct blastQuery **pList)$/;"	f
blockCount	../../inc/cda.h	/^    short blockCount;               \/* Number of blocks. *\/$/;"	m	struct:cdaAli
blockCount	../../inc/maDbRep.h	/^    unsigned blockCount;	\/* Number of aligned blocks *\/$/;"	m	struct:mrnaAli
blockCount	../../inc/psl.h	/^    unsigned blockCount;	\/* Number of blocks in alignment *\/$/;"	m	struct:psl
blockCount	../inc/bed.h	/^    unsigned blockCount; \/* Number of blocks. *\/$/;"	m	struct:bed
blockCount	../inc/pslWScore.h	/^    unsigned blockCount;	\/* Number of blocks in alignment *\/$/;"	m	struct:pslWScore
blockIx	back_hgText.c	/^static int blockIx = 0;	\/* Index of block written. *\/$/;"	v	file:
blockIx	getFeatDna.c	/^static int blockIx = 0;	\/* Index of block written. *\/$/;"	v	file:
blockIx	hgText.c	/^static int blockIx = 0;	\/* Index of block written. *\/$/;"	v	file:
blockPos	../../lib/patSpace.c	/^    struct blockPos blockPos[maxBlockCount]; \/* Relates block to sequence. *\/$/;"	m	struct:patSpace
blockPos	../../lib/patSpace.c	/^struct blockPos$/;"	s	file:
blockShift	../../lib/genoFind.c	/^static int blockShift = 10;$/;"	v	file:
blockSize	../../lib/genoFind.c	/^static int blockSize = 1024;$/;"	v	file:
blockSize	../../lib/localmem.c	/^    size_t blockSize;$/;"	m	struct:lm
blockSize	../../lib/patSpace.c	14;"	d	file:
blockSizes	../../inc/maDbRep.h	/^    unsigned *blockSizes;	\/* Size of each block *\/$/;"	m	struct:mrnaAli
blockSizes	../../inc/psl.h	/^    unsigned *blockSizes;	\/* Size of each block *\/$/;"	m	struct:psl
blockSizes	../inc/bed.h	/^    int *blockSizes;     \/* Comma separated list of block sizes.  *\/$/;"	m	struct:bed
blockSizes	../inc/pslWScore.h	/^    unsigned *blockSizes;	\/* Size of each block *\/$/;"	m	struct:pslWScore
blockString	../inc/softPromoter.h	/^    char *blockString;	\/* From original file.  I'm not sure how to interpret. *\/$/;"	m	struct:softPromoter
blocks	../../inc/blastParse.h	/^    struct blastBlock *blocks;          \/* List of aligning blocks (no big gaps). *\/$/;"	m	struct:blastGappedAli
blocks	../../inc/cda.h	/^    struct cdaBlock *blocks;        \/* Dynamically allocated array. *\/$/;"	m	struct:cdaAli
blocks	../../lib/localmem.c	/^    struct lmBlock *blocks;$/;"	m	struct:lm
blocksUsed	../../lib/patSpace.c	/^    int    blocksUsed;			 \/* Number of blocks used, <= maxBlockCount *\/$/;"	m	struct:patSpace
bold	../../inc/seqOut.h	/^    bool bold;		\/* Font in bold. *\/$/;"	m	struct:cfm
bool	../../inc/common.h	36;"	d
boolean	../../inc/common.h	35;"	d
bpId	../inc/mcnBreakpoints.h	/^    char *bpId;	\/* MCN Breakpoint ID *\/$/;"	m	struct:mcnBreakpoints
breakUp	back_hgText.c	/^boolean breakUp = FALSE;	\/* Break up things? *\/$/;"	v
breakUp	getFeatDna.c	/^boolean breakUp = FALSE;	\/* Break up things? *\/$/;"	v
breakUp	hgText.c	/^boolean breakUp = FALSE;	\/* Break up things? *\/$/;"	v
bridge	../inc/agpGap.h	/^    char *bridge;	\/* yes, no, mrna, bacEndPair, etc. *\/$/;"	m	struct:agpGap
browserLength	../../inc/unfin.h	/^    int browserLength; \/* Size including padding. *\/$/;"	m	struct:contigTree
browserOffset	../../inc/unfin.h	/^    int browserOffset; \/* Offset relative to parent for browser, ordered by ensemble, with$/;"	m	struct:contigTree
buf	../../inc/linefile.h	/^    char *buf;			\/* Buffer. *\/$/;"	m	struct:lineFile
buf	../../inc/oldGff.h	/^    char buf[256];$/;"	m	struct:gff
bufOffsetInFile	../../inc/linefile.h	/^    int bufOffsetInFile;	\/* Offset in file of first buffer byte. *\/$/;"	m	struct:lineFile
bufSize	../../inc/dystring.h	/^    int bufSize;		\/* Size of buffer. *\/$/;"	m	struct:dyString
bufSize	../../inc/linefile.h	/^    int bufSize;		\/* Size of buffer. *\/$/;"	m	struct:lineFile
bufSize	../../inc/oldGff.h	/^    int bufSize;$/;"	m	struct:gff
buildDate	../../inc/blastParse.h	/^    char *buildDate;                    \/* Build date of program. *\/$/;"	m	struct:blastFile
builtIns	../lib/trackTable.c	/^static struct trackTable builtIns[] = $/;"	v	file:
byte	../../lib/nib.c	/^    UBYTE byte;		\/* Two nibble's worth of data. *\/$/;"	m	struct:nibStream
byteSwap32	../../lib/common.c	/^bits32 byteSwap32(bits32 a)$/;"	f
bytes	../../lib/gemfont.c	/^    char bytes[2];$/;"	m	union:
bytesInBuf	../../inc/linefile.h	/^    int bytesInBuf;		\/* Bytes read into buffer. *\/$/;"	m	struct:lineFile
bytesInBuf	../../inc/oldGff.h	/^    int bytesInBuf;$/;"	m	struct:gff
c1Ix	../../lib/xensmall.c	/^    c1Ix,$/;"	e	file:	enum:matIx
c1c2MatchTable	../../lib/xensmall.c	/^static int c1c2MatchTable[26*32];$/;"	v	file:
c2Ix	../../lib/xensmall.c	/^    c2Ix,$/;"	e	file:	enum:matIx
c3Ix	../../lib/xensmall.c	/^    c3Ix,$/;"	e	file:	enum:matIx
c3MatchTable	../../lib/xensmall.c	/^static int c3MatchTable[26*32];$/;"	v	file:
caIsCdna	../../lib/crudeali.c	/^static boolean caIsCdna = TRUE;$/;"	v	file:
caTileSize	../../lib/crudeali.c	/^static int caTileSize = 16;$/;"	v	file:
calcCostBenefit	../../lib/xensmall.c	/^static void calcCostBenefit(double gcRatio)$/;"	f	file:
calcGcRatio	../../lib/xensmall.c	/^static double calcGcRatio(DNA *a, int aSize, DNA *b, int bSize)$/;"	f	file:
calcLooseGap	../../lib/fuzzyFind.c	/^static int calcLooseGap(int hGap, int nGap)$/;"	f	file:
calcTightGap	../../lib/fuzzyFind.c	/^static int calcTightGap(int hGap, int nGap)$/;"	f	file:
canAdd	../../lib/fuzzyFind.c	/^boolean canAdd(struct protoGene *a, struct protoGene *b)$/;"	f
caqSig	../../inc/sig.h	56;"	d
carefulAlignAdd	../../lib/memalloc.c	/^static int carefulAlignAdd;     \/* Do aliSize = *(unaliSize+carefulAlignAdd)&carefulAlignMask); *\/$/;"	v	file:
carefulAlignMask	../../lib/memalloc.c	/^static bits32 carefulAlignMask;    \/* to make sure requests are aligned. *\/$/;"	v	file:
carefulAlignSize	../../lib/memalloc.c	/^static int carefulAlignSize;    \/* Alignment size for machine - 8 bytes for DEC alpha, 4 for Sparc. *\/$/;"	v	file:
carefulAlloc	../../lib/memalloc.c	/^static void *carefulAlloc(size_t size)$/;"	f	file:
carefulAlloced	../../lib/memalloc.c	/^static long carefulAlloced;$/;"	v	file:
carefulCheckHeap	../../lib/memalloc.c	/^void carefulCheckHeap()$/;"	f
carefulClose	../../lib/common.c	/^void carefulClose(FILE **pFile)$/;"	f
carefulCountBlocksAllocated	../../lib/memalloc.c	/^int carefulCountBlocksAllocated()$/;"	f
carefulFree	../../lib/memalloc.c	/^static void carefulFree(void *vpt)$/;"	f	file:
carefulMaxToAlloc	../../lib/memalloc.c	/^static long carefulMaxToAlloc;$/;"	v	file:
carefulMemBlock	../../lib/memalloc.c	/^struct carefulMemBlock$/;"	s	file:
carefulMemHandler	../../lib/memalloc.c	/^static struct memHandler carefulMemHandler = $/;"	v	file:
carefulMemInit	../../lib/memalloc.c	/^static void carefulMemInit(long maxToAlloc)$/;"	f	file:
carefulParent	../../lib/memalloc.c	/^static struct memHandler *carefulParent;$/;"	v	file:
caseId	../inc/mcnBreakpoints.h	/^    char *caseId;	\/* MCN Case ID *\/$/;"	m	struct:mcnBreakpoints
cdaAli	../../inc/cda.h	/^struct cdaAli$/;"	s
cdaAliFromFfAli	../../lib/cda.c	/^struct cdaAli *cdaAliFromFfAli(struct ffAli *aliList, $/;"	f
cdaBlock	../../inc/cda.h	/^struct cdaBlock$/;"	s
cdaCloneIsReverse	../../lib/cda.c	/^boolean cdaCloneIsReverse(struct cdaAli *cda)$/;"	f
cdaCloneStrand	../../lib/cda.c	/^char cdaCloneStrand(struct cdaAli *cda)$/;"	f
cdaCoalesceAll	../../lib/cda.c	/^void cdaCoalesceAll(struct cdaAli *ca, boolean updateScore)$/;"	f
cdaCoalesceBlocks	../../lib/cda.c	/^void cdaCoalesceBlocks(struct cdaAli *ca)$/;"	f
cdaCoalesceFast	../../lib/cda.c	/^void cdaCoalesceFast(struct cdaAli *ca)$/;"	f
cdaCoalesceOne	../../lib/cda.c	/^static void cdaCoalesceOne(struct cdaAli *ca, boolean updateScore)$/;"	f	file:
cdaCreate	../../lib/cda.c	/^static FILE *cdaCreate(char *fileName)$/;"	f	file:
cdaDirChar	../../lib/cda.c	/^char cdaDirChar(struct cdaAli *cda, char chromStrand)$/;"	f
cdaFixChromStartEnd	../../lib/cda.c	/^void cdaFixChromStartEnd(struct cdaAli *cda)$/;"	f
cdaFreeAli	../../lib/cda.c	/^void cdaFreeAli(struct cdaAli *ca)$/;"	f
cdaFreeAliList	../../lib/cda.c	/^void cdaFreeAliList(struct cdaAli **pList)$/;"	f
cdaLoadOne	../../lib/cda.c	/^struct cdaAli *cdaLoadOne(FILE *f)$/;"	f
cdaLoadString	../../lib/cda.c	/^char *cdaLoadString(FILE *f)$/;"	f
cdaOpenVerify	../../lib/cda.c	/^FILE *cdaOpenVerify(char *fileName)$/;"	f
cdaRcList	../../lib/cda.c	/^void cdaRcList(struct cdaAli *cdaList, int dnaStart, int baseCount)$/;"	f
cdaRcOne	../../lib/cda.c	/^void cdaRcOne(struct cdaAli *cda, int dnaStart, int baseCount)$/;"	f
cdaReadBlock	../../lib/cda.c	/^void cdaReadBlock(FILE *f, struct cdaBlock *block)$/;"	f
cdaShowAlignmentTrack	../../lib/cda.c	/^void cdaShowAlignmentTrack(struct memGfx *mg, $/;"	f
cdaWrite	../../lib/cda.c	/^void cdaWrite(char *fileName, struct cdaAli *cdaList)$/;"	f
cdaWriteBlock	../../lib/cda.c	/^static void cdaWriteBlock(FILE *f, struct cdaBlock *block)$/;"	f	file:
cdaWriteOne	../../lib/cda.c	/^static void cdaWriteOne(FILE *f, struct cdaAli *ca)$/;"	f	file:
cdaWriteString	../../lib/cda.c	/^static void cdaWriteString(FILE *f, char *s)$/;"	f	file:
cdnaDir	../../lib/wormdna.c	/^static char *cdnaDir = NULL;$/;"	v	file:
cdnaFa	../../lib/wormdna.c	/^static FILE *cdnaFa = NULL;$/;"	v	file:
cdnaSnof	../../lib/wormdna.c	/^static struct snof *cdnaSnof = NULL;$/;"	v	file:
cdoSig	../../inc/sig.h	19;"	d
cdsEnd	../../inc/wormdna.h	/^    int cdsStart, cdsEnd;       \/* Start and stop of coding region within cDNA. *\/$/;"	m	struct:wormCdnaInfo
cdsEnd	../inc/genePred.h	/^    unsigned cdsEnd;	\/* Coding region end *\/$/;"	m	struct:genePred
cdsEndBac	../../inc/hgGene.h	/^    unsigned cdsEndBac;	\/* End of coding region. *\/$/;"	m	struct:hgTranscript
cdsEndBac	../inc/hgGene.h	/^    unsigned cdsEndBac;	\/* End of coding region. *\/$/;"	m	struct:hgTranscript
cdsEndPos	../../inc/hgGene.h	/^    unsigned cdsEndPos;	\/* End of coding region. *\/$/;"	m	struct:hgTranscript
cdsEndPos	../inc/hgGene.h	/^    unsigned cdsEndPos;	\/* End of coding region. *\/$/;"	m	struct:hgTranscript
cdsQualifier	../lib/featureBits.c	/^static boolean cdsQualifier(char *qualifier, char *extra, int *retSize)$/;"	f	file:
cdsStart	../../inc/wormdna.h	/^    int cdsStart, cdsEnd;       \/* Start and stop of coding region within cDNA. *\/$/;"	m	struct:wormCdnaInfo
cdsStart	../inc/genePred.h	/^    unsigned cdsStart;	\/* Coding region start *\/$/;"	m	struct:genePred
cdsStartBac	../../inc/hgGene.h	/^    unsigned cdsStartBac;	\/* Start of coding region. *\/$/;"	m	struct:hgTranscript
cdsStartBac	../inc/hgGene.h	/^    unsigned cdsStartBac;	\/* Start of coding region. *\/$/;"	m	struct:hgTranscript
cdsStartPos	../../inc/hgGene.h	/^    unsigned cdsStartPos;	\/* Start of coding region. *\/$/;"	m	struct:hgTranscript
cdsStartPos	../inc/hgGene.h	/^    unsigned cdsStartPos;	\/* Start of coding region. *\/$/;"	m	struct:hgTranscript
cdsType	../inc/sanger22extra.h	/^    char *cdsType;	\/* Type field from Sanger CDS GFFs *\/$/;"	m	struct:sanger22extra
cells	../../lib/xensmall.c	/^    struct aliCell *cells;$/;"	m	struct:aliState
cellsInRow	../../inc/spaceSaver.h	/^    int cellsInRow;             \/* Number of cells per row. *\/$/;"	m	struct:spaceSaver
cfgOption	../lib/hgConfig.c	/^char* cfgOption(char* name)$/;"	f
cfgOptionDefault	../lib/hgConfig.c	/^char* cfgOptionDefault(char* name, char* def)$/;"	f
cfgOptionsHash	../lib/hgConfig.c	/^static struct hash* cfgOptionsHash = 0;$/;"	v	file:
cfm	../../inc/seqOut.h	/^struct cfm$/;"	s
cfmFree	../../lib/seqOut.c	/^void cfmFree(struct cfm **pCfm)$/;"	f
cfmNew	../../lib/seqOut.c	/^struct cfm *cfmNew(int wordLen, int lineLen, $/;"	f
cfmOut	../../lib/seqOut.c	/^void cfmOut(struct cfm *cfm, char c, int color)$/;"	f
cfmOutExt	../../lib/seqOut.c	/^void cfmOutExt(struct cfm *cfm, char c, int color, boolean underline, boolean bold, boolean italic)$/;"	f
cfmPopFormat	../../lib/seqOut.c	/^static void cfmPopFormat(struct cfm *cfm)$/;"	f	file:
cfmPushFormat	../../lib/seqOut.c	/^static void cfmPushFormat(struct cfm *cfm)$/;"	f	file:
cgh	../inc/cgh.h	/^struct cgh$/;"	s
cghCommaIn	../lib/cgh.c	/^struct cgh *cghCommaIn(char **pS, struct cgh *ret)$/;"	f
cghCommaOut	../inc/cgh.h	53;"	d
cghFree	../lib/cgh.c	/^void cghFree(struct cgh **pEl)$/;"	f
cghFreeList	../lib/cgh.c	/^void cghFreeList(struct cgh **pList)$/;"	f
cghLoad	../lib/cgh.c	/^struct cgh *cghLoad(char **row)$/;"	f
cghLoadAll	../lib/cgh.c	/^struct cgh *cghLoadAll(char *fileName) $/;"	f
cghOutput	../lib/cgh.c	/^void cghOutput(struct cgh *el, FILE *f, char sep, char lastSep) $/;"	f
cghStaticLoad	../lib/cgh.c	/^void cghStaticLoad(char **row, struct cgh *ret)$/;"	f
cghTabOut	../inc/cgh.h	50;"	d
cgiBadVar	../../lib/cheapcgi.c	/^void cgiBadVar(char *varName)$/;"	f
cgiBoolean	../../lib/cheapcgi.c	/^boolean cgiBoolean(char *varName)$/;"	f
cgiChoice	../../inc/cheapcgi.h	/^struct cgiChoice$/;"	s
cgiContinueAllVars	../../lib/cheapcgi.c	/^void cgiContinueAllVars()$/;"	f
cgiContinueHiddenVar	../../lib/cheapcgi.c	/^void cgiContinueHiddenVar(char *varName)$/;"	f
cgiDecode	../../lib/cheapcgi.c	/^void cgiDecode(char *in, char *out, int inLength)$/;"	f
cgiDir	../../lib/portimpl.c	/^char *cgiDir()$/;"	f
cgiDouble	../../lib/cheapcgi.c	/^double cgiDouble(char *varName)$/;"	f
cgiEncode	../../lib/cheapcgi.c	/^char *cgiEncode(char *inString)$/;"	f
cgiFromCommandLine	../../lib/cheapcgi.c	/^boolean cgiFromCommandLine(int *pArgc, char *argv[], boolean preferWeb)$/;"	f
cgiInputSource	../../lib/cheapcgi.c	/^static char *cgiInputSource(char *s)$/;"	f	file:
cgiInt	../../lib/cheapcgi.c	/^int cgiInt(char *varName)$/;"	f
cgiIntExp	../../lib/cheapcgi.c	/^int cgiIntExp(char *varName)$/;"	f
cgiIsOnWeb	../../lib/cheapcgi.c	/^boolean cgiIsOnWeb()$/;"	f
cgiMakeButton	../../lib/cheapcgi.c	/^void cgiMakeButton(char *name, char *value)$/;"	f
cgiMakeCheckBox	../../lib/cheapcgi.c	/^void cgiMakeCheckBox(char *name, boolean checked)$/;"	f
cgiMakeDropList	../../lib/cheapcgi.c	/^void cgiMakeDropList(char *name, char *menu[], int menuSize, char *checked)$/;"	f
cgiMakeHiddenVar	../../lib/cheapcgi.c	/^void cgiMakeHiddenVar(char *varName, char *string)$/;"	f
cgiMakeIntVar	../../lib/cheapcgi.c	/^void cgiMakeIntVar(char *varName, int initialVal, int maxDigits)$/;"	f
cgiMakeRadioButton	../../lib/cheapcgi.c	/^void cgiMakeRadioButton(char *name, char *value, boolean checked)$/;"	f
cgiMakeTextVar	../../lib/cheapcgi.c	/^void cgiMakeTextVar(char *varName, char *initialVal, int charSize)$/;"	f
cgiOneChoice	../../lib/cheapcgi.c	/^int cgiOneChoice(char *varName, struct cgiChoice *choices, int choiceSize)$/;"	f
cgiOptionalDouble	../../lib/cheapcgi.c	/^double cgiOptionalDouble(char *varName, double defaultVal)$/;"	f
cgiOptionalInt	../../lib/cheapcgi.c	/^int cgiOptionalInt(char *varName, int defaultVal)$/;"	f
cgiOptionalString	../../lib/cheapcgi.c	/^char *cgiOptionalString(char *varName)$/;"	f
cgiParseInput	../../lib/cheapcgi.c	/^static void cgiParseInput(char *input, struct hash **retHash, struct cgiVar **retList)$/;"	f	file:
cgiParseMultipart	../../lib/cheapcgi.c	/^static void cgiParseMultipart(char *input, struct hash **retHash, struct cgiVar **retList)$/;"	f	file:
cgiSpoof	../../lib/cheapcgi.c	/^boolean cgiSpoof(int *pArgc, char *argv[])$/;"	f
cgiString	../../lib/cheapcgi.c	/^char *cgiString(char *varName)$/;"	f
cgiStringList	../../lib/cheapcgi.c	/^struct slName *cgiStringList(char *varName)$/;"	f
cgiSuffix	../../lib/portimpl.c	/^char *cgiSuffix()$/;"	f
cgiUrlString	../../lib/cheapcgi.c	/^struct dyString *cgiUrlString()$/;"	f
cgiUsualDouble	../../inc/cheapcgi.h	61;"	d
cgiUsualInt	../../inc/cheapcgi.h	60;"	d
cgiUsualString	../../lib/cheapcgi.c	/^char *cgiUsualString(char *varName, char *usual)$/;"	f
cgiVar	../../inc/cheapcgi.h	/^struct cgiVar$/;"	s
cgiVarExclude	../../lib/cheapcgi.c	/^void cgiVarExclude(char *varName)$/;"	f
cgiVarExists	../../lib/cheapcgi.c	/^boolean cgiVarExists(char *varName)$/;"	f
cgiVarList	../../lib/cheapcgi.c	/^struct cgiVar *cgiVarList() $/;"	f
cgiVarSet	../../lib/cheapcgi.c	/^void cgiVarSet(char *varName, char *val)$/;"	f
charCount	../../inc/seqOut.h	/^    long charCount;     \/* Number of characters written total. *\/$/;"	m	struct:cfm
charForType	../lib/ggDump.c	/^static char charForType(int type)$/;"	f	file:
checkAllPresent	../lib/qaSeq.c	/^static void checkAllPresent(struct qaSeq *qaList)$/;"	f	file:
checkChromName	../lib/customTrack.c	/^static boolean checkChromName(char *word, int lineIx)$/;"	f	file:
checkComplete	../../lib/xenbig.c	/^static void checkComplete(struct dlList *contigList)$/;"	f	file:
checkPcAndTranslateCoordinates	../lib/coordConv.c	/^void checkPcAndTranslateCoordinates(struct coordConvRep *ccr, struct possibleCoord *pc)$/;"	f
checkSizeTypes	../../lib/dnautil.c	/^static void checkSizeTypes()$/;"	f	file:
checkStartEnd	../lib/customTrack.c	/^static boolean checkStartEnd(char *sSize, char *sStart, char *sEnd)$/;"	f	file:
checkWordCount	../../lib/oldGff.c	/^static boolean checkWordCount(struct gff *gff, int wordCount)$/;"	f	file:
children	../../inc/hgap.h	/^    struct hgNest *children;	\/* Children. *\/$/;"	m	struct:hgNest
children	../../inc/unfin.h	/^    struct contigTree *children; \/* Sub-contigs. *\/$/;"	m	struct:contigTree
children	../inc/hgap.h	/^    struct hgNest *children;	\/* Children. *\/$/;"	m	struct:hgNest
chopByChar	../../lib/common.c	/^int chopByChar(char *in, char chopper, char *outArray[], int outSize)$/;"	f
chopByWhite	../../lib/common.c	/^int chopByWhite(char *in, char *outArray[], int outSize)$/;"	f
chopCommas	../../inc/common.h	373;"	d
chopLine	../../inc/common.h	364;"	d
chopString	../../lib/common.c	/^int chopString(char *in, char *sep, char *outArray[], int outSize)$/;"	f
chopSuffix	../../lib/common.c	/^void chopSuffix(char *s)$/;"	f
chopSuffixAt	../../lib/common.c	/^void chopSuffixAt(char *s, char c)$/;"	f
chopTabs	../../inc/common.h	370;"	d
chrom	../../inc/wormdna.h	/^    char *chrom;    \/* One of names returned by *\/$/;"	m	struct:wormFeature
chrom	../inc/agpFrag.h	/^    char *chrom;	\/* which chromosome *\/$/;"	m	struct:agpFrag
chrom	../inc/agpGap.h	/^    char *chrom;	\/* which chromosome *\/$/;"	m	struct:agpGap
chrom	../inc/bed.h	/^    char *chrom;	\/* Human chromosome or FPC contig *\/$/;"	m	struct:bed
chrom	../inc/bed.h	/^    char *chrom;                \/* Chromosome parsed out. *\/$/;"	m	struct:bedLine
chrom	../inc/cgh.h	/^    char *chrom;	\/* Chromosome name *\/$/;"	m	struct:cgh
chrom	../inc/chromInfo.h	/^    char *chrom;	\/* Chromosome name *\/$/;"	m	struct:chromInfo
chrom	../inc/chromInserts.h	/^    char *chrom;		  \/* Chromosome name, allocated in hash. *\/$/;"	m	struct:chromInserts
chrom	../inc/chromInserts.h	/^    struct chromInserts *chrom; \/* Pointer to associated chromosome. *\/$/;"	m	struct:bigInsert
chrom	../inc/clonePos.h	/^    char *chrom;	\/* Chromosome name *\/$/;"	m	struct:clonePos
chrom	../inc/coordConv.h	/^    char *chrom;	\/** Chromosome Name *\/$/;"	m	struct:coordConv
chrom	../inc/cpgIsland.h	/^    char *chrom;	\/* Human chromosome or FPC contig *\/$/;"	m	struct:cpgIsland
chrom	../inc/ctgPos.h	/^    char *chrom;	\/* Chromosome name *\/$/;"	m	struct:ctgPos
chrom	../inc/cytoBand.h	/^    char *chrom;	\/* Human chromosome number *\/$/;"	m	struct:cytoBand
chrom	../inc/est3.h	/^    char *chrom;	\/* Chromosome *\/$/;"	m	struct:est3
chrom	../inc/estPair.h	/^    char *chrom;	\/* Chromosome name *\/$/;"	m	struct:estPair
chrom	../inc/exoFish.h	/^    char *chrom;	\/* Human chromosome or FPC contig *\/$/;"	m	struct:exoFish
chrom	../inc/exprBed.h	/^    char *chrom;	\/* Chromosome name *\/$/;"	m	struct:exprBed
chrom	../inc/fishClones.h	/^    char *chrom;	\/* Human chromosome number *\/$/;"	m	struct:fishClones
chrom	../inc/gcPercent.h	/^    char *chrom;	\/* Human chromosome number *\/$/;"	m	struct:gcPercent
chrom	../inc/genePred.h	/^    char *chrom;	\/* Chromosome name *\/$/;"	m	struct:genePred
chrom	../inc/genomicDups.h	/^    char *chrom;	\/* Human chromosome *\/$/;"	m	struct:genomicDups
chrom	../inc/hgFind.h	/^     char *chrom;		\/* Chromosome.  Not allocated here. *\/$/;"	m	struct:hgPos
chrom	../inc/isochores.h	/^    char *chrom;	\/* Human chromosome number *\/$/;"	m	struct:isochores
chrom	../inc/lfs.h	/^    char *chrom;	\/* Human chromosome or FPC contig *\/$/;"	m	struct:lfs
chrom	../inc/mapSts.h	/^    char *chrom;	\/* Chromosome *\/$/;"	m	struct:mapSts
chrom	../inc/mcnBreakpoints.h	/^    char *chrom;	\/* Human chromosome number *\/$/;"	m	struct:mcnBreakpoints
chrom	../inc/mouseSyn.h	/^    char *chrom;	\/* Name of chromosome *\/$/;"	m	struct:mouseSyn
chrom	../inc/refAlign.h	/^    char *chrom;	\/* Human chromosome or FPC contig *\/$/;"	m	struct:refAlign
chrom	../inc/rnaGene.h	/^    char *chrom;	\/* Chromosome gene is on *\/$/;"	m	struct:rnaGene
chrom	../inc/roughAli.h	/^    char *chrom;	\/* Human chromosome or FPC contig *\/$/;"	m	struct:roughAli
chrom	../inc/simpleRepeat.h	/^    char *chrom;	\/* Human chromosome or FPC contig *\/$/;"	m	struct:simpleRepeat
chrom	../inc/snp.h	/^    char *chrom;	\/* Human chromosome or FPC contig *\/$/;"	m	struct:snp
chrom	../inc/softPromoter.h	/^    char *chrom;	\/* Human chromosome or FPC contig *\/$/;"	m	struct:softPromoter
chrom	../inc/stsMap.h	/^    char *chrom;	\/* Chromosome or 'unknown' *\/$/;"	m	struct:stsMap
chrom	../inc/stsMarker.h	/^    char *chrom;	\/* Chromosome or 'unknown' *\/$/;"	m	struct:stsMarker
chrom	../inc/wabAli.h	/^    char *chrom;	\/* Chromosome (current species). *\/$/;"	m	struct:wabAli
chromEnd	../../inc/cda.h	/^    int chromStart, chromEnd;$/;"	m	struct:cdaAli
chromEnd	../inc/agpFrag.h	/^    unsigned chromEnd;	\/* end position in chromosome *\/$/;"	m	struct:agpFrag
chromEnd	../inc/agpGap.h	/^    unsigned chromEnd;	\/* end position in chromosome *\/$/;"	m	struct:agpGap
chromEnd	../inc/bed.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:bed
chromEnd	../inc/cgh.h	/^    unsigned chromEnd;	\/* position in nucleotides where featrure stops on chromsome *\/$/;"	m	struct:cgh
chromEnd	../inc/clonePos.h	/^    unsigned chromEnd;	\/* End in chromosome *\/$/;"	m	struct:clonePos
chromEnd	../inc/coordConv.h	/^    unsigned chromEnd;	\/** End in Chromosome *\/$/;"	m	struct:coordConv
chromEnd	../inc/cpgIsland.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:cpgIsland
chromEnd	../inc/ctgPos.h	/^    unsigned chromEnd;	\/* End in chromosome *\/$/;"	m	struct:ctgPos
chromEnd	../inc/cytoBand.h	/^    unsigned chromEnd;	\/* End position in genoSeq *\/$/;"	m	struct:cytoBand
chromEnd	../inc/est3.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:est3
chromEnd	../inc/estPair.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:estPair
chromEnd	../inc/exoFish.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:exoFish
chromEnd	../inc/exprBed.h	/^    unsigned chromEnd;	\/* position in nucleotides where featrure stops on chromsome *\/$/;"	m	struct:exprBed
chromEnd	../inc/fishClones.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:fishClones
chromEnd	../inc/gcPercent.h	/^    unsigned chromEnd;	\/* End position in genoSeq *\/$/;"	m	struct:gcPercent
chromEnd	../inc/genomicDups.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:genomicDups
chromEnd	../inc/hgFind.h	/^     int chromEnd;		\/* End position in chromosome. *\/$/;"	m	struct:hgPos
chromEnd	../inc/isochores.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:isochores
chromEnd	../inc/lfs.h	/^    unsigned chromEnd;	\/* End position of clone in chromosome *\/$/;"	m	struct:lfs
chromEnd	../inc/mapSts.h	/^    unsigned chromEnd;	\/* End position in chrom *\/$/;"	m	struct:mapSts
chromEnd	../inc/mcnBreakpoints.h	/^    unsigned chromEnd;	\/* End position in genoSeq *\/$/;"	m	struct:mcnBreakpoints
chromEnd	../inc/mouseSyn.h	/^    unsigned chromEnd;	\/* End in chromosome *\/$/;"	m	struct:mouseSyn
chromEnd	../inc/refAlign.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:refAlign
chromEnd	../inc/rnaGene.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:rnaGene
chromEnd	../inc/roughAli.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:roughAli
chromEnd	../inc/simpleRepeat.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:simpleRepeat
chromEnd	../inc/snp.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:snp
chromEnd	../inc/softPromoter.h	/^    unsigned chromEnd;	\/* End position in chromosome *\/$/;"	m	struct:softPromoter
chromEnd	../inc/stsMap.h	/^    unsigned chromEnd;	\/* End position in chrom *\/$/;"	m	struct:stsMap
chromEnd	../inc/stsMarker.h	/^    unsigned chromEnd;	\/* End position in chrom *\/$/;"	m	struct:stsMarker
chromEnd	../inc/wabAli.h	/^    unsigned chromEnd;	\/* End in chromosome. *\/$/;"	m	struct:wabAli
chromEnd	back_hgText.c	/^int chromEnd = BIGNUM;          \/* End of range. *\/$/;"	v
chromEnd	getFeatDna.c	/^int chromEnd = BIGNUM;          \/* End of range. *\/$/;"	v
chromEnd	hgText.c	/^int chromEnd = BIGNUM;          \/* End of range. *\/$/;"	v
chromFeatDna	back_hgText.c	/^void chromFeatDna(char *table, char *chrom, FILE *f)$/;"	f
chromFeatDna	getFeatDna.c	/^void chromFeatDna(char *table, char *chrom, FILE *f)$/;"	f
chromFeatDna	hgText.c	/^void chromFeatDna(char *table, char *chrom, FILE *f)$/;"	f
chromField	../lib/hdb.c	/^    char chromField[32];		\/* Name of chromosome field. *\/$/;"	m	struct:hTableInfo
chromIds	../../lib/wormdna.c	/^static char *chromIds[] = {"i", "ii", "iii", "iv", "v", "x", "m", };$/;"	v	file:
chromInfo	../inc/chromInfo.h	/^struct chromInfo$/;"	s
chromInfoCommaIn	../lib/chromInfo.c	/^struct chromInfo *chromInfoCommaIn(char **pS, struct chromInfo *ret)$/;"	f
chromInfoCommaOut	../inc/chromInfo.h	43;"	d
chromInfoFree	../lib/chromInfo.c	/^void chromInfoFree(struct chromInfo **pEl)$/;"	f
chromInfoFreeList	../lib/chromInfo.c	/^void chromInfoFreeList(struct chromInfo **pList)$/;"	f
chromInfoLoad	../lib/chromInfo.c	/^struct chromInfo *chromInfoLoad(char **row)$/;"	f
chromInfoOutput	../lib/chromInfo.c	/^void chromInfoOutput(struct chromInfo *el, FILE *f, char sep, char lastSep) $/;"	f
chromInfoStaticLoad	../lib/chromInfo.c	/^void chromInfoStaticLoad(char **row, struct chromInfo *ret)$/;"	f
chromInfoTabOut	../inc/chromInfo.h	40;"	d
chromInserts	../inc/chromInserts.h	/^struct chromInserts$/;"	s
chromInsertsGapSize	../lib/chromInserts.c	/^int chromInsertsGapSize(struct chromInserts *chromInserts, char *contig, boolean isFirst)$/;"	f
chromInsertsRead	../lib/chromInserts.c	/^struct chromInserts *chromInsertsRead(char *fileName, struct hash *insertsHash)$/;"	f
chromIx	../../inc/cda.h	/^    bits16 chromIx;                 \/* On disk as just a UBYTE *\/$/;"	m	struct:cdaAli
chromIx	../../inc/crudeali.h	/^    int chromIx;$/;"	m	struct:crudeAli
chromIx	../../inc/gdf.h	/^    UBYTE chromIx;$/;"	m	struct:gdfGene
chromIx	../../lib/crudeali.c	/^static int chromIx(struct nt4Seq *one, struct nt4Seq **chrome, int chromeCount)$/;"	f	file:
chromNames	../../lib/flydna.c	/^static char *chromNames[] = {"adh"};$/;"	v	file:
chromStart	../../inc/cda.h	/^    int chromStart, chromEnd;$/;"	m	struct:cdaAli
chromStart	../inc/agpFrag.h	/^    unsigned chromStart;	\/* start position in chromosome *\/$/;"	m	struct:agpFrag
chromStart	../inc/agpGap.h	/^    unsigned chromStart;	\/* start position in chromosome *\/$/;"	m	struct:agpGap
chromStart	../inc/bed.h	/^    int chromStart;             \/* Start position (still in rest of line). *\/$/;"	m	struct:bedLine
chromStart	../inc/bed.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:bed
chromStart	../inc/cgh.h	/^    unsigned chromStart;	\/* position in nucleotides where feature starts on chromosome *\/$/;"	m	struct:cgh
chromStart	../inc/clonePos.h	/^    unsigned chromStart;	\/* Start in chromosome *\/$/;"	m	struct:clonePos
chromStart	../inc/coordConv.h	/^    unsigned chromStart;	\/** Start in Chromosome *\/$/;"	m	struct:coordConv
chromStart	../inc/cpgIsland.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:cpgIsland
chromStart	../inc/ctgPos.h	/^    unsigned chromStart;	\/* Start in chromosome *\/$/;"	m	struct:ctgPos
chromStart	../inc/cytoBand.h	/^    unsigned chromStart;	\/* Start position in genoSeq *\/$/;"	m	struct:cytoBand
chromStart	../inc/est3.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:est3
chromStart	../inc/estPair.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:estPair
chromStart	../inc/exoFish.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:exoFish
chromStart	../inc/exprBed.h	/^    unsigned chromStart;	\/* position in nucleotides where feature starts on chromosome *\/$/;"	m	struct:exprBed
chromStart	../inc/fishClones.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:fishClones
chromStart	../inc/gcPercent.h	/^    unsigned chromStart;	\/* Start position in genoSeq *\/$/;"	m	struct:gcPercent
chromStart	../inc/genomicDups.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:genomicDups
chromStart	../inc/hgFind.h	/^     int chromStart;		\/* Start position in chromosome. *\/$/;"	m	struct:hgPos
chromStart	../inc/isochores.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:isochores
chromStart	../inc/lfs.h	/^    unsigned chromStart;	\/* Start position of clone in chromosome *\/$/;"	m	struct:lfs
chromStart	../inc/mapSts.h	/^    unsigned chromStart;	\/* Start position in chrom *\/$/;"	m	struct:mapSts
chromStart	../inc/mcnBreakpoints.h	/^    unsigned chromStart;	\/* Start position in genoSeq *\/$/;"	m	struct:mcnBreakpoints
chromStart	../inc/mouseSyn.h	/^    unsigned chromStart;	\/* Start in chromosome *\/$/;"	m	struct:mouseSyn
chromStart	../inc/refAlign.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:refAlign
chromStart	../inc/rnaGene.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:rnaGene
chromStart	../inc/roughAli.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:roughAli
chromStart	../inc/simpleRepeat.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:simpleRepeat
chromStart	../inc/snp.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:snp
chromStart	../inc/softPromoter.h	/^    unsigned chromStart;	\/* Start position in chromosome *\/$/;"	m	struct:softPromoter
chromStart	../inc/stsMap.h	/^    int chromStart;	\/* Start position in chrom - negative 1 if unpositioned *\/$/;"	m	struct:stsMap
chromStart	../inc/stsMarker.h	/^    int chromStart;	\/* Start position in chrom - negative 1 if unpositioned *\/$/;"	m	struct:stsMarker
chromStart	../inc/wabAli.h	/^    unsigned chromStart;	\/* Start in chromosome. *\/$/;"	m	struct:wabAli
chromStart	back_hgText.c	/^int chromStart = 0;		\/* Start of range to select from. *\/$/;"	v
chromStart	getFeatDna.c	/^int chromStart = 0;		\/* Start of range to select from. *\/$/;"	v
chromStart	hgText.c	/^int chromStart = 0;		\/* Start of range to select from. *\/$/;"	v
chromStarts	../inc/bed.h	/^    int *chromStarts;    \/* Start positions inside chromosome.  Relative to chromStart*\/$/;"	m	struct:bed
cix	../../inc/seqOut.h	/^    int cix;$/;"	m	struct:baf
cleanupAliMatrix	../../lib/xensmall.c	/^static void cleanupAliMatrix(struct aliMatrix *am)$/;"	f	file:
cleanupMem	../../lib/snofmake.c	/^static void cleanupMem()$/;"	f	file:
clear_code	../../lib/gifcomp.c	/^static short clear_code;$/;"	v	file:
clipMaxX	../../inc/memgfx.h	/^    int clipMinX, clipMaxX;$/;"	m	struct:memGfx
clipMaxY	../../inc/memgfx.h	/^    int clipMinY, clipMaxY;$/;"	m	struct:memGfx
clipMinX	../../inc/memgfx.h	/^    int clipMinX, clipMaxX;$/;"	m	struct:memGfx
clipMinY	../../inc/memgfx.h	/^    int clipMinY, clipMaxY;$/;"	m	struct:memGfx
clock1	../../lib/osunix.c	/^long clock1()$/;"	f
clock1	../../lib/oswin9x.c	/^long clock1()$/;"	f
clock1000	../../lib/osunix.c	/^long clock1000()$/;"	f
clock1000	../../lib/oswin9x.c	/^long clock1000()$/;"	f
clone	../inc/cgh.h	/^    char *clone;	\/* Name of clone *\/$/;"	m	struct:cgh
cloneDnaSeq	../../lib/dnaseq.c	/^struct dnaSeq *cloneDnaSeq(struct dnaSeq *orig)$/;"	f
cloneMem	../../lib/common.c	/^void *cloneMem(void *pt, size_t size)$/;"	f
clonePos	../inc/clonePos.h	/^struct clonePos$/;"	s
clonePosCommaIn	../lib/clonePos.c	/^struct clonePos *clonePosCommaIn(char **pS, struct clonePos *ret)$/;"	f
clonePosCommaOut	../inc/clonePos.h	48;"	d
clonePosFree	../lib/clonePos.c	/^void clonePosFree(struct clonePos **pEl)$/;"	f
clonePosFreeList	../lib/clonePos.c	/^void clonePosFreeList(struct clonePos **pList)$/;"	f
clonePosLoad	../lib/clonePos.c	/^struct clonePos *clonePosLoad(char **row)$/;"	f
clonePosOutput	../lib/clonePos.c	/^void clonePosOutput(struct clonePos *el, FILE *f, char sep, char lastSep) $/;"	f
clonePosStaticLoad	../lib/clonePos.c	/^void clonePosStaticLoad(char **row, struct clonePos *ret)$/;"	f
clonePosTabOut	../inc/clonePos.h	45;"	d
cloneString	../../lib/common.c	/^char *cloneString(char *s)$/;"	f
cloneStringZ	../../lib/common.c	/^char *cloneStringZ(char *s, int size)$/;"	f
clumpHits	../../lib/genoFind.c	/^static struct gfClump *clumpHits(struct genoFind *gf, struct gfHit *hitList, int minMatch)$/;"	f	file:
clumpHits	../../lib/patSpace.c	/^static struct patClump *clumpHits(struct patSpace *ps,$/;"	f	file:
clumpNear	../../lib/genoFind.c	/^static struct gfClump *clumpNear(struct genoFind *gf, struct gfClump *oldClumps, int minMatch)$/;"	f	file:
clumpTargetName	../../lib/gfClientLib.c	/^char *clumpTargetName(struct gfClump *clump)$/;"	f
clumpToHspRange	../../lib/gfClientLib.c	/^static void clumpToHspRange(struct gfClump *clump, bioSeq *qSeq, int tileSize,$/;"	f	file:
cluster	../../lib/xenbig.c	/^struct cluster$/;"	s	file:
clusterEncompassedBefore	../../lib/xenbig.c	/^static boolean clusterEncompassedBefore(struct dlList *clusterList, struct cluster *cluster)$/;"	f	file:
clusterRemoveEncompassed	../../lib/xenbig.c	/^static void clusterRemoveEncompassed(struct dlList *clusterList)$/;"	f	file:
clustersFromCdas	../lib/ggCluster.c	/^static struct ggMrnaCluster *clustersFromCdas(struct ggMrnaAli *maList, struct dnaSeq **contigs)$/;"	f	file:
clustersOverlap	../lib/ggCluster.c	/^static boolean clustersOverlap(struct ggMrnaCluster *a, struct ggMrnaCluster *b)$/;"	f	file:
cmbAllocedList	../../lib/memalloc.c	/^struct dlList *cmbAllocedList;$/;"	v
cmbEndCookie	../../lib/memalloc.c	/^char cmbEndCookie[4] = {0x44, 0x33, 0x7F, 0x42};$/;"	v
cmbStartCookie	../../lib/memalloc.c	/^int cmbStartCookie = 0x78753421;$/;"	v
cmpCdaTargetStart	../lib/ggCluster.c	/^static int cmpCdaTargetStart(const void *va, const void *vb)$/;"	f	file:
cmpCluster	../../lib/xenbig.c	/^static int cmpCluster(const void *va, const void *vb)$/;"	f	file:
cmpContigIx	../lib/hgap.c	/^int cmpContigIx(const void *va, const void *vb)$/;"	f
cmpContigQueryStart	../../lib/xenbig.c	/^static int cmpContigQueryStart(const void *va, const void *vb)$/;"	f	file:
cmpExonsTargetFirst	../../lib/crudeali.c	/^static int cmpExonsTargetFirst(const void *va, const void *vb)$/;"	f	file:
cmpFflTrimScore	../../lib/supStitch.c	/^int cmpFflTrimScore(const void *va, const void *vb)$/;"	f
cmpFileInfo	../../lib/osunix.c	/^int cmpFileInfo(const void *va, const void *vb)$/;"	f
cmpGenesByScore	../../lib/crudeali.c	/^static int cmpGenesByScore(const void *va, const void *vb)$/;"	f	file:
cmpHitsTargetFirst	../../lib/crudeali.c	/^static int cmpHitsTargetFirst(const void *va, const void *vb)$/;"	f	file:
cmpOffsetPointers	../../lib/snofmake.c	/^static int cmpOffsetPointers(const void *va, const void *vb)$/;"	f	file:
cmpOnFilePos	../../lib/fof.c	/^static int cmpOnFilePos(const void *va, const void *vb)$/;"	f	file:
cmpOnKey	../../lib/fof.c	/^static int cmpOnKey(const void *va, const void *vb)$/;"	f	file:
cmpPriority	../../lib/diGraph.c	/^static int cmpPriority(const void *va, const void *vb)$/;"	f	file:
cmpProtoNeedle	../../lib/fuzzyFind.c	/^int cmpProtoNeedle(const void *va, const void *vb)$/;"	f
cmpProtoScore	../../lib/fuzzyFind.c	/^int cmpProtoScore(const void *va, const void *vb)$/;"	f
cmpProtoSize	../../lib/fuzzyFind.c	/^int cmpProtoSize(const void *va, const void *vb)$/;"	f
cmpQuerySize	../../lib/genoFind.c	/^static int cmpQuerySize;$/;"	v	file:
cmpRecList	../../lib/fof.c	/^static int cmpRecList(const void *va, const void *vb)$/;"	f	file:
code_ids	../../lib/gifcomp.c	/^static short *code_ids;$/;"	v	file:
code_size	../../lib/gifcomp.c	/^static short code_size;$/;"	v	file:
codingFromHiFiCost	../../lib/xensmall.c	/^static int codingFromHiFiCost;$/;"	v	file:
codingFromInsertCost	../../lib/xensmall.c	/^static int codingFromInsertCost;$/;"	v	file:
codingFromLoFiCost	../../lib/xensmall.c	/^static int codingFromLoFiCost;$/;"	v	file:
codingSmallGapCost	../../lib/xensmall.c	/^static int codingSmallGapCost;$/;"	v	file:
codon	../../lib/dnautil.c	/^    DNA *codon;		\/* Lower case. *\/$/;"	m	struct:codonTable
codonBias	../../inc/codebias.h	/^struct codonBias$/;"	s
codonFindFrame	../../lib/codebias.c	/^int codonFindFrame(DNA *dna, int dnaSize, struct codonBias *forBias)$/;"	f
codonLoadBias	../../lib/codebias.c	/^struct codonBias *codonLoadBias(char *fileName)$/;"	f
codonTable	../../lib/dnautil.c	/^struct codonTable codonTable [64] = $/;"	v
codonTable	../../lib/dnautil.c	/^struct codonTable$/;"	s	file:
codonVal	../../lib/dnautil.c	/^Codon codonVal(DNA *start)$/;"	f
col	../../lib/memgfx.c	/^    struct rgbColor col;	\/* Color RGB. *\/$/;"	m	struct:colHashEl
colHash	../../lib/memgfx.c	/^struct colHash$/;"	s	file:
colHashAdd	../../lib/memgfx.c	/^struct colHashEl *colHashAdd(struct colHash *cHash, unsigned r, unsigned g, unsigned b, int ix)$/;"	f
colHashEl	../../lib/memgfx.c	/^struct colHashEl$/;"	s	file:
colHashFree	../../lib/memgfx.c	/^static void colHashFree(struct colHash **pEl)$/;"	f	file:
colHashFunc	../../lib/memgfx.c	11;"	d	file:
colHashLookup	../../lib/memgfx.c	/^struct colHashEl *colHashLookup(struct colHash *cHash, unsigned r, unsigned g, unsigned b)$/;"	f
colHashNew	../../lib/memgfx.c	/^static struct colHash *colHashNew()$/;"	f	file:
color	../../inc/seqOut.h	/^    int color;          \/* Cache last color here. *\/$/;"	m	struct:cfm
colorB	../inc/trackDb.h	/^    unsigned char colorB;	\/* Color blue component 0-255 *\/$/;"	m	struct:trackDb
colorB	../inc/trackTable.h	/^    unsigned char colorB;	\/* Color blue component 0-255 *\/$/;"	m	struct:trackTable
colorG	../inc/trackDb.h	/^    unsigned char colorG;	\/* Color green component 0-255 *\/$/;"	m	struct:trackDb
colorG	../inc/trackTable.h	/^    unsigned char colorG;	\/* Color green component 0-255 *\/$/;"	m	struct:trackTable
colorHash	../../inc/memgfx.h	/^    struct colHash *colorHash;	\/* Hash for fast look up of color. *\/$/;"	m	struct:memGfx
colorMap	../../inc/memgfx.h	/^    struct rgbColor colorMap[256];$/;"	m	struct:memGfx
colorR	../inc/trackDb.h	/^    unsigned char colorR;	\/* Color red component 0-255 *\/$/;"	m	struct:trackDb
colorR	../inc/trackTable.h	/^    unsigned char colorR;	\/* Color red component 0-255 *\/$/;"	m	struct:trackTable
colorsUsed	../../inc/memgfx.h	/^    int colorsUsed;$/;"	m	struct:memGfx
compareTable	back_hgText.c	/^int compareTable(const void *elem1,  const void *elem2)$/;"	f
compareTable	hgText.c	/^int compareTable(const void *elem1,  const void *elem2)$/;"	f
component	../../inc/diGraph.h	/^    int component;      \/* Connected component number after call to dgConnectedComponents. *\/$/;"	m	struct:dgNode
components	../../lib/gfClientLib.c	/^    struct gfRange *components;	\/* Components of range. *\/$/;"	m	struct:gfRange
compress_data	../../lib/gifcomp.c	/^static short compress_data(int min_code_size)$/;"	f	file:
conn	../../inc/diGraph.h	/^    bool conn;	        \/* Flag for connection algorithms. *\/$/;"	m	struct:dgNode
conn	../lib/jksql.c	/^    MYSQL *conn;			    \/* Connection. *\/$/;"	m	struct:sqlConnection
conn	../lib/jksql.c	/^    struct sqlConnection *conn;		\/* Pointer to connection. *\/$/;"	m	struct:sqlResult
connAlloced	../lib/jksql.c	/^    int connAlloced;                            \/* # open connections. *\/$/;"	m	struct:sqlConnCache
connArray	../lib/jksql.c	/^    struct sqlConnection *connArray[maxConn];   \/* Open connections. *\/$/;"	m	struct:sqlConnCache
connUsed	../lib/jksql.c	/^    boolean connUsed[maxConn];                  \/* Tracks used conns. *\/$/;"	m	struct:sqlConnCache
connectedComponents	../../lib/diGraph.c	/^static int connectedComponents(struct diGraph *dg)$/;"	f	file:
consensusSize	../inc/simpleRepeat.h	/^    unsigned consensusSize;	\/* Length of consensus sequence *\/$/;"	m	struct:simpleRepeat
contig	../../inc/ens.h	/^    struct contigTree *contig;	        \/* Contig within clone this is in. (Not allocated here).*\/$/;"	m	struct:ensExon
contig	../../inc/hgap.h	/^    struct hgContig *contig;    \/* Associated contig if any. *\/$/;"	m	struct:hgNest
contig	../../lib/xenbig.c	/^struct contig$/;"	s	file:
contig	../inc/ctgPos.h	/^    char *contig;	\/* Name of contig *\/$/;"	m	struct:ctgPos
contig	../inc/hgap.h	/^    struct hgContig *contig;    \/* Associated contig if any. *\/$/;"	m	struct:hgNest
contigCount	../../inc/hgap.h	/^    int contigCount;          \/* Number of contigs. *\/$/;"	m	struct:hgBac
contigCount	../inc/hgap.h	/^    int contigCount;          \/* Number of contigs. *\/$/;"	m	struct:hgBac
contigEncompassedBefore	../../lib/xenbig.c	/^static boolean contigEncompassedBefore(struct dlList *contigList, struct contig *contig)$/;"	f	file:
contigPad	../../inc/unfin.h	/^enum {contigPad = 800,};$/;"	e
contigRemoveEncompassed	../../lib/xenbig.c	/^static void contigRemoveEncompassed(struct dlList *contigList)$/;"	f	file:
contigTree	../../inc/unfin.h	/^struct contigTree$/;"	s
contigs	../../inc/hgap.h	/^    struct hgContig *contigs; \/* Contig list. *\/$/;"	m	struct:hgBac
contigs	../../lib/xenbig.c	/^    struct dlList *contigs;$/;"	m	struct:cluster
contigs	../inc/hgap.h	/^    struct hgContig *contigs; \/* Contig list. *\/$/;"	m	struct:hgBac
contigsOverlap	../../lib/xenbig.c	/^static boolean contigsOverlap(struct contig *a, struct contig *b, $/;"	f	file:
cookieHash	../../lib/cheapcgi.c	/^static struct hash *cookieHash = NULL;$/;"	v	file:
cookieList	../../lib/cheapcgi.c	/^static struct cgiVar *cookieList = NULL;$/;"	v	file:
coordConv	../inc/coordConv.h	/^struct coordConv$/;"	s
coordConvCommaIn	../lib/coordConv.c	/^struct coordConv *coordConvCommaIn(char **pS, struct coordConv *ret)$/;"	f
coordConvCommaOut	../inc/coordConv.h	98;"	d
coordConvConvert	../lib/coordConv.c	/^void coordConvConvert(struct coordConvRep *ccr, char *blatHost, char *port, char *nibDir)$/;"	f
coordConvConvertPos	../lib/coordConv.c	/^struct coordConvRep *coordConvConvertPos(char *chr, unsigned chromStart, unsigned chromEnd, char *oldDb, char *newDb,$/;"	f
coordConvFree	../lib/coordConv.c	/^void coordConvFree(struct coordConv **pEl)$/;"	f
coordConvFreeList	../lib/coordConv.c	/^void coordConvFreeList(struct coordConv **pList)$/;"	f
coordConvLoad	../lib/coordConv.c	/^struct coordConv *coordConvLoad(char **row)$/;"	f
coordConvLoadAll	../lib/coordConv.c	/^struct coordConv *coordConvLoadAll(char *fileName) $/;"	f
coordConvOutput	../lib/coordConv.c	/^void coordConvOutput(struct coordConv *el, FILE *f, char sep, char lastSep) $/;"	f
coordConvRep	../inc/coordConv.h	/^struct coordConvRep$/;"	s
coordConvRepFree	../lib/coordConv.c	/^void coordConvRepFree(struct coordConvRep **pEl)$/;"	f
coordConvRepFreeList	../lib/coordConv.c	/^void coordConvRepFreeList(struct coordConvRep **pList)$/;"	f
coordConvStaticLoad	../lib/coordConv.c	/^void coordConvStaticLoad(char **row, struct coordConv *ret)$/;"	f
coordConvTabOut	../inc/coordConv.h	95;"	d
copyExonsIntoGenes	../../lib/crudeali.c	/^static int copyExonsIntoGenes(struct crudeExon *exons, int exonCount, $/;"	f	file:
copyFile	../../lib/obscure.c	/^void copyFile(char *source, char *dest)$/;"	f
copyNum	../inc/simpleRepeat.h	/^    float copyNum;	\/* Mean number of copies of repeat *\/$/;"	m	struct:simpleRepeat
corder	../../inc/unfin.h	/^    int corder;        \/* Order of contig in genBank submission. *\/$/;"	m	struct:contigTree
countAlis	../../lib/cda.c	/^static int countAlis(struct ffAli *ali)$/;"	f	file:
countAlis	../../lib/fuzzyFind.c	/^static int countAlis(struct ffAli *ali)$/;"	f	file:
countChars	../../lib/common.c	/^int countChars(char *s, char c)$/;"	f
countDown	../../inc/seqOut.h	/^    bool countDown;     \/* True if want numbers counting down. *\/$/;"	m	struct:cfm
countGenesBetter	../../lib/crudeali.c	/^static int countGenesBetter(struct crudeGene *genes, int geneCount, int cutoff)$/;"	f	file:
countGoodEnd	../../lib/ffAli.c	/^static int countGoodEnd(struct ffAli *ali)$/;"	f	file:
countGoodStart	../../lib/ffAli.c	/^static int countGoodStart(struct ffAli *ali)$/;"	f	file:
countNonGap	../../lib/xenbig.c	/^static int countNonGap(char *s, int size)$/;"	f	file:
countPatSpace	../../lib/patSpace.c	/^static void countPatSpace(struct patSpace *ps, struct dnaSeq *seq)$/;"	f	file:
countPrettyGood	../../lib/crudeali.c	/^static int countPrettyGood(struct crudeGene *crudeGenes, int geneCount, int fraction, int minScore)$/;"	f	file:
countSame	../../lib/rle.c	/^static int countSame(signed char *s, int max)$/;"	f	file:
countUsed	../lib/ggDbIo.c	/^static int countUsed(struct ggVertex *v, int vCount, int *translator)$/;"	f	file:
cpFile	../../lib/obscure.c	/^void cpFile(int s, int d)$/;"	f
cpgIsland	../inc/cpgIsland.h	/^struct cpgIsland$/;"	s
cpgIslandCommaIn	../lib/cpgIsland.c	/^struct cpgIsland *cpgIslandCommaIn(char **pS, struct cpgIsland *ret)$/;"	f
cpgIslandCommaOut	../inc/cpgIsland.h	49;"	d
cpgIslandFree	../lib/cpgIsland.c	/^void cpgIslandFree(struct cpgIsland **pEl)$/;"	f
cpgIslandFreeList	../lib/cpgIsland.c	/^void cpgIslandFreeList(struct cpgIsland **pList)$/;"	f
cpgIslandLoad	../lib/cpgIsland.c	/^struct cpgIsland *cpgIslandLoad(char **row)$/;"	f
cpgIslandOutput	../lib/cpgIsland.c	/^void cpgIslandOutput(struct cpgIsland *el, FILE *f, char sep, char lastSep) $/;"	f
cpgIslandStaticLoad	../lib/cpgIsland.c	/^void cpgIslandStaticLoad(char **row, struct cpgIsland *ret)$/;"	f
cpgIslandTabOut	../inc/cpgIsland.h	46;"	d
cpgNum	../inc/cpgIsland.h	/^    unsigned cpgNum;	\/* Number of CpGs in island *\/$/;"	m	struct:cpgIsland
crLfChopper	../../lib/common.c	/^char crLfChopper[] = "\\n\\r";$/;"	v
createCoordConvRep	../lib/coordConv.c	/^struct coordConvRep *createCoordConvRep()$/;"	f
crossover	../../lib/supStitch.c	/^    int crossover;               \/* Offset from overlap where crossover occurs. *\/$/;"	m	struct:ssEdge
crudeAli	../../inc/crudeali.h	/^struct crudeAli$/;"	s
crudeAliFind	../../lib/crudeali.c	/^struct crudeAli *crudeAliFind(DNA *probe, int probeSize, $/;"	f
crudeExon	../../lib/crudeali.c	/^struct crudeExon$/;"	s	file:
crudeGene	../../lib/crudeali.c	/^struct crudeGene$/;"	s	file:
crudeHit	../../lib/crudeali.c	/^struct crudeHit$/;"	s	file:
ctgAcc	../inc/mapSts.h	/^    char *ctgAcc;	\/* Contig accession number *\/$/;"	m	struct:mapSts
ctgAcc	../inc/stsMap.h	/^    char *ctgAcc;	\/* Contig accession number *\/$/;"	m	struct:stsMap
ctgAcc	../inc/stsMarker.h	/^    char *ctgAcc;	\/* Contig accession number *\/$/;"	m	struct:stsMarker
ctgAfter	../inc/chromInserts.h	/^    char *ctgAfter;             \/* Contig after insert (or NULL) *\/$/;"	m	struct:bigInsert
ctgBefore	../inc/chromInserts.h	/^    char *ctgBefore;            \/* Contig before insert (or NULL) *\/$/;"	m	struct:bigInsert
ctgPos	../inc/ctgPos.h	/^struct ctgPos$/;"	s
ctgPosCommaIn	../lib/ctgPos.c	/^struct ctgPos *ctgPosCommaIn(char **pS, struct ctgPos *ret)$/;"	f
ctgPosCommaOut	../inc/ctgPos.h	45;"	d
ctgPosFree	../lib/ctgPos.c	/^void ctgPosFree(struct ctgPos **pEl)$/;"	f
ctgPosFreeList	../lib/ctgPos.c	/^void ctgPosFreeList(struct ctgPos **pList)$/;"	f
ctgPosLoad	../lib/ctgPos.c	/^struct ctgPos *ctgPosLoad(char **row)$/;"	f
ctgPosOutput	../lib/ctgPos.c	/^void ctgPosOutput(struct ctgPos *el, FILE *f, char sep, char lastSep) $/;"	f
ctgPosStaticLoad	../lib/ctgPos.c	/^void ctgPosStaticLoad(char **row, struct ctgPos *ret)$/;"	f
ctgPosTabOut	../inc/ctgPos.h	42;"	d
cumScore	../../lib/supStitch.c	/^    int cumScore;               \/* Dynamic programming score of edge. *\/$/;"	m	struct:ssNode
customDefaultRows	../lib/customTrack.c	/^static void customDefaultRows(char *row[13])$/;"	f	file:
customTrack	../inc/customTrack.h	/^struct customTrack$/;"	s
customTrackBed	../lib/customTrack.c	/^struct bed *customTrackBed(char *row[13], int wordCount, struct hash *chromHash, int lineIx)$/;"	f
customTrackLift	../lib/customTrack.c	/^void customTrackLift(struct customTrack *trackList, struct hash *ctgPosHash)$/;"	f
customTrackNeedsLift	../lib/customTrack.c	/^boolean customTrackNeedsLift(struct customTrack *trackList)$/;"	f
customTrackPsl	../lib/customTrack.c	/^struct bed *customTrackPsl(char **row, int wordCount, struct hash *chromHash, int lineIx)$/;"	f
customTrackSave	../lib/customTrack.c	/^void customTrackSave(struct customTrack *trackList, char *fileName)$/;"	f
customTrackTest	../lib/customTrack.c	/^boolean customTrackTest()$/;"	f
customTracksFromFile	../lib/customTrack.c	/^struct customTrack *customTracksFromFile(char *text)$/;"	f
customTracksFromText	../lib/customTrack.c	/^struct customTrack *customTracksFromText(char *text)$/;"	f
customTracksParse	../lib/customTrack.c	/^struct customTrack *customTracksParse(char *text, boolean isFile,$/;"	f
cytoBand	../inc/cytoBand.h	/^struct cytoBand$/;"	s
cytoBandCommaIn	../lib/cytoBand.c	/^struct cytoBand *cytoBandCommaIn(char **pS, struct cytoBand *ret)$/;"	f
cytoBandCommaOut	../inc/cytoBand.h	45;"	d
cytoBandFree	../lib/cytoBand.c	/^void cytoBandFree(struct cytoBand **pEl)$/;"	f
cytoBandFreeList	../lib/cytoBand.c	/^void cytoBandFreeList(struct cytoBand **pList)$/;"	f
cytoBandLoad	../lib/cytoBand.c	/^struct cytoBand *cytoBandLoad(char **row)$/;"	f
cytoBandOutput	../lib/cytoBand.c	/^void cytoBandOutput(struct cytoBand *el, FILE *f, char sep, char lastSep) $/;"	f
cytoBandStaticLoad	../lib/cytoBand.c	/^void cytoBandStaticLoad(char **row, struct cytoBand *ret)$/;"	f
cytoBandTabOut	../inc/cytoBand.h	42;"	d
d1	../lib/coordConv.c	/^    int d1,d2;$/;"	m	struct:possibleCoord
d2	../lib/coordConv.c	/^    int d1,d2;$/;"	m	struct:possibleCoord
dashIsNull	../lib/chromInserts.c	/^static char *dashIsNull(char *s)$/;"	f	file:
data	../../inc/fof.h	/^    void *data;             \/* Data associated with key - filled in by client. *\/$/;"	m	struct:fofBatch
data	../../inc/shaRes.h	/^    void *data;$/;"	m	struct:shaResNode
data	../../inc/supStitch.h	/^    void *data;			\/* User defined data pointer. *\/$/;"	m	struct:ssBundle
dataCount	../../inc/gdf.h	/^    int dataCount;$/;"	m	struct:gdfGene
dataPoints	../../inc/gdf.h	/^    struct gdfDataPoint *dataPoints;$/;"	m	struct:gdfGene
database	../../inc/blastParse.h	/^    char *database;                     \/* Name of database. *\/$/;"	m	struct:blastQuery
database	../inc/hgFind.h	/^    char *database;               \/* Name of database.  Not allocated here. *\/$/;"	m	struct:hgPositions
database	../lib/jksql.c	/^    char *database;				\/* SQL database. *\/$/;"	m	struct:sqlConnCache
database	back_hgText.c	/^char *database = "hg7";		\/* Which database? *\/$/;"	v
database	getFeatDna.c	/^char *database = NULL;		\/* Which database? *\/$/;"	v
database	hgText.c	/^char *database = "hg7";		\/* Which database? *\/$/;"	v
date	../inc/coordConv.h	/^    char *date;	\/** Date of version, i.e. Dec 12, 2000 *\/$/;"	m	struct:coordConv
db	../../inc/ens.h	/^    char *db;			\/* Database used. *\/$/;"	m	struct:ensAnalysis
db	../lib/coordConv.c	/^    char *db;		\/* Database name. *\/$/;"	m	struct:genomeTable
db	../lib/hdb.c	/^    char *db;        \/* database name, i.e. "hg6" *\/$/;"	m	struct:dbConv
dbBaseCount	../../inc/blastParse.h	/^    int dbBaseCount;                    \/* Number of bases in database. *\/$/;"	m	struct:blastQuery
dbConv	../lib/hdb.c	/^struct dbConv$/;"	s	file:
dbSTSid	../inc/stsInfo.h	/^    unsigned dbSTSid;	\/* ID number in UniSTS or dbSTS *\/$/;"	m	struct:stsInfo
dbSeqCount	../../inc/blastParse.h	/^    int dbSeqCount;                     \/* Number of sequences in database. *\/$/;"	m	struct:blastQuery
dbTable	../lib/hdb.c	/^static struct dbConv dbTable[] = {$/;"	v	file:
dbVersion	../../inc/ens.h	/^    char *dbVersion;		\/* Version of database. *\/$/;"	m	struct:ensAnalysis
debugAbort	../../lib/errabort.c	/^static void debugAbort()$/;"	f	file:
decomma	../../lib/blastParse.c	/^void decomma(char *s)$/;"	f
defaultAbort	../../lib/errabort.c	/^static void defaultAbort()$/;"	f	file:
defaultAlloc	../../lib/memalloc.c	/^static void *defaultAlloc(size_t size)$/;"	f	file:
defaultFree	../../lib/memalloc.c	/^static void defaultFree(void *vpt)$/;"	f	file:
defaultGdfCache	../../lib/wormdna.c	/^struct wormGdfCache *defaultGdfCache = &wormSangerGdfCache;$/;"	v
defaultMemHandler	../../lib/memalloc.c	/^static struct memHandler defaultMemHandler = $/;"	v	file:
defaultVaWarn	../../lib/errabort.c	/^static void defaultVaWarn(char *format, va_list args)$/;"	f	file:
description	../../inc/wormdna.h	/^    char *description;          \/* One line description. *\/$/;"	m	struct:wormCdnaInfo
description	../inc/hgFind.h	/^     char *description;		\/* Position description - a sentence or so. *\/$/;"	m	struct:hgPos
description	../inc/sage.h	/^    char *description;	\/* Description from uni-gene fasta headers. *\/$/;"	m	struct:sage
description	../inc/sanger22extra.h	/^    char *description;	\/* Description from Sanger gene GFFs *\/$/;"	m	struct:sanger22extra
description	../inc/softberryHom.h	/^    char *description;	\/* Freeform (except for no tabs) description *\/$/;"	m	struct:softberryHom
desription	../inc/sageExp.h	/^    char *desription;	\/* description of experiment. *\/$/;"	m	struct:sageExp
dgAddNode	../../lib/diGraph.c	/^struct dgNode *dgAddNode(struct diGraph *dg, char *name, void *val)$/;"	f
dgAddNumberedNode	../../lib/diGraph.c	/^struct dgNode *dgAddNumberedNode(struct diGraph *dg, int id, void *val)$/;"	f
dgAddedRangeConsistent	../../lib/dgRange.c	/^boolean dgAddedRangeConsistent(struct diGraph *rangeGraph,$/;"	f
dgClearConnFlags	../../lib/diGraph.c	/^void dgClearConnFlags(struct diGraph *dg)$/;"	f
dgClearVisitFlags	../../lib/diGraph.c	/^void dgClearVisitFlags(struct diGraph *dg)$/;"	f
dgConnect	../../lib/diGraph.c	/^struct dgEdge *dgConnect(struct diGraph *dg, struct dgNode *a, struct dgNode *b)$/;"	f
dgConnectWithVal	../../lib/diGraph.c	/^struct dgEdge *dgConnectWithVal(struct diGraph *dg, struct dgNode *a, $/;"	f
dgConnectedComponents	../../lib/diGraph.c	/^int dgConnectedComponents(struct diGraph *dg)$/;"	f
dgConnectedComponentsWithVals	../../lib/diGraph.c	/^int dgConnectedComponentsWithVals(struct diGraph *dg)$/;"	f
dgConnection	../../inc/diGraph.h	/^struct dgConnection$/;"	s
dgConstrainedPriorityOrder	../../lib/diGraph.c	/^struct dgNodeRef *dgConstrainedPriorityOrder(struct diGraph *dg)$/;"	f
dgDirectlyFollows	../../lib/diGraph.c	/^struct dgEdge *dgDirectlyFollows(struct diGraph *dg, struct dgNode *a, struct dgNode *b)$/;"	f
dgDisconnect	../../lib/diGraph.c	/^void dgDisconnect(struct diGraph *dg, struct dgNode *a, struct dgNode *b)$/;"	f
dgDumpGraph	../../lib/diGraph.c	/^void dgDumpGraph(struct diGraph *dg, FILE *out, boolean hideIsolated)$/;"	f
dgEdge	../../inc/diGraph.h	/^struct dgEdge$/;"	s
dgEdgeRef	../../inc/diGraph.h	/^struct dgEdgeRef$/;"	s
dgFindConnectedToNode	../../lib/diGraph.c	/^struct dgNodeRef *dgFindConnectedToNode(struct diGraph *dg, struct dgNode *a)$/;"	f
dgFindNewConnected	../../lib/diGraph.c	/^struct dgNodeRef *dgFindNewConnected(struct diGraph *dg, struct dgNode *a)$/;"	f
dgFindNewConnectedWithVals	../../lib/diGraph.c	/^struct dgNodeRef *dgFindNewConnectedWithVals(struct diGraph *dg, struct dgNode *a)$/;"	f
dgFindNextConnected	../../lib/diGraph.c	/^struct dgNodeRef *dgFindNextConnected(struct diGraph *dg)$/;"	f
dgFindNextConnectedWithVals	../../lib/diGraph.c	/^struct dgNodeRef *dgFindNextConnectedWithVals(struct diGraph *dg)$/;"	f
dgFindNode	../../lib/diGraph.c	/^struct dgNode *dgFindNode(struct diGraph *dg, char *name)$/;"	f
dgFindNodeInConList	../../lib/diGraph.c	/^struct dgConnection *dgFindNodeInConList(struct dgConnection *conList, struct dgNode *node)$/;"	f
dgFindNodeInRefList	../../lib/diGraph.c	/^struct dgNodeRef *dgFindNodeInRefList(struct dgNodeRef *refList, struct dgNode *node)$/;"	f
dgFindNumberedNode	../../lib/diGraph.c	/^struct dgNode *dgFindNumberedNode(struct diGraph *dg, int id)$/;"	f
dgFindPath	../../lib/diGraph.c	/^struct dgNodeRef *dgFindPath(struct diGraph *dg, struct dgNode *a, struct dgNode *b)$/;"	f
dgFindSubEdges	../../lib/diGraph.c	/^struct dgEdgeRef *dgFindSubEdges(struct diGraph *dg, struct dgNodeRef *subGraph)$/;"	f
dgFree	../../lib/diGraph.c	/^void dgFree(struct diGraph **pGraph)$/;"	f
dgHasCycles	../../lib/diGraph.c	/^boolean dgHasCycles(struct diGraph *dg)$/;"	f
dgNew	../../lib/diGraph.c	/^struct diGraph *dgNew()$/;"	f
dgNextList	../../lib/diGraph.c	/^struct dgConnection *dgNextList(struct dgNode *node)$/;"	f
dgNode	../../inc/diGraph.h	/^struct dgNode$/;"	s
dgNodeFree	../../lib/diGraph.c	/^static void dgNodeFree(struct dgNode **pNode)$/;"	f	file:
dgNodeFreeList	../../lib/diGraph.c	/^static void dgNodeFreeList(struct dgNode **pList)$/;"	f	file:
dgNodeName	../../lib/diGraph.c	/^void *dgNodeName(struct dgNode *node)$/;"	f
dgNodeNumber	../../lib/diGraph.c	/^int dgNodeNumber(struct dgNode *node)$/;"	f
dgNodeRef	../../inc/diGraph.h	/^struct dgNodeRef$/;"	s
dgNodeVal	../../lib/diGraph.c	/^void *dgNodeVal(struct dgNode *node)$/;"	f
dgParentsAllVisited	../../lib/diGraph.c	/^boolean dgParentsAllVisited(struct dgNode *node)$/;"	f
dgPathExists	../../lib/diGraph.c	/^boolean dgPathExists(struct diGraph *dg, struct dgNode *a, struct dgNode *b)$/;"	f
dgPrevList	../../lib/diGraph.c	/^struct dgConnection *dgPrevList(struct dgNode *node)$/;"	f
dgRangesConsistent	../../lib/dgRange.c	/^boolean dgRangesConsistent(struct diGraph *rangeGraph,$/;"	f
dgRemoveFromConList	../../lib/diGraph.c	/^static struct dlNode *dgRemoveFromConList(struct dgConnection **pConList, $/;"	f	file:
dgSwapEdges	../../lib/diGraph.c	/^void dgSwapEdges(struct diGraph *dg, struct dgEdgeRef *erList)$/;"	f
dgTopoSort	../../lib/diGraph.c	/^void dgTopoSort(struct diGraph *dg)$/;"	f
diGraph	../../inc/diGraph.h	/^struct diGraph$/;"	s
diagonal	../../inc/genoFind.h	/^   bits32 diagonal;		\/* tStart + qSize - qStart. *\/$/;"	m	struct:gfHit
differentString	../../inc/common.h	298;"	d
differentWord	../../lib/common.c	/^int differentWord(char *s1, char *s2)$/;"	f
digitsBaseTen	../../lib/obscure.c	/^int digitsBaseTen(int x)$/;"	f
digitsBaseTwo	../../lib/obscure.c	/^int digitsBaseTwo(unsigned long x)$/;"	f
direction	../../inc/cda.h	/^    char direction;                 \/* Direction of cDNA relative to transcription + or - *\/$/;"	m	struct:cdaAli
distance	../../lib/dgRange.c	/^   int distance;           \/* Distance - may be negative. *\/$/;"	m	struct:bfEdge
distance	../inc/mapSts.h	/^    float distance;	\/* Distance from the RH map *\/$/;"	m	struct:mapSts
distance	../inc/stsInfo.h	/^    char *distance;	\/* Length of STS sequence *\/$/;"	m	struct:stsInfo
dlAddAfter	../../lib/dlist.c	/^void dlAddAfter(struct dlNode *anchor, struct dlNode *newNode)$/;"	f
dlAddBefore	../../lib/dlist.c	/^void dlAddBefore(struct dlNode *anchor, struct dlNode *newNode)$/;"	f
dlAddHead	../../lib/dlist.c	/^void dlAddHead(struct dlList *list, struct dlNode *newNode)$/;"	f
dlAddTail	../../lib/dlist.c	/^void dlAddTail(struct dlList *list, struct dlNode *newNode)$/;"	f
dlAddValAfter	../../lib/dlist.c	/^struct dlNode *dlAddValAfter(struct dlNode *anchor, void *val)$/;"	f
dlAddValBefore	../../lib/dlist.c	/^struct dlNode *dlAddValBefore(struct dlNode *anchor, void *val)$/;"	f
dlAddValHead	../../lib/dlist.c	/^struct dlNode *dlAddValHead(struct dlList *list, void *val)$/;"	f
dlAddValTail	../../lib/dlist.c	/^struct dlNode *dlAddValTail(struct dlList *list, void *val)$/;"	f
dlCat	../../lib/dlist.c	/^void dlCat(struct dlList *a, struct dlList *b)$/;"	f
dlCount	../../lib/dlist.c	/^int dlCount(struct dlList *list)$/;"	f
dlEmpty	../../lib/dlist.c	/^boolean dlEmpty(struct dlList *list)$/;"	f
dlEnd	../../inc/dlist.h	31;"	d
dlInsertBetween	../../lib/dlist.c	/^void dlInsertBetween(struct dlNode *before, struct dlNode *after, struct dlNode *newNode)$/;"	f
dlList	../../inc/dlist.h	/^struct dlList$/;"	s
dlListToSlList	../../lib/dlist.c	/^void *dlListToSlList(struct dlList *dList)$/;"	f
dlNode	../../inc/dlist.h	/^struct dlNode$/;"	s
dlPopHead	../../lib/dlist.c	/^struct dlNode *dlPopHead(struct dlList *list)$/;"	f
dlPopTail	../../lib/dlist.c	/^struct dlNode *dlPopTail(struct dlList *list)$/;"	f
dlRemove	../../lib/dlist.c	/^void dlRemove(struct dlNode *node)$/;"	f
dlRemoveHead	../../lib/dlist.c	/^void dlRemoveHead(struct dlList *list)$/;"	f
dlRemoveTail	../../lib/dlist.c	/^void dlRemoveTail(struct dlList *list)$/;"	f
dlSort	../../lib/dlist.c	/^void dlSort(struct dlList *list, int (*compare )(const void *elem1,  const void *elem2))$/;"	f
dlStart	../../inc/dlist.h	34;"	d
dlValInList	../../lib/dlist.c	/^struct dlNode *dlValInList(struct dlList *list, void *val)$/;"	f
dna	../../inc/dnaseq.h	/^    DNA *dna;             \/* Sequence base by base. *\/$/;"	m	struct:dnaSeq
dna	../../inc/oldGff.h	/^    DNA *dna;$/;"	m	struct:gffGene
dna	../../inc/oldGff.h	/^    char *dna;$/;"	m	struct:gff
dna	../inc/qaSeq.h	/^    DNA *dna;             \/* Sequence base by base. *\/$/;"	m	struct:qaSeq
dnaBaseHistogram	../../lib/dnautil.c	/^void dnaBaseHistogram(DNA *dna, int dnaSize, int histogram[4])$/;"	f
dnaCase	../../inc/dnautil.h	/^enum dnaCase {dnaUpper,dnaLower,dnaMixed,};$/;"	g
dnaFilter	../../lib/dnautil.c	/^void dnaFilter(char *in, DNA *out)$/;"	f
dnaFilterToN	../../lib/dnautil.c	/^void dnaFilterToN(char *in, DNA *out)$/;"	f
dnaFilteredSize	../../lib/dnautil.c	/^long dnaFilteredSize(char *rawDna)$/;"	f
dnaLower	../../inc/dnautil.h	/^enum dnaCase {dnaUpper,dnaLower,dnaMixed,};$/;"	e	enum:dnaCase
dnaMixed	../../inc/dnautil.h	/^enum dnaCase {dnaUpper,dnaLower,dnaMixed,};$/;"	e	enum:dnaCase
dnaMixedCaseFilter	../../lib/dnautil.c	/^void dnaMixedCaseFilter(char *in, DNA *out)$/;"	f
dnaName	../../inc/oldGff.h	/^    char dnaName[128];$/;"	m	struct:gff
dnaOrAaFilter	../../lib/dnautil.c	/^void dnaOrAaFilter(char *in, char *out, char filter[256])$/;"	f
dnaOrAaFilteredSize	../../lib/dnautil.c	/^long dnaOrAaFilteredSize(char *raw, char filter[256])$/;"	f
dnaOrAaScoreMatch	../../lib/dnautil.c	/^int  dnaOrAaScoreMatch(char *a, char *b, int size, int matchScore, int mismatchScore, $/;"	f
dnaScore2	../../lib/dnautil.c	/^int dnaScore2(DNA a, DNA b)$/;"	f
dnaScoreMatch	../../lib/dnautil.c	/^int dnaScoreMatch(DNA *a, DNA *b, int size)$/;"	f
dnaSeq	../../inc/dnaseq.h	/^struct dnaSeq$/;"	s
dnaSize	../../inc/oldGff.h	/^    long dnaSize;$/;"	m	struct:gff
dnaSize	../../inc/oldGff.h	/^    long dnaSize;$/;"	m	struct:gffGene
dnaTranslateSome	../../lib/dnautil.c	/^void dnaTranslateSome(DNA *dna, char *out, int outSize)$/;"	f
dnaUpper	../../inc/dnautil.h	/^enum dnaCase {dnaUpper,dnaLower,dnaMixed,};$/;"	e	enum:dnaCase
dnaUtilOpen	../../lib/dnautil.c	/^void dnaUtilOpen()$/;"	f
doDnaAlignment	../lib/coordConv.c	/^struct psl* doDnaAlignment(struct dnaSeq *seq, char *db, char *blatHost, char *port, char *nibDir) {$/;"	f
downPsl	../inc/coordConv.h	/^    struct psl *midPsl,*upPsl,*downPsl; \/** alignments for each of the dnaSeqs *\/$/;"	m	struct:coordConvRep
downPsl	../lib/coordConv.c	/^    struct psl *midPsl,*upPsl,*downPsl;$/;"	m	struct:possibleCoord
downSeq	../inc/coordConv.h	/^    struct dnaSeq *midSeq,*upSeq,*downSeq; \/** 3 in order from 5' to 3' *\/$/;"	m	struct:coordConvRep
downStart	../inc/coordConv.h	/^    unsigned midStart,upStart,downStart; \/** starting position of dnaSeqs in old chrom *\/$/;"	m	struct:coordConvRep
dropNotBest	../lib/coordConv.c	/^void dropNotBest(struct psl **pslList)$/;"	f
dumpBuns	../../lib/supStitch.c	/^void dumpBuns(struct ssBundle *bunList)$/;"	f
dumpExp	../../lib/keys.c	/^static void dumpExp(struct kvt *kvt, struct exp *exp)$/;"	f	file:
dumpFf	../../lib/supStitch.c	/^void dumpFf(struct ffAli *left, DNA *needle, DNA *hay)$/;"	f
dumpGg	../lib/ggDump.c	/^void dumpGg(struct geneGraph *gg)$/;"	f
dumpGgAliInfo	../lib/ggDump.c	/^void dumpGgAliInfo(struct ggAliInfo *da, int start, int end)$/;"	f
dumpMc	../lib/ggDump.c	/^void dumpMc(struct ggMrnaCluster *mc)$/;"	f
dumpNearCrossover	../../lib/supStitch.c	/^void dumpNearCrossover(char *what, DNA *n, DNA *h, int size)$/;"	f
dupeSegmentList	../../lib/oldGff.c	/^static struct gffSegment *dupeSegmentList(struct gffSegment *oldList,$/;"	f	file:
dyString	../../inc/dystring.h	/^struct dyString$/;"	s
dyStringAppend	../../lib/dystring.c	/^void dyStringAppend(struct dyString *ds, char *string)$/;"	f
dyStringAppendC	../../lib/dystring.c	/^char dyStringAppendC(struct dyString *ds, char c)$/;"	f
dyStringAppendN	../../lib/dystring.c	/^void dyStringAppendN(struct dyString *ds, char *string, int stringSize)$/;"	f
dyStringClear	../../inc/dystring.h	45;"	d
dyStringExpandBuf	../../lib/dystring.c	/^static void dyStringExpandBuf(struct dyString *ds, int newSize)$/;"	f	file:
dyStringFree	../../inc/dystring.h	28;"	d
dyStringNew	../../inc/dystring.h	23;"	d
dyStringPrintf	../../lib/dystring.c	/^void dyStringPrintf(struct dyString *ds, char *format, ...)$/;"	f
dyStringVaPrintf	../../lib/dystring.c	/^void dyStringVaPrintf(struct dyString *ds, char *format, va_list args)$/;"	f
eVal	../../inc/blastParse.h	/^    double eVal;                        \/* Expected number of alignments in database. *\/$/;"	m	struct:blastBlock
eatLf	../../lib/xa.c	/^static void eatLf(FILE *f)$/;"	f	file:
eatThroughLf	../../lib/xa.c	/^static void eatThroughLf(FILE *f)$/;"	f	file:
edge	../../inc/diGraph.h	/^    struct dgEdge *edge;        \/* Reference to edge. *\/$/;"	m	struct:dgEdgeRef
edgeCount	../../lib/dgRange.c	/^    int edgeCount;               \/* Number of edges. *\/$/;"	m	struct:bfGraph
edgeCount	../../lib/supStitch.c	/^    int edgeCount;              \/* Number of edges. *\/$/;"	m	struct:ssGraph
edgeList	../../inc/diGraph.h	/^    struct dlList *edgeList;$/;"	m	struct:diGraph
edgeMatrix	../../inc/geneGraph.h	/^    bool **edgeMatrix;	                \/* Adjacency matrix for directed graph. *\/$/;"	m	struct:geneGraph
edgeMatrix	../inc/geneGraph.h	/^    bool **edgeMatrix;	                \/* Adjacency matrix for directed graph. *\/$/;"	m	struct:geneGraph
edgeOnList	../../inc/diGraph.h	/^    struct dlNode *edgeOnList;  \/* Associated edge. *\/$/;"	m	struct:dgConnection
edges	../../lib/dgRange.c	/^    struct bfEdge *edges;        \/* Array of edges. *\/$/;"	m	struct:bfGraph
edges	../../lib/supStitch.c	/^    struct ssEdge *edges;       \/* Array of edges. *\/$/;"	m	struct:ssGraph
elBuf	../../lib/memgfx.c	/^    struct colHashEl elBuf[256];	\/* Buffer of elements. *\/$/;"	m	struct:colHash
elFromRec	../../lib/fof.c	/^static void elFromRec(struct fof *fof, struct fofRecord *rec, struct fofBatch *el)$/;"	f	file:
elName	../../inc/xap.h	/^   char *elName;	\/* Name of tag. *\/$/;"	m	struct:xapStack
emitLetter	../../lib/xensmall.c	/^    char emitLetter;$/;"	m	struct:aliState
end	../../inc/crudeali.h	/^    int start, end;$/;"	m	struct:crudeAli
end	../../inc/genoFind.h	/^    bits32 start,end;	\/* Position within merged sequence. *\/$/;"	m	struct:gfSeqSource
end	../../inc/gff.h	/^    int end;        \/* End of feature in sequence. End is not included. *\/$/;"	m	struct:gffGroup
end	../../inc/gff.h	/^    int end;        \/* End of feature in sequence. End is not included. *\/$/;"	m	struct:gffLine
end	../../inc/oldGff.h	/^    long start, end;$/;"	m	struct:gffGene
end	../../inc/oldGff.h	/^    long start, end;$/;"	m	struct:gffSegment
end	../../inc/trans3.h	/^     int start,end;			\/* Start\/end of sequence in a larger context. *\/$/;"	m	struct:trans3
end	../../inc/wormdna.h	/^    int start, end;$/;"	m	struct:wormFeature
end	../../lib/localmem.c	/^    char *end;$/;"	m	struct:lmBlock
end	../../lib/oldGff.c	/^    long start, end;   \/* Offsets into DNA array, end inclusive *\/$/;"	m	struct:gffSegLine
end	../inc/featureBits.h	/^    int start, end;	\/* Start\/end half open zero based. *\/$/;"	m	struct:featureBits
end	../inc/glDbRep.h	/^    unsigned end;	\/* End position in golden path *\/$/;"	m	struct:gl
end3	../inc/estPair.h	/^    unsigned end3;	\/* End position of 3' EST in chromosome *\/$/;"	m	struct:estPair
end5	../inc/estPair.h	/^    unsigned end5;	\/* End position of 5' EST in chromosome *\/$/;"	m	struct:estPair
endBac	../../inc/geneGraph.h	/^    HGID endBac;                     \/* Which contig ends in. *\/$/;"	m	struct:geneGraph
endBac	../../inc/hgGene.h	/^    unsigned endBac;	\/* Bac this ends in *\/$/;"	m	struct:hgGene
endBac	../../inc/hgGene.h	/^    unsigned endBac;	\/* Bac this ends in *\/$/;"	m	struct:hgTranscript
endBac	../inc/geneGraph.h	/^    HGID endBac;                     \/* Which contig ends in. *\/$/;"	m	struct:geneGraph
endBac	../inc/hgGene.h	/^    unsigned endBac;	\/* Bac this ends in *\/$/;"	m	struct:hgGene
endBac	../inc/hgGene.h	/^    unsigned endBac;	\/* Bac this ends in *\/$/;"	m	struct:hgTranscript
endBand	../inc/stsMap.h	/^    char *endBand;	\/* End of range of bands on FISH map *\/$/;"	m	struct:stsMap
endBand	../inc/stsMarker.h	/^    char *endBand;	\/* End of range of bands on FISH map *\/$/;"	m	struct:stsMarker
endCells	../../lib/xensmall.c	/^    struct aliCell *endCells;$/;"	m	struct:aliState
endExon	../../inc/ens.h	/^    struct ensExon *endExon;            \/* Reference to last coding exon. *\/$/;"	m	struct:ensTranscript
endField	../lib/hdb.c	/^    char endField[32];		\/* Name of chromosome end field. *\/$/;"	m	struct:hTableInfo
endGood	../../inc/cda.h	/^    UBYTE startGood, endGood;   \/* Number of bases matching perfectly on end *\/$/;"	m	struct:cdaBlock
endGood	../../inc/fuzzyFind.h	/^    int startGood, endGood; \/* Number that match perfectly on ends. *\/$/;"	m	struct:ffAli
endGoods	../../inc/maDbRep.h	/^    unsigned short *endGoods;	\/* Number of perfect bases at end of block *\/$/;"	m	struct:mrnaAli
endHandler	../../inc/xap.h	/^   void (*endHandler)(struct xap *xap, char *name);	\/* Handler for end tags. *\/$/;"	m	struct:xap
endIx	../../inc/snof.h	/^    int endIx;$/;"	m	struct:snof
endIx	../../lib/fof.c	/^    int endIx;                   \/* Last index. *\/$/;"	m	struct:fof
endLists	../../inc/genoFind.h	/^    bits16 **endLists;                   \/* A more complex list for each N-mer.$/;"	m	struct:genoFind
endPhase	../../inc/ens.h	/^    char endPhase;                      \/* Codon position of last base. *\/$/;"	m	struct:ensExon
endPos	../../inc/geneGraph.h	/^    int endPos;                         \/* Where in contig it ends. *\/$/;"	m	struct:geneGraph
endPos	../../inc/hgGene.h	/^    unsigned endPos;	\/* Position withing bac where ends *\/$/;"	m	struct:hgGene
endPos	../../inc/hgGene.h	/^    unsigned endPos;	\/* Position withing bac where ends *\/$/;"	m	struct:hgTranscript
endPos	../inc/geneGraph.h	/^    int endPos;                         \/* Where in contig it ends. *\/$/;"	m	struct:geneGraph
endPos	../inc/hgGene.h	/^    unsigned endPos;	\/* Position withing bac where ends *\/$/;"	m	struct:hgGene
endPos	../inc/hgGene.h	/^    unsigned endPos;	\/* Position withing bac where ends *\/$/;"	m	struct:hgTranscript
endSeq	../../inc/ens.h	/^    int startSeq, endSeq;               \/* Start, end of coding region. *\/$/;"	m	struct:ensTranscript
endStack	../../inc/xap.h	/^   struct xapStack *endStack;			\/* End of stack. *\/$/;"	m	struct:xap
endState	../../lib/xensmall.c	644;"	d	file:
endTag	../../inc/xp.h	/^    struct dyString *endTag;		\/* Buffer for an end tag. *\/$/;"	m	struct:xp
endUpdateId	../lib/hgRelate.c	/^static HGID endUpdateId;	\/* One past last ID in this update. *\/$/;"	v	file:
endUpdateId	../lib/hgap.c	/^static HGID endUpdateId;	\/* One past last ID in this update. *\/$/;"	v	file:
endsWith	../../lib/common.c	/^boolean endsWith(char *string, char *end)$/;"	f
ensAnalysis	../../inc/ens.h	/^struct ensAnalysis$/;"	s
ensExon	../../inc/ens.h	/^struct ensExon$/;"	s
ensFeature	../../inc/ens.h	/^struct ensFeature$/;"	s
ensGene	../../inc/ens.h	/^struct ensGene$/;"	s
ensTranscript	../../inc/ens.h	/^struct ensTranscript$/;"	s
entropy	../inc/simpleRepeat.h	/^    float entropy;	\/* Entropy *\/$/;"	m	struct:simpleRepeat
eof_code	../../lib/gifcomp.c	/^static short eof_code;$/;"	v	file:
eraseTrailingSpaces	../../lib/common.c	/^void eraseTrailingSpaces(char *s)$/;"	f
eraseWhiteSpace	../../lib/common.c	/^void eraseWhiteSpace(char *s)$/;"	f
errAbort	../../lib/errabort.c	/^void errAbort(char *format, ...)$/;"	f
errRecover	../../lib/snofmake.c	/^static jmp_buf errRecover;$/;"	v	file:
errfile	../../lib/oldGff.c	14;"	d	file:
errnoAbort	../../lib/errabort.c	/^void errnoAbort(char *format, ...)$/;"	f
est3	../inc/est3.h	/^struct est3$/;"	s
est3CommaIn	../lib/est3.c	/^struct est3 *est3CommaIn(char **pS, struct est3 *ret)$/;"	f
est3CommaOut	../inc/est3.h	45;"	d
est3Free	../lib/est3.c	/^void est3Free(struct est3 **pEl)$/;"	f
est3FreeList	../lib/est3.c	/^void est3FreeList(struct est3 **pList)$/;"	f
est3Load	../lib/est3.c	/^struct est3 *est3Load(char **row)$/;"	f
est3Output	../lib/est3.c	/^void est3Output(struct est3 *el, FILE *f, char sep, char lastSep) $/;"	f
est3StaticLoad	../lib/est3.c	/^void est3StaticLoad(char **row, struct est3 *ret)$/;"	f
est3TabOut	../inc/est3.h	42;"	d
estCount	../inc/est3.h	/^    unsigned estCount;	\/* Number of ESTs supporting this *\/$/;"	m	struct:est3
estPair	../inc/estPair.h	/^struct estPair$/;"	s
estPairCommaIn	../lib/estPair.c	/^struct estPair *estPairCommaIn(char **pS, struct estPair *ret)$/;"	f
estPairCommaOut	../inc/estPair.h	54;"	d
estPairFree	../lib/estPair.c	/^void estPairFree(struct estPair **pEl)$/;"	f
estPairFreeList	../lib/estPair.c	/^void estPairFreeList(struct estPair **pList)$/;"	f
estPairLoad	../lib/estPair.c	/^struct estPair *estPairLoad(char **row)$/;"	f
estPairLoadAll	../lib/estPair.c	/^struct estPair *estPairLoadAll(char *fileName) $/;"	f
estPairOutput	../lib/estPair.c	/^void estPairOutput(struct estPair *el, FILE *f, char sep, char lastSep) $/;"	f
estPairStaticLoad	../lib/estPair.c	/^void estPairStaticLoad(char **row, struct estPair *ret)$/;"	f
estPairTabOut	../inc/estPair.h	51;"	d
evalExactAli	../../lib/fuzzyFind.c	/^double evalExactAli(struct ffAli *ali, DNA *ns, DNA *ne, DNA *hs, DNA *he, int numTiles,$/;"	f
evalToDouble	../../lib/blastParse.c	/^double evalToDouble(char *s)$/;"	f
evaluateAlignments	../lib/coordConv.c	/^void evaluateAlignments(struct coordConvRep *ccr) $/;"	f
exactFind	../../lib/fuzzyFind.c	/^static boolean exactFind(DNA *needle, int nSize, DNA *hay, int hSize, int *hOffset)$/;"	f	file:
execute	back_hgText.c	/^void execute()$/;"	f
execute	hgText.c	/^void execute()$/;"	f
existsAndEqual	back_hgText.c	/^static boolean existsAndEqual(char* var, char* value)$/;"	f	file:
existsAndEqual	hgText.c	/^static boolean existsAndEqual(char* var, char* value)$/;"	f	file:
exoFish	../inc/exoFish.h	/^struct exoFish$/;"	s
exoFishCommaIn	../lib/exoFish.c	/^struct exoFish *exoFishCommaIn(char **pS, struct exoFish *ret)$/;"	f
exoFishCommaOut	../inc/exoFish.h	45;"	d
exoFishFree	../lib/exoFish.c	/^void exoFishFree(struct exoFish **pEl)$/;"	f
exoFishFreeList	../lib/exoFish.c	/^void exoFishFreeList(struct exoFish **pList)$/;"	f
exoFishLoad	../lib/exoFish.c	/^struct exoFish *exoFishLoad(char **row)$/;"	f
exoFishOutput	../lib/exoFish.c	/^void exoFishOutput(struct exoFish *el, FILE *f, char sep, char lastSep) $/;"	f
exoFishStaticLoad	../lib/exoFish.c	/^void exoFishStaticLoad(char **row, struct exoFish *ret)$/;"	f
exoFishTabOut	../inc/exoFish.h	42;"	d
exonCount	../../inc/hgGene.h	/^    unsigned exonCount;	\/* Number of exons *\/$/;"	m	struct:hgTranscript
exonCount	../inc/genePred.h	/^    unsigned exonCount;	\/* Number of exons *\/$/;"	m	struct:genePred
exonCount	../inc/hgGene.h	/^    unsigned exonCount;	\/* Number of exons *\/$/;"	m	struct:hgTranscript
exonEnclosed	../lib/ggGraph.c	/^static boolean exonEnclosed(struct geneGraph *gg, int startIx, int endIx)$/;"	f	file:
exonEndBacs	../../inc/hgGene.h	/^    unsigned *exonEndBacs;	\/* Exon start positions *\/$/;"	m	struct:hgTranscript
exonEndBacs	../inc/hgGene.h	/^    unsigned *exonEndBacs;	\/* Exon start positions *\/$/;"	m	struct:hgTranscript
exonEndPos	../../inc/hgGene.h	/^    unsigned *exonEndPos;	\/* Exon start positions *\/$/;"	m	struct:hgTranscript
exonEndPos	../inc/hgGene.h	/^    unsigned *exonEndPos;	\/* Exon start positions *\/$/;"	m	struct:hgTranscript
exonEnds	../inc/genePred.h	/^    unsigned *exonEnds;	\/* Exon end positions *\/$/;"	m	struct:genePred
exonHash	../../inc/gff.h	/^    struct hash *exonHash;       \/* Hash of all exonIds. *\/$/;"	m	struct:gffFile
exonId	../../inc/gff.h	/^    char *exonId;       \/* exon_id in GTF, NULL in GFF. Not allocated here. *\/$/;"	m	struct:gffLine
exonIdHash	../../inc/ens.h	/^    struct hash *exonIdHash;		  \/* Fast lookup of exons from exon ids. *\/$/;"	m	struct:ensGene
exonList	../../inc/ens.h	/^    struct dlList *exonList;		\/* Ordered list of exon references. *\/$/;"	m	struct:ensTranscript
exonList	../../inc/ens.h	/^    struct ensExon *exonList;		  \/* Total exons in all transcripts. *\/$/;"	m	struct:ensGene
exonNumber	../../inc/gff.h	/^    int exonNumber; \/* O in GFF or if missing in GTF.  Otherwise exon number. *\/$/;"	m	struct:gffLine
exonOverlaps	../lib/ggCluster.c	/^static boolean exonOverlaps(int eStart, int eEnd, struct ggMrnaCluster *mc)$/;"	f	file:
exonQualifier	../lib/featureBits.c	/^static boolean exonQualifier(char *qualifier, char *extra, int *retSize)$/;"	f	file:
exonStartBacs	../../inc/hgGene.h	/^    unsigned *exonStartBacs;	\/* Exon start positions *\/$/;"	m	struct:hgTranscript
exonStartBacs	../inc/hgGene.h	/^    unsigned *exonStartBacs;	\/* Exon start positions *\/$/;"	m	struct:hgTranscript
exonStartPos	../../inc/hgGene.h	/^    unsigned *exonStartPos;	\/* Exon start positions *\/$/;"	m	struct:hgTranscript
exonStartPos	../inc/hgGene.h	/^    unsigned *exonStartPos;	\/* Exon start positions *\/$/;"	m	struct:hgTranscript
exonStarts	../inc/genePred.h	/^    unsigned *exonStarts;	\/* Exon start positions *\/$/;"	m	struct:genePred
exons	../../inc/oldGff.h	/^    GffExon *exons;$/;"	m	struct:gffGene
exp	../../lib/keys.c	/^struct exp$/;"	s	file:
exp	../inc/sageExp.h	/^    char *exp;	\/* experiments name. *\/$/;"	m	struct:sageExp
expandAlis	../../lib/fuzzyFind.c	/^static struct ffAli *expandAlis(struct ffAli *ali, DNA *nStart, DNA *nEnd, DNA *hStart, DNA *hEnd, $/;"	f	file:
expandAndLoad	../../lib/gfClientLib.c	/^static struct dnaSeq *expandAndLoad(struct gfRange *range, char *nibDir, int querySize, int *retNibSize, boolean respectFrame, boolean isRc)$/;"	f	file:
expandExactLeft	../../lib/fuzzyFind.c	/^static void expandExactLeft(struct ffAli *ali, DNA *needleStart, DNA *needleEnd,$/;"	f	file:
expandExactRight	../../lib/fuzzyFind.c	/^static void expandExactRight(struct ffAli *ali, DNA *needleStart, DNA *needleEnd,$/;"	f	file:
expandFaFastBuf	../../lib/fa.c	/^static void expandFaFastBuf(int bufPos)$/;"	f	file:
expandLeft	../../lib/fuzzyFind.c	/^static boolean expandLeft(struct ffAli *ali, DNA *needleStart, DNA *needleEnd,$/;"	f	file:
expandRange	../../lib/gfClientLib.c	/^static void expandRange(struct gfRange *range, int qSize, int tSize, boolean respectFrame)$/;"	f	file:
expandRight	../../lib/fuzzyFind.c	/^static boolean expandRight(struct ffAli *ali, DNA *needleStart, DNA *needleEnd,$/;"	f	file:
expandThroughNLeft	../../lib/fuzzyFind.c	/^boolean expandThroughNLeft(struct ffAli *ali, DNA *needleStart, DNA *needleEnd,$/;"	f
expandThroughNRight	../../lib/fuzzyFind.c	/^boolean expandThroughNRight(struct ffAli *ali, DNA *needleStart, DNA *needleEnd,$/;"	f
exprBed	../inc/exprBed.h	/^struct exprBed$/;"	s
exprBedCommaIn	../lib/exprBed.c	/^struct exprBed *exprBedCommaIn(char **pS, struct exprBed *ret)$/;"	f
exprBedCommaOut	../inc/exprBed.h	51;"	d
exprBedFree	../lib/exprBed.c	/^void exprBedFree(struct exprBed **pEl)$/;"	f
exprBedFreeList	../lib/exprBed.c	/^void exprBedFreeList(struct exprBed **pList)$/;"	f
exprBedLoad	../lib/exprBed.c	/^struct exprBed *exprBedLoad(char **row)$/;"	f
exprBedLoadAll	../lib/exprBed.c	/^struct exprBed *exprBedLoadAll(char *fileName) $/;"	f
exprBedOutput	../lib/exprBed.c	/^void exprBedOutput(struct exprBed *el, FILE *f, char sep, char lastSep) $/;"	f
exprBedTabOut	../inc/exprBed.h	48;"	d
expression	../../lib/intExp.c	/^static int expression()$/;"	f	file:
exps	../inc/sage.h	/^    int *exps;	\/* index of experiments in order of aves and stdevs. *\/$/;"	m	struct:sage
extendHitLeft	../../lib/gfClientLib.c	/^static void extendHitLeft(int qMax, int tMax,$/;"	f	file:
extendHitRight	../../lib/gfClientLib.c	/^static void extendHitRight(int qMax, int tMax,$/;"	f	file:
extendRespect	../../lib/gfClientLib.c	/^static int extendRespect(int oldX, int newX)$/;"	f	file:
extra	../../lib/localmem.c	/^    char *extra;$/;"	m	struct:lmBlock
extraCgi	../inc/hgFind.h	/^    char *extraCgi;		  \/* Extra info to embed in CGI requests to browser. *\/$/;"	m	struct:hgPositions
f	../../inc/fof.h	/^    FILE *f;                \/* File - filled in by server. *\/$/;"	m	struct:fofBatch
f	../../inc/fof.h	/^    FILE *f;              \/* File. *\/$/;"	m	struct:fofPos
f	../../inc/genoFind.h	/^    FILE *f;			\/* Output file. *\/$/;"	m	struct:gfSavePslxData
f	../../inc/xap.h	/^   FILE *f;					\/* File. *\/$/;"	m	struct:xap
f	../../lib/fof.c	/^    FILE *f;                     \/* Index file handle. *\/$/;"	m	struct:fof
f	../../lib/nib.c	/^    FILE *f;		\/* File handle. *\/$/;"	m	struct:nibStream
faFastBuf	../../lib/fa.c	/^static DNA *faFastBuf;$/;"	v	file:
faFastBufSize	../../lib/fa.c	/^static int faFastBufSize = 0;$/;"	v	file:
faFastReadNext	../../lib/fa.c	/^boolean faFastReadNext(FILE *f, DNA **retDna, int *retSize, char **retName)$/;"	f
faFile	../../inc/wormdna.h	/^    FILE *faFile;$/;"	m	struct:wormCdnaIterator
faFile	../inc/clonePos.h	/^    char *faFile;	\/* File with sequence. *\/$/;"	m	struct:clonePos
faFreeFastBuf	../../lib/fa.c	/^void faFreeFastBuf()$/;"	f
faFromMemText	../../lib/fa.c	/^struct dnaSeq *faFromMemText(char *text)$/;"	f
faMixedSpeedReadNext	../../lib/fa.c	/^boolean faMixedSpeedReadNext(struct lineFile *lf, DNA **retDna, int *retSize, char **retName)$/;"	f
faNextSeqFromMemText	../../lib/fa.c	/^bioSeq *faNextSeqFromMemText(char **pText, boolean isDna)$/;"	f
faPepSpeedReadNext	../../lib/fa.c	/^boolean faPepSpeedReadNext(struct lineFile *lf, DNA **retDna, int *retSize, char **retName)$/;"	f
faReadAa	../../lib/fa.c	/^struct dnaSeq *faReadAa(char *fileName)$/;"	f
faReadAllDna	../../lib/fa.c	/^struct dnaSeq *faReadAllDna(char *fileName)$/;"	f
faReadAllPep	../../lib/fa.c	/^struct dnaSeq *faReadAllPep(char *fileName)$/;"	f
faReadAllSeq	../../lib/fa.c	/^struct dnaSeq *faReadAllSeq(char *fileName, boolean isDna)$/;"	f
faReadDna	../../lib/fa.c	/^struct dnaSeq *faReadDna(char *fileName)$/;"	f
faReadNext	../../lib/fa.c	/^boolean faReadNext(FILE *f, char *defaultName, boolean mustStartWithComment, $/;"	f
faReadOneDnaSeq	../../lib/fa.c	/^struct dnaSeq *faReadOneDnaSeq(FILE *f, char *defaultName, boolean mustStartWithComment)$/;"	f
faReadSeq	../../lib/fa.c	/^struct dnaSeq *faReadSeq(char *fileName, boolean isDna)$/;"	f
faRecNameToFaFileName	../lib/hCommon.c	/^void faRecNameToFaFileName(char *dir, char *recName, char *fileName)$/;"	f
faRecNameToQacFileName	../lib/hCommon.c	/^void faRecNameToQacFileName(char *dir, char *recName, char *fileName)$/;"	f
faSeqFromMemText	../../lib/fa.c	/^bioSeq *faSeqFromMemText(char *text, boolean isDna)$/;"	f
faSeqListFromMemText	../../lib/fa.c	/^bioSeq *faSeqListFromMemText(char *text, boolean isDna)$/;"	f
faSomeSpeedReadNext	../../lib/fa.c	/^boolean faSomeSpeedReadNext(struct lineFile *lf, DNA **retDna, int *retSize, char **retName, boolean isDna)$/;"	f
faSpeedReadNext	../../lib/fa.c	/^boolean faSpeedReadNext(struct lineFile *lf, DNA **retDna, int *retSize, char **retName)$/;"	f
faToDna	../../lib/fa.c	/^void faToDna(char *poly, int size)$/;"	f
faToProtein	../../lib/fa.c	/^void faToProtein(char *poly, int size)$/;"	f
faWrite	../../lib/fa.c	/^void faWrite(char *fileName, char *startLine, DNA *dna, int dnaSize)$/;"	f
faWriteAll	../../lib/fa.c	/^void faWriteAll(char *fileName, bioSeq *seqList)$/;"	f
faWriteNext	../../lib/fa.c	/^void faWriteNext(FILE *f, char *startLine, DNA *dna, int dnaSize)$/;"	f
fastProber	../../lib/crudeali.c	/^struct fastProber$/;"	s	file:
fastReadString	../../lib/common.c	/^boolean fastReadString(FILE *f, char buf[256])$/;"	f
fbAddFeature	../lib/featureBits.c	/^static void fbAddFeature(struct featureBits **pList, int start, int size, int winStart, int winEnd)$/;"	f	file:
fbBedBits	../lib/featureBits.c	/^static struct featureBits *fbBedBits(int winStart, int winEnd, struct sqlResult *sr, int rowOffset,$/;"	f	file:
fbGenePredBits	../lib/featureBits.c	/^static struct featureBits *fbGenePredBits(int winStart, int winEnd, struct sqlResult *sr, int rowOffset,$/;"	f	file:
fbGetRange	../lib/featureBits.c	/^struct featureBits *fbGetRange(char *trackQualifier, char *chrom,$/;"	f
fbOrBits	../lib/featureBits.c	/^void fbOrBits(Bits *bits, int bitSize, struct featureBits *fbList, int bitOffset)$/;"	f
fbOrTableBits	../lib/featureBits.c	/^void fbOrTableBits(Bits *bits, char *trackQualifier, char *chrom, $/;"	f
fbPslBits	../lib/featureBits.c	/^static struct featureBits *fbPslBits(int winStart, int winEnd, struct sqlResult *sr, int rowOffset,$/;"	f	file:
fbRmskBits	../lib/featureBits.c	/^static struct featureBits *fbRmskBits(int winStart, int winEnd, struct sqlResult *sr, int rowOffset,$/;"	f	file:
fbUnderstandTrack	../lib/featureBits.c	/^boolean fbUnderstandTrack(char *track)$/;"	f
fchar_width	../../lib/gemfont.c	/^static int fchar_width(struct font_hdr *f,unsigned char *s)$/;"	f	file:
fd	../../inc/linefile.h	/^    int fd;			\/* File handle. *\/$/;"	m	struct:lineFile
fd	../lib/hdb.c	/^    int fd;                     \/* File handle. *\/$/;"	m	struct:largeSeqFile
fd	../lib/hgap.c	/^    int fd;                     \/* File handle. *\/$/;"	m	struct:largeSeqFile
featDir	../../lib/wormdna.c	/^static char *featDir = NULL;$/;"	v	file:
feature	../../inc/gff.h	/^    char *feature;  \/* Type field. (Intron, CDS, etc). Not allocated here. *\/$/;"	m	struct:gffLine
feature	../../lib/oldGff.c	/^    char feature[64];      \/* CDS, E, I, exon, intron, ??? *\/$/;"	m	struct:gffSegLine
featureBits	../inc/featureBits.h	/^struct featureBits$/;"	s
featureHash	../../inc/gff.h	/^    struct hash *featureHash;   \/* A name only hash of gff types. *\/$/;"	m	struct:gffFile
featureList	../../inc/gff.h	/^    struct gffFeature *featureList; \/* List of all types in file. *\/$/;"	m	struct:gffFile
fetchQualifiers	../lib/featureBits.c	/^static boolean fetchQualifiers(char *type, char *qualifier, char *extra, int *retSize)$/;"	f	file:
ff	../../inc/supStitch.h	/^    struct ffAli *ff;		\/* Alignment (owned by ssFfItem) *\/$/;"	m	struct:ssFfItem
ff	../../lib/supStitch.c	/^    struct ffAli *ff;           \/* Alignment block associated with node. *\/$/;"	m	struct:ssNode
ffAbort	../../lib/fuzzyFind.c	/^static void ffAbort()$/;"	f	file:
ffAli	../../inc/fuzzyFind.h	/^struct ffAli$/;"	s
ffAliCount	../../lib/ffAli.c	/^int ffAliCount(struct ffAli *d)$/;"	f
ffAliSort	../../lib/fuzzyFind.c	/^void ffAliSort(struct ffAli **pList, int (*compare )(const void *elem1,  const void *elem2))$/;"	f
ffCalcCdnaGapPenalty	../../lib/fuzzyFind.c	/^int ffCalcCdnaGapPenalty(int hGap, int nGap)$/;"	f
ffCalcGapPenalty	../../lib/fuzzyFind.c	/^int ffCalcGapPenalty(int hGap, int nGap, enum ffStringency stringency)$/;"	f
ffCat	../../lib/fuzzyFind.c	/^void ffCat(struct ffAli **pA, struct ffAli **pB)$/;"	f
ffCdna	../../inc/aliType.h	/^    ffCdna = 1,		\/* Near exact.  Tolerate long gaps in target (genomic) *\/$/;"	e	enum:ffStringency
ffCdnaGapPenalty	../../lib/fuzzyFind.c	/^int ffCdnaGapPenalty(struct ffAli *left, struct ffAli *right)$/;"	f
ffCmpHitsHayFirst	../../lib/fuzzyFind.c	/^int ffCmpHitsHayFirst(const void *va, const void *vb)$/;"	f
ffCmpHitsNeedleFirst	../../lib/fuzzyFind.c	/^int ffCmpHitsNeedleFirst(const void *va, const void *vb)$/;"	f
ffCountGoodEnds	../../lib/ffAli.c	/^void ffCountGoodEnds(struct ffAli *aliList)$/;"	f
ffExact	../../inc/aliType.h	/^    ffExact = 0,	\/* Only an exact match will do. *\/$/;"	e	enum:ffStringency
ffFind	../../lib/fuzzyFind.c	/^struct ffAli *ffFind(DNA *needleStart, DNA *needleEnd, DNA *hayStart, DNA *hayEnd,$/;"	f
ffFindAndScore	../../lib/fuzzyFind.c	/^boolean ffFindAndScore(DNA *needle, int needleSize, DNA *haystack, int haySize,$/;"	f
ffFindEitherStrand	../../lib/fuzzyFind.c	/^boolean ffFindEitherStrand(DNA *needle, DNA *haystack, enum ffStringency stringency,$/;"	f
ffFindEitherStrandN	../../lib/fuzzyFind.c	/^boolean ffFindEitherStrandN(DNA *needle, int needleSize, DNA *haystack, int haySize,$/;"	f
ffFindGoodOligo	../../lib/fuzzyFind.c	/^boolean ffFindGoodOligo(DNA *needle, int needleLength, double maxProb, double freq[4],$/;"	f
ffFreeAli	../../lib/fuzzyFind.c	/^void ffFreeAli(struct ffAli **pAli)$/;"	f
ffGapPenalty	../../lib/fuzzyFind.c	/^int ffGapPenalty(struct ffAli *left, struct ffAli *right, enum ffStringency stringency)$/;"	f
ffIntronOrientation	../../lib/ffAli.c	/^int ffIntronOrientation(struct ffAli *ff)$/;"	f
ffList	../../inc/supStitch.h	/^    struct ssFfItem *ffList;    \/* Item list - memory owned by bundle. *\/$/;"	m	struct:ssBundle
ffLoose	../../inc/aliType.h	/^    ffLoose = 3,        \/* Less exact. *\/$/;"	e	enum:ffStringency
ffMakeRightLinks	../../lib/ffAli.c	/^struct ffAli *ffMakeRightLinks(struct ffAli *rightMost)$/;"	f
ffMemCleanup	../../lib/fuzzyFind.c	/^static void ffMemCleanup()$/;"	f	file:
ffMemInit	../../lib/fuzzyFind.c	/^static void ffMemInit()$/;"	f	file:
ffMemPool	../../lib/fuzzyFind.c	/^static struct lm *ffMemPool = NULL;$/;"	v	file:
ffMergeExactly	../../lib/supStitch.c	/^static struct ffAli *ffMergeExactly(struct ffAli *aliList)$/;"	f	file:
ffMergeHayOverlaps	../../lib/fuzzyFind.c	/^struct ffAli *ffMergeHayOverlaps(struct ffAli *ali)$/;"	f
ffMergeNeedleAlis	../../lib/fuzzyFind.c	/^struct ffAli *ffMergeNeedleAlis(struct ffAli *ali, boolean doFree)$/;"	f
ffNeedMem	../../lib/fuzzyFind.c	/^static void *ffNeedMem(size_t size)$/;"	f	file:
ffOneIntronOrientation	../../lib/ffAli.c	/^int ffOneIntronOrientation(struct ffAli *left, struct ffAli *right)$/;"	f
ffRecover	../../lib/fuzzyFind.c	/^static jmp_buf ffRecover;$/;"	v	file:
ffRemoveEmptyAlis	../../lib/fuzzyFind.c	/^struct ffAli *ffRemoveEmptyAlis(struct ffAli *ali, boolean doFree)$/;"	f
ffRightmost	../../lib/ffAli.c	/^struct ffAli *ffRightmost(struct ffAli *ff)$/;"	f
ffScore	../../lib/fuzzyFind.c	/^int ffScore(struct ffAli *ali, enum ffStringency stringency)$/;"	f
ffScoreCdna	../../lib/fuzzyFind.c	/^int ffScoreCdna(struct ffAli *ali)$/;"	f
ffScoreMatch	../../lib/fuzzyFind.c	/^int ffScoreMatch(DNA *a, DNA *b, int size)$/;"	f
ffScoreProtein	../../lib/fuzzyFind.c	/^int ffScoreProtein(struct ffAli *ali, enum ffStringency stringency)$/;"	f
ffScoreSomeAlis	../../lib/fuzzyFind.c	/^int ffScoreSomeAlis(struct ffAli *ali, int count, enum ffStringency stringency)$/;"	f
ffScoreSomething	../../lib/fuzzyFind.c	/^int ffScoreSomething(struct ffAli *ali, enum ffStringency stringency,$/;"	f
ffShAli	../../lib/fuzzyShow.c	/^int ffShAli(FILE *f, struct ffAli *aliList, $/;"	f
ffShAliPart	../../lib/fuzzyShow.c	/^int ffShAliPart(FILE *f, struct ffAli *aliList, $/;"	f
ffShowAli	../../lib/fuzzyShow.c	/^void ffShowAli(struct ffAli *aliList, char *needleName, DNA *needle, int needleNumOffset,$/;"	f
ffSlideIntrons	../../lib/fuzzyFind.c	/^void ffSlideIntrons(struct ffAli *ali)$/;"	f
ffSolidMatch	../../lib/ffAli.c	/^boolean ffSolidMatch(struct ffAli **pLeft, struct ffAli **pRight, DNA *needle, $/;"	f
ffStringency	../../inc/aliType.h	/^enum ffStringency$/;"	g
ffTight	../../inc/aliType.h	/^    ffTight = 2,        \/* Near exact.  Not so tolerant of long gaps in target. *\/$/;"	e	enum:ffStringency
ffTrimFlakyEnds	../../lib/ffAli.c	/^struct ffAli *ffTrimFlakyEnds(struct ffAli *ali, int minMatchSize, $/;"	f
ffUnlink	../../lib/fuzzyFind.c	/^void ffUnlink(struct ffAli **pList, struct ffAli *el)$/;"	f
fieldCount	../inc/customTrack.h	/^    int fieldCount;		\/* Number of fields in bed. *\/$/;"	m	struct:customTrack
figureTickSpan	../../lib/memgfx.c	/^static long figureTickSpan(long totalLength, int maxNumTicks)$/;"	f	file:
file	../../inc/net.h	/^   char file[512];	\/* Remote file name, starts with '\/' *\/$/;"	m	struct:netParsedUrl
file	../../inc/oldGff.h	/^    FILE *file;$/;"	m	struct:gff
file	../../inc/snof.h	/^    FILE *file;$/;"	m	struct:snof
file	../../inc/wormdna.h	/^    FILE *file;$/;"	m	struct:wormGdfCache
fileCount	../../lib/fof.c	/^    int fileCount;               \/* The number of files being indexed. *\/$/;"	m	struct:fof
fileExists	../../lib/portimpl.c	/^boolean fileExists(char *fileName)$/;"	f
fileInfo	../../inc/portable.h	/^struct fileInfo $/;"	s
fileIx	../../lib/fof.c	/^    UBYTE fileIx;   \/* Which file it's in. *\/$/;"	m	struct:fofRecord
fileName	../../inc/blastParse.h	/^    char *fileName;			\/* Name of file this is in. *\/$/;"	m	struct:blastFile
fileName	../../inc/fof.h	/^    char *fileName;       \/* File name. *\/$/;"	m	struct:fofPos
fileName	../../inc/genoFind.h	/^    char *fileName;	\/* Name of file. *\/$/;"	m	struct:gfSeqSource
fileName	../../inc/gff.h	/^    char *fileName;             \/* Name of file (allocated here) *\/$/;"	m	struct:gffFile
fileName	../../inc/linefile.h	/^    char *fileName;		\/* Name of file. *\/$/;"	m	struct:lineFile
fileName	../../inc/oldGff.h	/^    char fileName[256];$/;"	m	struct:gff
fileName	../../inc/xap.h	/^   char *fileName;				\/* Name of file being parsed - valid after xapParse. *\/$/;"	m	struct:xap
fileName	../../inc/xp.h	/^    char *fileName;			\/* File name. *\/$/;"	m	struct:xp
fileName	../../lib/nib.c	/^    char *fileName;	\/* Name of file - allocated here. *\/$/;"	m	struct:nibStream
fileName	../inc/chromInfo.h	/^    char *fileName;	\/* Chromosome file (raw one byte per base) *\/$/;"	m	struct:chromInfo
fileNames	../../lib/fof.c	/^    char **fileNames;            \/* Names of files being indexed. *\/$/;"	m	struct:fof
fileSize	../../inc/oldGff.h	/^    long fileSize;$/;"	m	struct:gff
fileSize	../../lib/osunix.c	/^long fileSize(char *fileName)$/;"	f
fileSize	../../lib/oswin9x.c	/^long fileSize(char *fileName)$/;"	f
files	../../lib/fof.c	/^    FILE **files;                \/* Possibly null file handles of files being indexed. *\/$/;"	m	struct:fof
fillInNewCoord	../lib/coordConv.c	/^void fillInNewCoord(struct coordConvRep *ccr, struct possibleCoord *pc) $/;"	f
fillInQa	../lib/qaSeq.c	/^static void fillInQa(char *qaName, struct hash *hash, struct qaSeq *qaList)$/;"	f	file:
fillInQac	../lib/qaSeq.c	/^static void fillInQac(char *qacName, struct hash *hash, struct qaSeq *qaList)$/;"	f	file:
filterPoorGenes	../../lib/crudeali.c	/^static int filterPoorGenes(struct crudeGene *genes, int geneCount)$/;"	f	file:
findAliBetween	../../lib/fuzzyFind.c	/^struct ffAli *findAliBetween(DNA *tile, int tileSize, DNA *ns, DNA *ne, DNA *hs, DNA *he)$/;"	f
findAllAli	../lib/hgFind.c	/^static struct psl *findAllAli(char *acc, char *type)$/;"	f	file:
findAltSpliceRange	../../lib/wormdna.c	/^static boolean findAltSpliceRange(char *name, struct snof *snof, FILE *f, $/;"	f	file:
findBestAli	../../lib/fuzzyFind.c	/^static struct ffAli *findBestAli(DNA *ns, DNA *ne, DNA *hs, DNA *he, enum ffStringency stringency)$/;"	f	file:
findBestMatch	../lib/coordConv.c	/^struct possibleCoord *findBestMatch(struct coordConvRep *ccr, struct possibleCoord *pcList)$/;"	f
findBundle	../../lib/supStitch.c	/^static struct ssBundle *findBundle(struct ssBundle *list,  struct dnaSeq *genoSeq)$/;"	f	file:
findClumpBounds	../../lib/genoFind.c	/^static void findClumpBounds(struct gfClump *clump, int tileSize)$/;"	f	file:
findContigPos	../lib/hgFind.c	/^static void findContigPos(char *contig, char **retChromName, $/;"	f	file:
findCookieData	../../lib/cheapcgi.c	/^char *findCookieData(char *varName)$/;"	f
findCrossover	../../lib/supStitch.c	/^static int findCrossover(struct ffAli *left, struct ffAli *right, int overlap, boolean isProt)$/;"	f	file:
findCrudeGenes	../../lib/crudeali.c	/^static int findCrudeGenes(struct fastProber *fp, struct nt4Seq *target,$/;"	f	file:
findFurthestLinkedEnd	../lib/ggGraph.c	/^static int findFurthestLinkedEnd(struct geneGraph *gg, int startIx)$/;"	f	file:
findFurthestLinkedStart	../lib/ggGraph.c	/^static int findFurthestLinkedStart(struct geneGraph *gg, int endIx)$/;"	f	file:
findGenePred	../lib/hgFind.c	/^static boolean findGenePred(char *spec, struct hgPositions *hgp, char *tableName)$/;"	f	file:
findGenethonPos	../lib/hgFind.c	/^static boolean findGenethonPos(char *spec, char **retChromName, int *retWinStart, int *retWinEnd)$/;"	f	file:
findGenome	../lib/coordConv.c	/^struct genomeTable *findGenome(char *db, boolean isTrans)$/;"	f
findGenomePos	back_hgText.c	/^static boolean findGenomePos(char *spec, char **retChromName, $/;"	f	file:
findGenomePos	hgText.c	/^static boolean findGenomePos(char *spec, char **retChromName, $/;"	f	file:
findHitsToTables	../lib/hgFind.c	/^static void findHitsToTables(char *key, char *tables[], int tableCount, $/;"	f	file:
findImprobableOligo	../../lib/fuzzyFind.c	/^static boolean findImprobableOligo(DNA *needle, int needleLength, double maxProb, double freq[4],$/;"	f	file:
findKnownGenes	../lib/hgFind.c	/^static void findKnownGenes(char *spec, struct hgPositions *hgp)$/;"	f	file:
findMatrixIx	../../lib/xensmall.c	/^static void findMatrixIx(struct aliMatrix *am, struct aliCell *cell, int *retStateIx, int *retQix, int *retTix)$/;"	f	file:
findMaxOverlap	../../lib/xenbig.c	/^static void findMaxOverlap(char *a1, char *a2, int aSize, $/;"	f	file:
findMergableClusters	../lib/ggCluster.c	/^static struct ggMrnaCluster *findMergableClusters(struct ggMrnaCluster **pActiveClusters, $/;"	f	file:
findMommy	../../lib/xensmall.c	/^static struct aliCell *findMommy(struct aliMatrix *am, struct aliCell *baby)$/;"	f	file:
findMrnaKeys	../lib/hgFind.c	/^static void findMrnaKeys(char *keys, struct hgPositions *hgp, boolean useHgTracks)$/;"	f	file:
findMrnaPos	../lib/hgFind.c	/^static boolean findMrnaPos(char *acc,  struct hgPositions *hgp, boolean useHgTracks)$/;"	f	file:
findOldStsPos	../lib/hgFind.c	/^static boolean findOldStsPos(char *table, char *spec, $/;"	f	file:
findRefGenes	../lib/hgFind.c	/^static void findRefGenes(char *spec, struct hgPositions *hgp)$/;"	f	file:
findSnpPos	../lib/hgFind.c	/^static boolean findSnpPos(char *spec, struct hgPositions *hgp, char *tableName)$/;"	f	file:
findSource	../../lib/genoFind.c	/^static struct gfSeqSource *findSource(struct genoFind *gf, bits32 targetPos)$/;"	f	file:
findStringEnd	../../lib/sqlList.c	/^static char *findStringEnd(char *start, char endC)$/;"	f	file:
findStsPos	../lib/hgFind.c	/^static boolean findStsPos(char *spec, struct hgPositions *hgp)$/;"	f	file:
findSymIx	../../lib/xenbig.c	/^static int findSymIx(char *qSym, int qIx, int *retSymIx)$/;"	f	file:
findTileSize	../../lib/gfClientLib.c	/^static int findTileSize(char *line)$/;"	f	file:
findTrans3	../../lib/gfClientLib.c	/^struct trans3 *findTrans3(struct hash *t3Hash, char *name, int start, int end)$/;"	f
findVarData	../../lib/cheapcgi.c	/^static char *findVarData(char *varName)$/;"	f	file:
findWovenTiles	../../lib/fuzzyFind.c	/^static struct ffAli *findWovenTiles(DNA *ns, DNA *ne, DNA *hs, DNA *he, enum ffStringency stringency)$/;"	f	file:
finishCloneName	../lib/hCommon.c	/^static void finishCloneName(char *fragName, char *e, char cloneName[128])$/;"	f	file:
finishContigs	../../lib/xenbig.c	/^static void finishContigs( struct dlList **pContigList, $/;"	f	file:
first	../../inc/snof.h	/^    char *first;$/;"	m	struct:snof
first	../../lib/fof.c	/^    struct fofRecord *first;     \/* First record. *\/$/;"	m	struct:fof
firstWordInFile	../../lib/common.c	/^char *firstWordInFile(char *fileName, char *wordBuf, int wordBufSize)$/;"	f
firstWordInLine	../../lib/common.c	/^char *firstWordInLine(char *line)$/;"	f
fishChrom	../inc/stsMap.h	/^    char *fishChrom;	\/* Chromosome (no chr) from FISH map or 0 if none *\/$/;"	m	struct:stsMap
fishChrom	../inc/stsMarker.h	/^    char *fishChrom;	\/* Chromosome (no chr) from FISH map or 0 if none *\/$/;"	m	struct:stsMarker
fishClones	../inc/fishClones.h	/^struct fishClones$/;"	s
fishClonesCommaIn	../lib/fishClones.c	/^struct fishClones *fishClonesCommaIn(char **pS, struct fishClones *ret)$/;"	f
fishClonesCommaOut	../inc/fishClones.h	56;"	d
fishClonesFree	../lib/fishClones.c	/^void fishClonesFree(struct fishClones **pEl)$/;"	f
fishClonesFreeList	../lib/fishClones.c	/^void fishClonesFreeList(struct fishClones **pList)$/;"	f
fishClonesLoad	../lib/fishClones.c	/^struct fishClones *fishClonesLoad(char **row)$/;"	f
fishClonesLoadAll	../lib/fishClones.c	/^struct fishClones *fishClonesLoadAll(char *fileName) $/;"	f
fishClonesOutput	../lib/fishClones.c	/^void fishClonesOutput(struct fishClones *el, FILE *f, char sep, char lastSep) $/;"	f
fishClonesTabOut	../inc/fishClones.h	53;"	d
fitFields	../lib/hdb.c	/^static boolean fitFields(struct hash *hash, char *chrom, char *start, char *end,$/;"	f	file:
fitFields	fitField.c	/^static boolean fitFields(struct hash *hash, char *chrom, char *start, char *end,$/;"	f	file:
fixBlockSize	../../lib/patSpace.c	/^static void fixBlockSize(struct blockPos *bp, int blockIx)$/;"	f	file:
fixDirectionAndOffsets	../../lib/oldGff.c	/^static void fixDirectionAndOffsets(struct gffGene *gene, char *dna, long dnaSize, int newStart)$/;"	f	file:
fixSinglePos	../lib/hgFind.c	/^static void fixSinglePos(struct hgPositions *hgp)$/;"	f	file:
flagA	../../inc/diGraph.h	/^    bool flagA;         \/* Flag used in rangeGraph algorithms. *\/$/;"	m	struct:dgNode
flagB	../../inc/diGraph.h	/^    bool flagB;         \/* Currently unused flag. *\/$/;"	m	struct:dgNode
flush	../../lib/gifcomp.c	/^static void flush(size_t n)$/;"	f	file:
flyCdnaSeq	../../lib/flydna.c	/^boolean flyCdnaSeq(char *name, struct dnaSeq **retDna, struct wormCdnaInfo *retInfo)$/;"	f
flyChromNames	../../lib/flydna.c	/^void flyChromNames(char ***retNames, int *retNameCount)$/;"	f
flyFaCommentIntoInfo	../../lib/flydna.c	/^void flyFaCommentIntoInfo(char *faComment, struct wormCdnaInfo *retInfo)$/;"	f
flyFeaturesDir	../../lib/flydna.c	/^char *flyFeaturesDir()$/;"	f
flyFreeNt4Genome	../../lib/flydna.c	/^void flyFreeNt4Genome(struct nt4Seq ***pNt4Seq)$/;"	f
flyLoadNt4Genome	../../lib/flydna.c	/^void flyLoadNt4Genome(struct nt4Seq ***retNt4Seq, int *retNt4Count)$/;"	f
flyOpenGoodAli	../../lib/flydna.c	/^FILE *flyOpenGoodAli()$/;"	f
fnstring_width	../../lib/gemfont.c	/^long fnstring_width(struct font_hdr *f, unsigned char *s, int n)$/;"	f
fof	../../lib/fof.c	/^struct fof$/;"	s	file:
fofBatch	../../inc/fof.h	/^struct fofBatch$/;"	s
fofBatchFind	../../lib/fof.c	/^struct fofBatch *fofBatchFind(struct fof *fof, struct fofBatch *list)$/;"	f
fofClose	../../lib/fof.c	/^void fofClose(struct fof **pFof)$/;"	f
fofCmp	../../lib/fof.c	/^static int fofCmp(char *prefix, char *name, int maxSize, boolean isPrefix)$/;"	f	file:
fofElementCount	../../lib/fof.c	/^int fofElementCount(struct fof *fof)$/;"	f
fofFetch	../../lib/fof.c	/^void *fofFetch(struct fof *fof, char *name, int *retSize)$/;"	f
fofFetchString	../../lib/fof.c	/^char *fofFetchString(struct fof *fof, char *name, int *retSize)$/;"	f
fofFind	../../lib/fof.c	/^boolean fofFind(struct fof *fof, char *name, struct fofPos *retPos)$/;"	f
fofFindFirst	../../lib/fof.c	/^boolean fofFindFirst(struct fof *fof, char *prefix, $/;"	f
fofMake	../../lib/fof.c	/^void fofMake(char *inFiles[], int inCount, char *outName, $/;"	f
fofOpen	../../lib/fof.c	/^struct fof *fofOpen(char *fofName, char *fofDir)$/;"	f
fofPos	../../inc/fof.h	/^struct fofPos$/;"	s
fofRecList	../../lib/fof.c	/^struct fofRecList$/;"	s	file:
fofRecToPos	../../lib/fof.c	/^static void fofRecToPos(struct fof *fof, int ix, struct fofRecord *rec, struct fofPos *pos)$/;"	f	file:
fofRecord	../../lib/fof.c	/^struct fofRecord$/;"	s	file:
fofSearch	../../lib/fof.c	/^static boolean fofSearch(struct fof *fof, char *name, int nameSize, $/;"	f	file:
fofSig	../../inc/sig.h	47;"	d
font	../../lib/smallishfnt.c	/^static struct font_hdr font = {$/;"	v	file:
font_cel_height	../../lib/gemfont.c	/^int font_cel_height(struct font_hdr *f)$/;"	f
font_ch_ofst	../../lib/medfnt.c	/^static WORD font_ch_ofst[97] = {$/;"	v	file:
font_ch_ofst	../../lib/smallishfnt.c	/^static WORD font_ch_ofst[256] = {$/;"	v	file:
font_data	../../lib/medfnt.c	/^static UBYTE font_data[] = {$/;"	v	file:
font_data	../../lib/smallishfnt.c	/^static UBYTE font_data[] = {$/;"	v	file:
font_font	../../lib/medfnt.c	/^static struct font_hdr font_font = {$/;"	v	file:
forCgi	../../inc/portable.h	/^	char forCgi[128];$/;"	m	struct:tempName
forHtml	../../inc/portable.h	/^	char forHtml[128];$/;"	m	struct:tempName
forwardMergeTwo	../../lib/xenbig.c	/^static struct contig *forwardMergeTwo(struct contig *a, struct contig *b)$/;"	f	file:
fracMatch	../inc/genomicDups.h	/^    float fracMatch;	\/* fraction of matching bases *\/$/;"	m	struct:genomicDups
frag	../inc/agpFrag.h	/^    char *frag;	\/* which fragment *\/$/;"	m	struct:agpFrag
frag	../inc/glDbRep.h	/^    char *frag;	\/* Fragment name *\/$/;"	m	struct:gl
fragEnd	../inc/agpFrag.h	/^    unsigned fragEnd;	\/* end position in frag *\/$/;"	m	struct:agpFrag
fragStart	../inc/agpFrag.h	/^    unsigned fragStart;	\/* start position in frag *\/$/;"	m	struct:agpFrag
fragToCloneName	../lib/hCommon.c	/^void fragToCloneName(char *fragName, char cloneName[128])$/;"	f
fragToCloneVerName	../lib/hCommon.c	/^void fragToCloneVerName(char *fragName, char cloneVerName[128])$/;"	f
frame	../../inc/gff.h	/^    char frame;     \/* Frame feature is in. 1, 2, 3, or . *\/$/;"	m	struct:gffLine
frame	../../inc/oldGff.h	/^    int frame;$/;"	m	struct:gffGene
frame	../../inc/oldGff.h	/^    int frame;$/;"	m	struct:gffSegment
frame	../../lib/gfClientLib.c	/^    int frame;		\/* Reading frame (just for translated alignments) *\/$/;"	m	struct:gfRange
frame	../../lib/oldGff.c	/^    char frame[4];     \/* 0, 1, 2, or . *\/$/;"	m	struct:gffSegLine
free	../../inc/memalloc.h	/^    void (*free)(void *vpt);$/;"	m	struct:memHandler
free	../../lib/localmem.c	/^    char *free;$/;"	m	struct:lmBlock
freeContig	../../lib/xenbig.c	/^static void freeContig(struct contig **pContig)$/;"	f	file:
freeContigList	../../lib/xenbig.c	/^static void freeContigList(struct dlList **pContigList)$/;"	f	file:
freeData	../../inc/shaRes.h	/^    void (*freeData)(void *pData);$/;"	m	struct:shaResList
freeDenseAliInfo	../lib/ggCluster.c	/^void freeDenseAliInfo(struct ggAliInfo **pDa)$/;"	f
freeDenseAliInfoList	../lib/ggCluster.c	/^void freeDenseAliInfoList(struct ggAliInfo **pDaList)$/;"	f
freeDlList	../../lib/dlist.c	/^void freeDlList(struct dlList **pList)$/;"	f
freeDlListAndVals	../../lib/dlist.c	/^void freeDlListAndVals(struct dlList **pList)$/;"	f
freeDnaSeq	../../lib/dnaseq.c	/^void freeDnaSeq(struct dnaSeq **pSeq)$/;"	f
freeDnaSeqList	../../lib/dnaseq.c	/^void freeDnaSeqList(struct dnaSeq **pSeqList)$/;"	f
freeDyString	../../lib/dystring.c	/^void freeDyString(struct dyString **pDs)$/;"	f
freeEl	../../lib/memgfx.c	/^    struct colHashEl *freeEl;		\/* Pointer to next free element. *\/$/;"	m	struct:colHash
freeFastProber	../../lib/crudeali.c	/^static void freeFastProber(struct fastProber **pFp)$/;"	f	file:
freeGeneGraph	../lib/geneGraph.c	/^void freeGeneGraph(struct geneGraph **pGg)$/;"	f
freeGgMrnaAli	../lib/ggDump.c	/^void freeGgMrnaAli(struct ggMrnaAli **pMa)$/;"	f
freeGgMrnaAliList	../lib/ggDump.c	/^void freeGgMrnaAliList(struct ggMrnaAli **pMaList)$/;"	f
freeGgMrnaInput	../lib/ggDump.c	/^void freeGgMrnaInput(struct ggMrnaInput **pCi)$/;"	f
freeHash	../../lib/hash.c	/^void freeHash(struct hash **pHash)$/;"	f
freeHashAndVals	../../lib/hash.c	/^void freeHashAndVals(struct hash **pHash)$/;"	f
freeKvt	../../lib/keys.c	/^void freeKvt(struct kvt **pKvt)$/;"	f
freeMem	../../lib/memalloc.c	/^void freeMem(void *pt)$/;"	f
freeMrnaCluster	../lib/ggCluster.c	/^static void freeMrnaCluster(struct ggMrnaCluster **pMc)$/;"	f	file:
freeNt4	../../lib/nt4.c	/^void freeNt4(struct nt4Seq **pSeq)$/;"	f
freePatSpace	../../lib/patSpace.c	/^void freePatSpace(struct patSpace **pPatSpace)$/;"	f
freeWormCdnaIterator	../../lib/wormdna.c	/^void freeWormCdnaIterator(struct wormCdnaIterator **pIt)$/;"	f
free_code	../../lib/gifcomp.c	/^static short free_code;$/;"	v	file:
freez	../../lib/memalloc.c	/^void freez(void *vpt)$/;"	f
freeze	../lib/hdb.c	/^    char *freeze;    \/* assembly freeze, i.e. "Dec. 12, 2000" *\/$/;"	m	struct:dbConv
from	../inc/coordConv.h	/^    struct coordConv *from; \/** origninal coordinates to change *\/$/;"	m	struct:coordConvRep
fromPsl	../inc/customTrack.h	/^    boolean fromPsl;		\/* Track was derived from psl file. *\/$/;"	m	struct:customTrack
fstring_width	../../lib/gemfont.c	/^static long fstring_width(struct font_hdr *f, unsigned char *s)$/;"	f	file:
fullScore	../inc/rnaGene.h	/^    float fullScore;	\/* Score as in Sean Eddy's files. *\/$/;"	m	struct:rnaGene
fwidest_char	../../lib/gemfont.c	/^int fwidest_char(struct font_hdr *f)$/;"	f
g	../../inc/memgfx.h	/^    unsigned char r, g, b;$/;"	m	struct:rgbColor
gapped	../../inc/blastParse.h	/^    struct blastGappedAli *gapped;      \/* List of gapped alignments. *\/$/;"	m	struct:blastQuery
gaussean	../../lib/hmmstats.c	/^double gaussean(double x, double mean, double sd)$/;"	f
gb	../inc/sage.h	/^    char gb[65];	\/* Genebank accesion number. *\/$/;"	m	struct:sage
gbCount	../inc/stsInfo.h	/^    unsigned gbCount;	\/* Number of related GenBank accessions *\/$/;"	m	struct:stsInfo
gbGeneName	../inc/knownMore.h	/^    unsigned gbGeneName;	\/* Connect to geneName table. Genbank gene name *\/$/;"	m	struct:knownMore
gbNgi	../inc/knownMore.h	/^    char *gbNgi;	\/* Genbank gi of nucleotide seq. *\/$/;"	m	struct:knownMore
gbPgi	../inc/knownMore.h	/^    char *gbPgi;	\/* Genbank gi of protein seq. *\/$/;"	m	struct:knownMore
gbProductName	../inc/knownMore.h	/^    unsigned gbProductName;	\/* Connects to productName table. Genbank product name *\/$/;"	m	struct:knownMore
gbProteinAcc	../inc/knownMore.h	/^    char *gbProteinAcc;	\/* Genbank accession of protein *\/$/;"	m	struct:knownMore
gcNum	../inc/cpgIsland.h	/^    unsigned gcNum;	\/* Number of C and G in island *\/$/;"	m	struct:cpgIsland
gcPercent	../inc/gcPercent.h	/^struct gcPercent$/;"	s
gcPercentCommaIn	../lib/gcPercent.c	/^struct gcPercent *gcPercentCommaIn(char **pS, struct gcPercent *ret)$/;"	f
gcPercentCommaOut	../inc/gcPercent.h	45;"	d
gcPercentFree	../lib/gcPercent.c	/^void gcPercentFree(struct gcPercent **pEl)$/;"	f
gcPercentFreeList	../lib/gcPercent.c	/^void gcPercentFreeList(struct gcPercent **pList)$/;"	f
gcPercentLoad	../lib/gcPercent.c	/^struct gcPercent *gcPercentLoad(char **row)$/;"	f
gcPercentOutput	../lib/gcPercent.c	/^void gcPercentOutput(struct gcPercent *el, FILE *f, char sep, char lastSep) $/;"	f
gcPercentStaticLoad	../lib/gcPercent.c	/^void gcPercentStaticLoad(char **row, struct gcPercent *ret)$/;"	f
gcPercentTabOut	../inc/gcPercent.h	42;"	d
gcPpt	../inc/gcPercent.h	/^    unsigned gcPpt;	\/* GC percentage for 20Kb block *\/$/;"	m	struct:gcPercent
gcPpt	../inc/isochores.h	/^    unsigned gcPpt;	\/* GC content in parts per thousand *\/$/;"	m	struct:isochores
gdb	../inc/stsInfo.h	/^    char **gdb;	\/* Related GDB identifies *\/$/;"	m	struct:stsInfo
gdbCount	../inc/stsInfo.h	/^    unsigned gdbCount;	\/* Number of related GDB identifiers *\/$/;"	m	struct:stsInfo
gdbId	../inc/knownMore.h	/^    char *gdbId;	\/* NCBI GDB database ID *\/$/;"	m	struct:knownMore
gdfDataPoint	../../inc/gdf.h	/^struct gdfDataPoint$/;"	s
gdfFreeGene	../../lib/gdf.c	/^void gdfFreeGene(struct gdfGene *gene)$/;"	f
gdfFreeGeneList	../../lib/gdf.c	/^void gdfFreeGeneList(struct gdfGene **pList)$/;"	f
gdfGene	../../inc/gdf.h	/^struct gdfGene$/;"	s
gdfGeneExtents	../../lib/gdf.c	/^void gdfGeneExtents(struct gdfGene *gene, long *pMin, long *pMax)$/;"	f
gdfOffsetGene	../../lib/gdf.c	/^void gdfOffsetGene(struct gdfGene *gene, int offset)$/;"	f
gdfRcGene	../../lib/gdf.c	/^void gdfRcGene(struct gdfGene *gene, int size)$/;"	f
gdfReadOneGene	../../lib/gdf.c	/^struct gdfGene *gdfReadOneGene(FILE *f)$/;"	f
gdfUpcExons	../../lib/gdf.c	/^void gdfUpcExons(struct gdfGene *gene, int geneOffset, DNA *dna, int dnaSize, int dnaOffset)$/;"	f
genbank	../inc/stsInfo.h	/^    char **genbank;	\/* Related GeneBank accessions *\/$/;"	m	struct:stsInfo
gene	../../inc/wormdna.h	/^    char *gene;                 \/* Something like unc-1 *\/$/;"	m	struct:wormCdnaInfo
geneDna	../../lib/oldGff.c	/^static boolean geneDna(struct gff *gff, struct gffGene *gene,$/;"	f	file:
geneFinder	../../inc/hgGene.h	/^    unsigned geneFinder;	\/* Program that made prediction *\/$/;"	m	struct:hgGene
geneFinder	../../inc/hgGene.h	/^struct geneFinder$/;"	s
geneFinder	../inc/hgGene.h	/^    unsigned geneFinder;	\/* Program that made prediction *\/$/;"	m	struct:hgGene
geneFinder	../inc/hgGene.h	/^struct geneFinder$/;"	s
geneFinderCommaIn	../lib/hgGene.c	/^struct geneFinder *geneFinderCommaIn(char **pS)$/;"	f
geneFinderCommaOut	../../inc/hgGene.h	42;"	d
geneFinderCommaOut	../inc/hgGene.h	42;"	d
geneFinderFree	../lib/hgGene.c	/^void geneFinderFree(struct geneFinder **pEl)$/;"	f
geneFinderFreeList	../lib/hgGene.c	/^void geneFinderFreeList(struct geneFinder **pList)$/;"	f
geneFinderLoad	../lib/hgGene.c	/^struct geneFinder *geneFinderLoad(char **row)$/;"	f
geneFinderOutput	../lib/hgGene.c	/^void geneFinderOutput(struct geneFinder *el, FILE *f, char sep, char lastSep) $/;"	f
geneFinderStaticLoad	../lib/hgGene.c	/^void geneFinderStaticLoad(char **row, struct geneFinder *ret)$/;"	f
geneFinderTabOut	../../inc/hgGene.h	39;"	d
geneFinderTabOut	../inc/hgGene.h	39;"	d
geneGraph	../../inc/geneGraph.h	/^struct geneGraph$/;"	s
geneGraph	../inc/geneGraph.h	/^struct geneGraph$/;"	s
geneId	../../inc/gff.h	/^    char *geneId;    \/* gene_id in GTF, NULL in GFF.  Not allocated here. *\/$/;"	m	struct:gffLine
geneId	../inc/knownInfo.h	/^    char *geneId;	\/* Gene (not trascript) id *\/$/;"	m	struct:knownInfo
geneId	../inc/knownMore.h	/^    char *geneId;	\/* Gene (not transcript) Genie ID *\/$/;"	m	struct:knownMore
geneId	../inc/refLink.h	/^    unsigned geneId;	\/* pointer to geneName table *\/$/;"	m	struct:refLink
geneIdHash	../../inc/gff.h	/^    struct hash *geneIdHash;    \/* Hash of all geneIds. *\/$/;"	m	struct:gffFile
geneIdList	../../inc/gff.h	/^    struct gffGeneId *geneIdList;  \/* List of all gene ID's. *\/$/;"	m	struct:gffFile
geneName	../inc/knownInfo.h	/^    unsigned geneName;	\/* Connect to geneName table *\/$/;"	m	struct:knownInfo
genePred	../inc/genePred.h	/^struct genePred$/;"	s
genePredCmp	../lib/genePred.c	/^int genePredCmp(const void *va, const void *vb)$/;"	f
genePredCommaIn	../lib/genePred.c	/^struct genePred *genePredCommaIn(char **pS, struct genePred *ret)$/;"	f
genePredCommaOut	../inc/genePred.h	51;"	d
genePredFree	../lib/genePred.c	/^void genePredFree(struct genePred **pEl)$/;"	f
genePredFreeList	../lib/genePred.c	/^void genePredFreeList(struct genePred **pList)$/;"	f
genePredFromGroupedGff	../lib/genePred.c	/^struct genePred *genePredFromGroupedGff(struct gffFile *gff, struct gffGroup *group, char *name,$/;"	f
genePredLoad	../lib/genePred.c	/^struct genePred *genePredLoad(char **row)$/;"	f
genePredOutput	../lib/genePred.c	/^void genePredOutput(struct genePred *el, FILE *f, char sep, char lastSep) $/;"	f
genePredTabOut	../inc/genePred.h	48;"	d
geneType	../inc/sanger22extra.h	/^    char *geneType;	\/* Type field from Sanger gene GFFs *\/$/;"	m	struct:sanger22extra
genes	../../inc/oldGff.h	/^    struct gffGene *genes;$/;"	m	struct:gff
genethonChr	../inc/stsInfo.h	/^    char *genethonChr;	\/* Chromosome in Genethon map *\/$/;"	m	struct:stsInfo
genethonChrom	../inc/stsMap.h	/^    char *genethonChrom;	\/* Chromosome (no chr) from Genethon map or 0 if none *\/$/;"	m	struct:stsMap
genethonChrom	../inc/stsMarker.h	/^    char *genethonChrom;	\/* Chromosome (no chr) from Genethon map or 0 if none *\/$/;"	m	struct:stsMarker
genethonLOD	../inc/stsInfo.h	/^    float genethonLOD;	\/* LOD score in Genethon map *\/$/;"	m	struct:stsInfo
genethonName	../inc/stsInfo.h	/^    char *genethonName;	\/* Name in Genethon map *\/$/;"	m	struct:stsInfo
genethonPos	../inc/stsInfo.h	/^    float genethonPos;	\/* Position in Genethon map *\/$/;"	m	struct:stsInfo
genethonPos	../inc/stsMap.h	/^    float genethonPos;	\/* Position on Genethon map *\/$/;"	m	struct:stsMap
genethonPos	../inc/stsMarker.h	/^    float genethonPos;	\/* Position on Genethon map *\/$/;"	m	struct:stsMarker
genieDir	../../lib/wormdna.c	/^static char *genieDir = NULL;$/;"	v	file:
genoContigIx	../../inc/supStitch.h	/^    int genoContigIx;           \/* Index of contig inside of seq. *\/$/;"	m	struct:ssBundle
genoEnd	../inc/rmskOut.h	/^    unsigned genoEnd;	\/* End in genomic sequence *\/$/;"	m	struct:rmskOut
genoFind	../../inc/genoFind.h	/^struct genoFind$/;"	s
genoFindFree	../../lib/genoFind.c	/^void genoFindFree(struct genoFind **pGenoFind)$/;"	f
genoIx	../../inc/supStitch.h	/^    int genoIx;                 \/* Index of bac in associated PatSpace. *\/$/;"	m	struct:ssBundle
genoLeft	../inc/rmskOut.h	/^    int genoLeft;	\/* Size left in genomic sequence *\/$/;"	m	struct:rmskOut
genoName	../inc/rmskOut.h	/^    char *genoName;	\/* Genomic sequence name *\/$/;"	m	struct:rmskOut
genoSeq	../../inc/supStitch.h	/^    bioSeq *genoSeq;     \/* Genomic sequence (not owned by bundle.) *\/$/;"	m	struct:ssBundle
genoStart	../inc/rmskOut.h	/^    unsigned genoStart;	\/* Start in genomic sequence *\/$/;"	m	struct:rmskOut
genome	../lib/coordConv.c	/^    char *genome;	\/* Genome name. *\/$/;"	m	struct:genomeTable
genomeList	../lib/coordConv.c	/^char *genomeList[] = {"Oct. 7, 2000", "Dec. 12, 2000", "April 1, 2001"};$/;"	v
genomeTable	../lib/coordConv.c	/^struct genomeTable genomeTable[] =  {$/;"	v
genomeTable	../lib/coordConv.c	/^struct genomeTable$/;"	s	file:
genomicDups	../inc/genomicDups.h	/^struct genomicDups$/;"	s
genomicDupsCommaIn	../lib/genomicDups.c	/^struct genomicDups *genomicDupsCommaIn(char **pS, struct genomicDups *ret)$/;"	f
genomicDupsCommaOut	../inc/genomicDups.h	54;"	d
genomicDupsFree	../lib/genomicDups.c	/^void genomicDupsFree(struct genomicDups **pEl)$/;"	f
genomicDupsFreeList	../lib/genomicDups.c	/^void genomicDupsFreeList(struct genomicDups **pList)$/;"	f
genomicDupsLoad	../lib/genomicDups.c	/^struct genomicDups *genomicDupsLoad(char **row)$/;"	f
genomicDupsOutput	../lib/genomicDups.c	/^void genomicDupsOutput(struct genomicDups *el, FILE *f, char sep, char lastSep) $/;"	f
genomicDupsStaticLoad	../lib/genomicDups.c	/^void genomicDupsStaticLoad(char **row, struct genomicDups *ret)$/;"	f
genomicDupsTabOut	../inc/genomicDups.h	51;"	d
gentleFree	../../lib/common.c	/^void gentleFree(void *pt)$/;"	f
getAlignmentsForSeqs	../lib/coordConv.c	/^void getAlignmentsForSeqs(struct coordConvRep *ccr, char *blatHost, char *port, char *nibDir)$/;"	f
getAllFields	back_hgText.c	/^void getAllFields()$/;"	f
getAllFields	hgText.c	/^void getAllFields()$/;"	f
getAllFieldsGenome	back_hgText.c	/^void getAllFieldsGenome()$/;"	f
getAllFieldsGenome	hgText.c	/^void getAllFieldsGenome()$/;"	f
getAllGenomeWideNonSplit	back_hgText.c	/^void getAllGenomeWideNonSplit()$/;"	f
getAllGenomeWideNonSplit	hgText.c	/^void getAllGenomeWideNonSplit()$/;"	f
getAllGenomeWideSplit	back_hgText.c	/^void getAllGenomeWideSplit()$/;"	f
getAllGenomeWideSplit	hgText.c	/^void getAllGenomeWideSplit()$/;"	f
getBacContigSeqList	../lib/hgap.c	/^static struct dnaSeq *getBacContigSeqList(struct sqlConnection *conn, char *acc)$/;"	f	file:
getChoosenFields	back_hgText.c	/^void getChoosenFields()$/;"	f
getChoosenFields	hgText.c	/^void getChoosenFields()$/;"	f
getCurrentDir	../../lib/osunix.c	/^char *getCurrentDir()$/;"	f
getCurrentDir	../../lib/oswin9x.c	/^char *getCurrentDir()$/;"	f
getDNA	back_hgText.c	/^void getDNA()$/;"	f
getDNA	hgText.c	/^void getDNA()$/;"	f
getDateForVersion	../lib/coordConv.c	/^char *getDateForVersion(char *db)$/;"	f
getDirs	../../lib/wormdna.c	/^static void getDirs()$/;"	f	file:
getFeatDna	back_hgText.c	/^void getFeatDna(char *table, char *chrom, char *outName)$/;"	f
getFeatDna	getFeatDna.c	/^void getFeatDna(char *table, char *chrom, char *outName)$/;"	f
getFeatDna	hgText.c	/^void getFeatDna(char *table, char *chrom, char *outName)$/;"	f
getGenomeWideNonSplit	back_hgText.c	/^void getGenomeWideNonSplit()$/;"	f
getGenomeWideNonSplit	hgText.c	/^void getGenomeWideNonSplit()$/;"	f
getGenomeWideSplit	back_hgText.c	/^void getGenomeWideSplit()$/;"	f
getGenomeWideSplit	hgText.c	/^void getGenomeWideSplit()$/;"	f
getGroupBoundaries	../../lib/gff.c	/^static void getGroupBoundaries(struct gffGroup *group)$/;"	f	file:
getHash	../lib/hgap.c	/^static struct hash *getHash()$/;"	f	file:
getHitsFromServer	../../lib/gfClientLib.c	/^struct gfHit *getHitsFromServer(int conn, struct lm *lm)$/;"	f
getHost	../../lib/servcis.c	/^char *getHost()$/;"	f
getIntVals	../../lib/keys.c	/^static void getIntVals(struct kvt *kvt, struct exp *exp, int *retLeft, int *retRight)$/;"	f	file:
getNextFlatLine	../lib/customTrack.c	/^static boolean getNextFlatLine(struct lineFile **pLf, char **pLine, char **pNextLine)$/;"	f	file:
getNextLine	../lib/customTrack.c	/^static boolean getNextLine(struct lineFile **pLf, char **pLine, char **pNextLine)$/;"	f	file:
getNibDirForVersion	../lib/coordConv.c	/^char * getNibDirForVersion(char *db) $/;"	f
getPostInput	../../lib/cheapcgi.c	/^static void getPostInput()$/;"	f	file:
getQueryInput	../../lib/cheapcgi.c	/^static void getQueryInput()$/;"	f	file:
getSomeFields	back_hgText.c	/^void getSomeFields()$/;"	f
getSomeFields	hgText.c	/^void getSomeFields()$/;"	f
getSomeFieldsGenome	back_hgText.c	/^void getSomeFieldsGenome()$/;"	f
getSomeFieldsGenome	hgText.c	/^void getSomeFieldsGenome()$/;"	f
getStrand	../../lib/blastParse.c	/^static int getStrand(struct blastFile *bf, char *strand)$/;"	f	file:
getTable	back_hgText.c	/^void getTable()$/;"	f
getTable	hgText.c	/^void getTable()$/;"	f
getTableVar	back_hgText.c	/^char* getTableVar()$/;"	f
getTableVar	hgText.c	/^char* getTableVar()$/;"	f
getUiUrl	../lib/hgFind.c	/^static char *getUiUrl()$/;"	f	file:
getWormGeneDna	../../lib/wormdna.c	/^boolean getWormGeneDna(char *name, DNA **retDna, boolean upcExons)$/;"	f
gfAddLargeSeq	../../lib/genoFind.c	/^static void gfAddLargeSeq(struct genoFind *gf, bioSeq *seq, bits32 offset)$/;"	f	file:
gfAddSeq	../../lib/genoFind.c	/^static void gfAddSeq(struct genoFind *gf, bioSeq *seq, bits32 offset)$/;"	f	file:
gfAddTilesInNib	../../lib/genoFind.c	/^static int gfAddTilesInNib(struct genoFind *gf, char *nibName, bits32 offset)$/;"	f	file:
gfAlignAaClumps	../../lib/gfClientLib.c	/^void gfAlignAaClumps(struct genoFind *gf,  struct gfClump *clumpList, $/;"	f
gfAlignSomeClumps	../../lib/gfClientLib.c	/^static void gfAlignSomeClumps(struct genoFind *gf,  struct gfClump *clumpList, $/;"	f	file:
gfAlignStrand	../../lib/gfClientLib.c	/^void gfAlignStrand(int conn, char *nibDir, struct dnaSeq *seq,$/;"	f
gfAlignTrans	../../lib/gfClientLib.c	/^void gfAlignTrans(int conn, char *nibDir, aaSeq *seq, int minMatch, $/;"	f
gfAlignTransTrans	../../lib/gfClientLib.c	/^void gfAlignTransTrans(int conn, char *nibDir, struct dnaSeq *qSeq, $/;"	f
gfAllocLargeLists	../../lib/genoFind.c	/^static int gfAllocLargeLists(struct genoFind *gf)$/;"	f	file:
gfAllocLists	../../lib/genoFind.c	/^static int gfAllocLists(struct genoFind *gf)$/;"	f	file:
gfCatchPipes	../../lib/genoFind.c	/^void gfCatchPipes()$/;"	f
gfCheckTileSize	../../lib/genoFind.c	/^void gfCheckTileSize(int tileSize, boolean isPep)$/;"	f
gfClump	../../inc/genoFind.h	/^struct gfClump$/;"	s
gfClumpCmpHitCount	../../lib/genoFind.c	/^static int gfClumpCmpHitCount(const void *va, const void *vb)$/;"	f	file:
gfClumpDump	../../lib/genoFind.c	/^void gfClumpDump(struct genoFind *gf, struct gfClump *clump, FILE *f)$/;"	f
gfClumpFree	../../lib/genoFind.c	/^void gfClumpFree(struct gfClump **pClump)$/;"	f
gfClumpFreeList	../../lib/genoFind.c	/^void gfClumpFreeList(struct gfClump **pList)$/;"	f
gfClumpsToBundles	../../lib/gfClientLib.c	/^struct ssBundle *gfClumpsToBundles(struct gfClump *clumpList, struct dnaSeq *seq,$/;"	f
gfConnect	../../lib/gfNet.c	/^int gfConnect(char *hostName, char *portName)$/;"	f
gfConstants	../../inc/genoFind.h	/^enum gfConstants {$/;"	g
gfCountSeq	../../lib/genoFind.c	/^static void gfCountSeq(struct genoFind *gf, bioSeq *seq)$/;"	f	file:
gfCountTilesInNib	../../lib/genoFind.c	/^static void gfCountTilesInNib(struct genoFind *gf, char *nibName)$/;"	f	file:
gfDnaTile	../../lib/genoFind.c	/^int gfDnaTile(DNA *dna, int n)$/;"	f
gfFastFindDnaHits	../../lib/genoFind.c	/^static struct gfHit *gfFastFindDnaHits(struct genoFind *gf, struct dnaSeq *seq, $/;"	f	file:
gfFindAlignAaTrans	../../lib/gfClientLib.c	/^void gfFindAlignAaTrans(struct genoFind *gfs[3], aaSeq *qSeq, struct hash *t3Hash, $/;"	f
gfFindClumps	../../lib/genoFind.c	/^struct gfClump *gfFindClumps(struct genoFind *gf, bioSeq *seq, struct lm *lm, int *retHitCount)$/;"	f
gfGetLongString	../../lib/genoFind.c	/^char *gfGetLongString(int sd)$/;"	f
gfGetString	../../lib/genoFind.c	/^char *gfGetString(int sd, char buf[256])$/;"	f
gfHit	../../inc/genoFind.h	/^struct gfHit$/;"	s
gfHitCmpDiagonal	../../lib/genoFind.c	/^static int gfHitCmpDiagonal(const void *va, const void *vb)$/;"	f	file:
gfHitCmpTarget	../../lib/genoFind.c	/^static int gfHitCmpTarget(const void *va, const void *vb)$/;"	f	file:
gfHitSort2	../../lib/genoFind.c	/^static void gfHitSort2(struct gfHit **ptArray, int n)$/;"	f	file:
gfHitSortDiagonal	../../lib/genoFind.c	/^void gfHitSortDiagonal(struct gfHit **pList)$/;"	f
gfIndexNibs	../../lib/genoFind.c	/^struct genoFind *gfIndexNibs(int nibCount, char *nibNames[],$/;"	f
gfIndexSeq	../../lib/genoFind.c	/^struct genoFind *gfIndexSeq(bioSeq *seqList,$/;"	f
gfIndexTransNibs	../../lib/genoFind.c	/^void gfIndexTransNibs(struct genoFind *transGf[2][3], int nibCount, char *nibNames[], $/;"	f
gfLargeIndexSeq	../../lib/genoFind.c	/^struct genoFind *gfLargeIndexSeq(struct genoFind *gf, bioSeq *seqList,$/;"	f
gfLongDnaInMem	../../lib/gfClientLib.c	/^void gfLongDnaInMem(struct dnaSeq *query, struct genoFind *gf, $/;"	f
gfLongTransTransInMem	../../lib/gfClientLib.c	/^void gfLongTransTransInMem(struct dnaSeq *query, struct genoFind *gfs[3], $/;"	f
gfMakeOoc	../../lib/genoFind.c	/^void gfMakeOoc(char *outName, char *files[], int fileCount, $/;"	f
gfMaxGap	../../inc/genoFind.h	/^    gfMaxGap = 2,$/;"	e	enum:gfConstants
gfMaxTileUse	../../inc/genoFind.h	/^    gfMaxTileUse = 1024,$/;"	e	enum:gfConstants
gfMinMatch	../../inc/genoFind.h	/^    gfMinMatch = 2,$/;"	e	enum:gfConstants
gfNearEnough	../../lib/genoFind.c	/^static int gfNearEnough = 300;$/;"	v	file:
gfNewEmpty	../../lib/genoFind.c	/^static struct genoFind *gfNewEmpty(int minMatch, int maxGap, int tileSize, int maxPat,$/;"	f	file:
gfPepMaxTileUse	../../inc/genoFind.h	/^    gfPepMaxTileUse = 30000,$/;"	e	enum:gfConstants
gfPepTile	../../lib/genoFind.c	/^int gfPepTile(AA *pep, int n)$/;"	f
gfPipeHandler	../../lib/genoFind.c	/^static void gfPipeHandler(int sigNum)$/;"	f	file:
gfPowerOf20	../../lib/genoFind.c	/^int gfPowerOf20(int n)$/;"	f
gfQuerySeq	../../lib/gfClientLib.c	/^static struct gfRange *gfQuerySeq(int conn, struct dnaSeq *seq)$/;"	f	file:
gfQuerySeqTrans	../../lib/gfClientLib.c	/^static void gfQuerySeqTrans(int conn, aaSeq *seq, struct gfClump *clumps[2][3], $/;"	f	file:
gfQuerySeqTransTrans	../../lib/gfClientLib.c	/^static void gfQuerySeqTransTrans(int conn, struct dnaSeq *seq, $/;"	f	file:
gfRange	../../lib/gfClientLib.c	/^struct gfRange$/;"	s	file:
gfRangeCmpTarget	../../lib/gfClientLib.c	/^static int gfRangeCmpTarget(const void *va, const void *vb)$/;"	f	file:
gfRangeFree	../../lib/gfClientLib.c	/^static void gfRangeFree(struct gfRange **pEl)$/;"	f	file:
gfRangeFreeList	../../lib/gfClientLib.c	/^static void gfRangeFreeList(struct gfRange **pList)$/;"	f	file:
gfRangeLoad	../../lib/gfClientLib.c	/^static struct gfRange *gfRangeLoad(char **row)$/;"	f	file:
gfRangesBundle	../../lib/gfClientLib.c	/^static struct gfRange *gfRangesBundle(struct gfRange *exonList, int maxIntron)$/;"	f	file:
gfReadMulti	../../lib/genoFind.c	/^int gfReadMulti(int sd, void *vBuf, size_t size)$/;"	f
gfRecieveLongString	../../lib/genoFind.c	/^char *gfRecieveLongString(int sd)$/;"	f
gfRecieveString	../../lib/genoFind.c	/^char *gfRecieveString(int sd, char buf[256])$/;"	f
gfSavePslOrPslx	../../lib/gfClientLib.c	/^static void gfSavePslOrPslx(char *chromName, int chromSize, int chromOffset,$/;"	f	file:
gfSavePslx	../../lib/gfClientLib.c	/^void gfSavePslx(char *chromName, int chromSize, int chromOffset,$/;"	f
gfSavePslxData	../../inc/genoFind.h	/^struct gfSavePslxData$/;"	s
gfSegmentedFindHits	../../lib/genoFind.c	/^static struct gfHit *gfSegmentedFindHits(struct genoFind *gf, aaSeq *seq, struct lm *lm,$/;"	f	file:
gfSegmentedFindNearHits	../../lib/genoFind.c	/^static struct gfHit *gfSegmentedFindNearHits(struct genoFind *gf, $/;"	f	file:
gfSendLongString	../../lib/genoFind.c	/^boolean gfSendLongString(int sd, char *s)$/;"	f
gfSendString	../../lib/genoFind.c	/^boolean gfSendString(int sd, char *s)$/;"	f
gfSeqSource	../../inc/genoFind.h	/^struct gfSeqSource$/;"	s
gfSignature	../../lib/genoFind.c	/^char *gfSignature()$/;"	f
gfSmallIndexSeq	../../lib/genoFind.c	/^struct genoFind *gfSmallIndexSeq(struct genoFind *gf, bioSeq *seqList,$/;"	f
gfStraightFindHits	../../lib/genoFind.c	/^static struct gfHit *gfStraightFindHits(struct genoFind *gf, aaSeq *seq, struct lm *lm,$/;"	f	file:
gfStraightFindNearHits	../../lib/genoFind.c	/^static struct gfHit *gfStraightFindNearHits(struct genoFind *gf, aaSeq *seq, $/;"	f	file:
gfText	../../lib/gemfont.c	/^void gfText(struct memGfx *screen, struct font_hdr *f, char *text, $/;"	f
gfTileSize	../../inc/genoFind.h	/^    gfTileSize = 11,$/;"	e	enum:gfConstants
gfTransFindClumps	../../lib/genoFind.c	/^void gfTransFindClumps(struct genoFind *gfs[3], aaSeq *seq, struct gfClump *clumps[3], struct lm *lm, int *retHitCount)$/;"	f
gfTransTransFindBundles	../../lib/gfClientLib.c	/^static struct ssBundle *gfTransTransFindBundles(struct genoFind *gfs[3], struct dnaSeq *qSeq, $/;"	f	file:
gfTransTransFindClumps	../../lib/genoFind.c	/^void gfTransTransFindClumps(struct genoFind *gfs[3], aaSeq *seqs[3], $/;"	f
gfType	../../inc/aliType.h	/^enum gfType$/;"	g
gfTypeFromName	../../lib/aliType.c	/^enum gfType gfTypeFromName(char *name)$/;"	f
gfTypeName	../../lib/aliType.c	/^char *gfTypeName(enum gfType type)$/;"	f
gfZeroNonOverused	../../lib/genoFind.c	/^static void gfZeroNonOverused(struct genoFind *gf)$/;"	f	file:
gfZeroOverused	../../lib/genoFind.c	/^static void gfZeroOverused(struct genoFind *gf)$/;"	f	file:
gff	../../inc/oldGff.h	/^struct gff$/;"	s
gffClose	../../lib/oldGff.c	/^void gffClose(struct gff *gff)$/;"	f
gffDupeGene	../../lib/oldGff.c	/^struct gffGene *gffDupeGene(struct gff *gff, struct gffGene *oldGene)$/;"	f
gffDupeGeneAndSurrounds	../../lib/oldGff.c	/^struct gffGene *gffDupeGeneAndSurrounds(struct gff *gff, struct gffGene *oldGene,$/;"	f
gffFeature	../../inc/ens.h	/^    char *gffFeature;		\/* Feature field from GFF. *\/$/;"	m	struct:ensAnalysis
gffFeature	../../inc/gff.h	/^struct gffFeature$/;"	s
gffFile	../../inc/gff.h	/^struct gffFile$/;"	s
gffFileAdd	../../lib/gff.c	/^void gffFileAdd(struct gffFile *gff, char *fileName, int baseOffset)$/;"	f
gffFileAddRow	../../lib/gff.c	/^void gffFileAddRow(struct gffFile *gff, int baseOffset, char *words[], int wordCount, $/;"	f
gffFileFree	../../lib/gff.c	/^void gffFileFree(struct gffFile **pGff)$/;"	f
gffFileNew	../../lib/gff.c	/^struct gffFile *gffFileNew(char *fileName)$/;"	f
gffFindGene	../../lib/oldGff.c	/^struct gffGene *gffFindGene(struct gff *gff, char *geneName)$/;"	f
gffFindGeneIgnoreCase	../../lib/oldGff.c	/^struct gffGene *gffFindGeneIgnoreCase(struct gff *gff, char *geneName)$/;"	f
gffFreeGene	../../lib/oldGff.c	/^void gffFreeGene(struct gffGene **pGene)$/;"	f
gffGene	../../inc/oldGff.h	/^struct gffGene$/;"	s
gffGeneId	../../inc/gff.h	/^struct gffGeneId$/;"	s
gffGeneWithOwnDna	../../lib/oldGff.c	/^struct gffGene *gffGeneWithOwnDna(struct gff *gff, char *geneName)$/;"	f
gffGroup	../../inc/gff.h	/^struct gffGroup$/;"	s
gffGroupFree	../../lib/gff.c	/^void gffGroupFree(struct gffGroup **pGroup)$/;"	f
gffGroupFreeList	../../lib/gff.c	/^void gffGroupFreeList(struct gffGroup **pList)$/;"	f
gffGroupLines	../../lib/gff.c	/^void gffGroupLines(struct gffFile *gff)$/;"	f
gffHelper	../inc/customTrack.h	/^    struct gffFile *gffHelper;	\/* Used while processing GFF files. *\/$/;"	m	struct:customTrack
gffHelperFinish	../lib/customTrack.c	/^static struct bed *gffHelperFinish(struct gffFile *gff, struct hash *chromHash)$/;"	f	file:
gffLine	../../inc/gff.h	/^struct gffLine$/;"	s
gffLineCmp	../../lib/gff.c	/^int gffLineCmp(const void *va, const void *vb)$/;"	f
gffNeedMem	../../lib/oldGff.c	/^static void *gffNeedMem(struct gff *gff, int size)$/;"	f	file:
gffNextDnaLine	../../lib/oldGff.c	/^static boolean gffNextDnaLine(struct gff *gff)$/;"	f	file:
gffOpen	../../lib/oldGff.c	/^boolean gffOpen(struct gff *gff, char *fileName)$/;"	f
gffOpenAndRead	../../lib/oldGff.c	/^boolean gffOpenAndRead(struct gff *gff, char *fileName)$/;"	f
gffPrintInfo	../../lib/oldGff.c	/^void gffPrintInfo(struct gff *gff, FILE *out)$/;"	f
gffRead	../../lib/gff.c	/^struct gffFile *gffRead(char *fileName)$/;"	f
gffReadDna	../../lib/oldGff.c	/^boolean gffReadDna(struct gff *gff)$/;"	f
gffReadDnaSeq	../../lib/oldGff.c	/^struct dnaSeq *gffReadDnaSeq(char *fileName)$/;"	f
gffReadGenes	../../lib/oldGff.c	/^boolean gffReadGenes(struct gff *gff)$/;"	f
gffSegLine	../../lib/oldGff.c	/^struct gffSegLine$/;"	s	file:
gffSegLineScan	../../lib/oldGff.c	/^static int gffSegLineScan(struct gff* gff, struct gffSegLine *seg)$/;"	f	file:
gffSegment	../../inc/oldGff.h	/^struct gffSegment$/;"	s
gffSegmentInsertSort	../../lib/oldGff.c	/^static void gffSegmentInsertSort(struct gffSegment **plist, $/;"	f	file:
gffSeqName	../../inc/gff.h	/^struct gffSeqName$/;"	s
gffSource	../../inc/ens.h	/^    char *gffSource;		\/* Source field from GFF. *\/$/;"	m	struct:ensAnalysis
gffSource	../../inc/gff.h	/^struct gffSource$/;"	s
gffSyntaxError	../../lib/gff.c	/^static void gffSyntaxError(char *fileName, int line)$/;"	f	file:
gffTnName	../../lib/gff.c	/^static char *gffTnName(char *seqName, char *groupName)$/;"	f	file:
gftDna	../../inc/aliType.h	/^    gftDna = 0,		\/* DNA (genomic) *\/$/;"	e	enum:gfType
gftDnaX	../../inc/aliType.h	/^    gftDnaX = 3,		\/* Genomic DNA translated to protein *\/$/;"	e	enum:gfType
gftProt	../../inc/aliType.h	/^    gftProt = 2,         \/* Protein. *\/$/;"	e	enum:gfType
gftRna	../../inc/aliType.h	/^    gftRna = 1,		\/* RNA *\/$/;"	e	enum:gfType
gftRnaX	../../inc/aliType.h	/^    gftRnaX = 4,         \/* RNA translated to protein *\/$/;"	e	enum:gfType
ggAliInfo	../../inc/geneGraph.h	/^struct ggAliInfo$/;"	s
ggAliInfo	../inc/geneGraph.h	/^struct ggAliInfo$/;"	s
ggClusterMrna	../lib/ggCluster.c	/^struct ggMrnaCluster *ggClusterMrna(struct ggMrnaInput *ci)$/;"	f
ggFreeMrnaClusterList	../lib/ggCluster.c	/^void ggFreeMrnaClusterList(struct ggMrnaCluster **pMcList)$/;"	f
ggFromAltGraph	../lib/ggDbIo.c	/^struct geneGraph *ggFromAltGraph(struct altGraph *ag)$/;"	f
ggFromRow	../lib/ggDbIo.c	/^struct geneGraph *ggFromRow(char **row)$/;"	f
ggGetMrnaForBac	../lib/ggHgapIn.c	/^struct ggMrnaInput *ggGetMrnaForBac(char *bacAcc)$/;"	f
ggGraphCluster	../lib/ggGraph.c	/^struct geneGraph *ggGraphCluster(struct ggMrnaCluster *mc, struct ggMrnaInput *ci)$/;"	f
ggHardEnd	../../inc/geneGraph.h	/^    ggHardEnd,    \/* End of a middle exon, position known. *\/$/;"	e	enum:ggVertexType
ggHardEnd	../inc/geneGraph.h	/^    ggHardEnd,    \/* End of a middle exon, position known. *\/$/;"	e	enum:ggVertexType
ggHardStart	../../inc/geneGraph.h	/^    ggHardStart,  \/* Start of a middle exon, position known. *\/      $/;"	e	enum:ggVertexType
ggHardStart	../inc/geneGraph.h	/^    ggHardStart,  \/* Start of a middle exon, position known. *\/      $/;"	e	enum:ggVertexType
ggSoftEnd	../../inc/geneGraph.h	/^    ggSoftEnd,    \/* Last vertex - exact position unknown. *\/$/;"	e	enum:ggVertexType
ggSoftEnd	../inc/geneGraph.h	/^    ggSoftEnd,    \/* Last vertex - exact position unknown. *\/$/;"	e	enum:ggVertexType
ggSoftStart	../../inc/geneGraph.h	/^    ggSoftStart,  \/* First vertex - exact position unknown. *\/$/;"	e	enum:ggVertexType
ggSoftStart	../inc/geneGraph.h	/^    ggSoftStart,  \/* First vertex - exact position unknown. *\/$/;"	e	enum:ggVertexType
ggTabOut	../lib/ggDbIo.c	/^void ggTabOut(struct geneGraph *gg, FILE *f)$/;"	f
ggUnused	../../inc/geneGraph.h	/^    ggUnused,     \/* Vertex no longer part of graph. *\/$/;"	e	enum:ggVertexType
ggUnused	../inc/geneGraph.h	/^    ggUnused,     \/* Vertex no longer part of graph. *\/$/;"	e	enum:ggVertexType
ggVertex	../../inc/geneGraph.h	/^struct ggVertex$/;"	s
ggVertex	../inc/geneGraph.h	/^struct ggVertex$/;"	s
ggVertexType	../../inc/geneGraph.h	/^ enum ggVertexType$/;"	g
ggVertexType	../inc/geneGraph.h	/^ enum ggVertexType$/;"	g
gi	../inc/sage.h	/^    char gi[65];	\/* gi field in unigene descriptions. *\/$/;"	m	struct:sage
giString	../inc/softberryHom.h	/^    char *giString;	\/* String with Genbank gi and accession *\/$/;"	m	struct:softberryHom
gieStain	../inc/cytoBand.h	/^    char *gieStain;	\/* Giesma stain results *\/$/;"	m	struct:cytoBand
gif_byte_buff	../../lib/gifcomp.c	/^static UBYTE gif_byte_buff[256+3];               \/* Current block *\/$/;"	v	file:
gif_compress_data	../../lib/gifcomp.c	/^short gif_compress_data(int min_code_size, unsigned char *pt, long size, FILE *out)$/;"	f
gif_file	../../lib/gifcomp.c	/^static FILE *gif_file;$/;"	v	file:
gif_wcount	../../lib/gifcomp.c	/^static long gif_wcount;$/;"	v	file:
gif_wpt	../../lib/gifcomp.c	/^static unsigned char *gif_wpt;$/;"	v	file:
gifsig	../../lib/gifwrite.c	/^static char gifsig[] = "GIF87a";$/;"	v	file:
gl	../inc/glDbRep.h	/^struct gl$/;"	s
glCommaIn	../lib/glDbRep.c	/^struct gl *glCommaIn(char **pS, struct gl *ret)$/;"	f
glCommaOut	../inc/glDbRep.h	44;"	d
glFree	../lib/glDbRep.c	/^void glFree(struct gl **pEl)$/;"	f
glFreeList	../lib/glDbRep.c	/^void glFreeList(struct gl **pList)$/;"	f
glLoad	../lib/glDbRep.c	/^struct gl *glLoad(char **row)$/;"	f
glOutput	../lib/glDbRep.c	/^void glOutput(struct gl *el, FILE *f, char sep, char lastSep) $/;"	f
glSig	../../inc/sig.h	25;"	d
glStaticLoad	../lib/glDbRep.c	/^void glStaticLoad(char **row, struct gl *ret)$/;"	f
glTabOut	../inc/glDbRep.h	41;"	d
gm99Gb4Chrom	../inc/stsMap.h	/^    char *gm99Gb4Chrom;	\/* Chromosome (no chr) from GeneMap99 map or 0 if none *\/$/;"	m	struct:stsMap
gm99Gb4Chrom	../inc/stsMarker.h	/^    char *gm99Gb4Chrom;	\/* Chromosome (no chr) from gm99_bg4 map or 0 if none *\/$/;"	m	struct:stsMarker
gm99Gb4Pos	../inc/stsMap.h	/^    float gm99Gb4Pos;	\/* Position on gm99_bg4 map *\/$/;"	m	struct:stsMap
gm99Gb4Pos	../inc/stsMarker.h	/^    float gm99Gb4Pos;	\/* Position on gm99_bg4 map *\/$/;"	m	struct:stsMarker
gm99g3Chr	../inc/stsInfo.h	/^    char *gm99g3Chr;	\/* Chromosome in GeneMap99 G3 map *\/$/;"	m	struct:stsInfo
gm99g3LOD	../inc/stsInfo.h	/^    float gm99g3LOD;	\/* LOD score in GenMap99 G3 map *\/$/;"	m	struct:stsInfo
gm99g3Name	../inc/stsInfo.h	/^    char *gm99g3Name;	\/* Name in GeneMap99 G3 map *\/$/;"	m	struct:stsInfo
gm99g3Pos	../inc/stsInfo.h	/^    float gm99g3Pos;	\/* Position in GeneMap99 G3 map *\/$/;"	m	struct:stsInfo
gm99gb4Chr	../inc/stsInfo.h	/^    char *gm99gb4Chr;	\/* Chromosome in GeneMap99 GB4 map *\/$/;"	m	struct:stsInfo
gm99gb4LOD	../inc/stsInfo.h	/^    float gm99gb4LOD;	\/* LOD score in GeneMap99 GB4 map *\/$/;"	m	struct:stsInfo
gm99gb4Name	../inc/stsInfo.h	/^    char *gm99gb4Name;	\/* Name in GeneMap99 GB4 map *\/$/;"	m	struct:stsInfo
gm99gb4Pos	../inc/stsInfo.h	/^    float gm99gb4Pos;	\/* Position in GeneMap99 GB4 map *\/$/;"	m	struct:stsInfo
good	../inc/coordConv.h	/^    boolean good; \/** TRUE if "to" coordConv is valid, i.e. conversion was successful *\/$/;"	m	struct:coordConvRep
group	../../inc/gff.h	/^    char *group;    \/* Group line is in. Not allocated here.  Corresponds to transcript_id in GTF *\/$/;"	m	struct:gffLine
group	../../lib/oldGff.c	/^    char group[128];  \/* Name of gene  cosmid.number. *\/$/;"	m	struct:gffSegLine
groupHash	../../inc/gff.h	/^    struct hash *groupHash;	\/* Associates group names and gffGroups. *\/$/;"	m	struct:gffFile
groupList	../../inc/gff.h	/^    struct gffGroup *groupList; \/* A list of groups. *\/$/;"	m	struct:gffFile
gsToUcsc	../lib/hCommon.c	/^void gsToUcsc(char *gsName, char *ucscName)$/;"	f
hAddBinToQuery	../lib/hdb.c	/^void hAddBinToQuery(int start, int end, struct dyString *query)$/;"	f
hAllChromNames	../lib/hdb.c	/^struct slName *hAllChromNames()$/;"	f
hAllocConn	../lib/hdb.c	/^struct sqlConnection *hAllocConn()$/;"	f
hBaseInsert	../inc/refAlign.h	/^    int hBaseInsert;	\/* Number of bases inserted in human *\/$/;"	m	struct:refAlign
hBinFirstShift	../lib/hdb.c	/^int hBinFirstShift()$/;"	f
hBinLevels	../lib/hdb.c	/^int hBinLevels()$/;"	f
hBinNextShift	../lib/hdb.c	/^int hBinNextShift()$/;"	f
hChars	../../inc/seqOut.h	/^    char hChars[256];$/;"	m	struct:baf
hChromQuery	../lib/hdb.c	/^struct sqlResult *hChromQuery(struct sqlConnection *conn,$/;"	f
hChromSize	../lib/hdb.c	/^int hChromSize(char *chromName)$/;"	f
hCountDown	../../inc/seqOut.h	/^    bool hCountDown;     \/* True if want numbers counting down. *\/$/;"	m	struct:baf
hCtgPosHash	../lib/hdb.c	/^struct hash *hCtgPosHash()$/;"	f
hCurPos	../../inc/seqOut.h	/^    int hCurPos;$/;"	m	struct:baf
hDbFromFreeze	../lib/hdb.c	/^char *hDbFromFreeze(char *freeze)$/;"	f
hDbList	../lib/hdb.c	/^struct slName *hDbList()$/;"	f
hDefaultConnect	../lib/hdb.c	/^void hDefaultConnect()$/;"	f
hDnaFromSeq	../lib/hdb.c	/^struct dnaSeq *hDnaFromSeq(char *seqName, int start, int end, enum dnaCase dnaCase)$/;"	f
hEnd	../../inc/cda.h	/^    int hStart, hEnd;           \/* Start and end position on chromosome. *\/$/;"	m	struct:cdaBlock
hEnd	../../inc/fuzzyFind.h	/^    char *hStart, *hEnd;          \/* Haystack start and end. *\/$/;"	m	struct:ffAli
hEnd	../../lib/fuzzyFind.c	/^    DNA *hStart, *hEnd, *nStart, *nEnd;$/;"	m	struct:protoGene
hExtSeq	../lib/hdb.c	/^struct dnaSeq *hExtSeq(char *acc)$/;"	f
hExtendedRangeQuery	../lib/hdb.c	/^static struct sqlResult *hExtendedRangeQuery(struct sqlConnection *conn,$/;"	f	file:
hFindBin	../lib/hdb.c	/^int hFindBin(int start, int end)$/;"	f
hFindChromStartEndFields	../lib/hdb.c	/^boolean hFindChromStartEndFields(char *table, $/;"	f
hFindChromStartEndFields	fitField.c	/^boolean hFindChromStartEndFields(char *table,$/;"	f
hFindFieldsAndBin	../lib/hdb.c	/^boolean hFindFieldsAndBin(char *table, $/;"	f
hFindSplitTable	../lib/hdb.c	/^boolean hFindSplitTable(char *chrom, char *rootName, $/;"	f
hFindTableInfo	../lib/hdb.c	/^static struct hTableInfo *hFindTableInfo(char *chrom, char *rootName)$/;"	f	file:
hFreeConn	../lib/hdb.c	/^struct sqlConnection *hFreeConn(struct sqlConnection **pConn)$/;"	f
hFreezeFromDb	../lib/hdb.c	/^char *hFreezeFromDb(char *database)$/;"	f
hGetDb	../lib/hdb.c	/^char *hGetDb()$/;"	f
hGetDbHost	../lib/hdb.c	/^char *hGetDbHost()$/;"	f
hGetDbName	../lib/hdb.c	/^char *hGetDbName()$/;"	f
hGetDbPassword	../lib/hdb.c	/^char *hGetDbPassword()$/;"	f
hGetDbUser	../lib/hdb.c	/^char *hGetDbUser()$/;"	f
hGetTracks	../lib/trackTable.c	/^struct trackTable *hGetTracks()$/;"	f
hIsFin	../lib/hCommon.c	/^boolean hIsFin(char *chrom)$/;"	f
hIsPrivateHost	../lib/hdb.c	/^boolean hIsPrivateHost()$/;"	f
hLineStart	../../inc/seqOut.h	/^    int hLineStart;$/;"	m	struct:baf
hLoadChrom	../lib/hdb.c	/^struct dnaSeq *hLoadChrom(char *chromName)$/;"	f
hNibForChrom	../lib/hdb.c	/^void hNibForChrom(char *chromName, char retNibName[512])$/;"	f
hNumInsert	../inc/refAlign.h	/^    unsigned hNumInsert;	\/* Number of inserts in human *\/$/;"	m	struct:refAlign
hNumOff	../../inc/seqOut.h	/^    int nNumOff, hNumOff;$/;"	m	struct:baf
hOffsetPastBin	../lib/hdb.c	/^int hOffsetPastBin(char *chrom, char *table)$/;"	f
hOrderedRangeQuery	../lib/hdb.c	/^struct sqlResult *hOrderedRangeQuery(struct sqlConnection *conn,$/;"	f
hRangeQuery	../lib/hdb.c	/^struct sqlResult *hRangeQuery(struct sqlConnection *conn,$/;"	f
hRnaSeq	../lib/hdb.c	/^struct dnaSeq *hRnaSeq(char *acc)$/;"	f
hRnaSeqAndId	../lib/hdb.c	/^void hRnaSeqAndId(char *acc, struct dnaSeq **retSeq, HGID *retId)$/;"	f
hSetDb	../lib/hdb.c	/^void hSetDb(char *dbName)$/;"	f
hSetDbConnect	../lib/hdb.c	/^void hSetDbConnect(char* host, char *db, char *user, char *password)$/;"	f
hStart	../../inc/cda.h	/^    int hStart, hEnd;           \/* Start and end position on chromosome. *\/$/;"	m	struct:cdaBlock
hStart	../../inc/fuzzyFind.h	/^    char *hStart, *hEnd;          \/* Haystack start and end. *\/$/;"	m	struct:ffAli
hStart	../../lib/fuzzyFind.c	/^    DNA *hStart, *hEnd, *nStart, *nEnd;$/;"	m	struct:protoGene
hSym	../../inc/xa.h	/^    char *qSym, *tSym, *hSym;$/;"	m	struct:xaAli
hSym	../../lib/xenbig.c	/^    char *hSym;     \/* "Hidden" state symbols. *\/$/;"	m	struct:contig
hSym	../inc/wabAli.h	/^    char *hSym;	\/* Hidden Markov symbols. *\/$/;"	m	struct:wabAli
hTableExists	../lib/hdb.c	/^boolean hTableExists(char *table)$/;"	f
hTableInfo	../lib/hdb.c	/^struct hTableInfo$/;"	s	file:
hTrackDb	../lib/hdb.c	/^struct trackDb *hTrackDb(char *chrom)$/;"	f
hTrackInfo	../lib/hdb.c	/^struct trackDb *hTrackInfo(struct sqlConnection *conn, char *trackName)$/;"	f
hTrackOnChrom	../lib/hdb.c	/^boolean hTrackOnChrom(struct trackDb *tdb, char *chrom)$/;"	f
hardEnd	../../inc/hgap.h	/^    bool hardEnd;         \/* End position known *\/$/;"	m	struct:hgAlignment
hardEnd	../../inc/hgap.h	/^    bool hardEnd;         \/* End position known *\/$/;"	m	struct:hgBoundedHit
hardEnd	../inc/hgap.h	/^    bool hardEnd;         \/* End position known *\/$/;"	m	struct:hgAlignment
hardEnd	../inc/hgap.h	/^    bool hardEnd;         \/* End position known *\/$/;"	m	struct:hgBoundedHit
hardStart	../../inc/hgap.h	/^    bool hardStart;       \/* Start position known *\/$/;"	m	struct:hgAlignment
hardStart	../../inc/hgap.h	/^    bool hardStart;       \/* Start position known *\/$/;"	m	struct:hgBoundedHit
hardStart	../inc/hgap.h	/^    bool hardStart;       \/* Start position known *\/$/;"	m	struct:hgAlignment
hardStart	../inc/hgap.h	/^    bool hardStart;       \/* Start position known *\/$/;"	m	struct:hgBoundedHit
hasBin	../lib/hdb.c	/^    boolean hasBin;		\/* True if table starts with field. *\/$/;"	m	struct:hTableInfo
hasIntrons	../../inc/cda.h	/^    UBYTE hasIntrons;$/;"	m	struct:cdaAli
hasIntrons	../../inc/maDbRep.h	/^    unsigned char hasIntrons;	\/* True if alignment has introns *\/$/;"	m	struct:mrnaAli
hasRepeat	../../lib/fuzzyFind.c	/^static boolean hasRepeat(DNA *oligo, int oligoLen)$/;"	f	file:
hash	../../inc/hash.h	/^struct hash$/;"	s
hash	../../lib/crudeali.c	/^    struct probeTile **hash;$/;"	m	struct:fastProber
hashAdd	../../lib/hash.c	/^struct hashEl *hashAdd(struct hash *hash, char *name, void *val)$/;"	f
hashAddSaveName	../../lib/hash.c	/^struct hashEl *hashAddSaveName(struct hash *hash, char *name, void *val, char **saveName)$/;"	f
hashAddUnique	../../lib/hash.c	/^struct hashEl *hashAddUnique(struct hash *hash, char *name, void *val)$/;"	f
hashCrc	../../lib/hash.c	/^bits32 hashCrc(char *string)$/;"	f
hashEl	../../inc/hash.h	/^struct hashEl$/;"	s
hashElFree	../../lib/hash.c	/^void hashElFree(struct hashEl **pEl)$/;"	f
hashElFreeList	../../lib/hash.c	/^void hashElFreeList(struct hashEl **pList)$/;"	f
hashElListHash	../../lib/hash.c	/^struct hashEl *hashElListHash(struct hash *hash)$/;"	f
hashFindVal	../../lib/hash.c	/^void *hashFindVal(struct hash *hash, char *name)$/;"	f
hashFree	../../inc/hash.h	89;"	d
hashLookup	../../lib/hash.c	/^struct hashEl *hashLookup(struct hash *hash, char *name)$/;"	f
hashMustFindName	../../lib/hash.c	/^char *hashMustFindName(struct hash *hash, char *name)$/;"	f
hashMustFindVal	../../lib/hash.c	/^void *hashMustFindVal(struct hash *hash, char *name)$/;"	f
hashNew	../../inc/hash.h	85;"	d
hashRemove	../../lib/hash.c	/^void *hashRemove(struct hash *hash, char *name)$/;"	f
hashStore	../../lib/hash.c	/^struct hashEl *hashStore(struct hash *hash, char *name)$/;"	f
hashStoreName	../../lib/hash.c	/^char  *hashStoreName(struct hash *hash, char *name)$/;"	f
hashTraverseEls	../../lib/hash.c	/^void hashTraverseEls(struct hash *hash, void (*func)(struct hashEl *hel))$/;"	f
hashTraverseVals	../../lib/hash.c	/^void hashTraverseVals(struct hash *hash, void (*func)(void *val))$/;"	f
hashVarLine	../../lib/obscure.c	/^struct hash *hashVarLine(char *line, int lineIx)$/;"	f
haveCookiesHash	../../lib/cheapcgi.c	/^static boolean haveCookiesHash = FALSE;$/;"	v	file:
haystack	../../inc/seqOut.h	/^    DNA *needle, *haystack;$/;"	m	struct:baf
hdbCc	../lib/hdb.c	/^static struct sqlConnCache *hdbCc = NULL;$/;"	v	file:
hdbHost	../lib/hdb.c	/^static char *hdbHost;$/;"	v	file:
hdbName	../lib/hdb.c	/^static char *hdbName = "hg7";$/;"	v	file:
hdbPassword	../lib/hdb.c	/^static char *hdbPassword;$/;"	v	file:
hdbUser	../lib/hdb.c	/^static char *hdbUser;$/;"	v	file:
head	../../inc/dlist.h	/^    struct dlNode *head;$/;"	m	struct:dlList
head	../../inc/shaRes.h	/^    struct shaResNode *head;$/;"	m	struct:shaResList
headSize	../../inc/snof.h	/^    int headSize;$/;"	m	struct:snof
headSize	../../lib/fof.c	/^    long headSize;               \/* Offset to first index record. *\/$/;"	m	struct:fof
height	../../inc/memgfx.h	/^    int width, height;$/;"	m	struct:memGfx
hgAliHit	../../inc/hgap.h	/^struct hgAliHit$/;"	s
hgAliHit	../inc/hgap.h	/^struct hgAliHit$/;"	s
hgAlignment	../../inc/hgap.h	/^struct hgAlignment$/;"	s
hgAlignment	../inc/hgap.h	/^struct hgAlignment$/;"	s
hgAlloc	../lib/hgap.c	/^void *hgAlloc(size_t size)$/;"	f
hgAllocConn	../lib/hgRelate.c	/^struct sqlConnection *hgAllocConn()$/;"	f
hgAllocConn	../lib/hgap.c	/^struct sqlConnection *hgAllocConn()$/;"	f
hgBac	../../inc/hgap.h	/^struct hgBac$/;"	s
hgBac	../inc/hgap.h	/^struct hgBac$/;"	s
hgBacContigSeq	../lib/hgap.c	/^struct dnaSeq *hgBacContigSeq(char *acc)$/;"	f
hgBacIntoNest	../lib/hgap.c	/^static struct hgBac *hgBacIntoNest(char *acc)$/;"	f	file:
hgBacOrderedSeq	../lib/hgap.c	/^struct dnaSeq *hgBacOrderedSeq(struct hgBac *bac)$/;"	f
hgBacSubmittedSeq	../lib/hgap.c	/^struct dnaSeq *hgBacSubmittedSeq(char *acc)$/;"	f
hgBoundedHit	../../inc/hgap.h	/^struct hgBoundedHit$/;"	s
hgBoundedHit	../inc/hgap.h	/^struct hgBoundedHit$/;"	s
hgChromCount	../lib/hCommon.c	/^int hgChromCount = ArraySize(hgChromNames);$/;"	v
hgChromNames	../lib/hCommon.c	/^char *hgChromNames[] =$/;"	v
hgContig	../../inc/hgap.h	/^struct hgContig$/;"	s
hgContig	../inc/hgap.h	/^struct hgContig$/;"	s
hgContigPad	../../inc/hgap.h	/^    hgContigPad = 800,	  \/* Number of N's between contigs. *\/$/;"	e
hgContigPad	../inc/hgap.h	/^    hgContigPad = 800,	  \/* Number of N's between contigs. *\/$/;"	e
hgContigSeq	../lib/hgap.c	/^struct dnaSeq *hgContigSeq(struct hgContig *contig)$/;"	f
hgCreateTabFile	../lib/hgRelate.c	/^FILE *hgCreateTabFile(char *tableName)$/;"	f
hgCreateTabFile	../lib/hgap.c	/^FILE *hgCreateTabFile(char *tableName)$/;"	f
hgDbName	../lib/hgap.c	/^char *hgDbName = "h";$/;"	v
hgEndUpdate	../lib/hgRelate.c	/^void hgEndUpdate(struct sqlConnection **pConn, char *comment, ...)$/;"	f
hgEndUpdate	../lib/hgap.c	/^void hgEndUpdate(struct sqlConnection **pConn, char *comment, ...)$/;"	f
hgExtSeq	../lib/hgap.c	/^struct dnaSeq *hgExtSeq(char *acc)$/;"	f
hgFindChromBand	../lib/hgFind.c	/^void hgFindChromBand(char *chromosome, char *band, int *retStart, int *retEnd)$/;"	f
hgFindClonePos	../lib/hgFind.c	/^boolean hgFindClonePos(char *spec, char **retChromName, $/;"	f
hgFindCytoBand	../lib/hgFind.c	/^boolean hgFindCytoBand(char *spec, char **retChromName, int *retWinStart, int *retWinEnd)$/;"	f
hgFreeConn	../lib/hgRelate.c	/^struct sqlConnection *hgFreeConn(struct sqlConnection **pConn)$/;"	f
hgFreeConn	../lib/hgap.c	/^struct sqlConnection *hgFreeConn(struct sqlConnection **pConn)$/;"	f
hgGene	../../inc/hgGene.h	/^    unsigned hgGene;	\/* Gene this is in *\/$/;"	m	struct:hgTranscript
hgGene	../../inc/hgGene.h	/^struct hgGene$/;"	s
hgGene	../inc/hgGene.h	/^    unsigned hgGene;	\/* Gene this is in *\/$/;"	m	struct:hgTranscript
hgGene	../inc/hgGene.h	/^struct hgGene$/;"	s
hgGeneCommaIn	../lib/hgGene.c	/^struct hgGene *hgGeneCommaIn(char **pS)$/;"	f
hgGeneCommaOut	../../inc/hgGene.h	81;"	d
hgGeneCommaOut	../inc/hgGene.h	81;"	d
hgGeneFree	../lib/hgGene.c	/^void hgGeneFree(struct hgGene **pEl)$/;"	f
hgGeneFreeList	../lib/hgGene.c	/^void hgGeneFreeList(struct hgGene **pList)$/;"	f
hgGeneLoad	../lib/hgGene.c	/^struct hgGene *hgGeneLoad(char **row)$/;"	f
hgGeneOutput	../lib/hgGene.c	/^void hgGeneOutput(struct hgGene *el, FILE *f, char sep, char lastSep) $/;"	f
hgGeneTabOut	../../inc/hgGene.h	78;"	d
hgGeneTabOut	../inc/hgGene.h	78;"	d
hgGetBac	../lib/hgap.c	/^struct hgBac *hgGetBac(char *acc)$/;"	f
hgGetContig	../lib/hgap.c	/^struct hgContig *hgGetContig(char *acc, int contigIx)$/;"	f
hgGetDb	../lib/hgRelate.c	/^char *hgGetDb()$/;"	f
hgGetDb	../lib/hgap.c	/^char *hgGetDb()$/;"	f
hgHash	../lib/hgap.c	/^struct hash *hgHash;		     \/* Lookup by name of bacs, contigs, nests, etc. $/;"	v
hgHit	../../inc/hgap.h	/^struct hgHit$/;"	s
hgHit	../inc/hgap.h	/^struct hgHit$/;"	s
hgIdQuery	../lib/hgRelate.c	/^HGID hgIdQuery(struct sqlConnection *conn, char *query)$/;"	f
hgIdQuery	../lib/hgap.c	/^HGID hgIdQuery(struct sqlConnection *conn, char *query)$/;"	f
hgIsChromRange	../lib/hdb.c	/^boolean hgIsChromRange(char *spec)$/;"	f
hgIsCytoBandName	../lib/hgFind.c	/^boolean hgIsCytoBandName(char *spec, char **retChromName, char **retBandName)$/;"	f
hgLoadTabFile	../lib/hgRelate.c	/^void hgLoadTabFile(struct sqlConnection *conn, char *tableName)$/;"	f
hgLoadTabFile	../lib/hgap.c	/^void hgLoadTabFile(struct sqlConnection *conn, char *tableName)$/;"	f
hgLocalMem	../lib/hgap.c	/^static struct lm *hgLocalMem = NULL; \/* Memory for bacs, contigs, nests, etc. *\/$/;"	v	file:
hgLookup	../lib/hgap.c	/^struct hgNestBinder *hgLookup(char *name)$/;"	f
hgNest	../../inc/hgap.h	/^struct hgNest$/;"	s
hgNest	../inc/hgap.h	/^struct hgNest$/;"	s
hgNestBinder	../lib/hgap.c	/^struct hgNestBinder$/;"	s	file:
hgNextId	../lib/hgRelate.c	/^HGID hgNextId()$/;"	f
hgNextId	../lib/hgap.c	/^HGID hgNextId()$/;"	f
hgOfficialChromName	../lib/hCommon.c	/^char *hgOfficialChromName(char *chrom)$/;"	f
hgOffset	../lib/hgap.c	/^int hgOffset(struct hgNest *source, int offset, struct hgNest *dest)$/;"	f
hgParseChromRange	../lib/hdb.c	/^boolean hgParseChromRange(char *spec, char **retChromName, $/;"	f
hgPos	../inc/hgFind.h	/^struct hgPos$/;"	s
hgPosBrowserRange	../lib/hgFind.c	/^char *hgPosBrowserRange(struct hgPos *pos, char range[64])$/;"	f
hgPosFree	../lib/hgFind.c	/^void hgPosFree(struct hgPos **pEl)$/;"	f
hgPosFreeList	../lib/hgFind.c	/^void hgPosFreeList(struct hgPos **pList)$/;"	f
hgPosTable	../inc/hgFind.h	/^struct hgPosTable$/;"	s
hgPosTableFree	../lib/hgFind.c	/^void hgPosTableFree(struct hgPosTable **pEl)$/;"	f
hgPosTableFreeList	../lib/hgFind.c	/^void hgPosTableFreeList(struct hgPosTable **pList)$/;"	f
hgPositions	../inc/hgFind.h	/^struct hgPositions $/;"	s
hgPositionsFind	../lib/hgFind.c	/^struct hgPositions *hgPositionsFind(char *query, char *extraCgi, boolean useHgTracks)$/;"	f
hgPositionsFree	../lib/hgFind.c	/^void hgPositionsFree(struct hgPositions **pEl)$/;"	f
hgPositionsFreeList	../lib/hgFind.c	/^void hgPositionsFreeList(struct hgPositions **pList)$/;"	f
hgPositionsHtml	../lib/hgFind.c	/^void hgPositionsHtml(struct hgPositions *hgp, FILE *f, boolean useHgTracks)$/;"	f
hgRange	../../inc/hgap.h	/^struct hgRange$/;"	s
hgRange	../inc/hgap.h	/^struct hgRange$/;"	s
hgRealIdQuery	../lib/hgRelate.c	/^HGID hgRealIdQuery(struct sqlConnection *conn, char *query)$/;"	f
hgRealIdQuery	../lib/hgap.c	/^HGID hgRealIdQuery(struct sqlConnection *conn, char *query)$/;"	f
hgRnaSeq	../lib/hgap.c	/^struct dnaSeq *hgRnaSeq(char *acc)$/;"	f
hgRnaSeqAndId	../lib/hgap.c	/^void hgRnaSeqAndId(char *acc, struct dnaSeq **retSeq, HGID *retId)$/;"	f
hgScoredHit	../../inc/hgap.h	/^struct hgScoredHit$/;"	s
hgScoredHit	../inc/hgap.h	/^struct hgScoredHit$/;"	s
hgSetDb	../lib/hgRelate.c	/^void hgSetDb(char *dbName)$/;"	f
hgSetDb	../lib/hgap.c	/^void hgSetDb(char *dbName)$/;"	f
hgStartUpdate	../lib/hgRelate.c	/^struct sqlConnection *hgStartUpdate()$/;"	f
hgStartUpdate	../lib/hgap.c	/^struct sqlConnection *hgStartUpdate()$/;"	f
hgStore	../lib/hgap.c	/^void hgStore(char *name, struct hgNest *nest, void *seqObj)$/;"	f
hgTextFullName	../lib/hCommon.c	/^char *hgTextFullName()$/;"	f
hgTextName	../lib/hCommon.c	/^char *hgTextName()$/;"	f
hgTracksFullName	../lib/hCommon.c	/^char *hgTracksFullName()$/;"	f
hgTracksName	../lib/hCommon.c	/^char *hgTracksName()$/;"	f
hgTranscript	../../inc/hgGene.h	/^struct hgTranscript$/;"	s
hgTranscript	../inc/hgGene.h	/^struct hgTranscript$/;"	s
hgTranscriptCommaIn	../lib/hgGene.c	/^struct hgTranscript *hgTranscriptCommaIn(char **pS)$/;"	f
hgTranscriptCommaOut	../../inc/hgGene.h	127;"	d
hgTranscriptCommaOut	../inc/hgGene.h	127;"	d
hgTranscriptFree	../lib/hgGene.c	/^void hgTranscriptFree(struct hgTranscript **pEl)$/;"	f
hgTranscriptFreeList	../lib/hgGene.c	/^void hgTranscriptFreeList(struct hgTranscript **pList)$/;"	f
hgTranscriptLoad	../lib/hgGene.c	/^struct hgTranscript *hgTranscriptLoad(char **row)$/;"	f
hgTranscriptOutput	../lib/hgGene.c	/^void hgTranscriptOutput(struct hgTranscript *el, FILE *f, char sep, char lastSep) $/;"	f
hgTranscriptTabOut	../../inc/hgGene.h	124;"	d
hgTranscriptTabOut	../inc/hgGene.h	124;"	d
hgcFullName	../lib/hCommon.c	/^char *hgcFullName()$/;"	f
hgcName	../lib/hCommon.c	/^char *hgcName()$/;"	f
hgcc	../lib/hgap.c	/^static struct sqlConnCache *hgcc = NULL;$/;"	v	file:
hiFiFromCodingCost	../../lib/xensmall.c	/^static int hiFiFromCodingCost;$/;"	v	file:
hiFiFromInsertCost	../../lib/xensmall.c	/^static int hiFiFromInsertCost;$/;"	v	file:
hiFiFromLoFiCost	../../lib/xensmall.c	/^static int hiFiFromLoFiCost;$/;"	v	file:
hiFiIx	../../lib/xensmall.c	/^    hiFiIx = 0,$/;"	e	file:	enum:matIx
hiFiMatchTable	../../lib/xensmall.c	/^static int hiFiMatchTable[26*32];$/;"	v	file:
hiFiSmallGapCost	../../lib/xensmall.c	/^static int hiFiSmallGapCost;$/;"	v	file:
hiddenIx	../../lib/xensmall.c	/^    UBYTE hiddenIx;  \/* If I code one of these with more than 255 states shoot me! *\/$/;"	m	struct:aliPair
hiddenSym	../../lib/xensmall.c	/^    char hiddenSym;$/;"	m	struct:aliPair
hideLittleOrphans	../lib/ggGraph.c	/^static boolean hideLittleOrphans(struct geneGraph *gg)$/;"	f	file:
hitBlocks	../../lib/patSpace.c	/^    int hitBlocks[maxBlockCount];        \/* Indexes of blocks with hits. *\/$/;"	m	struct:patSpace
hitCount	../../inc/genoFind.h	/^    int hitCount;		\/* Number of hits. *\/$/;"	m	struct:gfClump
hitCount	../../lib/crudeali.c	/^    int hitCount;$/;"	m	struct:crudeExon
hitCount	../../lib/gfClientLib.c	/^    int hitCount;	\/* Number of hits. *\/$/;"	m	struct:gfRange
hitList	../../inc/genoFind.h	/^    struct gfHit *hitList;	\/* List of hits. Not allocated here. *\/$/;"	m	struct:gfClump
hitList	../../inc/hgap.h	/^    struct hgBoundedHit *hitList;  \/*  Subalignments. *\/$/;"	m	struct:hgAlignment
hitList	../inc/hgap.h	/^    struct hgBoundedHit *hitList;  \/*  Subalignments. *\/$/;"	m	struct:hgAlignment
hits	../../lib/fuzzyFind.c	/^    struct ffAli *hits;$/;"	m	struct:protoGene
hname	../inc/exprBed.h	/^    char *hname;	\/* feature human name: can be a gene, exon or other *\/$/;"	m	struct:exprBed
host	../../inc/net.h	/^   char host[128];	\/* Name of host computer - www.yahoo.com, etc. *\/$/;"	m	struct:netParsedUrl
htmEmptyShell	../../lib/htmshell.c	/^void htmEmptyShell(void (*doMiddle)(), char *method)$/;"	f
htmEnd	../../lib/htmshell.c	/^void htmEnd(FILE *f)$/;"	f
htmErrOnlyShell	../../lib/htmshell.c	/^void htmErrOnlyShell(void (*doMiddle)())$/;"	f
htmHorizontalLine	../../lib/htmshell.c	/^void htmHorizontalLine(FILE *f)$/;"	f
htmShell	../../lib/htmshell.c	/^void htmShell(char *title, void (*doMiddle)(), char *method)$/;"	f
htmStart	../../lib/htmshell.c	/^void htmStart(FILE *f, char *title)$/;"	f
html	../inc/trackDb.h	/^    char *html;	\/* Some html to display when they click on an item *\/$/;"	m	struct:trackDb
htmlAbort	../../lib/htmshell.c	/^static void htmlAbort()$/;"	f	file:
htmlBackground	../../lib/htmshell.c	/^static char *htmlBackground = NULL;$/;"	v	file:
htmlBadVar	../../lib/htmshell.c	/^void htmlBadVar(char *varName)$/;"	f
htmlCenterParagraph	../../lib/htmshell.c	/^void htmlCenterParagraph(char *line, ...)$/;"	f
htmlEchoInput	../../lib/htmshell.c	/^void htmlEchoInput()$/;"	f
htmlEnd	../../lib/htmshell.c	/^void htmlEnd()$/;"	f
htmlEnd	../inc/hgFind.h	/^    void (*htmlEnd)(struct hgPosTable *table, FILE *f);    \/* Print end. *\/$/;"	m	struct:hgPosTable
htmlHorizontalLine	../../lib/htmshell.c	/^void htmlHorizontalLine()$/;"	f
htmlImage	../../lib/htmshell.c	/^void htmlImage(char *fileName, int width, int height)$/;"	f
htmlMemDeath	../../lib/htmshell.c	/^void htmlMemDeath()$/;"	f
htmlOnePos	../inc/hgFind.h	/^    void (*htmlOnePos)(struct hgPosTable *table, struct hgPos *pos, FILE *f); \/* Print one position. *\/$/;"	m	struct:hgPosTable
htmlParagraph	../../lib/htmshell.c	/^void htmlParagraph(char *line, ...)$/;"	f
htmlRecover	../../lib/htmshell.c	/^static jmp_buf htmlRecover;$/;"	v	file:
htmlSetBackground	../../lib/htmshell.c	/^void htmlSetBackground(char *imageFile)$/;"	f
htmlSetCookie	../../lib/htmshell.c	/^void htmlSetCookie(char* name, char* value, char* expires, char* path, char* domain, boolean isSecure)$/;"	f
htmlStart	../../lib/htmshell.c	/^void htmlStart(char *title)$/;"	f
htmlStart	../inc/hgFind.h	/^    void (*htmlStart)(struct hgPosTable *table, FILE *f);   \/* Print preamble to positions. *\/$/;"	m	struct:hgPosTable
htmlVaCenterParagraph	../../lib/htmshell.c	/^void htmlVaCenterParagraph(char *line, va_list args)$/;"	f
htmlVaParagraph	../../lib/htmshell.c	/^void htmlVaParagraph(char *line, va_list args)$/;"	f
htmlVaWarn	../../lib/htmshell.c	/^static void htmlVaWarn(char *format, va_list args)$/;"	f	file:
hugefnt_ch_ofst	../../lib/hugefnt.c	/^WORD hugefnt_ch_ofst[195] = {$/;"	v
hugefnt_data	../../lib/hugefnt.c	/^UBYTE hugefnt_data[] = {$/;"	v
hugefnt_font	../../lib/hugefnt.c	/^struct font_hdr hugefnt_font = {$/;"	v
hugoId	../inc/knownMore.h	/^    unsigned hugoId;	\/* HUGO Nomeclature Committee ID or 0 if none *\/$/;"	m	struct:knownMore
hugoMap	../inc/knownMore.h	/^    char *hugoMap;	\/* HUGO Map position *\/$/;"	m	struct:knownMore
hugoName	../inc/knownMore.h	/^    char *hugoName;	\/* HUGO descriptive name *\/$/;"	m	struct:knownMore
hugoSymbol	../inc/knownMore.h	/^    char *hugoSymbol;	\/* HUGO short name *\/$/;"	m	struct:knownMore
humanSeq	../inc/refAlign.h	/^    char *humanSeq;	\/* Human sequence, contains - for aligned seq inserts *\/$/;"	m	struct:refAlign
hybes	../inc/exprBed.h	/^    char **hybes;	\/* Name of experimental hybridization performed, often name of tissue used *\/$/;"	m	struct:exprBed
id	../../inc/ens.h	/^    char *id;				  \/* Ensemble ID with many zeroes. *\/$/;"	m	struct:ensGene
id	../../inc/ens.h	/^    char *id;				\/* Ensemble ID (not allocated here). *\/$/;"	m	struct:ensExon
id	../../inc/ens.h	/^    char *id;				\/* Ensemble ID. *\/$/;"	m	struct:ensTranscript
id	../../inc/ens.h	/^    int id;			\/* Unique id for this feature type. *\/$/;"	m	struct:ensAnalysis
id	../../inc/geneGraph.h	/^    HGID id;                            \/* Id in database. *\/$/;"	m	struct:geneGraph
id	../../inc/gff.h	/^    unsigned int id;   \/* Database ID (or just 0) *\/$/;"	m	struct:gffSource
id	../../inc/hgGene.h	/^    unsigned id;	\/* Unique ID *\/$/;"	m	struct:geneFinder
id	../../inc/hgGene.h	/^    unsigned id;	\/* Unique ID *\/$/;"	m	struct:hgGene
id	../../inc/hgGene.h	/^    unsigned id;	\/* Unique ID *\/$/;"	m	struct:hgTranscript
id	../../inc/hgap.h	/^    HGID id;		        \/* HGAP ID. *\/$/;"	m	struct:hgNest
id	../../inc/hgap.h	/^    HGID id;		      \/* HGAP ID. *\/$/;"	m	struct:hgBac
id	../../inc/hgap.h	/^    HGID id;		      \/* HGAP ID. *\/$/;"	m	struct:hgContig
id	../../inc/maDbRep.h	/^    unsigned id;	\/* Unique ID *\/$/;"	m	struct:mrnaAli
id	../../inc/unfin.h	/^    char *id;	       \/* Ensemble ID. (Not allocated here.) *\/$/;"	m	struct:contigTree
id	../inc/geneGraph.h	/^    HGID id;                            \/* Id in database. *\/$/;"	m	struct:geneGraph
id	../inc/hgGene.h	/^    unsigned id;	\/* Unique ID *\/$/;"	m	struct:geneFinder
id	../inc/hgGene.h	/^    unsigned id;	\/* Unique ID *\/$/;"	m	struct:hgGene
id	../inc/hgGene.h	/^    unsigned id;	\/* Unique ID *\/$/;"	m	struct:hgTranscript
id	../inc/hgap.h	/^    HGID id;		        \/* HGAP ID. *\/$/;"	m	struct:hgNest
id	../inc/hgap.h	/^    HGID id;		      \/* HGAP ID. *\/$/;"	m	struct:hgBac
id	../inc/hgap.h	/^    HGID id;		      \/* HGAP ID. *\/$/;"	m	struct:hgContig
id	../inc/rmskOut.h	/^    char id[2];	\/* '*' or ' '.  I don't know what this means *\/$/;"	m	struct:rmskOut
id	../lib/hdb.c	/^    HGID id;                    \/* Id in extFile table. *\/$/;"	m	struct:largeSeqFile
id	../lib/hgap.c	/^    HGID id;			\/* Id in extFile table. *\/$/;"	m	struct:largeSeqFile
identNo	../inc/mapSts.h	/^    unsigned identNo;	\/* Identification number of STS *\/$/;"	m	struct:mapSts
identNo	../inc/stsAlias.h	/^    unsigned identNo;	\/* Identification number of STS marker *\/$/;"	m	struct:stsAlias
identNo	../inc/stsInfo.h	/^    unsigned identNo;	\/* UCSC identification number *\/$/;"	m	struct:stsInfo
identNo	../inc/stsMap.h	/^    unsigned identNo;	\/* Identification number of STS *\/$/;"	m	struct:stsMap
identNo	../inc/stsMarker.h	/^    unsigned identNo;	\/* Identification number of STS *\/$/;"	m	struct:stsMarker
in	../../inc/xp.h	/^    char *in;				\/* Next character to parse. *\/$/;"	m	struct:xp
in	../../lib/dgRange.c	/^   struct bfVertex *in;    \/* Connecting node. *\/$/;"	m	struct:bfEdge
inBuf	../../inc/xp.h	/^    char inBuf[16*1024];		\/* Text input buffer. *\/$/;"	m	struct:xp
inBufEnd	../../inc/xp.h	/^    char *inBufEnd;			\/* Pointer to end of input buffer. *\/$/;"	m	struct:xp
inLine	../../inc/seqOut.h	/^    int inWord, inLine; \/* Position in word and line. *\/$/;"	m	struct:cfm
inWord	../../inc/seqOut.h	/^    int inWord, inLine; \/* Position in word and line. *\/$/;"	m	struct:cfm
incCounterFile	../../lib/obscure.c	/^long incCounterFile(char *fileName)$/;"	f
indexIx	../../inc/fof.h	/^    int indexIx;          \/* Position within index. *\/$/;"	m	struct:fofPos
initAaVal	../../lib/dnautil.c	/^static void initAaVal()$/;"	f	file:
initAliMatrix	../../lib/xensmall.c	/^static void initAliMatrix(struct aliMatrix *am, int stateCount, $/;"	f	file:
initBitsInByte	../../lib/bits.c	/^static void initBitsInByte()$/;"	f	file:
initCgiInput	../../lib/cheapcgi.c	/^static void initCgiInput() $/;"	f	file:
initConfig	../lib/hgConfig.c	/^static void initConfig()$/;"	f	file:
initMem	../../lib/snofmake.c	/^static void initMem()$/;"	f	file:
initNtChars	../../lib/dnautil.c	/^static void initNtChars()$/;"	f	file:
initNtCompTable	../../lib/dnautil.c	/^static void initNtCompTable()$/;"	f	file:
initNtLookup	../../lib/genoFind.c	/^static void initNtLookup()$/;"	f	file:
initNtMixedCaseChars	../../lib/dnautil.c	/^static void initNtMixedCaseChars()$/;"	f	file:
initNtVal	../../lib/dnautil.c	/^static void initNtVal()$/;"	f	file:
initShortNum	../lib/qaSeq.c	/^static void initShortNum()$/;"	f	file:
initWormDnaMatchScores	../../lib/crudeali.c	/^void initWormDnaMatchScores()$/;"	f
init_table	../../lib/gifcomp.c	/^static void init_table(short min_code_size)$/;"	f	file:
inittedBitsInByte	../../lib/bits.c	/^static boolean inittedBitsInByte = FALSE;$/;"	v	file:
inittedCompTable	../../lib/dnautil.c	/^static boolean inittedCompTable = FALSE;$/;"	v	file:
inittedNtVal	../../lib/dnautil.c	/^static boolean inittedNtVal = FALSE;$/;"	v	file:
inputHash	../../lib/cheapcgi.c	/^static struct hash *inputHash = NULL;$/;"	v	file:
inputList	../../lib/cheapcgi.c	/^static struct cgiVar *inputList = NULL;$/;"	v	file:
inputString	../../lib/cheapcgi.c	/^static char *inputString = NULL;$/;"	v	file:
insertCount	../../inc/blastParse.h	/^    int insertCount;                    \/* Number of inserts. *\/$/;"	m	struct:blastBlock
insertFromCodingCost	../../lib/xensmall.c	/^static int insertFromCodingCost;$/;"	v	file:
insertFromHiFiCost	../../lib/xensmall.c	/^static int insertFromHiFiCost;$/;"	v	file:
insertFromLoFiCost	../../lib/xensmall.c	/^static int insertFromLoFiCost;$/;"	v	file:
insertList	../inc/chromInserts.h	/^    struct bigInsert *insertList; \/* List of contigs to insert before. *\/$/;"	m	struct:chromInserts
intAbs	../../lib/common.c	/^int intAbs(int a)$/;"	f
intExp	../../lib/intExp.c	/^int intExp(char *text)$/;"	f
intToPt	../../lib/obscure.c	/^void *intToPt(int i)$/;"	f
internalErr	../../inc/common.h	120;"	d
intronOrientation	../../lib/dnautil.c	/^int intronOrientation(DNA *iStart, DNA *iEnd)$/;"	f
introns	../../inc/oldGff.h	/^    GffIntron *introns;$/;"	m	struct:gffGene
isAccForm	../lib/hgFind.c	/^static boolean isAccForm(char *s)$/;"	f	file:
isAdult	../../inc/wormdna.h	/^    boolean isAdult;            \/* True if derived from adult culture. *\/$/;"	m	struct:wormCdnaInfo
isAllAlpha	../../lib/wormdna.c	/^static boolean isAllAlpha(char *s)$/;"	f	file:
isAllDigit	../../lib/wormdna.c	/^static boolean isAllDigit(char *s)$/;"	f	file:
isChromName	../lib/customTrack.c	/^boolean isChromName(char *word)$/;"	f
isComplete	../../lib/xenbig.c	/^    boolean isComplete;$/;"	m	struct:contig
isContigName	../lib/hgFind.c	/^static boolean isContigName(char *contig)$/;"	f	file:
isDir	../../inc/portable.h	/^    bool isDir;		\/* True if file is a directory. *\/$/;"	m	struct:fileInfo
isEmbryonic	../../inc/cda.h	/^    UBYTE isEmbryonic;$/;"	m	struct:cdaAli
isEmbryonic	../../inc/wormdna.h	/^    boolean isEmbryonic;        \/* True if derived from embryo culture. *\/$/;"	m	struct:wormCdnaInfo
isEst	../../inc/maDbRep.h	/^    unsigned char isEst;	\/* True if an EST. *\/$/;"	m	struct:mrnaAli
isGoodIntron	../lib/ggCluster.c	/^static boolean isGoodIntron(struct dnaSeq *targetSeq, struct ggMrnaBlock *a, $/;"	f	file:
isGtf	../../inc/gff.h	/^    bool isGtf;			\/* Is this a GTF file? *\/$/;"	m	struct:gffFile
isGtfGroup	../../lib/gff.c	/^static boolean isGtfGroup(char *group)$/;"	f	file:
isHermaphrodite	../../inc/wormdna.h	/^    boolean isHermaphrodite;    \/* True if hermaphrodites only. *\/$/;"	m	struct:wormCdnaInfo
isLumped	../../lib/crudeali.c	/^    boolean isLumped;$/;"	m	struct:crudeExon
isLumped	../../lib/crudeali.c	/^    boolean isLumped;$/;"	m	struct:crudeHit
isMale	../../inc/wormdna.h	/^    boolean isMale;             \/* True if males only. *\/$/;"	m	struct:wormCdnaInfo
isNib	../../lib/nib.c	/^boolean isNib(char *fileName)$/;"	f
isPep	../../inc/genoFind.h	/^    bool isPep;			 	 \/* Is a peptide. *\/$/;"	m	struct:genoFind
isPos	../lib/hdb.c	/^    boolean isPos;		\/* True if table is positional. *\/$/;"	m	struct:hTableInfo
isProt	../../inc/supStitch.h	/^    boolean isProt;		\/* True if it's a protein based bundle. *\/$/;"	m	struct:ssBundle
isPsuedo	../inc/rnaGene.h	/^    unsigned char isPsuedo;	\/* TRUE(1) if psuedo, FALSE(0) otherwise *\/$/;"	m	struct:rnaGene
isQacFile	../lib/qaSeq.c	/^boolean isQacFile(char *fileName)$/;"	f
isRc	../../inc/trans3.h	/^     boolean isRc;			\/* Has been reverse complemented? *\/$/;"	m	struct:trans3
isRc	../../lib/crudeali.c	/^    boolean isRc;$/;"	m	struct:crudeGene
isSnofSig	../../lib/snofsig.c	/^boolean isSnofSig(void *sig)$/;"	f
isSplit	../inc/trackTable.h	/^    unsigned char isSplit;	\/* 1 if table is split across chromosomes *\/$/;"	m	struct:trackTable
isSplit	../lib/hdb.c	/^    boolean isSplit;		\/* True if table is split. *\/$/;"	m	struct:hTableInfo
isTrans	../../inc/seqOut.h	/^    bool isTrans;	 \/* True if haystack is translated. *\/$/;"	m	struct:baf
isochores	../inc/isochores.h	/^struct isochores$/;"	s
isochoresCommaIn	../lib/isochores.c	/^struct isochores *isochoresCommaIn(char **pS, struct isochores *ret)$/;"	f
isochoresCommaOut	../inc/isochores.h	45;"	d
isochoresFree	../lib/isochores.c	/^void isochoresFree(struct isochores **pEl)$/;"	f
isochoresFreeList	../lib/isochores.c	/^void isochoresFreeList(struct isochores **pList)$/;"	f
isochoresLoad	../lib/isochores.c	/^struct isochores *isochoresLoad(char **row)$/;"	f
isochoresOutput	../lib/isochores.c	/^void isochoresOutput(struct isochores *el, FILE *f, char sep, char lastSep) $/;"	f
isochoresStaticLoad	../lib/isochores.c	/^void isochoresStaticLoad(char **row, struct isochores *ret)$/;"	f
isochoresTabOut	../inc/isochores.h	42;"	d
italic	../../inc/seqOut.h	/^    bool italic;	\/* Italic? *\/$/;"	m	struct:cfm
itemSize	../../inc/snof.h	/^    int itemSize;$/;"	m	struct:snof
itemSize	../../lib/fof.c	/^    int itemSize;                \/* Size of index record. *\/$/;"	m	struct:fof
ix	../../inc/hgap.h	/^    int ix;                   \/* Contig index. *\/$/;"	m	struct:hgContig
ix	../../lib/dnautil.c	/^    int ix;$/;"	m	struct:aminoAcidTable
ix	../../lib/memgfx.c	/^    int ix;			\/* Color Index. *\/$/;"	m	struct:colHashEl
ix	../inc/agpFrag.h	/^    int ix;	\/* ix of this fragment (useless) *\/$/;"	m	struct:agpFrag
ix	../inc/agpGap.h	/^    int ix;	\/* ix of this fragment (useless) *\/$/;"	m	struct:agpGap
ix	../inc/hgap.h	/^    int ix;                   \/* Contig index. *\/$/;"	m	struct:hgContig
ixSig	../../lib/snofsig.c	/^static int ixSig[4] = {0x693F8ED1, 0x7EDA1C32, 0x4BA58983, 0x277CB89C,};$/;"	v	file:
jcK	../inc/genomicDups.h	/^    float jcK;	\/* K-value calculated with Jukes-Cantor *\/$/;"	m	struct:genomicDups
jkwebDir	../../lib/wormdna.c	/^static char *jkwebDir = NULL;$/;"	v	file:
key	../../inc/fof.h	/^    char *key;              \/* Lookup key - filled in by client. Not allocate here. *\/$/;"	m	struct:fofBatch
key	../../inc/keys.h	/^    char *key;$/;"	m	struct:keyVal
keyExp	../../inc/keys.h	/^struct keyExp$/;"	s
keyExpEval	../../lib/keys.c	/^boolean keyExpEval(struct keyExp *keyExp, struct kvt *kvt)$/;"	f
keyExpParse	../../lib/keys.c	/^struct keyExp *keyExpParse(char *text)$/;"	f
keyExpType	../../lib/keys.c	/^enum keyExpType$/;"	g	file:
keyTextScan	../../lib/keys.c	/^boolean keyTextScan(char *text, char *key, char *valBuf, int valBufSize)$/;"	f
keyVal	../../inc/keys.h	/^struct keyVal$/;"	s
knowEnd	../../inc/wormdna.h	/^    boolean knowStart, knowEnd; \/* Start known?  End known? *\/$/;"	m	struct:wormCdnaInfo
knowStart	../../inc/wormdna.h	/^    boolean knowStart, knowEnd; \/* Start known?  End known? *\/$/;"	m	struct:wormCdnaInfo
knownInfo	../inc/knownInfo.h	/^struct knownInfo$/;"	s
knownInfoCommaIn	../lib/knownInfo.c	/^struct knownInfo *knownInfoCommaIn(char **pS, struct knownInfo *ret)$/;"	f
knownInfoCommaOut	../inc/knownInfo.h	48;"	d
knownInfoFree	../lib/knownInfo.c	/^void knownInfoFree(struct knownInfo **pEl)$/;"	f
knownInfoFreeList	../lib/knownInfo.c	/^void knownInfoFreeList(struct knownInfo **pList)$/;"	f
knownInfoLoad	../lib/knownInfo.c	/^struct knownInfo *knownInfoLoad(char **row)$/;"	f
knownInfoOutput	../lib/knownInfo.c	/^void knownInfoOutput(struct knownInfo *el, FILE *f, char sep, char lastSep) $/;"	f
knownInfoStaticLoad	../lib/knownInfo.c	/^void knownInfoStaticLoad(char **row, struct knownInfo *ret)$/;"	f
knownInfoTabOut	../inc/knownInfo.h	45;"	d
knownMore	../inc/knownMore.h	/^struct knownMore$/;"	s
knownMoreCommaIn	../lib/knownMore.c	/^struct knownMore *knownMoreCommaIn(char **pS, struct knownMore *ret)$/;"	f
knownMoreCommaOut	../inc/knownMore.h	60;"	d
knownMoreFree	../lib/knownMore.c	/^void knownMoreFree(struct knownMore **pEl)$/;"	f
knownMoreFreeList	../lib/knownMore.c	/^void knownMoreFreeList(struct knownMore **pList)$/;"	f
knownMoreLoad	../lib/knownMore.c	/^struct knownMore *knownMoreLoad(char **row)$/;"	f
knownMoreOutput	../lib/knownMore.c	/^void knownMoreOutput(struct knownMore *el, FILE *f, char sep, char lastSep) $/;"	f
knownMoreStaticLoad	../lib/knownMore.c	/^void knownMoreStaticLoad(char **row, struct knownMore *ret)$/;"	f
knownMoreTabOut	../inc/knownMore.h	57;"	d
kvt	../../lib/keys.c	/^struct kvt$/;"	s	file:
kvtAdd	../../lib/keys.c	/^struct keyVal *kvtAdd(struct kvt *kvt, char *key, char *val)$/;"	f
kvtClear	../../lib/keys.c	/^void kvtClear(struct kvt *kvt)$/;"	f
kvtLookup	../../lib/keys.c	/^char *kvtLookup(struct kvt *kvt, char *key)$/;"	f
kvtParseAdd	../../lib/keys.c	/^void kvtParseAdd(struct kvt *kvt, char *text)$/;"	f
kvtWriteAll	../../lib/keys.c	/^void kvtWriteAll(struct kvt *kvt, FILE *f, struct slName *hideList)$/;"	f
kxAnd	../../lib/keys.c	/^    kxAnd,$/;"	e	file:	enum:keyExpType
kxGE	../../lib/keys.c	/^    kxGE,      \/* Greater Than or Equal *\/$/;"	e	file:	enum:keyExpType
kxGT	../../lib/keys.c	/^    kxGT,      \/* Greater Than *\/$/;"	e	file:	enum:keyExpType
kxLE	../../lib/keys.c	/^    kxLE,      \/* Less Than or Equal *\/$/;"	e	file:	enum:keyExpType
kxLT	../../lib/keys.c	/^    kxLT,      \/* Less Than *\/$/;"	e	file:	enum:keyExpType
kxMatch	../../lib/keys.c	/^    kxMatch,$/;"	e	file:	enum:keyExpType
kxNot	../../lib/keys.c	/^    kxNot,$/;"	e	file:	enum:keyExpType
kxOr	../../lib/keys.c	/^    kxOr,$/;"	e	file:	enum:keyExpType
kxTok	../../inc/kxTok.h	/^struct kxTok$/;"	s
kxTokNew	../../lib/kxTok.c	/^static struct kxTok *kxTokNew(enum kxTokType type, char *string, int stringSize)$/;"	f	file:
kxTokType	../../inc/kxTok.h	/^enum kxTokType$/;"	g
kxTokenize	../../lib/kxTok.c	/^struct kxTok *kxTokenize(char *text, boolean wildAst)$/;"	f
kxWildMatch	../../lib/keys.c	/^    kxWildMatch,$/;"	e	file:	enum:keyExpType
kxXor	../../lib/keys.c	/^    kxXor,$/;"	e	file:	enum:keyExpType
kxtAdd	../../inc/kxTok.h	/^    kxtAdd,$/;"	e	enum:kxTokType
kxtAnd	../../inc/kxTok.h	/^    kxtAnd,$/;"	e	enum:kxTokType
kxtCloseParen	../../inc/kxTok.h	/^    kxtCloseParen,$/;"	e	enum:kxTokType
kxtDiv	../../inc/kxTok.h	/^    kxtDiv,$/;"	e	enum:kxTokType
kxtEnd	../../inc/kxTok.h	/^    kxtEnd,$/;"	e	enum:kxTokType
kxtEquals	../../inc/kxTok.h	/^    kxtEquals,$/;"	e	enum:kxTokType
kxtGE	../../inc/kxTok.h	/^    kxtGE,      \/* Greater Than or Equal *\/$/;"	e	enum:kxTokType
kxtGT	../../inc/kxTok.h	/^    kxtGT,      \/* Greater Than *\/$/;"	e	enum:kxTokType
kxtLE	../../inc/kxTok.h	/^    kxtLE,      \/* Less Than or Equal *\/$/;"	e	enum:kxTokType
kxtLT	../../inc/kxTok.h	/^    kxtLT,      \/* Less Than *\/$/;"	e	enum:kxTokType
kxtMul	../../inc/kxTok.h	/^    kxtMul,$/;"	e	enum:kxTokType
kxtNot	../../inc/kxTok.h	/^    kxtNot,$/;"	e	enum:kxTokType
kxtOpenParen	../../inc/kxTok.h	/^    kxtOpenParen,$/;"	e	enum:kxTokType
kxtOr	../../inc/kxTok.h	/^    kxtOr,$/;"	e	enum:kxTokType
kxtString	../../inc/kxTok.h	/^    kxtString,$/;"	e	enum:kxTokType
kxtSub	../../inc/kxTok.h	/^    kxtSub,$/;"	e	enum:kxTokType
kxtWildString	../../inc/kxTok.h	/^    kxtWildString,$/;"	e	enum:kxTokType
kxtXor	../../inc/kxTok.h	/^    kxtXor,$/;"	e	enum:kxTokType
lab	../inc/stsMap.h	/^    char *lab;	\/* Laboratory that placed the FISH clone *\/$/;"	m	struct:stsMap
labs	../inc/fishClones.h	/^    char **labs;	\/* Lab where clone FISH'd *\/$/;"	m	struct:fishClones
largeFileHandle	../lib/hdb.c	/^struct largeSeqFile *largeFileHandle(HGID extId)$/;"	f
largeFileHandle	../lib/hgap.c	/^struct largeSeqFile *largeFileHandle(HGID extId)$/;"	f
largeFileList	../lib/hdb.c	/^static struct largeSeqFile *largeFileList;  \/* List of open large files. *\/$/;"	v	file:
largeFileList	../lib/hgap.c	/^static struct largeSeqFile *largeFileList;  \/* List of open large files. *\/$/;"	v	file:
largeGapExtensionCost	../../lib/xensmall.c	/^static int largeGapExtensionCost;$/;"	v	file:
largeSeqFile	../lib/hdb.c	/^struct largeSeqFile$/;"	s	file:
largeSeqFile	../lib/hgap.c	/^struct largeSeqFile$/;"	s	file:
largefnt_ch_ofst	../../lib/largefnt.c	/^static WORD largefnt_ch_ofst[195] = {$/;"	v	file:
largefnt_data	../../lib/largefnt.c	/^static UBYTE largefnt_data[] = {$/;"	v	file:
largefnt_font	../../lib/largefnt.c	/^static struct font_hdr largefnt_font = {$/;"	v	file:
last	../../inc/snof.h	/^    char *last;$/;"	m	struct:snof
last	../../lib/fof.c	/^    struct fofRecord *last;      \/* Last record. *\/$/;"	m	struct:fof
lastChar	../../lib/common.c	/^char lastChar(char *s)$/;"	f
lastReadSize	../../inc/linefile.h	/^    int lastReadSize;		\/* Size of last read. *\/$/;"	m	struct:lineFile
lastScores	../../lib/xensmall.c	/^    int *lastScores;$/;"	m	struct:aliState
left	../../inc/fuzzyFind.h	/^    struct ffAli *left;   \/* Neighboring intervals. *\/$/;"	m	struct:ffAli
left	../../lib/fuzzyFind.c	/^    struct protoGene *left;$/;"	m	struct:protoGene
left	../../lib/keys.c	/^    void *left;$/;"	m	struct:exp
leftGood	../../lib/cda.c	/^static UBYTE leftGood(struct ffAli *ali)$/;"	f	file:
leftMask	../../lib/bits.c	/^static Bits leftMask[8] = {0xFF, 0x7F, 0x3F, 0x1F,  0xF,  0x7,  0x3,  0x1,};$/;"	v	file:
leftNextMatch	../../lib/fuzzyFind.c	/^static boolean leftNextMatch(struct ffAli *ali, DNA *ns, DNA *ne, DNA *hs, DNA *he, $/;"	f	file:
leftPrimer	../inc/stsInfo.h	/^    char *leftPrimer;	\/* 5' primer sequence *\/$/;"	m	struct:stsInfo
length	../inc/cpgIsland.h	/^    unsigned length;	\/* Island Length *\/$/;"	m	struct:cpgIsland
less	../../inc/snof.h	/^    char *less;$/;"	m	struct:snof
letter	../../lib/dnautil.c	/^    char letter;$/;"	m	struct:aminoAcidTable
lf	../../inc/blastParse.h	/^    struct lineFile *lf;                \/* File blast is in. *\/$/;"	m	struct:blastFile
lfCount	../inc/lfs.h	/^    unsigned lfCount;	\/* Number of linked features in the series *\/$/;"	m	struct:lfs
lfNames	../inc/lfs.h	/^    char **lfNames;	\/* Comma separated list of names of linked features *\/$/;"	m	struct:lfs
lfSizes	../inc/lfs.h	/^    unsigned *lfSizes;	\/* Comma separated list of sizes of each linked feature in genomic *\/$/;"	m	struct:lfs
lfStarts	../inc/lfs.h	/^    unsigned *lfStarts;	\/* Comma separated list of start positions of each linked feature in genomic *\/$/;"	m	struct:lfs
lfs	../inc/lfs.h	/^struct lfs$/;"	s
lfsCommaIn	../lib/lfs.c	/^struct lfs *lfsCommaIn(char **pS, struct lfs *ret)$/;"	f
lfsCommaOut	../inc/lfs.h	52;"	d
lfsFree	../lib/lfs.c	/^void lfsFree(struct lfs **pEl)$/;"	f
lfsFreeList	../lib/lfs.c	/^void lfsFreeList(struct lfs **pList)$/;"	f
lfsLoad	../lib/lfs.c	/^struct lfs *lfsLoad(char **row)$/;"	f
lfsLoadAll	../lib/lfs.c	/^struct lfs *lfsLoadAll(char *fileName) $/;"	f
lfsOutput	../lib/lfs.c	/^void lfsOutput(struct lfs *el, FILE *f, char sep, char lastSep) $/;"	f
lfsTabOut	../inc/lfs.h	49;"	d
line	../inc/bed.h	/^    char *line;                 \/* Rest of line. *\/$/;"	m	struct:bedLine
lineEnd	../../inc/linefile.h	/^    int lineEnd;		\/* End of line in buffer. *\/$/;"	m	struct:lineFile
lineFile	../../inc/linefile.h	/^struct lineFile$/;"	s
lineFileAttach	../../inc/linefile.h	38;"	d
lineFileAttatch	../../lib/linefile.c	/^struct lineFile *lineFileAttatch(char *fileName, bool zTerm, int fd)$/;"	f
lineFileChop	../../inc/linefile.h	71;"	d
lineFileChopNext	../../lib/linefile.c	/^int lineFileChopNext(struct lineFile *lf, char *words[], int maxWords)$/;"	f
lineFileClose	../../lib/linefile.c	/^void lineFileClose(struct lineFile **pLf)$/;"	f
lineFileExpectWords	../../lib/linefile.c	/^void lineFileExpectWords(struct lineFile *lf, int expecting, int got)$/;"	f
lineFileLongNetRead	../../lib/linefile.c	/^int lineFileLongNetRead(int fd, char *buf, int size)$/;"	f
lineFileMayOpen	../../lib/linefile.c	/^struct lineFile *lineFileMayOpen(char *fileName, bool zTerm)$/;"	f
lineFileNeedNext	../../lib/linefile.c	/^void lineFileNeedNext(struct lineFile *lf, char **retStart, int *retSize)$/;"	f
lineFileNeedNum	../../lib/linefile.c	/^int lineFileNeedNum(struct lineFile *lf, char *words[], int wordIx)$/;"	f
lineFileNext	../../lib/linefile.c	/^boolean lineFileNext(struct lineFile *lf, char **retStart, int *retSize)$/;"	f
lineFileNextRow	../../lib/linefile.c	/^boolean lineFileNextRow(struct lineFile *lf, char *words[], int wordCount)$/;"	f
lineFileOpen	../../lib/linefile.c	/^struct lineFile *lineFileOpen(char *fileName, bool zTerm)$/;"	f
lineFileReuse	../../lib/linefile.c	/^void lineFileReuse(struct lineFile *lf)$/;"	f
lineFileRow	../../inc/linefile.h	65;"	d
lineFileSkip	../../lib/linefile.c	/^void lineFileSkip(struct lineFile *lf, int lineCount)$/;"	f
lineFileStdin	../../lib/linefile.c	/^struct lineFile *lineFileStdin(bool zTerm)$/;"	f
lineFileString	../../inc/linefile.h	55;"	d
lineIsGff	../lib/customTrack.c	/^static boolean lineIsGff(char *line)$/;"	f	file:
lineIx	../../inc/linefile.h	/^    int lineIx;			\/* Current line. *\/$/;"	m	struct:lineFile
lineIx	../../inc/xp.h	/^    int lineIx;				\/* Number of current line. *\/$/;"	m	struct:xp
lineLen	../../inc/seqOut.h	/^    int lineLen;        \/* Number of characters between lines (often 50) *\/$/;"	m	struct:cfm
lineLen	../../lib/xensmall.c	241;"	d	file:
lineLen	../../lib/xensmall.c	350;"	d	file:
lineList	../../inc/gff.h	/^    struct gffLine *lineList;   \/* List of lines - lines may be in groupList instead. *\/$/;"	m	struct:gffFile
lineList	../../inc/gff.h	/^    struct gffLine *lineList;  \/* List of lines in group. *\/$/;"	m	struct:gffGroup
lineNumber	../../inc/oldGff.h	/^    int lineNumber;$/;"	m	struct:gff
lineNumbers	../../inc/seqOut.h	/^    bool lineNumbers;   \/* True if write position at end of line. *\/$/;"	m	struct:cfm
lineSize	../../inc/seqOut.h	/^    int lineSize;$/;"	m	struct:baf
lineSize	../../lib/xenbig.c	195;"	d	file:
lineStart	../../inc/linefile.h	/^    int lineStart;		\/* Offset of line in buffer. *\/$/;"	m	struct:lineFile
links	../../inc/shaRes.h	/^    int links;$/;"	m	struct:shaResNode
list	../../inc/shaRes.h	/^    struct shaResList *list;$/;"	m	struct:shaResNode
listDir	../../lib/osunix.c	/^struct slName *listDir(char *dir, char *pattern)$/;"	f
listDir	../../lib/oswin9x.c	/^struct slName *listDir(char *dir, char *pattern)$/;"	f
listDirX	../../lib/osunix.c	/^struct fileInfo *listDirX(char *dir, char *pattern, boolean fullPath)$/;"	f
listSizes	../../inc/genoFind.h	/^    bits32 *listSizes;                   \/* Size of list for each N-mer *\/$/;"	m	struct:genoFind
listSizes	../../lib/patSpace.c	/^    psBits *listSizes;                   \/* Size of list for each 10-mer *\/$/;"	m	struct:patSpace
lists	../../inc/genoFind.h	/^    bits32 **lists;                      \/* A list for each N-mer. Used if$/;"	m	struct:genoFind
lists	../../lib/memgfx.c	/^    struct colHashEl *lists[4*256];	\/* Hash chains. *\/$/;"	m	struct:colHash
lists	../../lib/patSpace.c	/^    psBits **lists;                      \/* A list for each 10-mer *\/$/;"	m	struct:patSpace
lm	../../inc/hash.h	/^    struct lm *lm;$/;"	m	struct:hash
lm	../../lib/localmem.c	/^struct lm$/;"	s	file:
lm	../../lib/snofmake.c	/^static struct lm *lm;$/;"	v	file:
lm2Signature	../../inc/sig.h	36;"	d
lmAlloc	../../lib/localmem.c	/^void *lmAlloc(struct lm *lm, size_t size)$/;"	f
lmAllocVar	../../inc/localmem.h	31;"	d
lmBlock	../../lib/localmem.c	/^struct lmBlock$/;"	s	file:
lmCleanup	../../lib/localmem.c	/^void lmCleanup(struct lm **pLm)$/;"	f
lmCloneMem	../../lib/localmem.c	/^void *lmCloneMem(struct lm *lm, void *pt, size_t size)$/;"	f
lmCloneString	../../lib/localmem.c	/^char *lmCloneString(struct lm *lm, char *string)$/;"	f
lmInit	../../lib/localmem.c	/^struct lm *lmInit(int blockSize)$/;"	f
loFiFromCodingCost	../../lib/xensmall.c	/^static int loFiFromCodingCost;$/;"	v	file:
loFiFromHiFiCost	../../lib/xensmall.c	/^static int loFiFromHiFiCost;$/;"	v	file:
loFiFromInsertCost	../../lib/xensmall.c	/^static int loFiFromInsertCost;$/;"	v	file:
loFiIx	../../lib/xensmall.c	/^    loFiIx,$/;"	e	file:	enum:matIx
loFiMatchTable	../../lib/xensmall.c	/^static int loFiMatchTable[26*32];$/;"	v	file:
loFiSmallGapCost	../../lib/xensmall.c	/^static int loFiSmallGapCost;$/;"	v	file:
loadAliFromHgap	../lib/ggHgapIn.c	/^static void loadAliFromHgap(char *bacName, struct ggMrnaAli **retMaList)$/;"	f	file:
loadAllBands	../lib/hgFind.c	/^static struct cytoBand *loadAllBands()$/;"	f	file:
loadHashT3Ranges	../../lib/gfClientLib.c	/^static void loadHashT3Ranges(struct gfRange *rangeList, $/;"	f	file:
loadNt4	../../lib/nt4.c	/^struct nt4Seq *loadNt4(char *fileName, char *seqName)$/;"	f
loadUpDnaSeqs	../lib/coordConv.c	/^void loadUpDnaSeqs(struct coordConvRep *ccr)$/;"	f
localMem	../../lib/fof.c	/^struct lm *localMem;    \/* Local (fast) memory pool. *\/$/;"	v
localNeedMem	../../lib/snofmake.c	/^static void *localNeedMem(int size)$/;"	f	file:
locus	../inc/sanger22extra.h	/^    char *locus;	\/* Possibly biological short name *\/$/;"	m	struct:sanger22extra
locusLinkId	../inc/knownMore.h	/^    unsigned locusLinkId;	\/* Locus link ID *\/$/;"	m	struct:knownMore
locusLinkId	../inc/refLink.h	/^    unsigned locusLinkId;	\/* Locus Link ID *\/$/;"	m	struct:refLink
logOdds	../../inc/hgap.h	/^    int logOdds;          \/* Log odds style score - scaled x 1000. *\/$/;"	m	struct:hgAliHit
logOdds	../../inc/hgap.h	/^    int logOdds;          \/* Log odds style score - scaled x 1000. *\/$/;"	m	struct:hgAlignment
logOdds	../../inc/hgap.h	/^    int logOdds;          \/* Log odds style score - scaled x 1000. *\/$/;"	m	struct:hgBoundedHit
logOdds	../../inc/hgap.h	/^    int logOdds;          \/* Log odds style score - scaled x 1000. *\/$/;"	m	struct:hgScoredHit
logOdds	../inc/hgap.h	/^    int logOdds;          \/* Log odds style score - scaled x 1000. *\/$/;"	m	struct:hgAliHit
logOdds	../inc/hgap.h	/^    int logOdds;          \/* Log odds style score - scaled x 1000. *\/$/;"	m	struct:hgAlignment
logOdds	../inc/hgap.h	/^    int logOdds;          \/* Log odds style score - scaled x 1000. *\/$/;"	m	struct:hgBoundedHit
logOdds	../inc/hgap.h	/^    int logOdds;          \/* Log odds style score - scaled x 1000. *\/$/;"	m	struct:hgScoredHit
logScaleFactor	../../inc/hmmstats.h	14;"	d
longLabel	../inc/trackDb.h	/^    char *longLabel;	\/* Long label displayed in middle *\/$/;"	m	struct:trackDb
longLabel	../inc/trackTable.h	/^    char *longLabel;	\/* Long label displayed in middle *\/$/;"	m	struct:trackTable
longestNameSize	../../lib/snofmake.c	/^static int longestNameSize(struct offsetList *list)$/;"	f	file:
lookupCodon	../../lib/dnautil.c	/^char lookupCodon(DNA *dna)$/;"	f
lumpExonsIntoGenes	../../lib/crudeali.c	/^static int lumpExonsIntoGenes(struct crudeExon *exons, int exonCount, $/;"	f	file:
lumpHits	../../lib/fuzzyFind.c	/^struct protoGene *lumpHits(struct ffAli **pHitList, DNA *ns, DNA *hs)$/;"	f
lumpHitsIntoExons	../../lib/crudeali.c	/^static int lumpHitsIntoExons(struct crudeHit *hits, int hitCount, struct crudeExon *exons)$/;"	f	file:
lumpProtoGenes	../../lib/fuzzyFind.c	/^void lumpProtoGenes(struct protoGene **pList,$/;"	f
machineSpeed	../../lib/portimpl.c	/^double machineSpeed()$/;"	f
main	back_hgText.c	/^int main(int argc, char *argv[])$/;"	f
main	fitField.c	/^int main() {$/;"	f
main	getFeatDna.c	/^int main(int argc, char *argv[])$/;"	f
main	hgText.c	/^int main(int argc, char *argv[])$/;"	f
makeBlocks	../../lib/fuzzyShow.c	/^static struct cdaAli *makeBlocks(struct ffAli *aliList, $/;"	f	file:
makeChromFileName	../../lib/wormdna.c	/^static void makeChromFileName(char *chromId, char *buf)$/;"	f	file:
makeDir	../../lib/osunix.c	/^boolean makeDir(char *dirName)$/;"	f
makeFaStartLine	back_hgText.c	/^char *makeFaStartLine(char *chrom, char *table, int start, int size)$/;"	f
makeFaStartLine	getFeatDna.c	/^char *makeFaStartLine(char *chrom, char *table, int start, int size)$/;"	f
makeFaStartLine	hgText.c	/^char *makeFaStartLine(char *chrom, char *table, int start, int size)$/;"	f
makeFastProber	../../lib/crudeali.c	/^static struct fastProber *makeFastProber(DNA *probeDna, int probeSize)$/;"	f	file:
makeFreqTable	../../lib/fuzzyFind.c	/^static void makeFreqTable(DNA *dna, int dnaSize, double freq[4])$/;"	f	file:
makeGoodTile	../../lib/crudeali.c	/^static boolean makeGoodTile(DNA *dna, bits32 *retTile16, bits16 *retTile8, int tileSize)$/;"	f	file:
makeHits	../../lib/crudeali.c	/^static int makeHits(struct fastProber *fp, struct nt4Seq *target, struct crudeHit *hits,$/;"	f	file:
makeHits16	../../lib/crudeali.c	/^static int makeHits16(struct fastProber *fp, struct nt4Seq *target, struct crudeHit *hits,$/;"	f	file:
makeHits8	../../lib/crudeali.c	/^static int makeHits8(struct fastProber *fp, struct nt4Seq *target, struct crudeHit *hits,$/;"	f	file:
makeIndex	../../lib/snofmake.c	/^static void makeIndex(FILE *in, FILE *out, $/;"	f	file:
makeIndividualHits16	../../lib/crudeali.c	/^static int makeIndividualHits16(struct probeTile **hash, bits32 *bases, int baseOffset, int baseWordCount,$/;"	f	file:
makeInitialGraph	../lib/ggGraph.c	/^static struct geneGraph *makeInitialGraph(struct ggMrnaCluster *mc, struct ggMrnaInput *ci)$/;"	f	file:
makeIsoformBaseName	../../lib/wormdna.c	/^static void makeIsoformBaseName(char *name)$/;"	f	file:
makeMatchTable	../../lib/xensmall.c	/^static void makeMatchTable(int matchTable[], double matchProb, double gcRatio)$/;"	f	file:
makeOffsetList	../../lib/snofmake.c	/^static struct offsetList *makeOffsetList(FILE *inFile, $/;"	f	file:
makePatSpace	../../lib/patSpace.c	/^struct patSpace *makePatSpace($/;"	f
makeSnofName	../../lib/snof.c	/^static boolean makeSnofName(char *snofName, char *rootName)$/;"	f	file:
makeSymHash	../../lib/xp.c	/^struct hash *makeSymHash()$/;"	f
makeTempName	../../lib/portimpl.c	/^void makeTempName(struct tempName *tn, char *base, char *suffix)$/;"	f
makeTileHash	../../lib/crudeali.c	/^static struct probeTile **makeTileHash()$/;"	f	file:
makeWobbleMatchTable	../../lib/xensmall.c	/^static void makeWobbleMatchTable(int matchTable[], double gcRatio)$/;"	f	file:
mapName	../inc/trackTable.h	/^    char *mapName;	\/* Symbolic ID of Track *\/$/;"	m	struct:trackTable
mapSts	../inc/mapSts.h	/^struct mapSts$/;"	s
mapStsCommaIn	../lib/mapSts.c	/^struct mapSts *mapStsCommaIn(char **pS, struct mapSts *ret)$/;"	f
mapStsCommaOut	../inc/mapSts.h	50;"	d
mapStsFree	../lib/mapSts.c	/^void mapStsFree(struct mapSts **pEl)$/;"	f
mapStsFreeList	../lib/mapSts.c	/^void mapStsFreeList(struct mapSts **pList)$/;"	f
mapStsLoad	../lib/mapSts.c	/^struct mapSts *mapStsLoad(char **row)$/;"	f
mapStsOutput	../lib/mapSts.c	/^void mapStsOutput(struct mapSts *el, FILE *f, char sep, char lastSep) $/;"	f
mapStsStaticLoad	../lib/mapSts.c	/^void mapStsStaticLoad(char **row, struct mapSts *ret)$/;"	f
mapStsTabOut	../inc/mapSts.h	47;"	d
mark0	../../inc/codebias.h	/^    int mark0[64];$/;"	m	struct:codonBias
mark1	../../inc/codebias.h	/^    int mark1[64][64];$/;"	m	struct:codonBias
marshfieldChr	../inc/stsInfo.h	/^    char *marshfieldChr;	\/* Chromosome in Marshfield map *\/$/;"	m	struct:stsInfo
marshfieldChrom	../inc/stsMap.h	/^    char *marshfieldChrom;	\/* Chromosome (no chr) from Marshfield map or 0 if none *\/$/;"	m	struct:stsMap
marshfieldChrom	../inc/stsMarker.h	/^    char *marshfieldChrom;	\/* Chromosome (no chr) from Marshfield map or 0 if none *\/$/;"	m	struct:stsMarker
marshfieldLOD	../inc/stsInfo.h	/^    float marshfieldLOD;	\/* LOD score in Marshfield map *\/$/;"	m	struct:stsInfo
marshfieldName	../inc/stsInfo.h	/^    char *marshfieldName;	\/* Name in Marshfield map *\/$/;"	m	struct:stsInfo
marshfieldPos	../inc/stsInfo.h	/^    float marshfieldPos;	\/* Position in Marshfield map *\/$/;"	m	struct:stsInfo
marshfieldPos	../inc/stsMap.h	/^    float marshfieldPos;	\/* Position on Marshfield map *\/$/;"	m	struct:stsMap
marshfieldPos	../inc/stsMarker.h	/^    float marshfieldPos;	\/* Position on Marshfield map *\/$/;"	m	struct:stsMarker
mask	../../inc/hash.h	/^    bits32 mask;$/;"	m	struct:hash
maskFromUpper	../../lib/genoFind.c	/^Bits *maskFromUpper(bioSeq *seq)$/;"	f
maskHash	../../inc/genoFind.h	/^    struct hash *maskHash;	\/* Hash to associate target sequence name and mask. *\/$/;"	m	struct:gfSavePslxData
maskSimplePepRepeat	../../lib/genoFind.c	/^static void maskSimplePepRepeat(struct genoFind *gf)$/;"	f	file:
maskedBits	../../inc/genoFind.h	/^    Bits *maskedBits;	\/* If non-null contains repeat-masking info. *\/$/;"	m	struct:gfSeqSource
matIx	../../lib/xensmall.c	/^enum matIx$/;"	g	file:
match	../../inc/psl.h	/^    unsigned match;	\/* Number of bases that match that aren't repeats *\/$/;"	m	struct:psl
match	../inc/pslWScore.h	/^    unsigned match;	\/* Number of bases that match that aren't repeats *\/$/;"	m	struct:pslWScore
matchB	../inc/genomicDups.h	/^    unsigned matchB;	\/* aligned bases that match *\/$/;"	m	struct:genomicDups
matchCount	../../inc/blastParse.h	/^    int matchCount;                     \/* Number of matching nucleotides. *\/$/;"	m	struct:blastBlock
matchInMem	../../lib/fuzzyFind.c	/^DNA *matchInMem(DNA *ns, DNA *ne, DNA *hs, DNA *he)$/;"	f
matchScore	../../lib/xensmall.c	601;"	d	file:
matchScore	../../lib/xensmall.c	803;"	d	file:
matchState	../../lib/xensmall.c	612;"	d	file:
matches	../inc/refAlign.h	/^    unsigned matches;	\/* Number of bases that match *\/$/;"	m	struct:refAlign
max	../../inc/common.h	492;"	d
maxAbortHandlers	../../lib/errabort.c	73;"	d	file:
maxAlignedOverlap	../../lib/xenbig.c	/^static void maxAlignedOverlap(char *a1, char *a2, char *b1, char *b2, int size,$/;"	f	file:
maxBlockCount	../../lib/patSpace.c	20;"	d	file:
maxBlockCount	../../lib/patSpace.c	28;"	d	file:
maxConn	../lib/jksql.c	/^enum {maxConn = 16};$/;"	e	file:
maxDigits	../../lib/seqOut.c	/^static int maxDigits(int x, int y)$/;"	f	file:
maxDist	../../lib/dgRange.c	/^   int minDist, maxDist;$/;"	m	struct:bfRange
maxDown	../../lib/gfClientLib.c	/^static int maxDown = 10;$/;"	v	file:
maxGap	../../inc/genoFind.h	/^    int maxGap;                          \/* Max gap between tiles in a clump. *\/$/;"	m	struct:genoFind
maxGap	../../lib/patSpace.c	/^    int maxGap;                          \/* Max gap between tiles in a clump. *\/$/;"	m	struct:patSpace
maxHitsAtOnce	../../lib/crudeali.c	565;"	d	file:
maxLineSize	../../lib/xenbig.c	113;"	d	file:
maxNameSize	../../inc/snof.h	/^    int maxNameSize;$/;"	m	struct:snof
maxNameSize	../../lib/fof.c	/^    int maxNameSize;             \/* Size allocated for index field in index. *\/$/;"	m	struct:fof
maxNameSize	../../lib/fof.c	/^static bits16 maxNameSize;      \/* Maximum size we've seen. *\/$/;"	v	file:
maxPat	../../inc/genoFind.h	/^    int maxPat;                          \/* Max # of times pattern can occur$/;"	m	struct:genoFind
maxPat	../../lib/patSpace.c	/^    psBits maxPat;                       \/* Max # of times pattern can occur$/;"	m	struct:patSpace
maxPatCount	../../lib/patSpace.c	37;"	d	file:
maxTileSize	../../lib/crudeali.c	21;"	d	file:
maxWarnHandlers	../../lib/errabort.c	32;"	d	file:
max_code	../../lib/gifcomp.c	/^static short max_code;$/;"	v	file:
mcFromCda	../lib/ggCluster.c	/^static struct ggMrnaCluster *mcFromCda(struct ggMrnaAli *ma, struct dnaSeq **contigs)$/;"	f	file:
mcMerge	../lib/ggCluster.c	/^static void mcMerge(struct ggMrnaCluster *aMc, struct ggMrnaCluster *bMc)$/;"	f	file:
mcnBreakpoints	../inc/mcnBreakpoints.h	/^struct mcnBreakpoints$/;"	s
mcnBreakpointsCommaIn	../lib/mcnBreakpoints.c	/^struct mcnBreakpoints *mcnBreakpointsCommaIn(char **pS, struct mcnBreakpoints *ret)$/;"	f
mcnBreakpointsCommaOut	../inc/mcnBreakpoints.h	55;"	d
mcnBreakpointsFree	../lib/mcnBreakpoints.c	/^void mcnBreakpointsFree(struct mcnBreakpoints **pEl)$/;"	f
mcnBreakpointsFreeList	../lib/mcnBreakpoints.c	/^void mcnBreakpointsFreeList(struct mcnBreakpoints **pList)$/;"	f
mcnBreakpointsLoad	../lib/mcnBreakpoints.c	/^struct mcnBreakpoints *mcnBreakpointsLoad(char **row)$/;"	f
mcnBreakpointsLoadAll	../lib/mcnBreakpoints.c	/^struct mcnBreakpoints *mcnBreakpointsLoadAll(char *fileName) $/;"	f
mcnBreakpointsOutput	../lib/mcnBreakpoints.c	/^void mcnBreakpointsOutput(struct mcnBreakpoints *el, FILE *f, char sep, char lastSep) $/;"	f
mcnBreakpointsStaticLoad	../lib/mcnBreakpoints.c	/^void mcnBreakpointsStaticLoad(char **row, struct mcnBreakpoints *ret)$/;"	f
mcnBreakpointsTabOut	../inc/mcnBreakpoints.h	52;"	d
meds	../inc/sage.h	/^    float *meds;	\/* The median count of all tags for each experiment. *\/$/;"	m	struct:sage
memGfx	../../inc/memgfx.h	/^struct memGfx$/;"	s
memHandler	../../inc/memalloc.h	/^struct memHandler$/;"	s
memMatch	../../lib/common.c	/^char *memMatch(char *needle, int nLen, char *haystack, int hLen)$/;"	f
memPool	../../inc/oldGff.h	/^    struct lm *memPool;$/;"	m	struct:gff
merge	back_hgText.c	/^int merge = -1;			\/* Merge close blocks? *\/$/;"	v
merge	getFeatDna.c	/^int merge = -1;			\/* Merge close blocks? *\/$/;"	v
merge	hgText.c	/^int merge = -1;			\/* Merge close blocks? *\/$/;"	v
mergeContigs	../../lib/xenbig.c	/^static void mergeContigs(struct dlList *contigList, int stitchMinScore)$/;"	f	file:
mergeIntoAdjacentClusters	../../lib/xenbig.c	/^static boolean mergeIntoAdjacentClusters(struct dlList *clusterList, struct dlNode *contigNode)$/;"	f	file:
mergeProtoGenes	../../lib/fuzzyFind.c	/^void mergeProtoGenes(struct protoGene **pList, struct protoGene *a, struct protoGene *b)$/;"	f
mergeTwo	../../lib/xenbig.c	/^static struct contig *mergeTwo(struct contig *a, struct contig *b)$/;"	f	file:
mergeUCSC	../inc/stsInfo.h	/^    unsigned *mergeUCSC;	\/* Related merged inactive UCSC ids *\/$/;"	m	struct:stsInfo
mergeUCSCcount	../inc/stsInfo.h	/^    unsigned mergeUCSCcount;	\/* Number of merged inactive UCSC ids *\/$/;"	m	struct:stsInfo
mergeWithinCluster	../../lib/xenbig.c	/^static void mergeWithinCluster(struct cluster *cluster)$/;"	f	file:
mgAddColor	../../lib/memgfx.c	/^Color mgAddColor(struct memGfx *mg, unsigned char r, unsigned char g, unsigned char b)$/;"	f
mgBarbedHorizontalLine	../../lib/memgfx.c	/^void mgBarbedHorizontalLine(struct memGfx *mg, int x, int y, $/;"	f
mgClearPixels	../../lib/memgfx.c	/^void mgClearPixels(struct memGfx *mg)$/;"	f
mgClipForBlit	../../lib/memgfx.c	/^boolean mgClipForBlit(int *w, int *h, int *sx, int *sy,$/;"	f
mgClosestColor	../../lib/memgfx.c	/^Color mgClosestColor(struct memGfx *mg, unsigned char r, unsigned char g, unsigned char b)$/;"	f
mgColorsFree	../../lib/memgfx.c	/^int mgColorsFree(struct memGfx *mg)$/;"	f
mgDrawBox	../../lib/memgfx.c	/^void mgDrawBox(struct memGfx *mg, int x, int y, int width, int height, Color color)$/;"	f
mgDrawLine	../../lib/memgfx.c	/^void mgDrawLine(struct memGfx *mg, int x1, int y1, int x2, int y2, Color color)$/;"	f
mgDrawRuler	../../lib/memgfx.c	/^void mgDrawRuler(struct memGfx *mg, int xOff, int yOff, int height, int width,$/;"	f
mgDrawRulerBumpText	../../lib/memgfx.c	/^void mgDrawRulerBumpText(struct memGfx *mg, int xOff, int yOff, $/;"	f
mgFindColor	../../lib/memgfx.c	/^Color mgFindColor(struct memGfx *mg, unsigned char r, unsigned char g, unsigned char b)$/;"	f
mgFontCharWidth	../../lib/memgfx.c	/^int mgFontCharWidth(MgFont *font, char c)$/;"	f
mgFontLineHeight	../../lib/memgfx.c	/^int mgFontLineHeight(MgFont *font)$/;"	f
mgFontPixelHeight	../../lib/memgfx.c	/^int mgFontPixelHeight(MgFont *font)$/;"	f
mgFontStringWidth	../../lib/memgfx.c	/^int mgFontStringWidth(MgFont *font, char *string)$/;"	f
mgFontWidth	../../lib/memgfx.c	/^int mgFontWidth(MgFont *font, char *chars, int charCount)$/;"	f
mgFree	../../lib/memgfx.c	/^void mgFree(struct memGfx **pmg)$/;"	f
mgHugeFont	../../lib/hugefnt.c	/^MgFont *mgHugeFont()$/;"	f
mgLargeFont	../../lib/largefnt.c	/^MgFont *mgLargeFont()$/;"	f
mgMediumFont	../../lib/medfnt.c	/^MgFont *mgMediumFont() { return &font_font; }$/;"	f
mgNew	../../lib/memgfx.c	/^struct memGfx *mgNew(int width, int height)$/;"	f
mgPutDot	../../inc/memgfx.h	83;"	d
mgPutSeg	../../lib/memgfx.c	/^void mgPutSeg(struct memGfx *mg, int x, int y, int width, Color *dots)$/;"	f
mgPutSegMaybeZeroClear	../../lib/memgfx.c	/^static void mgPutSegMaybeZeroClear(struct memGfx *mg, int x, int y, int width, Color *dots, boolean zeroClear)$/;"	f	file:
mgPutSegZeroClear	../../lib/memgfx.c	/^void mgPutSegZeroClear(struct memGfx *mg, int x, int y, int width, Color *dots)$/;"	f
mgSaveGif	../../lib/gifwrite.c	/^void mgSaveGif(struct memGfx *screen, char *name)$/;"	f
mgSaveToGif	../../lib/gifwrite.c	/^boolean mgSaveToGif(FILE *gif_file, struct memGfx *screen)$/;"	f
mgSetClip	../../lib/memgfx.c	/^void mgSetClip(struct memGfx *mg, int x, int y, int width, int height)$/;"	f
mgSetDefaultColorMap	../../lib/memgfx.c	/^static void mgSetDefaultColorMap(struct memGfx *mg)$/;"	f	file:
mgSmallFont	../../lib/sailfnt.c	/^MgFont *mgSmallFont()$/;"	f
mgSmallishFont	../../lib/smallishfnt.c	/^MgFont *mgSmallishFont()$/;"	f
mgText	../../lib/memgfx.c	/^void mgText(struct memGfx *mg, int x, int y, Color color, $/;"	f
mgTextBlit	../../lib/memgfx.c	/^void mgTextBlit(int width, int height, int bitX, int bitY,$/;"	f
mgTextBlitSolid	../../lib/memgfx.c	/^void mgTextBlitSolid(int width, int height, int bitX, int bitY,$/;"	f
mgTextCentered	../../lib/memgfx.c	/^void mgTextCentered(struct memGfx *mg, int x, int y, int width, int height, $/;"	f
mgTextRight	../../lib/memgfx.c	/^void mgTextRight(struct memGfx *mg, int x, int y, int width, int height, $/;"	f
mgTinyFont	../../lib/sixhi.c	/^MgFont *mgTinyFont()$/;"	f
mgUnclip	../../lib/memgfx.c	/^void mgUnclip(struct memGfx *mg)$/;"	f
mhStack	../../lib/memalloc.c	/^static struct memHandler *mhStack = &defaultMemHandler;$/;"	v	file:
mid	../../inc/snof.h	/^    char *mid;$/;"	m	struct:snof
midPsl	../inc/coordConv.h	/^    struct psl *midPsl,*upPsl,*downPsl; \/** alignments for each of the dnaSeqs *\/$/;"	m	struct:coordConvRep
midPsl	../lib/coordConv.c	/^    struct psl *midPsl,*upPsl,*downPsl;$/;"	m	struct:possibleCoord
midScore	../../inc/cda.h	/^    UBYTE midScore;             \/* 0-255  255 is perfect. *\/$/;"	m	struct:cdaBlock
midSeq	../inc/coordConv.h	/^    struct dnaSeq *midSeq,*upSeq,*downSeq; \/** 3 in order from 5' to 3' *\/$/;"	m	struct:coordConvRep
midStart	../inc/coordConv.h	/^    unsigned midStart,upStart,downStart; \/** starting position of dnaSeqs in old chrom *\/$/;"	m	struct:coordConvRep
milliDel	../inc/bbRepMask.h	/^    unsigned milliDel;	\/* Bases deleted in parts per thousand *\/$/;"	m	struct:bbRepMask
milliDel	../inc/rmskOut.h	/^    unsigned milliDel;	\/* Bases deleted in parts per thousand *\/$/;"	m	struct:rmskOut
milliDiv	../inc/bbRepMask.h	/^    unsigned milliDiv;	\/* Base mismatches in parts per thousand *\/$/;"	m	struct:bbRepMask
milliDiv	../inc/rmskOut.h	/^    unsigned milliDiv;	\/* Base mismatches in parts per thousand *\/$/;"	m	struct:rmskOut
milliIns	../inc/bbRepMask.h	/^    unsigned milliIns;	\/* Bases inserted in parts per thousand *\/$/;"	m	struct:bbRepMask
milliIns	../inc/rmskOut.h	/^    unsigned milliIns;	\/* Bases inserted in parts per thousand *\/$/;"	m	struct:rmskOut
milliMatchScore	../../lib/xenbig.c	/^static int milliMatchScore(struct contig *contig)$/;"	f	file:
milliScore	../../inc/cda.h	/^    short milliScore;               \/* Score 0-1000 *\/$/;"	m	struct:cdaAli
milliScore	../../inc/xa.h	/^    int milliScore;$/;"	m	struct:xaAli
milliScore	../inc/wabAli.h	/^    unsigned milliScore;	\/* Base identity in parts per thousand. *\/$/;"	m	struct:wabAli
min	../../inc/common.h	487;"	d
minDist	../../lib/dgRange.c	/^   int minDist, maxDist;$/;"	m	struct:bfRange
minGood	../../inc/genoFind.h	/^    int minGood;		\/* Minimum sequence identity in parts per thousand. *\/$/;"	m	struct:gfSavePslxData
minMatch	../../inc/genoFind.h	/^    int minMatch;                        \/* Minimum number of tile hits needed$/;"	m	struct:genoFind
minMatch	../../lib/patSpace.c	/^    int minMatch;                        \/* Minimum number of tile hits needed$/;"	m	struct:patSpace
misMatch	../../inc/psl.h	/^    unsigned misMatch;	\/* Number of bases that don't match *\/$/;"	m	struct:psl
misMatch	../inc/pslWScore.h	/^    unsigned misMatch;	\/* Number of bases that don't match *\/$/;"	m	struct:pslWScore
misMatches	../inc/refAlign.h	/^    unsigned misMatches;	\/* Number of bases that don't match *\/$/;"	m	struct:refAlign
mismatchB	../inc/genomicDups.h	/^    unsigned mismatchB;	\/* aligned bases that do not match *\/$/;"	m	struct:genomicDups
mommy	../../lib/xensmall.c	/^    UBYTE mommy; \/* Unlike a parent, you can only have one mommy! *\/$/;"	m	struct:aliCell
mommyTraceBit	../../lib/xensmall.c	32;"	d	file:
more	../../inc/snof.h	/^    char *more;$/;"	m	struct:snof
motherString	../../inc/wormdna.h	/^    char *motherString;         \/* Holds memory for other strings. *\/$/;"	m	struct:wormCdnaInfo
mouseSyn	../inc/mouseSyn.h	/^struct mouseSyn$/;"	s
mouseSynCommaIn	../lib/mouseSyn.c	/^struct mouseSyn *mouseSynCommaIn(char **pS, struct mouseSyn *ret)$/;"	f
mouseSynCommaOut	../inc/mouseSyn.h	45;"	d
mouseSynFree	../lib/mouseSyn.c	/^void mouseSynFree(struct mouseSyn **pEl)$/;"	f
mouseSynFreeList	../lib/mouseSyn.c	/^void mouseSynFreeList(struct mouseSyn **pList)$/;"	f
mouseSynLoad	../lib/mouseSyn.c	/^struct mouseSyn *mouseSynLoad(char **row)$/;"	f
mouseSynOutput	../lib/mouseSyn.c	/^void mouseSynOutput(struct mouseSyn *el, FILE *f, char sep, char lastSep) $/;"	f
mouseSynStaticLoad	../lib/mouseSyn.c	/^void mouseSynStaticLoad(char **row, struct mouseSyn *ret)$/;"	f
mouseSynTabOut	../inc/mouseSyn.h	42;"	d
mrnaAcc	../inc/refLink.h	/^    char *mrnaAcc;	\/* mRNA accession *\/$/;"	m	struct:refLink
mrnaAli	../../inc/maDbRep.h	/^struct mrnaAli$/;"	s
mrnaAliCommaOut	../../inc/maDbRep.h	58;"	d
mrnaAliTabOut	../../inc/maDbRep.h	55;"	d
mrnaClone	../inc/estPair.h	/^    char *mrnaClone;	\/* Mrna clone name *\/$/;"	m	struct:estPair
mrnaHtmlEnd	../lib/hgFind.c	/^static void mrnaHtmlEnd(struct hgPosTable *table, FILE *f)$/;"	f	file:
mrnaHtmlOnePos	../lib/hgFind.c	/^static void mrnaHtmlOnePos(struct hgPosTable *table, struct hgPos *pos, FILE *f)$/;"	f	file:
mrnaHtmlStart	../lib/hgFind.c	/^static void mrnaHtmlStart(struct hgPosTable *table, FILE *f)$/;"	f	file:
mrnaKeysHtmlOnePos	../lib/hgFind.c	/^static void mrnaKeysHtmlOnePos(struct hgPosTable *table, struct hgPos *pos, FILE *f)$/;"	f	file:
mrnaRefCount	../../inc/geneGraph.h	/^    int mrnaRefCount;                   \/* Count of mRNAs supporting this. *\/$/;"	m	struct:geneGraph
mrnaRefCount	../inc/geneGraph.h	/^    int mrnaRefCount;                   \/* Count of mRNAs supporting this. *\/$/;"	m	struct:geneGraph
mrnaRefs	../../inc/geneGraph.h	/^    HGID *mrnaRefs;                     \/* IDs of mRNAs supporting this. *\/$/;"	m	struct:geneGraph
mrnaRefs	../inc/geneGraph.h	/^    HGID *mrnaRefs;                     \/* IDs of mRNAs supporting this. *\/$/;"	m	struct:geneGraph
mrnaType	../lib/hgFind.c	/^static char *mrnaType(char *acc)$/;"	f	file:
msg	../inc/coordConv.h	/^    char *msg; \/** optional message or url *\/$/;"	m	struct:coordConvRep
mulDiv	../../lib/intExp.c	/^static int mulDiv()$/;"	f	file:
mustFindVarData	../../lib/cheapcgi.c	/^static char *mustFindVarData(char *varName)$/;"	f	file:
mustOpen	../../lib/common.c	/^FILE *mustOpen(char *fileName, char *mode)$/;"	f
mustRead	../../lib/common.c	/^void mustRead(FILE *file, void *buf, size_t size)$/;"	f
mustReadOne	../../inc/common.h	446;"	d
mustReadString	../../lib/common.c	/^char *mustReadString(FILE *f)$/;"	f
mustWrite	../../lib/common.c	/^void mustWrite(FILE *file, void *buf, size_t size)$/;"	f
myInt	../../lib/gemfont.c	/^    } myInt;$/;"	t	file:
mysqlHost	../../lib/portimpl.c	/^char *mysqlHost()$/;"	f
n	../inc/agpGap.h	/^    char n[2];	\/* always 'N' *\/$/;"	m	struct:agpGap
nChars	../../inc/seqOut.h	/^    char nChars[256];$/;"	m	struct:baf
nCount	../../inc/psl.h	/^    unsigned nCount;	\/* Number of 'N' bases *\/$/;"	m	struct:psl
nCount	../inc/pslWScore.h	/^    unsigned nCount;	\/* Number of 'N' bases *\/$/;"	m	struct:pslWScore
nCountDown	../../inc/seqOut.h	/^    bool nCountDown;	 \/* True if want needle numbers counting down. *\/$/;"	m	struct:baf
nCurPos	../../inc/seqOut.h	/^    int nCurPos;$/;"	m	struct:baf
nEnd	../../inc/cda.h	/^    int nStart, nEnd;           \/* Start and end position in cDNA. *\/$/;"	m	struct:cdaBlock
nEnd	../../inc/fuzzyFind.h	/^    char *nStart, *nEnd;          \/* Needle start and end. (1\/2 open interval) *\/$/;"	m	struct:ffAli
nEnd	../../lib/fuzzyFind.c	/^    DNA *hStart, *hEnd, *nStart, *nEnd;$/;"	m	struct:protoGene
nLineStart	../../inc/seqOut.h	/^    int nLineStart;$/;"	m	struct:baf
nNumOff	../../inc/seqOut.h	/^    int nNumOff, hNumOff;$/;"	m	struct:baf
nStart	../../inc/cda.h	/^    int nStart, nEnd;           \/* Start and end position in cDNA. *\/$/;"	m	struct:cdaBlock
nStart	../../inc/fuzzyFind.h	/^    char *nStart, *nEnd;          \/* Needle start and end. (1\/2 open interval) *\/$/;"	m	struct:ffAli
nStart	../../lib/fuzzyFind.c	/^    DNA *hStart, *hEnd, *nStart, *nEnd;$/;"	m	struct:protoGene
name	../../inc/cda.h	/^    char *name;$/;"	m	struct:cdaAli
name	../../inc/cheapcgi.h	/^    char *name;			\/* Name - allocated in hash. *\/$/;"	m	struct:cgiVar
name	../../inc/cheapcgi.h	/^    char *name;$/;"	m	struct:cgiChoice
name	../../inc/common.h	/^    char name[1];               \/* Allocated at run time to length of string. *\/$/;"	m	struct:slName
name	../../inc/diGraph.h	/^    char *name;            \/* Name of node (allocated in hash). *\/$/;"	m	struct:dgNode
name	../../inc/dnaseq.h	/^    char *name;           \/* Name of sequence. *\/$/;"	m	struct:dnaSeq
name	../../inc/gdf.h	/^    char *name;$/;"	m	struct:gdfGene
name	../../inc/gff.h	/^    char *name;	  \/* Name, not allocated here. *\/$/;"	m	struct:gffFeature
name	../../inc/gff.h	/^    char *name;	  \/* Name, not allocated here. *\/$/;"	m	struct:gffSource
name	../../inc/gff.h	/^    char *name;     \/* Name of group. Not allocated here. *\/$/;"	m	struct:gffGroup
name	../../inc/gff.h	/^    char *name;   \/* Name, not allocated here. *\/$/;"	m	struct:gffGeneId
name	../../inc/gff.h	/^    char *name;   \/* Name, not allocated here. *\/$/;"	m	struct:gffSeqName
name	../../inc/hash.h	/^    char *name;$/;"	m	struct:hashEl
name	../../inc/hgGene.h	/^    char *name;	\/* Name of gene *\/$/;"	m	struct:hgGene
name	../../inc/hgGene.h	/^    char *name;	\/* Name of gene finder *\/$/;"	m	struct:geneFinder
name	../../inc/hgGene.h	/^    char *name;	\/* Name of transcript *\/$/;"	m	struct:hgTranscript
name	../../inc/hgap.h	/^    char name[16];            \/* GenBank accession. *\/$/;"	m	struct:hgBac
name	../../inc/hgap.h	/^    char name[20];            \/* Name like AC000007.24 *\/$/;"	m	struct:hgContig
name	../../inc/nt4.h	/^    char *name;                 \/* Name of sequence. *\/$/;"	m	struct:nt4Seq
name	../../inc/oldGff.h	/^    char name[64];$/;"	m	struct:gffGene
name	../../inc/portable.h	/^    char name[1];	\/* Allocated at run time. *\/$/;"	m	struct:fileInfo
name	../../inc/shaRes.h	/^    char *name;$/;"	m	struct:shaResNode
name	../../inc/trans3.h	/^     char *name;			\/* Name (not allocated here) *\/$/;"	m	struct:trans3
name	../../inc/wormdna.h	/^    char *name;                 \/* Name of cDNA. *\/$/;"	m	struct:wormCdnaInfo
name	../../inc/wormdna.h	/^    char name[1];   \/* Allocated to fit. *\/$/;"	m	struct:wormFeature
name	../../inc/xa.h	/^    char *name;$/;"	m	struct:xaAli
name	../../lib/dnautil.c	/^    char *name;$/;"	m	struct:aminoAcidTable
name	../../lib/fof.c	/^    char *name;                  \/* Name of fof given to fofOpen. *\/$/;"	m	struct:fof
name	../../lib/fof.c	/^    char name[1];   \/* Dynamically allocated to fit actual size. *\/$/;"	m	struct:fofRecord
name	../../lib/snofmake.c	/^    char *name;$/;"	m	struct:offsetList
name	../../lib/xenbig.c	/^    char *name;$/;"	m	struct:contig
name	../../lib/xensmall.c	/^    char *name;$/;"	m	struct:aliState
name	../inc/bbRepMask.h	/^    char *name;	\/* Name of repeat *\/$/;"	m	struct:bbRepMask
name	../inc/bed.h	/^    char *name;	\/* Name of item *\/$/;"	m	struct:bed
name	../inc/cgh.h	/^    char *name;	\/* Name of the cell line (type 3 only) *\/$/;"	m	struct:cgh
name	../inc/clonePos.h	/^    char *name;	\/* Name of clone including version. *\/$/;"	m	struct:clonePos
name	../inc/cpgIsland.h	/^    char *name;	\/* CpG Island *\/$/;"	m	struct:cpgIsland
name	../inc/cytoBand.h	/^    char *name;	\/* Name of cytogenetic band *\/$/;"	m	struct:cytoBand
name	../inc/exoFish.h	/^    char *name;	\/* Just a dummy dot *\/$/;"	m	struct:exoFish
name	../inc/exprBed.h	/^    char *name;	\/* feature standardized name; can be a gene, exon or other *\/$/;"	m	struct:exprBed
name	../inc/fishClones.h	/^    char *name;	\/* Name of clone *\/$/;"	m	struct:fishClones
name	../inc/gcPercent.h	/^    char *name;	\/* Constant string GCpct *\/$/;"	m	struct:gcPercent
name	../inc/genePred.h	/^    char *name;	\/* Name of gene *\/$/;"	m	struct:genePred
name	../inc/genomicDups.h	/^    char *name;	\/* Other FPC contig involved *\/$/;"	m	struct:genomicDups
name	../inc/hgFind.h	/^     char *name;		\/* Name of position - one word. *\/$/;"	m	struct:hgPos
name	../inc/hgFind.h	/^    char *name;			\/* Name of table.  Not allocated here. *\/$/;"	m	struct:hgPosTable
name	../inc/hgGene.h	/^    char *name;	\/* Name of gene *\/$/;"	m	struct:hgGene
name	../inc/hgGene.h	/^    char *name;	\/* Name of gene finder *\/$/;"	m	struct:geneFinder
name	../inc/hgGene.h	/^    char *name;	\/* Name of transcript *\/$/;"	m	struct:hgTranscript
name	../inc/hgap.h	/^    char name[16];            \/* GenBank accession. *\/$/;"	m	struct:hgBac
name	../inc/hgap.h	/^    char name[20];            \/* Name like AC000007.24 *\/$/;"	m	struct:hgContig
name	../inc/isochores.h	/^    char *name;	\/* Name of isochore - AT-rich or GC-rich *\/$/;"	m	struct:isochores
name	../inc/knownInfo.h	/^    char *name;	\/* connects with genieKnown->name *\/$/;"	m	struct:knownInfo
name	../inc/knownMore.h	/^    char *name;	\/* The name displayed in the browser: OMIM, gbGeneName, or transId *\/$/;"	m	struct:knownMore
name	../inc/lfs.h	/^    char *name;	\/* Name of clone *\/$/;"	m	struct:lfs
name	../inc/mapSts.h	/^    char *name;	\/* Name of STS marker *\/$/;"	m	struct:mapSts
name	../inc/mcnBreakpoints.h	/^    char *name;	\/* Shortened Traitgroup Name *\/$/;"	m	struct:mcnBreakpoints
name	../inc/mouseSyn.h	/^    char *name;	\/* Name of mouse chromosome *\/$/;"	m	struct:mouseSyn
name	../inc/pepPred.h	/^    char *name;	\/* Name of gene - same as in genePred *\/$/;"	m	struct:pepPred
name	../inc/qaSeq.h	/^    char *name;           \/* Name of sequence. *\/$/;"	m	struct:qaSeq
name	../inc/refAlign.h	/^    char *name;	\/* Name of item *\/$/;"	m	struct:refAlign
name	../inc/refLink.h	/^    char *name;	\/* Name displayed in UI *\/$/;"	m	struct:refLink
name	../inc/rnaGene.h	/^    char *name;	\/* Name of gene *\/$/;"	m	struct:rnaGene
name	../inc/roughAli.h	/^    char *name;	\/* Name of other sequence *\/$/;"	m	struct:roughAli
name	../inc/sanger22extra.h	/^    char *name;	\/* Transcript name *\/$/;"	m	struct:sanger22extra
name	../inc/simpleRepeat.h	/^    char *name;	\/* Simple Repeats tag name *\/$/;"	m	struct:simpleRepeat
name	../inc/snp.h	/^    char *name;	\/* Name of SNP *\/$/;"	m	struct:snp
name	../inc/softPromoter.h	/^    char *name;	\/* As displayed in browser *\/$/;"	m	struct:softPromoter
name	../inc/softberryHom.h	/^    char *name;	\/* Softberry gene name *\/$/;"	m	struct:softberryHom
name	../inc/stsInfo.h	/^    char *name;	\/* Official UCSC name *\/$/;"	m	struct:stsInfo
name	../inc/stsMap.h	/^    char *name;	\/* Name of STS marker *\/$/;"	m	struct:stsMap
name	../inc/stsMarker.h	/^    char *name;	\/* Name of STS marker *\/$/;"	m	struct:stsMarker
nameCount	../inc/stsInfo.h	/^    unsigned nameCount;	\/* Number of alias names *\/$/;"	m	struct:stsInfo
nameState	../../lib/xensmall.c	/^static struct aliState *nameState(struct aliMatrix *am, int stateIx, char *name, char emitLetter)$/;"	f	file:
needHugeMem	../../lib/memalloc.c	/^void *needHugeMem(size_t size)$/;"	f
needHugeZeroedMem	../../lib/memalloc.c	/^void *needHugeZeroedMem(long size)$/;"	f
needLargeMem	../../lib/memalloc.c	/^void *needLargeMem(size_t size)$/;"	f
needLargeZeroedMem	../../lib/memalloc.c	/^void *needLargeZeroedMem(long size)$/;"	f
needMem	../../lib/memalloc.c	/^void *needMem(size_t size)$/;"	f
needMoreMem	../../lib/memalloc.c	/^void *needMoreMem(void *old, size_t copySize, size_t newSize)$/;"	f
needNum	../lib/customTrack.c	/^static int needNum(char *nums, int lineIx)$/;"	f	file:
needle	../../inc/seqOut.h	/^    DNA *needle, *haystack;$/;"	m	struct:baf
needsLift	../inc/customTrack.h	/^    boolean needsLift;		\/* True if coordinates need lifting. *\/$/;"	m	struct:customTrack
negParenNum	../lib/rmskOut.c	/^static int negParenNum(struct lineFile *lf, char *s)$/;"	f	file:
nest	../../inc/hgap.h	/^    struct hgNest *nest;      \/* Coordinate space. *\/$/;"	m	struct:hgBac
nest	../../inc/hgap.h	/^    struct hgNest *nest;      \/* Coordinate space. *\/$/;"	m	struct:hgContig
nest	../inc/hgap.h	/^    struct hgNest *nest;      \/* Coordinate space. *\/$/;"	m	struct:hgBac
nest	../inc/hgap.h	/^    struct hgNest *nest;      \/* Coordinate space. *\/$/;"	m	struct:hgContig
nest	../lib/hgap.c	/^    struct hgNest *nest;	\/* Nest. *\/$/;"	m	struct:hgNestBinder
netCatchPipes	../../lib/net.c	/^void netCatchPipes()$/;"	f
netClearPipeFlag	../../lib/net.c	/^void  netClearPipeFlag()$/;"	f
netConnect	../../lib/net.c	/^int netConnect(char *hostName, char *portName)$/;"	f
netGetOpenHttp	../../lib/net.c	/^static int netGetOpenHttp(char *url)$/;"	f	file:
netLineFileOpen	../../lib/net.c	/^struct lineFile *netLineFileOpen(char *url)$/;"	f
netMustConnect	../../lib/net.c	/^int netMustConnect(char *hostName, char *portName)$/;"	f
netMustReadAll	../../lib/net.c	/^int netMustReadAll(int sd, void *vBuf, size_t size)$/;"	f
netParseUrl	../../lib/net.c	/^void netParseUrl(char *url, struct netParsedUrl *parsed)$/;"	f
netParsedUrl	../../inc/net.h	/^struct netParsedUrl$/;"	s
netPipeFlag	../../lib/net.c	/^volatile boolean netPipeFlag = FALSE;	\/* Flag broken pipes here. *\/$/;"	v
netPipeHandler	../../lib/net.c	/^static void netPipeHandler(int sigNum)$/;"	f	file:
netPipeIsBroken	../../lib/net.c	/^boolean netPipeIsBroken()$/;"	f
netReadAll	../../lib/net.c	/^int netReadAll(int sd, void *vBuf, size_t size)$/;"	f
netSkipHttpHeaderLines	../../lib/net.c	/^static void netSkipHttpHeaderLines(struct lineFile *lf)$/;"	f	file:
netSlurpUrl	../../lib/net.c	/^struct dyString *netSlurpUrl(char *url)$/;"	f
netUrlOpen	../../lib/net.c	/^int netUrlOpen(char *url)$/;"	f
newBlock	../../lib/localmem.c	/^static struct lmBlock *newBlock(struct lm *lm, size_t reqSize)$/;"	f	file:
newClump	../../lib/patSpace.c	/^static struct patClump *newClump(struct patSpace *ps, struct blockPos *first, struct blockPos *last)$/;"	f	file:
newDlList	../../lib/dlist.c	/^struct dlList *newDlList()$/;"	f
newDnaSeq	../../lib/dnaseq.c	/^struct dnaSeq *newDnaSeq(DNA *dna, int size, char *name)$/;"	f
newDyString	../../lib/dystring.c	/^struct dyString *newDyString(int initialBufSize)$/;"	f
newFileInfo	../../lib/osunix.c	/^struct fileInfo *newFileInfo(char *name, long size, bool isDir)$/;"	f
newFofRecEl	../../lib/fof.c	/^struct fofRecList *newFofRecEl(int fileIx, long offset, long size, char *name, int nameLen)$/;"	f
newGdfGene	../../lib/gdf.c	/^struct gdfGene *newGdfGene(char *name, int nameSize, int exonCount, char strand, UBYTE chromIx)$/;"	f
newHash	../../lib/hash.c	/^struct hash *newHash(int powerOfTwoSize)$/;"	f
newKvt	../../lib/keys.c	/^struct kvt *newKvt(int size)$/;"	f
newNt4	../../lib/nt4.c	/^struct nt4Seq *newNt4(DNA *dna, int size, char *name)$/;"	f
newOffset	../../lib/snofmake.c	/^static struct offsetList *newOffset(char *name, int nameLen)$/;"	f	file:
newPatSpace	../../lib/patSpace.c	/^static struct patSpace *newPatSpace(int minMatch, int maxGap, int seedSize)$/;"	f	file:
newScore	../../lib/xensmall.c	604;"	d	file:
newScore	../../lib/xensmall.c	806;"	d	file:
newSlName	../../lib/common.c	/^struct slName *newSlName(char *name)$/;"	f
newWormFeature	../../lib/wormdna.c	/^struct wormFeature *newWormFeature(char *name, char *chrom, int start, int end, char typeByte)$/;"	f
next	../../inc/blastParse.h	/^    struct blastBlock *next;$/;"	m	struct:blastBlock
next	../../inc/blastParse.h	/^    struct blastFile *next;$/;"	m	struct:blastFile
next	../../inc/blastParse.h	/^    struct blastGappedAli *next;$/;"	m	struct:blastGappedAli
next	../../inc/blastParse.h	/^    struct blastQuery *next;$/;"	m	struct:blastQuery
next	../../inc/cda.h	/^    struct cdaAli *next;$/;"	m	struct:cdaAli
next	../../inc/cheapcgi.h	/^    struct cgiVar *next;	\/* Next in list. *\/$/;"	m	struct:cgiVar
next	../../inc/common.h	/^    struct slList *next;$/;"	m	struct:slList
next	../../inc/common.h	/^    struct slName *next;	\/* Next in list. *\/$/;"	m	struct:slName
next	../../inc/common.h	/^    struct slRef *next;	\/* Next in list. *\/$/;"	m	struct:slRef
next	../../inc/crudeali.h	/^    struct crudeAli *next;$/;"	m	struct:crudeAli
next	../../inc/diGraph.h	/^    struct dgConnection *next;  \/* Next in list. *\/$/;"	m	struct:dgConnection
next	../../inc/diGraph.h	/^    struct dgEdgeRef *next;	\/* Next in list. *\/$/;"	m	struct:dgEdgeRef
next	../../inc/diGraph.h	/^    struct dgNode *next;   \/* Next in master node list. *\/$/;"	m	struct:dgNode
next	../../inc/diGraph.h	/^    struct dgNodeRef *next;	\/* Next in list. *\/$/;"	m	struct:dgNodeRef
next	../../inc/dlist.h	/^    struct dlNode *next;$/;"	m	struct:dlNode
next	../../inc/dnaseq.h	/^    struct dnaSeq *next;  \/* Next in list. *\/$/;"	m	struct:dnaSeq
next	../../inc/dystring.h	/^    struct dyString *next;	\/* Next in list. *\/$/;"	m	struct:dyString
next	../../inc/ens.h	/^    struct ensAnalysis *next;	\/* Next in list *\/$/;"	m	struct:ensAnalysis
next	../../inc/ens.h	/^    struct ensExon *next;		\/* Next in list (in ensGene) *\/$/;"	m	struct:ensExon
next	../../inc/ens.h	/^    struct ensFeature *next;	   \/* Next in list. *\/$/;"	m	struct:ensFeature
next	../../inc/ens.h	/^    struct ensGene *next;		  \/* Next in list. *\/$/;"	m	struct:ensGene
next	../../inc/ens.h	/^    struct ensTranscript *next;		\/* Next in list. *\/$/;"	m	struct:ensTranscript
next	../../inc/fof.h	/^    struct fofBatch *next;  \/* Next in list. *\/$/;"	m	struct:fofBatch
next	../../inc/gdf.h	/^    struct gdfGene *next;$/;"	m	struct:gdfGene
next	../../inc/geneGraph.h	/^    struct geneGraph *next;		\/* Next in list. *\/$/;"	m	struct:geneGraph
next	../../inc/geneGraph.h	/^    struct ggAliInfo *next;   \/* Next in list. *\/$/;"	m	struct:ggAliInfo
next	../../inc/genoFind.h	/^    struct gfClump *next;	\/* Next clump. *\/$/;"	m	struct:gfClump
next	../../inc/genoFind.h	/^    struct gfSeqSource *next;$/;"	m	struct:gfSeqSource
next	../../inc/genoFind.h	/^   struct gfHit *next;$/;"	m	struct:gfHit
next	../../inc/gff.h	/^    struct gffFeature *next; \/* Next in list. *\/$/;"	m	struct:gffFeature
next	../../inc/gff.h	/^    struct gffFile *next;$/;"	m	struct:gffFile
next	../../inc/gff.h	/^    struct gffGeneId *next;  \/* Next in list. *\/$/;"	m	struct:gffGeneId
next	../../inc/gff.h	/^    struct gffGroup *next;   \/* Next group in file. *\/$/;"	m	struct:gffGroup
next	../../inc/gff.h	/^    struct gffLine *next;  \/* Next line in file *\/$/;"	m	struct:gffLine
next	../../inc/gff.h	/^    struct gffSeqName *next;  \/* Next in list. *\/$/;"	m	struct:gffSeqName
next	../../inc/gff.h	/^    struct gffSource *next; \/* Next in list. *\/$/;"	m	struct:gffSource
next	../../inc/hash.h	/^    struct hashEl *next;$/;"	m	struct:hashEl
next	../../inc/hgGene.h	/^    struct geneFinder *next;  \/* Next in singly linked list. *\/$/;"	m	struct:geneFinder
next	../../inc/hgGene.h	/^    struct hgGene *next;  \/* Next in singly linked list. *\/$/;"	m	struct:hgGene
next	../../inc/hgGene.h	/^    struct hgTranscript *next;  \/* Next in singly linked list. *\/$/;"	m	struct:hgTranscript
next	../../inc/hgap.h	/^    struct hgAliHit *next;$/;"	m	struct:hgAliHit
next	../../inc/hgap.h	/^    struct hgAlignment *next;$/;"	m	struct:hgAlignment
next	../../inc/hgap.h	/^    struct hgBac *next;	      \/* Next in list. *\/$/;"	m	struct:hgBac
next	../../inc/hgap.h	/^    struct hgBoundedHit *next;$/;"	m	struct:hgBoundedHit
next	../../inc/hgap.h	/^    struct hgContig *next;    \/* Next in list. *\/$/;"	m	struct:hgContig
next	../../inc/hgap.h	/^    struct hgHit *next;   \/* Next in list. *\/$/;"	m	struct:hgHit
next	../../inc/hgap.h	/^    struct hgNest *next;	\/* Pointer to next sibling. *\/$/;"	m	struct:hgNest
next	../../inc/hgap.h	/^    struct hgRange *next; \/* Next in list. *\/$/;"	m	struct:hgRange
next	../../inc/hgap.h	/^    struct hgScoredHit *next;$/;"	m	struct:hgScoredHit
next	../../inc/kxTok.h	/^    struct kxTok *next;$/;"	m	struct:kxTok
next	../../inc/linefile.h	/^    struct lineFile *next;	\/* Might need to be on a list. *\/$/;"	m	struct:lineFile
next	../../inc/maDbRep.h	/^    struct mrnaAli *next;  \/* Next in singly linked list. *\/$/;"	m	struct:mrnaAli
next	../../inc/memalloc.h	/^    struct memHandler *next;$/;"	m	struct:memHandler
next	../../inc/nt4.h	/^    struct nt4Seq *next;	\/* Next in list. *\/$/;"	m	struct:nt4Seq
next	../../inc/oldGff.h	/^    struct gffGene *next;	\/* This must be first field! *\/$/;"	m	struct:gffGene
next	../../inc/oldGff.h	/^    struct gffSegment *next;	\/* This must be first field! *\/$/;"	m	struct:gffSegment
next	../../inc/patSpace.h	/^    struct patClump *next;     \/* Link to next in list. *\/$/;"	m	struct:patClump
next	../../inc/portable.h	/^    struct fileInfo  *next;	\/* Next in list. *\/$/;"	m	struct:fileInfo
next	../../inc/psl.h	/^    struct psl *next;  \/* Next in singly linked list. *\/$/;"	m	struct:psl
next	../../inc/repMask.h	/^    struct repeatMaskOut *next;  \/* Next in singly linked list. *\/$/;"	m	struct:repeatMaskOut
next	../../inc/shaRes.h	/^    struct shaResNode *next;$/;"	m	struct:shaResNode
next	../../inc/spaceSaver.h	/^    struct spaceNode *next;	\/* Next in list. *\/$/;"	m	struct:spaceNode
next	../../inc/spaceSaver.h	/^    struct spaceRowTracker *next;	\/* Next in list. *\/$/;"	m	struct:spaceRowTracker
next	../../inc/spaceSaver.h	/^    struct spaceSaver *next;	\/* Next in list. *\/$/;"	m	struct:spaceSaver
next	../../inc/supStitch.h	/^    struct ssBundle *next;	\/* Next in list. *\/$/;"	m	struct:ssBundle
next	../../inc/supStitch.h	/^    struct ssFfItem *next;      \/* Next in list. *\/$/;"	m	struct:ssFfItem
next	../../inc/trans3.h	/^     struct trans3 *next;		\/* Next in list. *\/$/;"	m	struct:trans3
next	../../inc/unfin.h	/^    struct contigTree  *next;    \/* Sibling. *\/$/;"	m	struct:contigTree
next	../../inc/wormdna.h	/^    struct wormFeature *next;$/;"	m	struct:wormFeature
next	../../inc/xa.h	/^    struct xaAli *next;$/;"	m	struct:xaAli
next	../../inc/xp.h	/^    struct xp *next;	\/* Next in list. *\/$/;"	m	struct:xp
next	../../lib/crudeali.c	/^    struct probeTile *next;$/;"	m	struct:probeTile
next	../../lib/dgRange.c	/^   struct bfEdge *next;    \/* Pointer to next element. *\/$/;"	m	struct:bfEdge
next	../../lib/fof.c	/^    struct fofRecList *next;$/;"	m	struct:fofRecList
next	../../lib/gfClientLib.c	/^    struct gfRange *next;  \/* Next in singly linked list. *\/$/;"	m	struct:gfRange
next	../../lib/localmem.c	/^    struct lmBlock *next;$/;"	m	struct:lmBlock
next	../../lib/memalloc.c	/^    struct carefulMemBlock *next;$/;"	m	struct:carefulMemBlock
next	../../lib/memgfx.c	/^    struct colHashEl *next;	\/* Next in list. *\/$/;"	m	struct:colHashEl
next	../../lib/nib.c	/^    struct nibStream *next;$/;"	m	struct:nibStream
next	../../lib/snofmake.c	/^    struct offsetList *next;$/;"	m	struct:offsetList
next	../../lib/supStitch.c	/^    struct ssEdge *next;         \/* Next edge in waysIn list. *\/$/;"	m	struct:ssEdge
next	../../lib/xensmall.c	/^    struct aliPair *next;$/;"	m	struct:aliPair
next	../inc/agpFrag.h	/^    struct agpFrag *next;  \/* Next in singly linked list. *\/$/;"	m	struct:agpFrag
next	../inc/agpGap.h	/^    struct agpGap *next;  \/* Next in singly linked list. *\/$/;"	m	struct:agpGap
next	../inc/bbRepMask.h	/^    struct bbRepMask *next;  \/* Next in singly linked list. *\/$/;"	m	struct:bbRepMask
next	../inc/bed.h	/^    struct bed *next;  \/* Next in singly linked list. *\/$/;"	m	struct:bed
next	../inc/bed.h	/^    struct bedLine *next;	\/* Next in list. *\/$/;"	m	struct:bedLine
next	../inc/cgh.h	/^    struct cgh *next;  \/* Next in singly linked list. *\/$/;"	m	struct:cgh
next	../inc/chromInfo.h	/^    struct chromInfo *next;  \/* Next in singly linked list. *\/$/;"	m	struct:chromInfo
next	../inc/chromInserts.h	/^    struct bigInsert *next;	\/* Next in list. *\/$/;"	m	struct:bigInsert
next	../inc/chromInserts.h	/^    struct chromInserts *next;	  \/* Next in list. *\/$/;"	m	struct:chromInserts
next	../inc/clonePos.h	/^    struct clonePos *next;  \/* Next in singly linked list. *\/$/;"	m	struct:clonePos
next	../inc/coordConv.h	/^    struct coordConv *next;  \/** Next in singly linked list. *\/$/;"	m	struct:coordConv
next	../inc/coordConv.h	/^    struct coordConvRep *next; \/** next in list *\/$/;"	m	struct:coordConvRep
next	../inc/cpgIsland.h	/^    struct cpgIsland *next;  \/* Next in singly linked list. *\/$/;"	m	struct:cpgIsland
next	../inc/ctgPos.h	/^    struct ctgPos *next;  \/* Next in singly linked list. *\/$/;"	m	struct:ctgPos
next	../inc/customTrack.h	/^    struct customTrack *next;	\/* Next in list. *\/$/;"	m	struct:customTrack
next	../inc/cytoBand.h	/^    struct cytoBand *next;  \/* Next in singly linked list. *\/$/;"	m	struct:cytoBand
next	../inc/est3.h	/^    struct est3 *next;  \/* Next in singly linked list. *\/$/;"	m	struct:est3
next	../inc/estPair.h	/^    struct estPair *next;  \/* Next in singly linked list. *\/$/;"	m	struct:estPair
next	../inc/exoFish.h	/^    struct exoFish *next;  \/* Next in singly linked list. *\/$/;"	m	struct:exoFish
next	../inc/exprBed.h	/^    struct exprBed *next;  \/* Next in singly linked list. *\/$/;"	m	struct:exprBed
next	../inc/featureBits.h	/^    struct featureBits *next;$/;"	m	struct:featureBits
next	../inc/fishClones.h	/^    struct fishClones *next;  \/* Next in singly linked list. *\/$/;"	m	struct:fishClones
next	../inc/gcPercent.h	/^    struct gcPercent *next;  \/* Next in singly linked list. *\/$/;"	m	struct:gcPercent
next	../inc/geneGraph.h	/^    struct geneGraph *next;		\/* Next in list. *\/$/;"	m	struct:geneGraph
next	../inc/geneGraph.h	/^    struct ggAliInfo *next;   \/* Next in list. *\/$/;"	m	struct:ggAliInfo
next	../inc/genePred.h	/^    struct genePred *next;  \/* Next in singly linked list. *\/$/;"	m	struct:genePred
next	../inc/genomicDups.h	/^    struct genomicDups *next;  \/* Next in singly linked list. *\/$/;"	m	struct:genomicDups
next	../inc/glDbRep.h	/^    struct gl *next;  \/* Next in singly linked list. *\/$/;"	m	struct:gl
next	../inc/hgFind.h	/^     struct hgPos *next;	\/* Next in list. *\/$/;"	m	struct:hgPos
next	../inc/hgFind.h	/^    struct hgPosTable *next;	\/* Next table in list. *\/$/;"	m	struct:hgPosTable
next	../inc/hgFind.h	/^    struct hgPositions *next;	  \/* Next in list. *\/$/;"	m	struct:hgPositions
next	../inc/hgGene.h	/^    struct geneFinder *next;  \/* Next in singly linked list. *\/$/;"	m	struct:geneFinder
next	../inc/hgGene.h	/^    struct hgGene *next;  \/* Next in singly linked list. *\/$/;"	m	struct:hgGene
next	../inc/hgGene.h	/^    struct hgTranscript *next;  \/* Next in singly linked list. *\/$/;"	m	struct:hgTranscript
next	../inc/hgap.h	/^    struct hgAliHit *next;$/;"	m	struct:hgAliHit
next	../inc/hgap.h	/^    struct hgAlignment *next;$/;"	m	struct:hgAlignment
next	../inc/hgap.h	/^    struct hgBac *next;	      \/* Next in list. *\/$/;"	m	struct:hgBac
next	../inc/hgap.h	/^    struct hgBoundedHit *next;$/;"	m	struct:hgBoundedHit
next	../inc/hgap.h	/^    struct hgContig *next;    \/* Next in list. *\/$/;"	m	struct:hgContig
next	../inc/hgap.h	/^    struct hgHit *next;   \/* Next in list. *\/$/;"	m	struct:hgHit
next	../inc/hgap.h	/^    struct hgNest *next;	\/* Pointer to next sibling. *\/$/;"	m	struct:hgNest
next	../inc/hgap.h	/^    struct hgRange *next; \/* Next in list. *\/$/;"	m	struct:hgRange
next	../inc/hgap.h	/^    struct hgScoredHit *next;$/;"	m	struct:hgScoredHit
next	../inc/isochores.h	/^    struct isochores *next;  \/* Next in singly linked list. *\/$/;"	m	struct:isochores
next	../inc/knownInfo.h	/^    struct knownInfo *next;  \/* Next in singly linked list. *\/$/;"	m	struct:knownInfo
next	../inc/knownMore.h	/^    struct knownMore *next;  \/* Next in singly linked list. *\/$/;"	m	struct:knownMore
next	../inc/lfs.h	/^    struct lfs *next;  \/* Next in singly linked list. *\/$/;"	m	struct:lfs
next	../inc/mapSts.h	/^    struct mapSts *next;  \/* Next in singly linked list. *\/$/;"	m	struct:mapSts
next	../inc/mcnBreakpoints.h	/^    struct mcnBreakpoints *next;  \/* Next in singly linked list. *\/$/;"	m	struct:mcnBreakpoints
next	../inc/mouseSyn.h	/^    struct mouseSyn *next;  \/* Next in singly linked list. *\/$/;"	m	struct:mouseSyn
next	../inc/pepPred.h	/^    struct pepPred *next;  \/* Next in singly linked list. *\/$/;"	m	struct:pepPred
next	../inc/pslWScore.h	/^    struct pslWScore *next;  \/* Next in singly linked list. *\/$/;"	m	struct:pslWScore
next	../inc/qaSeq.h	/^    struct qaSeq *next;  \/* Next in list. *\/$/;"	m	struct:qaSeq
next	../inc/refAlign.h	/^    struct refAlign *next;  \/* Next in singly linked list. *\/$/;"	m	struct:refAlign
next	../inc/refLink.h	/^    struct refLink *next;  \/* Next in singly linked list. *\/$/;"	m	struct:refLink
next	../inc/rmskOut.h	/^    struct rmskOut *next;  \/* Next in singly linked list. *\/$/;"	m	struct:rmskOut
next	../inc/rnaGene.h	/^    struct rnaGene *next;  \/* Next in singly linked list. *\/$/;"	m	struct:rnaGene
next	../inc/roughAli.h	/^    struct roughAli *next;  \/* Next in singly linked list. *\/$/;"	m	struct:roughAli
next	../inc/sage.h	/^    struct sage *next;  \/* Next in singly linked list. *\/$/;"	m	struct:sage
next	../inc/sageExp.h	/^    struct sageExp *next;  \/* Next in singly linked list. *\/$/;"	m	struct:sageExp
next	../inc/sanger22extra.h	/^    struct sanger22extra *next;  \/* Next in singly linked list. *\/$/;"	m	struct:sanger22extra
next	../inc/simpleRepeat.h	/^    struct simpleRepeat *next;  \/* Next in singly linked list. *\/$/;"	m	struct:simpleRepeat
next	../inc/snp.h	/^    struct snp *next;  \/* Next in singly linked list. *\/$/;"	m	struct:snp
next	../inc/softPromoter.h	/^    struct softPromoter *next;  \/* Next in singly linked list. *\/$/;"	m	struct:softPromoter
next	../inc/softberryHom.h	/^    struct softberryHom *next;  \/* Next in singly linked list. *\/$/;"	m	struct:softberryHom
next	../inc/stsAlias.h	/^    struct stsAlias *next;  \/* Next in singly linked list. *\/$/;"	m	struct:stsAlias
next	../inc/stsInfo.h	/^    struct stsInfo *next;  \/* Next in singly linked list. *\/$/;"	m	struct:stsInfo
next	../inc/stsMap.h	/^    struct stsMap *next;  \/* Next in singly linked list. *\/$/;"	m	struct:stsMap
next	../inc/stsMarker.h	/^    struct stsMarker *next;  \/* Next in singly linked list. *\/$/;"	m	struct:stsMarker
next	../inc/traceInfo.h	/^    struct traceInfo *next;  \/* Next in singly linked list. *\/$/;"	m	struct:traceInfo
next	../inc/trackDb.h	/^    struct trackDb *next;  \/* Next in singly linked list. *\/$/;"	m	struct:trackDb
next	../inc/trackTable.h	/^    struct trackTable *next;  \/* Next in singly linked list. *\/$/;"	m	struct:trackTable
next	../inc/wabAli.h	/^    struct wabAli *next;  \/* Next in singly linked list. *\/$/;"	m	struct:wabAli
next	../lib/coordConv.c	/^    struct possibleCoord *next;$/;"	m	struct:possibleCoord
next	../lib/hdb.c	/^    struct hTableInfo *next;	\/* Next in list. *\/$/;"	m	struct:hTableInfo
next	../lib/hdb.c	/^    struct largeSeqFile *next;  \/* Next in list. *\/$/;"	m	struct:largeSeqFile
next	../lib/hgap.c	/^    struct largeSeqFile *next;	\/* Next in list. *\/$/;"	m	struct:largeSeqFile
nextBlockLine	../../lib/blastParse.c	/^static boolean nextBlockLine(struct blastFile *bf, char **retLine)$/;"	f	file:
nextExp	../../lib/keys.c	/^static struct exp *nextExp()$/;"	f	file:
nextList	../../inc/diGraph.h	/^    struct dgConnection *nextList;  \/* Ways out of node. *\/$/;"	m	struct:dgNode
nextPowerOfFour	../../lib/dnautil.c	/^int nextPowerOfFour(long x)$/;"	f
nextTok	../../lib/intExp.c	/^static void nextTok()$/;"	f	file:
nextTok	../../lib/intExp.c	8;"	d	file:
nextWord	../../lib/common.c	/^char *nextWord(char **pLine)$/;"	f
nextWormCdna	../../lib/wormdna.c	/^struct dnaSeq *nextWormCdna(struct wormCdnaIterator *it)$/;"	f
nextWormCdnaAndInfo	../../lib/wormdna.c	/^boolean nextWormCdnaAndInfo(struct wormCdnaIterator *it, struct dnaSeq **retSeq, $/;"	f
ngi	../inc/knownInfo.h	/^    char *ngi;	\/* Genbank gi of nucleotide seq. *\/$/;"	m	struct:knownInfo
nibDir	../inc/coordConv.h	/^    char *nibDir;	\/** Direcory where nib files for assembly are stored *\/$/;"	m	struct:coordConv
nibDir	../lib/coordConv.c	/^    char *nibDir;	\/* Directory of sequence files. *\/$/;"	m	struct:genomeTable
nibLd	../../lib/nib.c	/^static struct dnaSeq *nibLd(char *fileName, FILE *f, int seqSize, int start, int size,$/;"	f	file:
nibLdPart	../../lib/nib.c	/^struct dnaSeq *nibLdPart(char *fileName, FILE *f, int seqSize, int start, int size)$/;"	f
nibLoadAll	../../lib/nib.c	/^struct dnaSeq *nibLoadAll(char *fileName)$/;"	f
nibLoadPart	../../lib/nib.c	/^struct dnaSeq *nibLoadPart(char *fileName, int start, int size)$/;"	f
nibOpenVerify	../../lib/nib.c	/^void nibOpenVerify(char *fileName, FILE **retFile, int *retSize)$/;"	f
nibSig	../../inc/sig.h	50;"	d
nibSize	../../inc/trans3.h	/^     int nibSize;			\/* Size of nib file this is embedded in. *\/$/;"	m	struct:trans3
nibStream	../../lib/nib.c	/^struct nibStream$/;"	s	file:
nibStreamClose	../../lib/nib.c	/^void nibStreamClose(struct nibStream **pNs)$/;"	f
nibStreamMany	../../lib/nib.c	/^void nibStreamMany(struct nibStream *ns, DNA *dna, int size)$/;"	f
nibStreamOne	../../lib/nib.c	/^void nibStreamOne(struct nibStream *ns, DNA base)$/;"	f
nibStreamOpen	../../lib/nib.c	/^struct nibStream *nibStreamOpen(char *fileName)$/;"	f
nibWrite	../../lib/nib.c	/^void nibWrite(struct dnaSeq *seq, char *fileName)$/;"	f
niceGeneName	../lib/customTrack.c	/^static char *niceGeneName(char *name)$/;"	f	file:
noWarnAbort	../../lib/errabort.c	/^void noWarnAbort()$/;"	f
node	../../inc/diGraph.h	/^    struct dgNode *node;        \/* Node this connects to. *\/$/;"	m	struct:dgConnection
node	../../inc/diGraph.h	/^    struct dgNode *node;        \/* Pointer to node. *\/$/;"	m	struct:dgNodeRef
node	../lib/jksql.c	/^    struct dlNode *node;		    \/* Pointer to list node. *\/$/;"	m	struct:sqlConnection
node	../lib/jksql.c	/^    struct dlNode *node;		\/* Pointer to list node we're on. *\/$/;"	m	struct:sqlResult
nodeCount	../../lib/supStitch.c	/^    int nodeCount;		\/* Number of nodes. *\/$/;"	m	struct:ssGraph
nodeHash	../../inc/diGraph.h	/^    struct hash *nodeHash;$/;"	m	struct:diGraph
nodeIn	../../lib/supStitch.c	/^    struct ssNode *nodeIn;       \/* The node that leads to this edge. *\/$/;"	m	struct:ssEdge
nodeList	../../inc/diGraph.h	/^    struct dgNode *nodeList;$/;"	m	struct:diGraph
nodeList	../../inc/spaceSaver.h	/^    struct spaceNode *nodeList; \/* List of things put in space saver. *\/$/;"	m	struct:spaceSaver
nodeScore	../../lib/supStitch.c	/^    int nodeScore;              \/* Score of this node. *\/$/;"	m	struct:ssNode
nodes	../../lib/supStitch.c	/^    struct ssNode *nodes;       \/* Array of nodes. *\/$/;"	m	struct:ssGraph
nonDashCount	../../lib/xenshow.c	/^static int nonDashCount(char *s, int size)$/;"	f	file:
nonZeroCopy	../../lib/memgfx.c	/^static void nonZeroCopy(Color *d, Color *s, int width)$/;"	f	file:
nosSwap	../../lib/genoFind.c	/^static struct gfHit **nosTemp, *nosSwap;$/;"	v	file:
nosTemp	../../lib/genoFind.c	/^static struct gfHit **nosTemp, *nosSwap;$/;"	v	file:
nt4BaseCount	../../lib/nt4.c	/^int nt4BaseCount(char *fileName)$/;"	f
nt4Dir	../../lib/wormdna.c	/^static char *nt4Dir = NULL;$/;"	v	file:
nt4LoadPart	../../lib/nt4.c	/^DNA *nt4LoadPart(char *fileName, int start, int size)$/;"	f
nt4OpenVerify	../../lib/nt4.c	/^static FILE *nt4OpenVerify(char *fileName)$/;"	f	file:
nt4Seq	../../inc/nt4.h	/^struct nt4Seq$/;"	s
nt4Signature	../../inc/sig.h	33;"	d
nt4Unpack	../../lib/nt4.c	/^DNA *nt4Unpack(struct nt4Seq *n, int start, int size)$/;"	f
ntChars	../../lib/dnautil.c	/^char ntChars[256];$/;"	v
ntCompTable	../../lib/dnautil.c	/^DNA ntCompTable[256];$/;"	v
ntFileNames	../../lib/flydna.c	/^static char *ntFileNames[] = {"c:\/biodata\/fly\/chrom\/adh.nt"};$/;"	v	file:
ntLookup	../../lib/genoFind.c	/^static int ntLookup[256];$/;"	v	file:
ntMixedCaseChars	../../lib/dnautil.c	/^char ntMixedCaseChars[256];$/;"	v
ntVal	../../lib/dnautil.c	/^int ntVal[256];$/;"	v
ntVal5	../../lib/dnautil.c	/^int ntVal5[256];$/;"	v
ntValNoN	../../lib/dnautil.c	/^int ntValNoN[256]; \/* Like ntVal, but with T_BASE_VAL in place of -1 for nonexistent ones. *\/$/;"	v
nucVal	../../lib/xensmall.c	440;"	d	file:
nullMiddle	../../inc/dlist.h	/^    struct dlNode *nullMiddle;$/;"	m	struct:dlList
nullMommy	../../lib/xensmall.c	/^static UBYTE nullMommy = 0; \/* mommy value for orphans.... *\/$/;"	v	file:
num	../inc/sageExp.h	/^    int num;	\/* Index of the experiment in the sage table. *\/$/;"	m	struct:sageExp
numExp	../inc/exprBed.h	/^    unsigned numExp;	\/* Number of experiments in this bed *\/$/;"	m	struct:exprBed
numExps	../inc/sage.h	/^    int numExps;	\/* Number of experiments. *\/$/;"	m	struct:sage
numLabelString	../../lib/memgfx.c	/^void numLabelString(int num, char *label)$/;"	f
numOff	../../inc/seqOut.h	/^    int numOff;         \/* Number to start with. *\/$/;"	m	struct:cfm
numTags	../inc/sage.h	/^    int numTags;	\/* Number of tags. *\/$/;"	m	struct:sage
number	../../lib/intExp.c	/^static int number()$/;"	f	file:
object	../../inc/xap.h	/^   void *object;	\/* Object being parsed. *\/$/;"	m	struct:xapStack
offset	../../inc/fof.h	/^    bits32 offset;          \/* Offset in file - filled in by server. *\/$/;"	m	struct:fofBatch
offset	../../inc/fof.h	/^    bits32 offset;        \/* Offset within file. *\/$/;"	m	struct:fofPos
offset	../../inc/hgap.h	/^    int offset;			\/* Offset relative to parent. *\/$/;"	m	struct:hgNest
offset	../../lib/crudeali.c	/^    int offset;$/;"	m	struct:probeTile
offset	../../lib/fof.c	/^    bits32 offset;  \/* Start offset within file. Must be first element.*\/$/;"	m	struct:fofRecord
offset	../../lib/patSpace.c	/^    int offset;         \/* Start position of block within subsequence. *\/$/;"	m	struct:blockPos
offset	../../lib/snofmake.c	/^    unsigned offset;$/;"	m	struct:offsetList
offset	../inc/customTrack.h	/^    int offset;			\/* Base offset. *\/$/;"	m	struct:customTrack
offset	../inc/hgap.h	/^    int offset;			\/* Offset relative to parent. *\/$/;"	m	struct:hgNest
offsetList	../../lib/snofmake.c	/^struct offsetList$/;"	s	file:
offsetsFromExons	../../lib/oldGff.c	/^static void offsetsFromExons(struct gffGene *gene)$/;"	f	file:
oligoProb	../../lib/fuzzyFind.c	/^static double oligoProb(DNA *oligo, int size, double freq[4])$/;"	f	file:
omimId	../inc/knownMore.h	/^    unsigned omimId;	\/* OMIM ID or 0 if none *\/$/;"	m	struct:knownMore
omimId	../inc/refLink.h	/^    unsigned omimId;	\/* OMIM ID *\/$/;"	m	struct:refLink
omimName	../inc/knownMore.h	/^    char *omimName;	\/* OMIM primary name *\/$/;"	m	struct:knownMore
oneBit	../../lib/bits.c	/^static Bits oneBit[8] = { 0x80, 0x40, 0x20, 0x10, 0x8, 0x4, 0x2, 0x1};$/;"	v	file:
oneOverSqrtTwoPi	../../lib/hmmstats.c	/^double oneOverSqrtTwoPi = 0.39894228;$/;"	v
ooToAllContigs	../lib/ooUtils.c	/^void ooToAllContigs(char *ooDir, void (*doContig)(char *dir, char *chrom, char *contig))$/;"	f
oocMaskCounts	../../lib/ooc.c	/^void oocMaskCounts(char *oocFile, bits32 *tileCounts, int tileSize, bits32 maxPat)$/;"	f
oocMaskSimpleRepeats	../../lib/ooc.c	/^void oocMaskSimpleRepeats(bits32 *tileCounts, int seedSize, bits32 maxPat)$/;"	f
oocSig	../../inc/sig.h	39;"	d
oocSigSwapped	../../inc/sig.h	43;"	d
optional	../inc/coordConv.h	/^    char *optional;	\/** Optional Information *\/$/;"	m	struct:coordConv
organ	../inc/sageExp.h	/^    char *organ;	\/* organ identifier. *\/$/;"	m	struct:sageExp
organism	../inc/sageExp.h	/^    char *organism;	\/* organism source of cells. *\/$/;"	m	struct:sageExp
organism	../inc/stsInfo.h	/^    char *organism;	\/* Organism for which STS discovered *\/$/;"	m	struct:stsInfo
orientation	../../inc/cda.h	/^    int orientation;                \/* +1 or -1 depending on whether *clone* is + or - WRT chrom . *\/$/;"	m	struct:cdaAli
orientation	../../inc/ens.h	/^    int orientation;                    \/* +1 or -1. Strand relative to contig. *\/$/;"	m	struct:ensExon
orientation	../../inc/ens.h	/^    int orientation;               \/* +1 or -1.  Strand relative to contig. *\/$/;"	m	struct:ensFeature
orientation	../../inc/geneGraph.h	/^    int orientation;			\/* +1 or -1 strand of genomic DNA. *\/$/;"	m	struct:geneGraph
orientation	../../inc/hgGene.h	/^    signed char orientation;	\/* Orientation relative to start bac *\/$/;"	m	struct:hgGene
orientation	../../inc/hgGene.h	/^    signed char orientation;	\/* Orientation relative to start bac *\/$/;"	m	struct:hgTranscript
orientation	../../inc/hgap.h	/^    int orientation;            \/* +1 or -1 relative to parent. *\/$/;"	m	struct:hgNest
orientation	../../inc/maDbRep.h	/^    signed char orientation;	\/* Orientation relative to first BAC *\/$/;"	m	struct:mrnaAli
orientation	../../inc/unfin.h	/^    int orientation;   \/* +1 or -1. Strand relative to parent.*\/$/;"	m	struct:contigTree
orientation	../../inc/wormdna.h	/^    char orientation;           \/* + or - (relative to gene transcription direction) *\/$/;"	m	struct:wormCdnaInfo
orientation	../inc/geneGraph.h	/^    int orientation;			\/* +1 or -1 strand of genomic DNA. *\/$/;"	m	struct:geneGraph
orientation	../inc/hgGene.h	/^    signed char orientation;	\/* Orientation relative to start bac *\/$/;"	m	struct:hgGene
orientation	../inc/hgGene.h	/^    signed char orientation;	\/* Orientation relative to start bac *\/$/;"	m	struct:hgTranscript
orientation	../inc/hgap.h	/^    int orientation;            \/* +1 or -1 relative to parent. *\/$/;"	m	struct:hgNest
origName	../inc/softPromoter.h	/^    char *origName;	\/* Name in original file *\/$/;"	m	struct:softPromoter
origScore	../inc/softPromoter.h	/^    float origScore;	\/* Score in original file, not scaled *\/$/;"	m	struct:softPromoter
otherAcc	../inc/mapSts.h	/^    char *otherAcc;	\/* Accession number of other contigs that the marker hits *\/$/;"	m	struct:mapSts
otherAcc	../inc/stsMap.h	/^    char *otherAcc;	\/* Accession number of other contigs that the marker hits *\/$/;"	m	struct:stsMap
otherAcc	../inc/stsMarker.h	/^    char *otherAcc;	\/* Accession number of other contigs that the marker hits *\/$/;"	m	struct:stsMarker
otherChrom	../inc/genomicDups.h	/^    char *otherChrom;	\/* Human chromosome *\/$/;"	m	struct:genomicDups
otherDbSTS	../inc/stsInfo.h	/^    unsigned *otherDbSTS;	\/* Related dbSTS IDs *\/$/;"	m	struct:stsInfo
otherDbstsCount	../inc/stsInfo.h	/^    unsigned otherDbstsCount;	\/* Number of related dbSTS IDs *\/$/;"	m	struct:stsInfo
otherEnd	../inc/genomicDups.h	/^    unsigned otherEnd;	\/* End in other sequence *\/$/;"	m	struct:genomicDups
otherEnd	../inc/roughAli.h	/^    unsigned otherEnd;	\/* End in other sequence *\/$/;"	m	struct:roughAli
otherNames	../inc/stsInfo.h	/^    char **otherNames;	\/* Alias names *\/$/;"	m	struct:stsInfo
otherStart	../inc/genomicDups.h	/^    unsigned otherStart;	\/* Start in other sequence *\/$/;"	m	struct:genomicDups
otherStart	../inc/roughAli.h	/^    unsigned otherStart;	\/* Start in other sequence *\/$/;"	m	struct:roughAli
otherUCSC	../inc/stsInfo.h	/^    unsigned *otherUCSC;	\/* Related active UCSC ids *\/$/;"	m	struct:stsInfo
otherUCSCcount	../inc/stsInfo.h	/^    unsigned otherUCSCcount;	\/* Number of related active UCSC ids *\/$/;"	m	struct:stsInfo
ourErrAbort	../../lib/snofmake.c	/^static void ourErrAbort()$/;"	f	file:
out	../../inc/seqOut.h	/^    FILE *out;          \/* File to write to. *\/$/;"	m	struct:cfm
out	../../inc/seqOut.h	/^    FILE *out;$/;"	m	struct:baf
out	../../lib/dgRange.c	/^   struct bfVertex *out;   \/* Connecting node. *\/$/;"	m	struct:bfEdge
outputDna	back_hgText.c	/^void outputDna(FILE *f, char *chrom, char *table, int start, int size, char *dna, $/;"	f
outputDna	getFeatDna.c	/^void outputDna(FILE *f, char *chrom, char *table, int start, int size, char *dna, $/;"	f
outputDna	hgText.c	/^void outputDna(FILE *f, char *chrom, char *table, int start, int size, char *dna, $/;"	f
outputTabData	back_hgText.c	/^void outputTabData(char* query, char* tableName, struct sqlConnection *conn, boolean outputFields)$/;"	f
outputTabData	hgText.c	/^void outputTabData(char* query, char* tableName, struct sqlConnection *conn, boolean outputFields)$/;"	f
outputTranscript	../lib/geneGraph.c	/^static void outputTranscript()$/;"	f	file:
outputType	back_hgText.c	/^char *outputType = "fasta";	\/* Type of output. *\/$/;"	v
outputType	getFeatDna.c	/^char *outputType = "fasta";	\/* Type of output. *\/$/;"	v
outputType	hgText.c	/^char *outputType = "fasta";	\/* Type of output. *\/$/;"	v
overlap	../../lib/supStitch.c	/^    int overlap;                 \/* Overlap between two nodes. *\/$/;"	m	struct:ssEdge
pDir	../../inc/wormdna.h	/^    char **pDir;$/;"	m	struct:wormGdfCache
packDna16	../../lib/dnautil.c	/^bits32 packDna16(DNA *in)$/;"	f
packDna8	../../lib/dnautil.c	/^bits16 packDna8(DNA *in)$/;"	f
packMommy	../../lib/xensmall.c	29;"	d	file:
parenNeg	../lib/rmskOut.c	/^static void parenNeg(int num, char *s)$/;"	f	file:
parent	../../inc/hgap.h	/^    struct hgNest *parent;      \/* Parent if any. *\/$/;"	m	struct:hgNest
parent	../../inc/unfin.h	/^    struct contigTree *parent;   \/* Parent of contig. *\/$/;"	m	struct:contigTree
parent	../inc/hgap.h	/^    struct hgNest *parent;      \/* Parent if any. *\/$/;"	m	struct:hgNest
parseAndExp	../../lib/keys.c	/^static struct exp *parseAndExp()$/;"	f	file:
parseClassAndFamily	../lib/rmskOut.c	/^static void parseClassAndFamily(char *s, char **retClass, char **retFamily)$/;"	f	file:
parseColor	../lib/trackDbCustom.c	/^static void parseColor(struct lineFile *lf, char *text, $/;"	f	file:
parseCookies	../../lib/cheapcgi.c	/^static void parseCookies(struct hash **retHash, struct cgiVar **retList)$/;"	f	file:
parseExp	../../lib/keys.c	/^static struct exp *parseExp(struct kxTok *tokList)$/;"	f	file:
parseGtfEnd	../../lib/gff.c	/^static void parseGtfEnd(char *s, struct gffFile *gff, struct gffLine *gl, $/;"	f	file:
parseNot	../../lib/keys.c	/^static struct exp *parseNot()$/;"	f	file:
parseOrExp	../../lib/keys.c	/^static struct exp *parseOrExp()$/;"	f	file:
parseParenthesized	../../lib/keys.c	/^static struct exp *parseParenthesized()$/;"	f	file:
parseQuotedString	../../lib/obscure.c	/^boolean parseQuotedString( char *in, char *out, char **retNext)$/;"	f
parseRelation	../../lib/keys.c	/^static struct exp *parseRelation()$/;"	f	file:
parseRestOfCdnaInfo	../../lib/wormdna.c	/^static void parseRestOfCdnaInfo(char *textInfo, struct wormCdnaInfo *retInfo)$/;"	f	file:
parseRgb	../lib/customTrack.c	/^static void parseRgb(char *s, int lineIx, $/;"	f	file:
parseTableName	back_hgText.c	/^void parseTableName(char* dest, char* chrom_name)$/;"	f
parseTableName	hgText.c	/^void parseTableName(char* dest, char* chrom_name)$/;"	f
parseTrackLine	../lib/customTrack.c	/^static boolean parseTrackLine(char *line, int lineIx, struct customTrack **retTrack)$/;"	f	file:
parseTrackQualifier	../lib/featureBits.c	/^static void parseTrackQualifier(char *trackQualifier, char **retTrack, $/;"	f	file:
patClump	../../inc/patSpace.h	/^struct patClump$/;"	s
patSpace	../../lib/patSpace.c	/^struct patSpace$/;"	s	file:
patSpaceFindOne	../../lib/patSpace.c	/^struct patClump *patSpaceFindOne(struct patSpace *ps, DNA *dna, int dnaSize)$/;"	f
path	../lib/hdb.c	/^    char *path;                 \/* Path name for file. *\/$/;"	m	struct:largeSeqFile
path	../lib/hgap.c	/^    char *path;		        \/* Path name for file. *\/$/;"	m	struct:largeSeqFile
pepPred	../inc/pepPred.h	/^struct pepPred$/;"	s
pepPredCommaIn	../lib/pepPred.c	/^struct pepPred *pepPredCommaIn(char **pS, struct pepPred *ret)$/;"	f
pepPredCommaOut	../inc/pepPred.h	42;"	d
pepPredFree	../lib/pepPred.c	/^void pepPredFree(struct pepPred **pEl)$/;"	f
pepPredFreeList	../lib/pepPred.c	/^void pepPredFreeList(struct pepPred **pList)$/;"	f
pepPredLoad	../lib/pepPred.c	/^struct pepPred *pepPredLoad(char **row)$/;"	f
pepPredOutput	../lib/pepPred.c	/^void pepPredOutput(struct pepPred *el, FILE *f, char sep, char lastSep) $/;"	f
pepPredStaticLoad	../lib/pepPred.c	/^void pepPredStaticLoad(char **row, struct pepPred *ret)$/;"	f
pepPredTabOut	../inc/pepPred.h	39;"	d
perCpg	../inc/cpgIsland.h	/^    float perCpg;	\/* Percentage of island that is CpG *\/$/;"	m	struct:cpgIsland
perGc	../inc/cpgIsland.h	/^    float perGc;	\/* Percentage of island that is C or G *\/$/;"	m	struct:cpgIsland
perIndel	../inc/simpleRepeat.h	/^    unsigned perIndel;	\/* Percentage Indel *\/$/;"	m	struct:simpleRepeat
perMatch	../inc/simpleRepeat.h	/^    unsigned perMatch;	\/* Percentage Match *\/$/;"	m	struct:simpleRepeat
percDel	../../inc/repMask.h	/^    float percDel;	\/* Percentage deletions. *\/$/;"	m	struct:repeatMaskOut
percDiv	../../inc/repMask.h	/^    float percDiv;	\/* Percentage base divergence. *\/$/;"	m	struct:repeatMaskOut
percInc	../../inc/repMask.h	/^    float percInc;	\/* Percentage inserts. *\/$/;"	m	struct:repeatMaskOut
period	../inc/simpleRepeat.h	/^    unsigned period;	\/* Length of repeat unit *\/$/;"	m	struct:simpleRepeat
pgi	../inc/knownInfo.h	/^    char *pgi;	\/* Genbank gi of protein seq. *\/$/;"	m	struct:knownInfo
pgoSig	../../inc/sig.h	16;"	d
phase	../../inc/ens.h	/^    char phase;				\/* AKA Frame - codon position of 1st base. *\/$/;"	m	struct:ensExon
phase	../inc/clonePos.h	/^    unsigned char phase;	\/* htg phase *\/$/;"	m	struct:clonePos
pipeBroke	../../lib/genoFind.c	/^volatile boolean pipeBroke = FALSE;	\/* Flag broken pipes here. *\/$/;"	v
pixels	../../inc/memgfx.h	/^    Color *pixels;$/;"	m	struct:memGfx
placeCount	../inc/fishClones.h	/^    unsigned placeCount;	\/* Number of times FISH'd *\/$/;"	m	struct:fishClones
placeType	../inc/fishClones.h	/^    char *placeType;	\/* How clone was placed on the sequence assembly *\/$/;"	m	struct:fishClones
plumberInstalled	../../lib/net.c	/^static boolean plumberInstalled = FALSE;	\/* True if have installed pipe handler. *\/$/;"	v	file:
pmId1	../inc/knownMore.h	/^    unsigned pmId1;	\/* I have no idea - grabbed from a HUGO nomeids.txt *\/$/;"	m	struct:knownMore
pmId2	../inc/knownMore.h	/^    unsigned pmId2;	\/* Likewise, I have no idea *\/$/;"	m	struct:knownMore
popAbortHandler	../../lib/errabort.c	/^void popAbortHandler()$/;"	f
popMemHandler	../../lib/memalloc.c	/^struct memHandler *popMemHandler()$/;"	f
popVertex	../lib/geneGraph.c	/^static void popVertex()$/;"	f	file:
popWarnHandler	../../lib/errabort.c	/^void popWarnHandler()$/;"	f
port	../../inc/net.h	/^   char port[16];       \/* Port, usually 80 or 8080. *\/$/;"	m	struct:netParsedUrl
posBuf	../../lib/patSpace.c	/^    int posBuf[maxBlockCount];           \/* Histogram of hits to each block. *\/$/;"	m	struct:patSpace
posCount	../inc/hgFind.h	/^    int posCount;                 \/* Number of positions in all tables. *\/$/;"	m	struct:hgPositions
posList	../inc/hgFind.h	/^    struct hgPos *posList;      \/* List of positions in this table. *\/$/;"	m	struct:hgPosTable
position	../../inc/geneGraph.h	/^    int position;	\/* Where it is in genomic sequence. *\/$/;"	m	struct:ggVertex
position	../../lib/dgRange.c	/^   int position;               \/* Currently assigned position. *\/$/;"	m	struct:bfVertex
position	../inc/geneGraph.h	/^    int position;	\/* Where it is in genomic sequence. *\/$/;"	m	struct:ggVertex
possibleCoord	../lib/coordConv.c	/^struct possibleCoord $/;"	s	file:
powerOfTwoSize	../../inc/hash.h	/^    int powerOfTwoSize;$/;"	m	struct:hash
prev	../../inc/dlist.h	/^    struct dlNode *prev;$/;"	m	struct:dlNode
prev	../../inc/shaRes.h	/^    struct shaResNode *prev;$/;"	m	struct:shaResNode
prev	../../lib/memalloc.c	/^    struct carefulMemBlock *prev;$/;"	m	struct:carefulMemBlock
prevList	../../inc/diGraph.h	/^    struct dgConnection *prevList;  \/* Ways into node. *\/$/;"	m	struct:dgNode
printMatchers	../../lib/xenshow.c	/^static void printMatchers(char *a, char *b, int lineSize, FILE *f)$/;"	f	file:
printTables	back_hgText.c	/^static void printTables(struct hashEl *hel)$/;"	f	file:
printTables	hgText.c	/^static void printTables(struct hashEl *hel)$/;"	f	file:
printTrace	../../lib/xensmall.c	/^static void printTrace(struct aliMatrix *am, struct aliPair *pairList, boolean showStates, $/;"	f	file:
prior_codes	../../lib/gifcomp.c	/^static short *prior_codes;$/;"	v	file:
priority	../../inc/diGraph.h	/^    int priority;       \/* Node priority. *\/$/;"	m	struct:dgNode
priority	../inc/trackDb.h	/^    float priority;	\/* 0-100 - where to position.  0 is top *\/$/;"	m	struct:trackDb
probeEnd	../../lib/crudeali.c	/^    int probeEnd;$/;"	m	struct:crudeExon
probeEnd	../../lib/crudeali.c	/^    int probeEnd;$/;"	m	struct:crudeGene
probeOffset	../../lib/crudeali.c	/^    int probeOffset;$/;"	m	struct:crudeHit
probeSize	../../lib/crudeali.c	/^    int probeSize;$/;"	m	struct:fastProber
probeStart	../../lib/crudeali.c	/^    int probeStart;$/;"	m	struct:crudeExon
probeStart	../../lib/crudeali.c	/^    int probeStart;$/;"	m	struct:crudeGene
probeTile	../../lib/crudeali.c	/^struct probeTile$/;"	s	file:
probes	../../lib/crudeali.c	/^    struct probeTile *probes;$/;"	m	struct:fastProber
prodId	../inc/refLink.h	/^    unsigned prodId;	\/* pointer to prodName table *\/$/;"	m	struct:refLink
producer	../inc/sageExp.h	/^    char *producer;	\/* source of tissue. *\/$/;"	m	struct:sageExp
product	../../inc/wormdna.h	/^    char *product;              \/* Something like "cyclin-dependent kinase" *\/$/;"	m	struct:wormCdnaInfo
product	../inc/refLink.h	/^    char *product;	\/* Name of protein product *\/$/;"	m	struct:refLink
productName	../inc/knownInfo.h	/^    unsigned productName;	\/* Connects to productName table *\/$/;"	m	struct:knownInfo
program	../../inc/blastParse.h	/^    char *program;                      \/* Blastp, blastx, blastn, etc. *\/$/;"	m	struct:blastFile
program	../../inc/ens.h	/^    char *program;		\/* Program used. *\/$/;"	m	struct:ensAnalysis
programVersion	../../inc/ens.h	/^    char *programVersion;	\/* Version of program. *\/$/;"	m	struct:ensAnalysis
protAcc	../inc/refLink.h	/^    char *protAcc;	\/* protein accession *\/$/;"	m	struct:refLink
protCode	../../lib/dnautil.c	/^    AA protCode;	\/* Upper case. *\/$/;"	m	struct:codonTable
proteinId	../inc/knownInfo.h	/^    char *proteinId;	\/* Genbank accession of protein? *\/$/;"	m	struct:knownInfo
protoGene	../../lib/fuzzyFind.c	/^struct protoGene$/;"	s	file:
protocol	../../inc/net.h	/^   char protocol[16];	\/* Protocol - http or ftp, etc. *\/$/;"	m	struct:netParsedUrl
psBits	../../lib/patSpace.c	21;"	d	file:
psBits	../../lib/patSpace.c	29;"	d	file:
psl	../../inc/psl.h	/^struct psl$/;"	s
pslCalcMilliBad	../../lib/psl.c	/^int pslCalcMilliBad(struct psl *psl, boolean isMrna)$/;"	f
pslCmpQuery	../../lib/psl.c	/^int pslCmpQuery(const void *va, const void *vb)$/;"	f
pslCmpScore	../lib/coordConv.c	/^int pslCmpScore(const void *va, const void *vb)$/;"	f
pslCmpScore	../lib/hgFind.c	/^static int pslCmpScore(const void *va, const void *vb)$/;"	f	file:
pslCmpTarget	../../lib/psl.c	/^int pslCmpTarget(const void *va, const void *vb)$/;"	f
pslCommaIn	../../lib/psl.c	/^struct psl *pslCommaIn(char **pS, struct psl *ret)$/;"	f
pslCommaOut	../../inc/psl.h	74;"	d
pslDump	../../lib/psl.c	/^void pslDump(struct psl *psl, FILE *f)$/;"	f
pslFileOpen	../../lib/psl.c	/^struct lineFile *pslFileOpen(char *fileName)$/;"	f
pslFree	../../lib/psl.c	/^void pslFree(struct psl **pEl)$/;"	f
pslFreeList	../../lib/psl.c	/^void pslFreeList(struct psl **pList)$/;"	f
pslFromFakeFfAli	../../lib/psl.c	/^struct psl *pslFromFakeFfAli(struct ffAli *ff, $/;"	f
pslLabelColumns	../../lib/psl.c	/^static void pslLabelColumns(FILE *f)$/;"	f	file:
pslLoad	../../lib/psl.c	/^struct psl *pslLoad(char **row)$/;"	f
pslLoadAll	../../lib/psl.c	/^struct psl *pslLoadAll(char *fileName)$/;"	f
pslLoadLm	../../lib/psl.c	/^struct psl *pslLoadLm(char **row, struct lm *lm)$/;"	f
pslMrnaScore	../lib/hgFind.c	/^static int pslMrnaScore(const struct psl *psl)$/;"	f	file:
pslNext	../../lib/psl.c	/^struct psl *pslNext(struct lineFile *lf)$/;"	f
pslOrientation	../../lib/psl.c	/^int pslOrientation(struct psl *psl)$/;"	f
pslOutput	../../lib/psl.c	/^void pslOutput(struct psl *el, FILE *f, char sep, char lastSep) $/;"	f
pslRcBoth	../../lib/psl.c	/^void pslRcBoth(struct psl *psl)$/;"	f
pslScore	../../lib/psl.c	/^int pslScore(const struct psl *psl)$/;"	f
pslTabOut	../../inc/psl.h	71;"	d
pslTable	../inc/lfs.h	/^    char *pslTable;	\/* Table which contains corresponding PSL records for linked features *\/$/;"	m	struct:lfs
pslTailSizes	../../lib/psl.c	/^void pslTailSizes(struct psl *psl, int *retStartTail, int *retEndTail)$/;"	f
pslTargetOffset	../../lib/psl.c	/^void pslTargetOffset(struct psl *psl, int offset)$/;"	f
pslToFakeFfAli	../../lib/psl.c	/^struct ffAli *pslToFakeFfAli(struct psl *psl, DNA *needle, DNA *haystack)$/;"	f
pslToFfAli	../../lib/psl.c	/^struct ffAli *pslToFfAli(struct psl *psl, struct dnaSeq *query, struct dnaSeq *target,$/;"	f
pslWScore	../inc/pslWScore.h	/^struct pslWScore$/;"	s
pslWScoreCommaIn	../lib/pslWScore.c	/^struct pslWScore *pslWScoreCommaIn(char **pS, struct pslWScore *ret)$/;"	f
pslWScoreCommaOut	../inc/pslWScore.h	62;"	d
pslWScoreFree	../lib/pslWScore.c	/^void pslWScoreFree(struct pslWScore **pEl)$/;"	f
pslWScoreFreeList	../lib/pslWScore.c	/^void pslWScoreFreeList(struct pslWScore **pList)$/;"	f
pslWScoreLoad	../lib/pslWScore.c	/^struct pslWScore *pslWScoreLoad(char **row)$/;"	f
pslWScoreLoadAll	../lib/pslWScore.c	/^struct pslWScore *pslWScoreLoadAll(char *fileName) $/;"	f
pslWScoreOutput	../lib/pslWScore.c	/^void pslWScoreOutput(struct pslWScore *el, FILE *f, char sep, char lastSep) $/;"	f
pslWScoreTabOut	../inc/pslWScore.h	59;"	d
pslWriteAll	../../lib/psl.c	/^void pslWriteAll(struct psl *pslList, char *fileName, boolean writeHeader)$/;"	f
pslWriteHead	../../lib/psl.c	/^void pslWriteHead(FILE *f)$/;"	f
pslxFileOpen	../../lib/psl.c	/^void pslxFileOpen(char *fileName, enum gfType *retQueryType, enum gfType *retTargetType, struct lineFile **retLf)$/;"	f
pslxWriteHead	../../lib/psl.c	/^void pslxWriteHead(FILE *f, enum gfType qType, enum gfType tType)$/;"	f
ptArrayIx	../../lib/common.c	/^int ptArrayIx(void *pt, void *array, int arraySize)$/;"	f
ptToInt	../../lib/obscure.c	/^int ptToInt(void *pt)$/;"	f
pushAbortHandler	../../lib/errabort.c	/^void pushAbortHandler(AbortHandler handler)$/;"	f
pushCarefulMemHandler	../../lib/memalloc.c	/^void pushCarefulMemHandler(long maxAlloc)$/;"	f
pushDebugAbort	../../lib/errabort.c	/^void pushDebugAbort()$/;"	f
pushMemHandler	../../lib/memalloc.c	/^struct memHandler *pushMemHandler(struct memHandler *newHandler)$/;"	f
pushVertex	../lib/geneGraph.c	/^static void pushVertex(struct ggVertex *v)$/;"	f	file:
pushWarnHandler	../../lib/errabort.c	/^void pushWarnHandler(WarnHandler handler)$/;"	f
qAcc	../../inc/maDbRep.h	/^    char qAcc[13];	\/* GenBank Accession for mRNA sequence *\/$/;"	m	struct:mrnaAli
qBaseInsert	../../inc/psl.h	/^    int qBaseInsert;	\/* Number of bases inserted in query *\/$/;"	m	struct:psl
qBaseInsert	../inc/pslWScore.h	/^    int qBaseInsert;	\/* Number of bases inserted in query *\/$/;"	m	struct:pslWScore
qBlockStarts	../../inc/maDbRep.h	/^    unsigned *qBlockStarts;	\/* Start of each block in mRNA *\/$/;"	m	struct:mrnaAli
qDim	../../lib/xensmall.c	/^    int qDim;$/;"	m	struct:aliMatrix
qEnd	../../inc/blastParse.h	/^    int qEnd;                           \/* Query end position. *\/$/;"	m	struct:blastBlock
qEnd	../../inc/crudeali.h	/^    int qStart, qEnd;$/;"	m	struct:crudeAli
qEnd	../../inc/ens.h	/^    int qStart, qEnd;              \/* Query (cDNA, protein, etc.) sequence position. *\/$/;"	m	struct:ensFeature
qEnd	../../inc/genoFind.h	/^    bits32 qStart, qEnd;	\/* Position in query. *\/$/;"	m	struct:gfClump
qEnd	../../inc/hgap.h	/^    int qStart, qEnd;     \/* Position in query sequence. *\/$/;"	m	struct:hgAliHit
qEnd	../../inc/hgap.h	/^    int qStart, qEnd;     \/* Position in query sequence. *\/$/;"	m	struct:hgAlignment
qEnd	../../inc/hgap.h	/^    int qStart, qEnd;     \/* Position in query sequence. *\/$/;"	m	struct:hgBoundedHit
qEnd	../../inc/maDbRep.h	/^    unsigned qEnd;	\/* End in mRNA sequence *\/$/;"	m	struct:mrnaAli
qEnd	../../inc/psl.h	/^    int qEnd;	\/* Alignment end position in query *\/$/;"	m	struct:psl
qEnd	../../inc/repMask.h	/^    int qEnd;	\/* End query position. *\/$/;"	m	struct:repeatMaskOut
qEnd	../../inc/xa.h	/^    int qStart, qEnd;$/;"	m	struct:xaAli
qEnd	../../lib/gfClientLib.c	/^    int qEnd;	\/* End in query *\/$/;"	m	struct:gfRange
qEnd	../../lib/xenbig.c	/^    int qStart, qEnd;$/;"	m	struct:cluster
qEnd	../../lib/xenbig.c	/^    int qStart, qEnd;$/;"	m	struct:contig
qEnd	../inc/hgap.h	/^    int qStart, qEnd;     \/* Position in query sequence. *\/$/;"	m	struct:hgAliHit
qEnd	../inc/hgap.h	/^    int qStart, qEnd;     \/* Position in query sequence. *\/$/;"	m	struct:hgAlignment
qEnd	../inc/hgap.h	/^    int qStart, qEnd;     \/* Position in query sequence. *\/$/;"	m	struct:hgBoundedHit
qEnd	../inc/pslWScore.h	/^    unsigned qEnd;	\/* Alignment end position in query *\/$/;"	m	struct:pslWScore
qEnd	../inc/wabAli.h	/^    unsigned qEnd;	\/* End in query. *\/$/;"	m	struct:wabAli
qEndOffset	../../lib/xenbig.c	/^    int qOffset, qEndOffset;$/;"	m	struct:cluster
qEndOffset	../../lib/xenbig.c	/^    int qOffset, qEndOffset;$/;"	m	struct:contig
qId	../../inc/maDbRep.h	/^    unsigned qId;	\/* Database ID of mRNA sequence *\/$/;"	m	struct:mrnaAli
qIsProt	../../inc/genoFind.h	/^    boolean qIsProt;		\/* Query is peptide. *\/$/;"	m	struct:gfSavePslxData
qLeft	../../inc/repMask.h	/^    char *qLeft;	\/* Bases left in query. *\/$/;"	m	struct:repeatMaskOut
qName	../../inc/ens.h	/^    char *qName;                   \/* Query sequence name. *\/$/;"	m	struct:ensFeature
qName	../../inc/psl.h	/^    char *qName;	\/* Query sequence name *\/$/;"	m	struct:psl
qName	../../inc/repMask.h	/^    char *qName;	\/* Name of query. *\/$/;"	m	struct:repeatMaskOut
qName	../inc/pslWScore.h	/^    char *qName;	\/* Query sequence name *\/$/;"	m	struct:pslWScore
qNumInsert	../../inc/psl.h	/^    unsigned qNumInsert;	\/* Number of inserts in query *\/$/;"	m	struct:psl
qNumInsert	../inc/pslWScore.h	/^    unsigned qNumInsert;	\/* Number of inserts in query *\/$/;"	m	struct:pslWScore
qOffset	../../lib/xenbig.c	/^    int qOffset, qEndOffset;$/;"	m	struct:cluster
qOffset	../../lib/xenbig.c	/^    int qOffset, qEndOffset;$/;"	m	struct:contig
qOrientation	../../inc/hgap.h	/^    int qOrientation;	  \/* +1 or -1 query orientation. *\/$/;"	m	struct:hgAliHit
qOrientation	../../inc/hgap.h	/^    int qOrientation;	  \/* +1 or -1 query orientation. *\/$/;"	m	struct:hgBoundedHit
qOrientation	../../inc/hgap.h	/^    int qOrientation;     \/* +1 or -1 orientation. *\/$/;"	m	struct:hgAlignment
qOrientation	../inc/hgap.h	/^    int qOrientation;	  \/* +1 or -1 query orientation. *\/$/;"	m	struct:hgAliHit
qOrientation	../inc/hgap.h	/^    int qOrientation;	  \/* +1 or -1 query orientation. *\/$/;"	m	struct:hgBoundedHit
qOrientation	../inc/hgap.h	/^    int qOrientation;     \/* +1 or -1 orientation. *\/$/;"	m	struct:hgAlignment
qSeq	../../inc/supStitch.h	/^    bioSeq *qSeq;        \/* Query sequence (not owned by bundle.) *\/$/;"	m	struct:ssBundle
qSize	../../inc/psl.h	/^    unsigned qSize;	\/* Query sequence size *\/$/;"	m	struct:psl
qSize	../inc/pslWScore.h	/^    unsigned qSize;	\/* Query sequence size *\/$/;"	m	struct:pslWScore
qSlipIx	../../lib/xensmall.c	/^    qSlipIx,$/;"	e	file:	enum:matIx
qSlipScore	../../lib/xensmall.c	602;"	d	file:
qSlipScore	../../lib/xensmall.c	804;"	d	file:
qSlipState	../../lib/xensmall.c	623;"	d	file:
qStart	../../inc/blastParse.h	/^    int qStart;                         \/* Query start position. *\/$/;"	m	struct:blastBlock
qStart	../../inc/crudeali.h	/^    int qStart, qEnd;$/;"	m	struct:crudeAli
qStart	../../inc/ens.h	/^    int qStart, qEnd;              \/* Query (cDNA, protein, etc.) sequence position. *\/$/;"	m	struct:ensFeature
qStart	../../inc/genoFind.h	/^    bits32 qStart, qEnd;	\/* Position in query. *\/$/;"	m	struct:gfClump
qStart	../../inc/genoFind.h	/^   bits32 qStart;		\/* Where it hits in query. *\/$/;"	m	struct:gfHit
qStart	../../inc/hgap.h	/^    int qStart, qEnd;     \/* Position in query sequence. *\/$/;"	m	struct:hgAliHit
qStart	../../inc/hgap.h	/^    int qStart, qEnd;     \/* Position in query sequence. *\/$/;"	m	struct:hgAlignment
qStart	../../inc/hgap.h	/^    int qStart, qEnd;     \/* Position in query sequence. *\/$/;"	m	struct:hgBoundedHit
qStart	../../inc/maDbRep.h	/^    unsigned qStart;	\/* Start in mRNA sequence *\/$/;"	m	struct:mrnaAli
qStart	../../inc/psl.h	/^    int qStart;	\/* Alignment start position in query *\/$/;"	m	struct:psl
qStart	../../inc/repMask.h	/^    int qStart;	\/* Start query position. *\/$/;"	m	struct:repeatMaskOut
qStart	../../inc/xa.h	/^    int qStart, qEnd;$/;"	m	struct:xaAli
qStart	../../lib/gfClientLib.c	/^    int qStart;	\/* Start in query *\/$/;"	m	struct:gfRange
qStart	../../lib/xenbig.c	/^    int qStart, qEnd;$/;"	m	struct:cluster
qStart	../../lib/xenbig.c	/^    int qStart, qEnd;$/;"	m	struct:contig
qStart	../inc/hgap.h	/^    int qStart, qEnd;     \/* Position in query sequence. *\/$/;"	m	struct:hgAliHit
qStart	../inc/hgap.h	/^    int qStart, qEnd;     \/* Position in query sequence. *\/$/;"	m	struct:hgAlignment
qStart	../inc/hgap.h	/^    int qStart, qEnd;     \/* Position in query sequence. *\/$/;"	m	struct:hgBoundedHit
qStart	../inc/pslWScore.h	/^    unsigned qStart;	\/* Alignment start position in query *\/$/;"	m	struct:pslWScore
qStart	../inc/wabAli.h	/^    unsigned qStart;	\/* Start in query (other species) *\/$/;"	m	struct:wabAli
qStarts	../../inc/psl.h	/^    unsigned *qStarts;	\/* Start of each block in query. *\/$/;"	m	struct:psl
qStarts	../inc/pslWScore.h	/^    unsigned *qStarts;	\/* Start of each block in query. *\/$/;"	m	struct:pslWScore
qStrand	../../inc/blastParse.h	/^    BYTE qStrand;                       \/* Query strand (+1 or -1) *\/$/;"	m	struct:blastBlock
qStrand	../../inc/xa.h	/^    char qStrand;$/;"	m	struct:xaAli
qStrand	../../lib/xenbig.c	/^    char qStrand;$/;"	m	struct:cluster
qStrand	../../lib/xenbig.c	/^    char qStrand;$/;"	m	struct:contig
qSym	../../inc/blastParse.h	/^    char *qSym;                         \/* Query letters (including '-') *\/$/;"	m	struct:blastBlock
qSym	../../inc/xa.h	/^    char *qSym, *tSym, *hSym;$/;"	m	struct:xaAli
qSym	../../lib/xenbig.c	/^    char *qSym;     \/* Query symbols (nucleotides and insert char) *\/$/;"	m	struct:contig
qSym	../inc/wabAli.h	/^    char *qSym;	\/* Query bases plus '-'s. *\/$/;"	m	struct:wabAli
qTotalSize	../../inc/maDbRep.h	/^    unsigned qTotalSize;	\/* Total bases (not just aligned) in mRNA *\/$/;"	m	struct:mrnaAli
qa	../inc/qaSeq.h	/^    UBYTE *qa;            \/* Quality scores in -log10 error rate *\/$/;"	m	struct:qaSeq
qaFaRead	../lib/qaSeq.c	/^static struct qaSeq *qaFaRead(char *qaName, char *faName, boolean mustReadQa)$/;"	f	file:
qaFake	../lib/qaSeq.c	/^void qaFake(struct qaSeq *qa, int badTailSize, int poorTailSize)$/;"	f
qaFastReadNext	../lib/qaSeq.c	/^boolean qaFastReadNext(struct lineFile *lf, UBYTE **retQ, int *retSize, char **retName)$/;"	f
qaIsGsFake	../lib/qaSeq.c	/^boolean qaIsGsFake(struct qaSeq *qa)$/;"	f
qaMakeConstant	../lib/qaSeq.c	/^struct qaSeq *qaMakeConstant(char *name, int val, int size)$/;"	f
qaMakeFake	../lib/qaSeq.c	/^void qaMakeFake(struct qaSeq *qa)$/;"	f
qaMustReadBoth	../lib/qaSeq.c	/^struct qaSeq *qaMustReadBoth(char *qaName, char *faName)$/;"	f
qaRead	../lib/qaSeq.c	/^struct qaSeq *qaRead(char *qaName)$/;"	f
qaReadBoth	../lib/qaSeq.c	/^struct qaSeq *qaReadBoth(char *qaName, char *faName)$/;"	f
qaReadNext	../lib/qaSeq.c	/^struct qaSeq *qaReadNext(struct lineFile *lf)$/;"	f
qaSeq	../inc/qaSeq.h	/^struct qaSeq$/;"	s
qaSeqFree	../lib/qaSeq.c	/^void qaSeqFree(struct qaSeq **pQa)$/;"	f
qaSeqFreeList	../lib/qaSeq.c	/^void qaSeqFreeList(struct qaSeq **pList)$/;"	f
qaWriteNext	../lib/qaSeq.c	/^void qaWriteNext(FILE *f, struct qaSeq *qa)$/;"	f
qacOpenVerify	../lib/qaSeq.c	/^FILE *qacOpenVerify(char *fileName, boolean *retIsSwapped)$/;"	f
qacPathFromFaPath	../lib/qaSeq.c	/^char *qacPathFromFaPath(char *faName)$/;"	f
qacReadNext	../lib/qaSeq.c	/^struct qaSeq *qacReadNext(FILE *f, boolean isSwapped)$/;"	f
qacSig	../../inc/sig.h	53;"	d
qacWriteHead	../lib/qaSeq.c	/^void qacWriteHead(FILE *f)$/;"	f
qacWriteNext	../lib/qaSeq.c	/^void qacWriteNext(FILE *f, struct qaSeq *qa)$/;"	f
queries	../../inc/blastParse.h	/^    struct blastQuery *queries;         \/* List of queries. *\/$/;"	m	struct:blastFile
query	../../inc/blastParse.h	/^    char *query;                        \/* Name of query sequence. *\/$/;"	m	struct:blastQuery
query	../../inc/blastParse.h	/^    struct blastQuery *query;           \/* Query associated with this alignment (not owned here). *\/$/;"	m	struct:blastGappedAli
query	../../inc/hgap.h	/^    char *query;	  \/* Name of query seq. (Not allocated here.) *\/$/;"	m	struct:hgAliHit
query	../../inc/hgap.h	/^    char *query;	  \/* Name of query seq. (Not allocated here.) *\/$/;"	m	struct:hgBoundedHit
query	../../inc/xa.h	/^    char *query;$/;"	m	struct:xaAli
query	../../lib/xenbig.c	/^    char *query;$/;"	m	struct:cluster
query	../../lib/xenbig.c	/^    char *query;$/;"	m	struct:contig
query	../../lib/xensmall.c	/^    char *query;$/;"	m	struct:aliMatrix
query	../inc/hgFind.h	/^    char *query;		  \/* Query string that led to positions. *\/$/;"	m	struct:hgPositions
query	../inc/hgap.h	/^    char *query;	  \/* Name of query seq. (Not allocated here.) *\/$/;"	m	struct:hgAliHit
query	../inc/hgap.h	/^    char *query;	  \/* Name of query seq. (Not allocated here.) *\/$/;"	m	struct:hgBoundedHit
query	../inc/wabAli.h	/^    char *query;	\/* Foreign sequence name. *\/$/;"	m	struct:wabAli
queryBaseCount	../../inc/blastParse.h	/^    int queryBaseCount;                 \/* Number of bases in query. *\/$/;"	m	struct:blastQuery
queryFile	../../lib/xenbig.c	/^    char *queryFile;$/;"	m	struct:contig
queryIx	../../lib/xensmall.c	/^    int queryIx;$/;"	m	struct:aliPair
querySize	../../lib/xensmall.c	/^    int querySize;$/;"	m	struct:aliMatrix
querySym	../../lib/xensmall.c	/^    char querySym;$/;"	m	struct:aliPair
r	../../inc/memgfx.h	/^    unsigned char r, g, b;$/;"	m	struct:rgbColor
rEnd	../../inc/repMask.h	/^    unsigned rEnd;	\/* End position in repeat. *\/$/;"	m	struct:repeatMaskOut
rEnd	../lib/geneGraph.c	/^static int rStart, rEnd;                \/* Start\/end of whole set in genomic coordinates*\/$/;"	v	file:
rFamily	../../inc/repMask.h	/^    char *rFamily;	\/* Repeat name *\/$/;"	m	struct:repeatMaskOut
rFindConnected	../../lib/diGraph.c	/^static void rFindConnected(struct dgNode *a)$/;"	f	file:
rHasCycles	../../lib/diGraph.c	/^static boolean  rHasCycles(struct dgNode *node)$/;"	f	file:
rLeft	../../inc/repMask.h	/^    char *rLeft;	\/* Bases left in repeat. *\/$/;"	m	struct:repeatMaskOut
rMustHaveVal	../../lib/diGraph.c	/^bool rMustHaveVal;			\/* Set to TRUE if rFindConnected only to$/;"	v
rName	../../inc/repMask.h	/^    char *rName;	\/* Repeat name *\/$/;"	m	struct:repeatMaskOut
rOutput	../lib/geneGraph.c	/^static GgTransOut rOutput;		\/* Output transcript. *\/$/;"	v	file:
rPathExists	../../lib/diGraph.c	/^static boolean rPathExists(struct dgNode *a)$/;"	f	file:
rRefList	../../lib/diGraph.c	/^struct dgNodeRef *rRefList;$/;"	v
rStart	../../inc/repMask.h	/^    char *rStart;	\/* Start position in repeat. *\/$/;"	m	struct:repeatMaskOut
rStart	../lib/geneGraph.c	/^static int rStart, rEnd;                \/* Start\/end of whole set in genomic coordinates*\/$/;"	v	file:
rTarget	../../lib/diGraph.c	/^static struct dgNode *rTarget;$/;"	v	file:
rTopoSort	../../lib/diGraph.c	/^static void rTopoSort(struct dgNode *node)$/;"	f	file:
rTraverse	../lib/geneGraph.c	/^static void rTraverse(struct geneGraph *gg, int startVertex)$/;"	f	file:
rVertexAlloc	../lib/geneGraph.c	/^static int rVertexAlloc = 0;		\/* Allocated size of stack. *\/$/;"	v	file:
rVertexCount	../lib/geneGraph.c	/^static int rVertexCount = 0;            \/* Count on stack. *\/$/;"	v	file:
rVertices	../lib/geneGraph.c	/^static struct ggVertex *rVertices;	\/* Vertex stack. *\/$/;"	v	file:
rangeCoorTimes3	../../lib/gfClientLib.c	/^void rangeCoorTimes3(struct gfRange *rangeList)$/;"	f
rangeIntersection	../../lib/common.c	/^int  rangeIntersection(int start1, int end1, int start2, int end2)$/;"	f
rangeScore	../../lib/gfClientLib.c	/^int rangeScore(struct gfRange *range, struct dnaSeq *qSeq)$/;"	f
rangesToFfItem	../../lib/gfClientLib.c	/^static struct ssFfItem *rangesToFfItem(struct gfRange *rangeList, aaSeq *qSeq)$/;"	f	file:
rcContigOffsets	../../lib/xenbig.c	/^static void rcContigOffsets(struct contig *a, int revOff)$/;"	f	file:
rcQueryOffsetsAroundSeg	../../lib/xenbig.c	/^static void rcQueryOffsetsAroundSeg(struct contig *a, int segStart, int segEnd)$/;"	f	file:
read	../../inc/xp.h	/^    int (*read)(void *userData, char *buf, int bufSize);   \/* Read some more. *\/$/;"	m	struct:xp
readAllLines	../../lib/obscure.c	/^struct slName *readAllLines(char *fileName)$/;"	f
readAllWords	../../lib/obscure.c	/^void readAllWords(char *fileName, char ***retWords, int *retWordCount, char **retBuf)$/;"	f
readDir	../../inc/maDbRep.h	/^    signed char readDir;	\/* Read direction of mRNA +1 or -1 *\/$/;"	m	struct:mrnaAli
readFileSection	../lib/hgap.c	/^void *readFileSection(char *fileName, long offset, size_t size)$/;"	f
readInGulp	../../lib/obscure.c	/^void readInGulp(char *fileName, char **retBuf, size_t *retSize)$/;"	f
readIx	../../inc/oldGff.h	/^    int readIx;$/;"	m	struct:gff
readLine	../../lib/common.c	/^char* readLine(FILE* fh)$/;"	f
readOne	../../inc/common.h	449;"	d
readOpenFileSection	../lib/hdb.c	/^void *readOpenFileSection(int fd, long offset, size_t size, char *fileName)$/;"	f
readOpenFileSection	../lib/hgap.c	/^void *readOpenFileSection(int fd, long offset, size_t size, char *fileName)$/;"	f
readQuotedString	../../lib/gff.c	/^static void readQuotedString(char *fileName, int lineIx, char *in, char *out, char **retNext)$/;"	f	file:
readShortNum	../lib/qaSeq.c	/^static int readShortNum(char *s, struct lineFile *lf) $/;"	f	file:
readString	../../lib/common.c	/^char *readString(FILE *f)$/;"	f
readStringZ	../../lib/fof.c	/^static void readStringZ(FILE *f, char *s, int maxLen)$/;"	f	file:
realInfoString	../../lib/wormdna.c	/^static char *realInfoString(char *s)$/;"	f	file:
rec	../../lib/fof.c	/^    struct fofRecord *rec;       \/* Buffer space for one index record. *\/$/;"	m	struct:fof
rec	../../lib/fof.c	/^    struct fofRecord rec;$/;"	m	struct:fofRecList
recNameToFileName	../lib/hCommon.c	/^void recNameToFileName(char *dir, char *recName, char *fileName, char *suffix)$/;"	f
reconsiderAlignedGaps	../../lib/fuzzyFind.c	/^static struct ffAli *reconsiderAlignedGaps(struct ffAli *ali)$/;"	f	file:
recover	../../lib/gifcomp.c	/^static jmp_buf recover;$/;"	v	file:
recursiveWeave	../../lib/fuzzyFind.c	/^static struct ffAli *recursiveWeave(DNA *ns, DNA *ne, DNA *hs, DNA *he, $/;"	f	file:
refAdd	../../lib/common.c	/^void refAdd(struct slRef **pRefList, void *val)$/;"	f
refAddUnique	../../lib/common.c	/^void refAddUnique(struct slRef **pRefList, void *val)$/;"	f
refAlign	../inc/refAlign.h	/^struct refAlign$/;"	s
refAlignCommaIn	../lib/refAlign.c	/^struct refAlign *refAlignCommaIn(char **pS, struct refAlign *ret)$/;"	f
refAlignCommaOut	../inc/refAlign.h	58;"	d
refAlignFree	../lib/refAlign.c	/^void refAlignFree(struct refAlign **pEl)$/;"	f
refAlignFreeList	../lib/refAlign.c	/^void refAlignFreeList(struct refAlign **pList)$/;"	f
refAlignLoad	../lib/refAlign.c	/^struct refAlign *refAlignLoad(char **row)$/;"	f
refAlignLoadAll	../lib/refAlign.c	/^struct refAlign *refAlignLoadAll(char *fileName) $/;"	f
refAlignOutput	../lib/refAlign.c	/^void refAlignOutput(struct refAlign *el, FILE *f, char sep, char lastSep) $/;"	f
refAlignStaticLoad	../lib/refAlign.c	/^void refAlignStaticLoad(char **row, struct refAlign *ret)$/;"	f
refAlignTabOut	../inc/refAlign.h	55;"	d
refLink	../inc/refLink.h	/^struct refLink$/;"	s
refLinkCommaIn	../lib/refLink.c	/^struct refLink *refLinkCommaIn(char **pS, struct refLink *ret)$/;"	f
refLinkCommaOut	../inc/refLink.h	52;"	d
refLinkFree	../lib/refLink.c	/^void refLinkFree(struct refLink **pEl)$/;"	f
refLinkFreeList	../lib/refLink.c	/^void refLinkFreeList(struct refLink **pList)$/;"	f
refLinkLoad	../lib/refLink.c	/^struct refLink *refLinkLoad(char **row)$/;"	f
refLinkLoadAll	../lib/refLink.c	/^struct refLink *refLinkLoadAll(char *fileName) $/;"	f
refLinkOutput	../lib/refLink.c	/^void refLinkOutput(struct refLink *el, FILE *f, char sep, char lastSep) $/;"	f
refLinkStaticLoad	../lib/refLink.c	/^void refLinkStaticLoad(char **row, struct refLink *ret)$/;"	f
refLinkTabOut	../inc/refLink.h	49;"	d
refOnList	../../lib/common.c	/^struct slRef *refOnList(struct slRef *refList, void *val)$/;"	f
refSeqAcc	../inc/knownMore.h	/^    char *refSeqAcc;	\/* Accession of RefSeq mRNA *\/$/;"	m	struct:knownMore
relDir	../../lib/fof.c	/^    char *relDir;                \/* Directory to apply to index files. *\/$/;"	m	struct:fof
removeReturns	../../lib/common.c	/^void removeReturns(char *dest, char *src) $/;"	f
removeThrowbackHits	../../lib/fuzzyFind.c	/^void removeThrowbackHits(struct protoGene *proto)$/;"	f
repClass	../inc/rmskOut.h	/^    char *repClass;	\/* Class of repeat *\/$/;"	m	struct:rmskOut
repEnd	../inc/bbRepMask.h	/^    int repEnd;	\/* End position in repeat. *\/$/;"	m	struct:bbRepMask
repEnd	../inc/rmskOut.h	/^    unsigned repEnd;	\/* End in repeat sequence *\/$/;"	m	struct:rmskOut
repFamily	../inc/bbRepMask.h	/^    char *repFamily;	\/* Repeat name *\/$/;"	m	struct:bbRepMask
repFamily	../inc/rmskOut.h	/^    char *repFamily;	\/* Family of repeat *\/$/;"	m	struct:rmskOut
repLeft	../inc/bbRepMask.h	/^    int repLeft;	\/* Bases left in repeat. *\/$/;"	m	struct:bbRepMask
repLeft	../inc/rmskOut.h	/^    int repLeft;	\/* Size left in repeat sequence *\/$/;"	m	struct:rmskOut
repMatch	../../inc/psl.h	/^    unsigned repMatch;	\/* Number of bases that match but are part of repeats *\/$/;"	m	struct:psl
repMatch	../inc/pslWScore.h	/^    unsigned repMatch;	\/* Number of bases that match but are part of repeats *\/$/;"	m	struct:pslWScore
repName	../inc/rmskOut.h	/^    char *repName;	\/* Name of repeat *\/$/;"	m	struct:rmskOut
repStart	../inc/bbRepMask.h	/^    int repStart;	\/* Start position in repeat. *\/$/;"	m	struct:bbRepMask
repStart	../inc/rmskOut.h	/^    int repStart;	\/* Start in repeat sequence *\/$/;"	m	struct:rmskOut
repeatMaskOut	../../inc/repMask.h	/^struct repeatMaskOut$/;"	s
repeatMaskOutCommaIn	../../lib/repMask.c	/^struct repeatMaskOut *repeatMaskOutCommaIn(char **pS)$/;"	f
repeatMaskOutCommaOut	../../inc/repMask.h	52;"	d
repeatMaskOutFree	../../lib/repMask.c	/^void repeatMaskOutFree(struct repeatMaskOut **pEl)$/;"	f
repeatMaskOutFreeList	../../lib/repMask.c	/^void repeatMaskOutFreeList(struct repeatMaskOut **pList)$/;"	f
repeatMaskOutLoad	../../lib/repMask.c	/^struct repeatMaskOut *repeatMaskOutLoad(char **row)$/;"	f
repeatMaskOutOutput	../../lib/repMask.c	/^void repeatMaskOutOutput(struct repeatMaskOut *el, FILE *f, char sep, char lastSep) $/;"	f
repeatMaskOutStaticLoad	../../lib/repMask.c	/^void repeatMaskOutStaticLoad(char **row, struct repeatMaskOut *ret)$/;"	f
repeatMaskOutTabOut	../../inc/repMask.h	49;"	d
reportTargetStrand	../../inc/genoFind.h	/^    boolean reportTargetStrand; \/* Report target as well as query strand? *\/$/;"	m	struct:gfSavePslxData
reserved	../inc/bed.h	/^    unsigned reserved;   \/* Always zero for now. *\/$/;"	m	struct:bed
restrictCount	../inc/trackDb.h	/^    int restrictCount;	\/* Number of chromosomes this is on (0=all though!) *\/$/;"	m	struct:trackDb
restrictList	../inc/trackDb.h	/^    char **restrictList;	\/* List of chromosomes this is on *\/$/;"	m	struct:trackDb
result	../lib/jksql.c	/^    MYSQL_RES *result;			\/* Result. *\/$/;"	m	struct:sqlResult
resultList	../lib/jksql.c	/^    struct dlList *resultList;		    \/* Any open results. *\/$/;"	m	struct:sqlConnection
retrieveOffset	../../lib/snof.c	/^static long retrieveOffset(char *item, int itemSize)$/;"	f	file:
reuse	../../inc/linefile.h	/^    bool reuse;			\/* Set if reusing input. *\/$/;"	m	struct:lineFile
reverseBytes	../../lib/common.c	/^void reverseBytes(char *bytes, long length)$/;"	f
reverseComplement	../../lib/dnautil.c	/^void reverseComplement(DNA *dna, long length)$/;"	f
reverseIntRange	../../lib/dnautil.c	/^void reverseIntRange(int *pStart, int *pEnd, int size)$/;"	f
reverseInts	../../lib/common.c	/^void reverseInts(int *a, int length)$/;"	f
reverseOffset	../../lib/dnautil.c	/^long reverseOffset(long offset, long arraySize)$/;"	f
reverseUnsigned	../../lib/common.c	/^void reverseUnsigned(unsigned *a, int length)$/;"	f
reverseUnsignedRange	../../lib/dnautil.c	/^void reverseUnsignedRange(unsigned *pStart, unsigned *pEnd, int size)$/;"	f
rgbColor	../../inc/memgfx.h	/^struct rgbColor$/;"	s
rhChrom	../inc/mapSts.h	/^    char *rhChrom;	\/* Chromosome number from the RH map - 0 if there is none *\/$/;"	m	struct:mapSts
right	../../inc/fuzzyFind.h	/^    struct ffAli *right;$/;"	m	struct:ffAli
right	../../lib/fuzzyFind.c	/^    struct protoGene *right;$/;"	m	struct:protoGene
right	../../lib/keys.c	/^    void *right;$/;"	m	struct:exp
rightGood	../../lib/cda.c	/^static UBYTE rightGood(struct ffAli *ali)$/;"	f	file:
rightMask	../../lib/bits.c	/^static Bits rightMask[8] = {0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF,};$/;"	v	file:
rightNextMatch	../../lib/fuzzyFind.c	/^static boolean rightNextMatch(struct ffAli *ali, DNA *ns, DNA *ne, DNA *hs, DNA *he, $/;"	f	file:
rightPrimer	../inc/stsInfo.h	/^    char *rightPrimer;	\/* 3' primer sequence *\/$/;"	m	struct:stsInfo
rkeyEval	../../lib/keys.c	/^static boolean rkeyEval(struct kvt *kvt, struct exp *exp)$/;"	f	file:
rleCompress	../../lib/rle.c	/^int rleCompress(void *vIn, int inSize, signed char *out)$/;"	f
rleUncompress	../../lib/rle.c	/^void rleUncompress(signed char *in, int inSize, void *vOut, int outSize)$/;"	f
rmskOut	../inc/rmskOut.h	/^struct rmskOut$/;"	s
rmskOutCommaIn	../lib/rmskOut.c	/^struct rmskOut *rmskOutCommaIn(char **pS, struct rmskOut *ret)$/;"	f
rmskOutCommaOut	../inc/rmskOut.h	60;"	d
rmskOutFree	../lib/rmskOut.c	/^void rmskOutFree(struct rmskOut **pEl)$/;"	f
rmskOutFreeList	../lib/rmskOut.c	/^void rmskOutFreeList(struct rmskOut **pList)$/;"	f
rmskOutLoad	../lib/rmskOut.c	/^struct rmskOut *rmskOutLoad(char **row)$/;"	f
rmskOutOpenVerify	../lib/rmskOut.c	/^void rmskOutOpenVerify(char *fileName, struct lineFile **retFile, boolean *retEmpty)$/;"	f
rmskOutOutput	../lib/rmskOut.c	/^void rmskOutOutput(struct rmskOut *el, FILE *f, char sep, char lastSep) $/;"	f
rmskOutRead	../lib/rmskOut.c	/^struct rmskOut *rmskOutRead(char *fileName)$/;"	f
rmskOutReadNext	../lib/rmskOut.c	/^struct rmskOut *rmskOutReadNext(struct lineFile *lf)$/;"	f
rmskOutStaticLoad	../lib/rmskOut.c	/^void rmskOutStaticLoad(char **row, struct rmskOut *ret)$/;"	f
rmskOutTabOut	../inc/rmskOut.h	57;"	d
rmskOutWriteAllOut	../lib/rmskOut.c	/^void rmskOutWriteAllOut(char *fileName, struct rmskOut *rmskList)$/;"	f
rmskOutWriteHead	../lib/rmskOut.c	/^void rmskOutWriteHead(FILE *f)$/;"	f
rmskOutWriteOneOut	../lib/rmskOut.c	/^void rmskOutWriteOneOut(struct rmskOut *rmsk, FILE *f)$/;"	f
rnaGene	../inc/rnaGene.h	/^struct rnaGene$/;"	s
rnaGeneCommaIn	../lib/rnaGene.c	/^struct rnaGene *rnaGeneCommaIn(char **pS, struct rnaGene *ret)$/;"	f
rnaGeneCommaOut	../inc/rnaGene.h	50;"	d
rnaGeneFree	../lib/rnaGene.c	/^void rnaGeneFree(struct rnaGene **pEl)$/;"	f
rnaGeneFreeList	../lib/rnaGene.c	/^void rnaGeneFreeList(struct rnaGene **pList)$/;"	f
rnaGeneLoad	../lib/rnaGene.c	/^struct rnaGene *rnaGeneLoad(char **row)$/;"	f
rnaGeneOutput	../lib/rnaGene.c	/^void rnaGeneOutput(struct rnaGene *el, FILE *f, char sep, char lastSep) $/;"	f
rnaGeneStaticLoad	../lib/rnaGene.c	/^void rnaGeneStaticLoad(char **row, struct rnaGene *ret)$/;"	f
rnaGeneTabOut	../inc/rnaGene.h	47;"	d
rootExp	../../inc/keys.h	/^    void *rootExp;       \/* Internally struct exp. *\/$/;"	m	struct:keyExp
rootName	../lib/hdb.c	/^    char *rootName;		\/* Name without chrN_. *\/$/;"	m	struct:hTableInfo
roughAli	../inc/roughAli.h	/^struct roughAli$/;"	s
roughAliCommaIn	../lib/roughAli.c	/^struct roughAli *roughAliCommaIn(char **pS, struct roughAli *ret)$/;"	f
roughAliCommaOut	../inc/roughAli.h	52;"	d
roughAliFree	../lib/roughAli.c	/^void roughAliFree(struct roughAli **pEl)$/;"	f
roughAliFreeList	../lib/roughAli.c	/^void roughAliFreeList(struct roughAli **pList)$/;"	f
roughAliLoad	../lib/roughAli.c	/^struct roughAli *roughAliLoad(char **row)$/;"	f
roughAliLoadAll	../lib/roughAli.c	/^struct roughAli *roughAliLoadAll(char *fileName) $/;"	f
roughAliOutput	../lib/roughAli.c	/^void roughAliOutput(struct roughAli *el, FILE *f, char sep, char lastSep) $/;"	f
roughAliStaticLoad	../lib/roughAli.c	/^void roughAliStaticLoad(char **row, struct roughAli *ret)$/;"	f
roughAliTabOut	../inc/roughAli.h	49;"	d
round	../../inc/common.h	483;"	d
roundingScale	../../lib/common.c	/^int roundingScale(int a, int p, int q)$/;"	f
row	../../inc/spaceSaver.h	/^    int row;			\/* Which row, starting at zero. *\/$/;"	m	struct:spaceNode
rowCount	../../inc/spaceSaver.h	/^    int rowCount;              \/* Number of rows. *\/$/;"	m	struct:spaceSaver
rowIsPsl	../lib/customTrack.c	/^static boolean rowIsPsl(char **row, int wordCount)$/;"	f	file:
rowList	../../inc/spaceSaver.h	/^    struct spaceRowTracker *rowList; \/* List of rows. *\/$/;"	m	struct:spaceSaver
rwCheckGoodEnough	../../lib/fuzzyFind.c	/^static boolean rwCheckGoodEnough;$/;"	v	file:
rwFindTilesBetween	../../lib/fuzzyFind.c	/^static struct ffAli *rwFindTilesBetween(DNA *ns, DNA *ne, DNA *hs, DNA *he, $/;"	f	file:
rwFreq	../../lib/fuzzyFind.c	/^static double rwFreq[4];$/;"	v	file:
rwIsCdna	../../lib/fuzzyFind.c	/^static boolean rwIsCdna;$/;"	v	file:
sage	../inc/sage.h	/^struct sage$/;"	s
sageCommaIn	../lib/sage.c	/^struct sage *sageCommaIn(char **pS, struct sage *ret)$/;"	f
sageCommaOut	../inc/sage.h	51;"	d
sageExp	../inc/sageExp.h	/^struct sageExp$/;"	s
sageExpCommaIn	../lib/sageExp.c	/^struct sageExp *sageExpCommaIn(char **pS, struct sageExp *ret)$/;"	f
sageExpCommaOut	../inc/sageExp.h	54;"	d
sageExpFree	../lib/sageExp.c	/^void sageExpFree(struct sageExp **pEl)$/;"	f
sageExpFreeList	../lib/sageExp.c	/^void sageExpFreeList(struct sageExp **pList)$/;"	f
sageExpLoad	../lib/sageExp.c	/^struct sageExp *sageExpLoad(char **row)$/;"	f
sageExpLoadAll	../lib/sageExp.c	/^struct sageExp *sageExpLoadAll(char *fileName) $/;"	f
sageExpOutput	../lib/sageExp.c	/^void sageExpOutput(struct sageExp *el, FILE *f, char sep, char lastSep) $/;"	f
sageExpStaticLoad	../lib/sageExp.c	/^void sageExpStaticLoad(char **row, struct sageExp *ret)$/;"	f
sageExpTabOut	../inc/sageExp.h	51;"	d
sageFree	../lib/sage.c	/^void sageFree(struct sage **pEl)$/;"	f
sageFreeList	../lib/sage.c	/^void sageFreeList(struct sage **pList)$/;"	f
sageLoad	../lib/sage.c	/^struct sage *sageLoad(char **row)$/;"	f
sageLoadAll	../lib/sage.c	/^struct sage *sageLoadAll(char *fileName) $/;"	f
sageOutput	../lib/sage.c	/^void sageOutput(struct sage *el, FILE *f, char sep, char lastSep) $/;"	f
sageTabOut	../inc/sage.h	48;"	d
sai	../../lib/net.c	/^static struct sockaddr_in sai;		\/* Some system socket info. *\/$/;"	v	file:
sail_ch_ofst	../../lib/sailfnt.c	/^WORD sail_ch_ofst[] = {$/;"	v
sail_data	../../lib/sailfnt.c	/^UBYTE sail_data[] = {$/;"	v
sail_font	../../lib/sailfnt.c	/^struct font_hdr sail_font =$/;"	v
sail_name	../../lib/sailfnt.c	/^char sail_name[] = "SAIL.FNT";$/;"	v
sameString	../../inc/common.h	301;"	d
sameWord	../../inc/common.h	295;"	d
sanger22extra	../inc/sanger22extra.h	/^struct sanger22extra$/;"	s
sanger22extraCommaIn	../lib/sanger22extra.c	/^struct sanger22extra *sanger22extraCommaIn(char **pS, struct sanger22extra *ret)$/;"	f
sanger22extraCommaOut	../inc/sanger22extra.h	49;"	d
sanger22extraFree	../lib/sanger22extra.c	/^void sanger22extraFree(struct sanger22extra **pEl)$/;"	f
sanger22extraFreeList	../lib/sanger22extra.c	/^void sanger22extraFreeList(struct sanger22extra **pList)$/;"	f
sanger22extraLoad	../lib/sanger22extra.c	/^struct sanger22extra *sanger22extraLoad(char **row)$/;"	f
sanger22extraLoadAll	../lib/sanger22extra.c	/^struct sanger22extra *sanger22extraLoadAll(char *fileName) $/;"	f
sanger22extraOutput	../lib/sanger22extra.c	/^void sanger22extraOutput(struct sanger22extra *el, FILE *f, char sep, char lastSep) $/;"	f
sanger22extraStaticLoad	../lib/sanger22extra.c	/^void sanger22extraStaticLoad(char **row, struct sanger22extra *ret)$/;"	f
sanger22extraTabOut	../inc/sanger22extra.h	46;"	d
sangerDir	../../lib/wormdna.c	/^static char *sangerDir = NULL;$/;"	v	file:
saveAliToPermanentMem	../../lib/fuzzyFind.c	/^static struct ffAli *saveAliToPermanentMem(struct ffAli *volatileAli)$/;"	f	file:
saveAlignments	../../lib/gfClientLib.c	/^static void saveAlignments(char *chromName, int chromSize, int chromOffset, $/;"	f	file:
saveBedPart	../lib/customTrack.c	/^static void saveBedPart(FILE *f, char *fileName, struct bed *bed, int fieldCount)$/;"	f	file:
saveNt4	../../lib/nt4.c	/^void  saveNt4(char *fileName, DNA *dna, bits32 dnaSize)$/;"	f
saveSeq	../../inc/genoFind.h	/^    boolean saveSeq;		\/* Save sequence too? *\/$/;"	m	struct:gfSavePslxData
saveTdbLine	../lib/customTrack.c	/^static void saveTdbLine(FILE *f, char *fileName, struct trackDb *tdb)$/;"	f	file:
saved	../../inc/cheapcgi.h	/^    boolean saved;		\/* True if saved. *\/$/;"	m	struct:cgiVar
scale	../../inc/spaceSaver.h	/^    float scale;                \/* What to scale by to get to cell coordinates. *\/$/;"	m	struct:spaceSaver
scaledLog	../../lib/hmmstats.c	/^int scaledLog(double val)$/;"	f
scaledLogOfFraction	../../lib/xensmall.c	/^static int scaledLogOfFraction(double p, double q)$/;"	f	file:
scanChromOffsetFile	../../lib/wormdna.c	/^static struct wormFeature *scanChromOffsetFile(char *dir, char *suffix, $/;"	f	file:
score	../../inc/crudeali.h	/^    int score;$/;"	m	struct:crudeAli
score	../../inc/ens.h	/^    int score;                     \/* Score (I don't know units) *\/$/;"	m	struct:ensFeature
score	../../inc/gff.h	/^    double score;   \/* Score. *\/$/;"	m	struct:gffLine
score	../../inc/maDbRep.h	/^    int score;	\/* Score in something like log-odds form *\/$/;"	m	struct:mrnaAli
score	../../inc/repMask.h	/^    unsigned score;	\/* Smith-Waterman score. *\/$/;"	m	struct:repeatMaskOut
score	../../lib/crudeali.c	/^    int score;$/;"	m	struct:crudeGene
score	../../lib/fuzzyFind.c	/^    int score;$/;"	m	struct:protoGene
score	../../lib/oldGff.c	/^    char score[62];	\/* A number between 0 and 1 *\/$/;"	m	struct:gffSegLine
score	../../lib/supStitch.c	/^    int score;                   \/* Score you get taking this edge. *\/$/;"	m	struct:ssEdge
score	../../lib/xenbig.c	/^    int score;$/;"	m	struct:cluster
score	../../lib/xenbig.c	/^    int score;$/;"	m	struct:contig
score	../inc/bbRepMask.h	/^    unsigned score;	\/* Smith-Waterman score. *\/$/;"	m	struct:bbRepMask
score	../inc/bed.h	/^    int score; \/* Score - 0-1000 *\/$/;"	m	struct:bed
score	../inc/cgh.h	/^    float score;	\/* hybridization score *\/$/;"	m	struct:cgh
score	../inc/exoFish.h	/^    unsigned score;	\/* Score from 0 to 1000 *\/$/;"	m	struct:exoFish
score	../inc/exprBed.h	/^    unsigned score;	\/* Score from pslLayout of best score *\/$/;"	m	struct:exprBed
score	../inc/fishClones.h	/^    unsigned score;	\/* Always 1000 *\/$/;"	m	struct:fishClones
score	../inc/genomicDups.h	/^    unsigned score;	\/* Score from 900-1000.  1000 is best *\/$/;"	m	struct:genomicDups
score	../inc/lfs.h	/^    unsigned score;	\/* Score = 1000\/(# of times clone appears in assembly) *\/$/;"	m	struct:lfs
score	../inc/mapSts.h	/^    unsigned score;	\/* Score of a marker - depends on how many contigs it hits *\/$/;"	m	struct:mapSts
score	../inc/mcnBreakpoints.h	/^    unsigned score;	\/* Always 1000 for now *\/$/;"	m	struct:mcnBreakpoints
score	../inc/pslWScore.h	/^    float score;	\/* score field *\/$/;"	m	struct:pslWScore
score	../inc/refAlign.h	/^    unsigned score;	\/* Score from 0-1000 *\/$/;"	m	struct:refAlign
score	../inc/rnaGene.h	/^    unsigned score;	\/* Score from 0 to 1000 *\/$/;"	m	struct:rnaGene
score	../inc/roughAli.h	/^    unsigned score;	\/* Score from 0 to 1000 *\/$/;"	m	struct:roughAli
score	../inc/simpleRepeat.h	/^    unsigned score;	\/* Score between  and .  Best is . *\/$/;"	m	struct:simpleRepeat
score	../inc/softPromoter.h	/^    unsigned score;	\/* Score from 0 to 1000 *\/$/;"	m	struct:softPromoter
score	../inc/stsMap.h	/^    unsigned score;	\/* Score of a marker = 1000\/(# of placements) *\/$/;"	m	struct:stsMap
score	../inc/stsMarker.h	/^    unsigned score;	\/* Score of a marker - depends on how many contigs it hits *\/$/;"	m	struct:stsMarker
scoreIntron	../../lib/fuzzyFind.c	/^static int scoreIntron(DNA a, DNA b, DNA y, DNA z)$/;"	f	file:
scoreNoninsertingExtensions	../../lib/crudeali.c	/^void scoreNoninsertingExtensions(struct crudeGene *crudeGene, DNA *probe, int probeSize)$/;"	f
scores	../../lib/xensmall.c	/^    int *scores;$/;"	m	struct:aliState
scores	../inc/exprBed.h	/^    float *scores;	\/* log of ratio of feature for particular hybridization *\/$/;"	m	struct:exprBed
seedSize	../../lib/patSpace.c	/^    int seedSize;			 \/* Size of alignment seed. *\/$/;"	m	struct:patSpace
seedSpaceSize	../../lib/patSpace.c	/^    int seedSpaceSize;                    \/* Number of possible seed values. *\/$/;"	m	struct:patSpace
segSize	../../inc/genoFind.h	/^    int segSize;			 \/* Index is segmented if non-zero. *\/$/;"	m	struct:genoFind
segment	../inc/mouseSyn.h	/^    int segment;	\/* Number of segment *\/$/;"	m	struct:mouseSyn
seq	../../inc/genoFind.h	/^    bioSeq *seq;	\/* Sequences.  Usually either this or fileName is NULL. *\/$/;"	m	struct:gfSeqSource
seq	../../inc/gff.h	/^    char *seq;      \/* Name of sequence. *\/$/;"	m	struct:gffLine
seq	../../inc/gff.h	/^    char *seq;      \/* Name of sequence. Not allocated here. *\/$/;"	m	struct:gffGroup
seq	../../inc/patSpace.h	/^    struct dnaSeq *seq;        \/* Sequence in which hit occurs. *\/$/;"	m	struct:patClump
seq	../../inc/trans3.h	/^     struct dnaSeq *seq;		\/* Untranslated sequence.  Not allocated here. *\/$/;"	m	struct:trans3
seq	../../lib/patSpace.c	/^    struct dnaSeq *seq; \/* Pointer to subsequence. *\/$/;"	m	struct:blockPos
seq	../inc/pepPred.h	/^    char *seq;	\/* Peptide sequence *\/$/;"	m	struct:pepPred
seqClumpToRangeList	../../lib/gfClientLib.c	/^static struct gfRange *seqClumpToRangeList(struct gfClump *clumpList, int frame)$/;"	f	file:
seqEnd	../../inc/ens.h	/^    int seqEnd;				\/* End position. *\/$/;"	m	struct:ensExon
seqEnd	../inc/bbRepMask.h	/^    unsigned seqEnd;	\/* End in sequence *\/$/;"	m	struct:bbRepMask
seqHash	../../inc/gff.h	/^    struct hash *seqHash;	\/* A name only hash of the sequence. *\/$/;"	m	struct:gffFile
seqId	../inc/bbRepMask.h	/^    unsigned char seqId;	\/* Id of chromosome *\/$/;"	m	struct:bbRepMask
seqIsDna	../../lib/dnaseq.c	/^boolean seqIsDna(bioSeq *seq)$/;"	f
seqIx	../../inc/patSpace.h	/^    int seqIx;                 \/* Index of contig where hit occurs. *\/$/;"	m	struct:patClump
seqIx	../../lib/patSpace.c	/^    bits16 seqIx;          \/* Which subsequence in bac. *\/$/;"	m	struct:blockPos
seqList	../../inc/gff.h	/^    struct gffSeqName *seqList; \/* List of sequences in file. *\/$/;"	m	struct:gffFile
seqObj	../lib/hgap.c	/^    void *seqObj;		\/* A bac, contig, etc. *\/$/;"	m	struct:hgNestBinder
seqOutColor	../../inc/seqOut.h	/^enum seqOutColor$/;"	g
seqOutColorLookup	../../lib/seqOut.c	/^int seqOutColorLookup[3] = $/;"	v
seqSize	../inc/clonePos.h	/^    unsigned seqSize;	\/* base count not including gaps *\/$/;"	m	struct:clonePos
seqSize	../inc/coordConv.h	/^    int seqSize; \/** Size of sequence being aligned to genome. *\/$/;"	m	struct:coordConvRep
seqStart	../../inc/ens.h	/^    int seqStart;			\/* Start position. *\/$/;"	m	struct:ensExon
seqStart	../inc/bbRepMask.h	/^    unsigned seqStart;	\/* Start in sequence *\/$/;"	m	struct:bbRepMask
seqname	../../lib/oldGff.c	/^    char seqname[64];   \/* Name of DNA sequence this refers to. *\/$/;"	m	struct:gffSegLine
sequence	../inc/simpleRepeat.h	/^    char *sequence;	\/* Sequence of repeat unit element *\/$/;"	m	struct:simpleRepeat
sequence	../inc/stsInfo.h	/^    unsigned sequence;	\/* Whether the full sequence is available (1) or not (0) for STS *\/$/;"	m	struct:stsInfo
setCurrentDir	../../lib/osunix.c	/^boolean setCurrentDir(char *newDir)$/;"	f
setCurrentDir	../../lib/oswin9x.c	/^boolean setCurrentDir(char *newDir)$/;"	f
setDefaultMemHandler	../../lib/memalloc.c	/^void setDefaultMemHandler()$/;"	f
setRangePlusExtra	../lib/featureBits.c	/^void setRangePlusExtra(struct featureBits **pList, int s, int e, int extraStart, int extraEnd, $/;"	f
setupSocket	../../lib/net.c	/^static int setupSocket(char *hostName, char *portName)$/;"	f	file:
setupWss	../../lib/portimpl.c	/^static void setupWss()$/;"	f	file:
shaCleanup	../../lib/shaRes.c	/^void shaCleanup(struct shaResList *list)$/;"	f
shaFreeNode	../../lib/shaRes.c	/^static void shaFreeNode(struct shaResNode *node)$/;"	f	file:
shaInit	../../lib/shaRes.c	/^void shaInit(struct shaResList *list, void (*freeData)(void *pData))$/;"	f
shaLink	../../lib/shaRes.c	/^void shaLink(struct shaResNode *node)$/;"	f
shaNewNode	../../lib/shaRes.c	/^struct shaResNode *shaNewNode(struct shaResList *list, char *name, void *data)$/;"	f
shaResList	../../inc/shaRes.h	/^struct shaResList$/;"	s
shaResNode	../../inc/shaRes.h	/^struct shaResNode$/;"	s
shaUnlink	../../lib/shaRes.c	/^void shaUnlink(struct shaResNode *node)$/;"	f
shgcG3Chrom	../inc/stsMap.h	/^    char *shgcG3Chrom;	\/* Chromosome (no chr) from Stanford G3 map or 0 if none *\/$/;"	m	struct:stsMap
shgcG3Chrom	../inc/stsMarker.h	/^    char *shgcG3Chrom;	\/* Chromosome (no chr) from shgc_g3 map or 0 if none *\/$/;"	m	struct:stsMarker
shgcG3Pos	../inc/stsMap.h	/^    float shgcG3Pos;	\/* Position on shgc_g3 map *\/$/;"	m	struct:stsMap
shgcG3Pos	../inc/stsMarker.h	/^    float shgcG3Pos;	\/* Position on shgc_g3 map *\/$/;"	m	struct:stsMarker
shgcTngChrom	../inc/stsMap.h	/^    char *shgcTngChrom;	\/* Chromosome (no chr) from shgc_tng map or 0 if none *\/$/;"	m	struct:stsMap
shgcTngChrom	../inc/stsMarker.h	/^    char *shgcTngChrom;	\/* Chromosome (no chr) from shgc_tng map or 0 if none *\/$/;"	m	struct:stsMarker
shgcTngPos	../inc/stsMap.h	/^    float shgcTngPos;	\/* Position on shgc_tng map *\/$/;"	m	struct:stsMap
shgcTngPos	../inc/stsMarker.h	/^    float shgcTngPos;	\/* Position on shgc_tng map *\/$/;"	m	struct:stsMarker
shortEndState	../../lib/xensmall.c	663;"	d	file:
shortLabel	../inc/trackDb.h	/^    char *shortLabel;	\/* Short label displayed on left *\/$/;"	m	struct:trackDb
shortLabel	../inc/trackTable.h	/^    char *shortLabel;	\/* Short label displayed on left *\/$/;"	m	struct:trackTable
shortName	../../inc/ens.h	/^    char *shortName;		\/* 15 letter summary. *\/$/;"	m	struct:ensAnalysis
simpleGaussean	../../lib/hmmstats.c	/^double simpleGaussean(double x)$/;"	f
simpleRepeat	../inc/simpleRepeat.h	/^struct simpleRepeat$/;"	s
simpleRepeatCommaIn	../lib/simpleRepeat.c	/^struct simpleRepeat *simpleRepeatCommaIn(char **pS, struct simpleRepeat *ret)$/;"	f
simpleRepeatCommaOut	../inc/simpleRepeat.h	56;"	d
simpleRepeatFree	../lib/simpleRepeat.c	/^void simpleRepeatFree(struct simpleRepeat **pEl)$/;"	f
simpleRepeatFreeList	../lib/simpleRepeat.c	/^void simpleRepeatFreeList(struct simpleRepeat **pList)$/;"	f
simpleRepeatLoad	../lib/simpleRepeat.c	/^struct simpleRepeat *simpleRepeatLoad(char **row)$/;"	f
simpleRepeatOutput	../lib/simpleRepeat.c	/^void simpleRepeatOutput(struct simpleRepeat *el, FILE *f, char sep, char lastSep) $/;"	f
simpleRepeatStaticLoad	../lib/simpleRepeat.c	/^void simpleRepeatStaticLoad(char **row, struct simpleRepeat *ret)$/;"	f
simpleRepeatTabOut	../inc/simpleRepeat.h	53;"	d
singlePos	../inc/hgFind.h	/^    struct hgPos *singlePos;      \/* If resolves to a single position, reference to that here. *\/$/;"	m	struct:hgPositions
singlePos	../lib/hgFind.c	/^static void singlePos(struct hgPositions *hgp, char *tableDescription, char *posDescription,$/;"	f	file:
sixhi_ch_ofst	../../lib/sixhi.c	/^static WORD sixhi_ch_ofst[257] = {$/;"	v	file:
sixhi_data	../../lib/sixhi.c	/^UBYTE sixhi_data[] = {$/;"	v
sixhi_font	../../lib/sixhi.c	/^struct font_hdr sixhi_font = {$/;"	v
size	../../inc/dnaseq.h	/^    int size;             \/* Size of sequence. *\/$/;"	m	struct:dnaSeq
size	../../inc/fof.h	/^    bits32 size;            \/* Size in file - filled in by server. *\/$/;"	m	struct:fofBatch
size	../../inc/fof.h	/^    bits32 size;          \/* Size within file. *\/$/;"	m	struct:fofPos
size	../../inc/hash.h	/^    int size;$/;"	m	struct:hash
size	../../inc/hgap.h	/^    int size;                   \/* Size in bases. *\/$/;"	m	struct:hgNest
size	../../inc/hgap.h	/^    int size;                 \/* Size in bases. *\/$/;"	m	struct:hgContig
size	../../inc/patSpace.h	/^    int size;                  \/* Size of block within sequence. *\/$/;"	m	struct:patClump
size	../../inc/portable.h	/^    long size;		\/* Size in bytes. *\/$/;"	m	struct:fileInfo
size	../../lib/fof.c	/^    bits32 size;    \/* Sizer within file. *\/$/;"	m	struct:fofRecord
size	../../lib/memalloc.c	/^    int size;$/;"	m	struct:carefulMemBlock
size	../../lib/nib.c	/^    bits32 size;	\/* Current size. *\/$/;"	m	struct:nibStream
size	../../lib/patSpace.c	/^    int size;           \/* Size of block within subsequence. *\/$/;"	m	struct:blockPos
size	../inc/agpGap.h	/^    unsigned size;	\/* size of gap *\/$/;"	m	struct:agpGap
size	../inc/chromInfo.h	/^    unsigned size;	\/* Chromosome size *\/$/;"	m	struct:chromInfo
size	../inc/chromInserts.h	/^    int size;                   \/* Insert size in bases. *\/$/;"	m	struct:bigInsert
size	../inc/ctgPos.h	/^    unsigned size;	\/* Size of contig *\/$/;"	m	struct:ctgPos
size	../inc/exprBed.h	/^    unsigned size;	\/* Size of the feature, may be useful if we cannot place it *\/$/;"	m	struct:exprBed
size	../inc/hgap.h	/^    int size;                   \/* Size in bases. *\/$/;"	m	struct:hgNest
size	../inc/hgap.h	/^    int size;                 \/* Size in bases. *\/$/;"	m	struct:hgContig
size	../inc/qaSeq.h	/^    int size;             \/* Size of sequence. *\/$/;"	m	struct:qaSeq
size	../inc/traceInfo.h	/^    unsigned size;	\/* Size of read *\/$/;"	m	struct:traceInfo
skipChr	../lib/hCommon.c	/^char *skipChr(char *s)$/;"	f
skipDepth	../../inc/xap.h	/^   int skipDepth;				\/* Depth beneath which we skip. *\/$/;"	m	struct:xap
skipLeadingSpaces	../../lib/common.c	/^char *skipLeadingSpaces(char *s)$/;"	f
skipToSpaces	../../lib/common.c	/^char *skipToSpaces(char *s)$/;"	f
slAddHead	../../inc/common.h	174;"	d
slAddHead	../../lib/common.c	/^void slAddHead(void *listPt, void *node)$/;"	f
slAddTail	../../lib/common.c	/^void slAddTail(void *listPt, void *node)$/;"	f
slCat	../../lib/common.c	/^void *slCat(void *va, void *vb)$/;"	f
slCount	../../lib/common.c	/^int slCount(void *list)$/;"	f
slElementFromIx	../../lib/common.c	/^void *slElementFromIx(void *list, int ix)$/;"	f
slFreeList	../../lib/common.c	/^void slFreeList(void *listPt)$/;"	f
slIxFromElement	../../lib/common.c	/^int slIxFromElement(void *list, void *el)$/;"	f
slLastEl	../../lib/common.c	/^void *slLastEl(void *list)$/;"	f
slList	../../inc/common.h	/^struct slList$/;"	s
slName	../../inc/common.h	/^struct slName$/;"	s
slNameCmp	../../lib/common.c	/^int slNameCmp(const void *va, const void *vb)$/;"	f
slNameFind	../../lib/common.c	/^void *slNameFind(void *list, char *string)$/;"	f
slNameInList	../../lib/common.c	/^boolean slNameInList(struct slName *list, char *string)$/;"	f
slNameSort	../../lib/common.c	/^void slNameSort(struct slName **pList)$/;"	f
slNameStore	../../lib/common.c	/^char *slNameStore(struct slName **pList, char *string)$/;"	f
slPopHead	../../lib/common.c	/^void *slPopHead(void *vListPt)$/;"	f
slPopTail	../../lib/common.c	/^void *slPopTail(void *vListPt)$/;"	f
slRef	../../inc/common.h	/^struct slRef$/;"	s
slRemoveEl	../../lib/common.c	/^void slRemoveEl(void *vpList, void *vToRemove)$/;"	f
slReverse	../../lib/common.c	/^void slReverse(void *listPt)$/;"	f
slSafeAddHead	../../lib/common.c	/^void slSafeAddHead(void *listPt, void *node)$/;"	f
slSort	../../lib/common.c	/^void slSort(void *pList, int (*compare )(const void *elem1,  const void *elem2))$/;"	f
slUniqify	../../lib/common.c	/^void slUniqify(void *pList, int (*compare )(const void *elem1,  const void *elem2), void (*free)())$/;"	f
slideIntron	../../lib/fuzzyFind.c	/^static int slideIntron(struct ffAli *left, struct ffAli *right)$/;"	f	file:
smallMiddleExons	../../lib/supStitch.c	/^struct ffAli *smallMiddleExons(struct ffAli *aliList, struct ssBundle *bundle, $/;"	f
snOnes	../lib/qaSeq.c	/^static int snOnes[256], snTens[256];$/;"	v	file:
snTens	../lib/qaSeq.c	/^static int snOnes[256], snTens[256];$/;"	v	file:
snof	../../inc/snof.h	/^struct snof$/;"	s
snof	../../inc/wormdna.h	/^    struct snof *snof;$/;"	m	struct:wormGdfCache
snofClose	../../lib/snof.c	/^void snofClose(struct snof **pSnof)$/;"	f
snofCmp	../../lib/snof.c	/^static int snofCmp(char *prefix, char *name, int maxSize, boolean isPrefix)$/;"	f	file:
snofDupeOkIndex	../../lib/snofmake.c	/^boolean snofDupeOkIndex(FILE *inFile, char *outName, $/;"	f
snofElementCount	../../lib/snof.c	/^int snofElementCount(struct snof *snof)$/;"	f
snofFindFirstStartingWith	../../lib/snof.c	/^boolean snofFindFirstStartingWith(struct snof *snof, char *prefix, int prefixSize,$/;"	f
snofFindOffset	../../lib/snof.c	/^boolean snofFindOffset(struct snof *snof, char *name, long *pOffset)$/;"	f
snofMakeIndex	../../lib/snofmake.c	/^boolean snofMakeIndex(FILE *inFile, char *outName, $/;"	f
snofMustOpen	../../lib/snof.c	/^struct snof *snofMustOpen(char *indexName)$/;"	f
snofNameAtIx	../../lib/snof.c	/^char *snofNameAtIx(struct snof *snof, int ix)$/;"	f
snofNameOffsetAtIx	../../lib/snof.c	/^void snofNameOffsetAtIx(struct snof *snof, int ix, char **pName, long *pOffset)$/;"	f
snofOffsetAtIx	../../lib/snof.c	/^long snofOffsetAtIx(struct snof *snof, int ix)$/;"	f
snofOpen	../../lib/snof.c	/^struct snof *snofOpen(char *indexName)$/;"	f
snofSearch	../../lib/snof.c	/^static boolean snofSearch(struct snof *snof, char *name, int nameSize, $/;"	f	file:
snofSignature	../../lib/snofsig.c	/^void snofSignature(char **rSig, int *rSigSize)$/;"	f
snp	../inc/snp.h	/^struct snp$/;"	s
snpCommaIn	../lib/snp.c	/^struct snp *snpCommaIn(char **pS, struct snp *ret)$/;"	f
snpCommaOut	../inc/snp.h	44;"	d
snpFree	../lib/snp.c	/^void snpFree(struct snp **pEl)$/;"	f
snpFreeList	../lib/snp.c	/^void snpFreeList(struct snp **pList)$/;"	f
snpLoad	../lib/snp.c	/^struct snp *snpLoad(char **row)$/;"	f
snpOutput	../lib/snp.c	/^void snpOutput(struct snp *el, FILE *f, char sep, char lastSep) $/;"	f
snpStaticLoad	../lib/snp.c	/^void snpStaticLoad(char **row, struct snp *ret)$/;"	f
snpTabOut	../inc/snp.h	41;"	d
socBlack	../../inc/seqOut.h	/^    socBlack = 0,		\/* Not aligning. *\/$/;"	e	enum:seqOutColor
socBlue	../../inc/seqOut.h	/^    socBlue = 1,		\/* Aligning. *\/$/;"	e	enum:seqOutColor
socBrightBlue	../../inc/seqOut.h	/^    socBrightBlue = 2,		\/* End of an aligning block. *\/$/;"	e	enum:seqOutColor
softEndArcs	../lib/ggGraph.c	/^static boolean softEndArcs(struct geneGraph *gg, int softEndIx)$/;"	f	file:
softEndBleedLimit	../lib/ggGraph.c	/^enum{ softEndBleedLimit = 5};  \/* For soft ends allow some bleeding into next intron *\/$/;"	e	file:
softPromoter	../inc/softPromoter.h	/^struct softPromoter$/;"	s
softPromoterCommaIn	../lib/softPromoter.c	/^struct softPromoter *softPromoterCommaIn(char **pS, struct softPromoter *ret)$/;"	f
softPromoterCommaOut	../inc/softPromoter.h	53;"	d
softPromoterFree	../lib/softPromoter.c	/^void softPromoterFree(struct softPromoter **pEl)$/;"	f
softPromoterFreeList	../lib/softPromoter.c	/^void softPromoterFreeList(struct softPromoter **pList)$/;"	f
softPromoterLoad	../lib/softPromoter.c	/^struct softPromoter *softPromoterLoad(char **row)$/;"	f
softPromoterLoadAll	../lib/softPromoter.c	/^struct softPromoter *softPromoterLoadAll(char *fileName) $/;"	f
softPromoterOutput	../lib/softPromoter.c	/^void softPromoterOutput(struct softPromoter *el, FILE *f, char sep, char lastSep) $/;"	f
softPromoterStaticLoad	../lib/softPromoter.c	/^void softPromoterStaticLoad(char **row, struct softPromoter *ret)$/;"	f
softPromoterTabOut	../inc/softPromoter.h	50;"	d
softStartArcs	../lib/ggGraph.c	/^static boolean softStartArcs(struct geneGraph *gg, int softStartIx)$/;"	f	file:
softberryHom	../inc/softberryHom.h	/^struct softberryHom$/;"	s
softberryHomCommaIn	../lib/softberryHom.c	/^struct softberryHom *softberryHomCommaIn(char **pS, struct softberryHom *ret)$/;"	f
softberryHomCommaOut	../inc/softberryHom.h	43;"	d
softberryHomFree	../lib/softberryHom.c	/^void softberryHomFree(struct softberryHom **pEl)$/;"	f
softberryHomFreeList	../lib/softberryHom.c	/^void softberryHomFreeList(struct softberryHom **pList)$/;"	f
softberryHomLoad	../lib/softberryHom.c	/^struct softberryHom *softberryHomLoad(char **row)$/;"	f
softberryHomOutput	../lib/softberryHom.c	/^void softberryHomOutput(struct softberryHom *el, FILE *f, char sep, char lastSep) $/;"	f
softberryHomStaticLoad	../lib/softberryHom.c	/^void softberryHomStaticLoad(char **row, struct softberryHom *ret)$/;"	f
softberryHomTabOut	../inc/softberryHom.h	40;"	d
softlyTrim	../lib/ggGraph.c	/^static boolean softlyTrim(struct geneGraph *gg)$/;"	f	file:
softlyTrimEnd	../lib/ggGraph.c	/^static boolean softlyTrimEnd(struct geneGraph *gg, int softIx)$/;"	f	file:
softlyTrimStart	../lib/ggGraph.c	/^static boolean softlyTrimStart(struct geneGraph *gg, int softIx)$/;"	f	file:
source	../../inc/gff.h	/^    char *source;      \/* Name of source program. Not allocated here. *\/$/;"	m	struct:gffGroup
source	../../inc/gff.h	/^    char *source;   \/* Program that made this line.  Not allocated here. *\/$/;"	m	struct:gffLine
source	../../lib/oldGff.c	/^    char source[64];	\/* Who put this segment here... *\/$/;"	m	struct:gffSegLine
source	../inc/rnaGene.h	/^    char *source;	\/* Source as in Sean Eddy's files. *\/$/;"	m	struct:rnaGene
sourceCount	../../inc/genoFind.h	/^    int sourceCount;			 \/* Count of source files. *\/$/;"	m	struct:genoFind
sourceHash	../../inc/gff.h	/^    struct hash *sourceHash;	\/* A name only hash of gff sources. *\/$/;"	m	struct:gffFile
sourceList	../../inc/gff.h	/^    struct gffSource *sourceList; \/* List of all sources in file. *\/$/;"	m	struct:gffFile
sources	../../inc/genoFind.h	/^    struct gfSeqSource *sources;         \/* List of sequence sources. *\/$/;"	m	struct:genoFind
spaceNode	../../inc/spaceSaver.h	/^struct spaceNode$/;"	s
spaceRowTracker	../../inc/spaceSaver.h	/^struct spaceRowTracker $/;"	s
spaceSaver	../../inc/spaceSaver.h	/^struct spaceSaver$/;"	s
spaceSaverAdd	../../lib/spaceSaver.c	/^struct spaceNode *spaceSaverAdd(struct spaceSaver *ss, int start, int end, void *val)$/;"	f
spaceSaverFinish	../../lib/spaceSaver.c	/^void spaceSaverFinish(struct spaceSaver *ss)$/;"	f
spaceSaverFree	../../lib/spaceSaver.c	/^void spaceSaverFree(struct spaceSaver **pSs)$/;"	f
spaceSaverNew	../../lib/spaceSaver.c	/^struct spaceSaver *spaceSaverNew(int winStart, int winEnd)$/;"	f
splitPath	../../lib/common.c	/^void splitPath(char *path, char dir[256], char name[128], char extension[64])$/;"	f
spot	../inc/cgh.h	/^    unsigned spot;	\/* Spot number on array *\/$/;"	m	struct:cgh
sqlAbort	../lib/jksql.c	/^void sqlAbort(struct sqlConnection  *sc, char *format, ...)$/;"	f
sqlAllocConnection	../lib/jksql.c	/^struct sqlConnection *sqlAllocConnection(struct sqlConnCache *cache)$/;"	f
sqlByteArray	../../lib/sqlList.c	/^int sqlByteArray(char *s, signed char *array, int arraySize)$/;"	f
sqlByteDynamicArray	../../lib/sqlList.c	/^void sqlByteDynamicArray(char *s, signed char **retArray, int *retSize)$/;"	f
sqlByteStaticArray	../../lib/sqlList.c	/^void sqlByteStaticArray(char *s, signed char **retArray, int *retSize)$/;"	f
sqlCleanupAll	../lib/jksql.c	/^void sqlCleanupAll()$/;"	f
sqlConnCache	../lib/jksql.c	/^struct sqlConnCache$/;"	s	file:
sqlConnect	../lib/jksql.c	/^struct sqlConnection *sqlConnect(char *database)$/;"	f
sqlConnectRemote	../lib/jksql.c	/^struct sqlConnection *sqlConnectRemote(char *host, $/;"	f
sqlConnection	../lib/jksql.c	/^struct sqlConnection$/;"	s	file:
sqlCountColumns	../lib/jksql.c	/^int sqlCountColumns(struct sqlResult *sr)$/;"	f
sqlDisconnect	../lib/jksql.c	/^void sqlDisconnect(struct sqlConnection **pSc)$/;"	f
sqlEatChar	../../lib/sqlList.c	/^char *sqlEatChar(char *s, char c)$/;"	f
sqlExists	../lib/jksql.c	/^boolean sqlExists(struct sqlConnection *conn, char *query)$/;"	f
sqlFieldCount	../lib/jksql.c	/^int sqlFieldCount(struct sqlResult *sr)$/;"	f
sqlFieldName	../lib/jksql.c	/^char* sqlFieldName(struct sqlResult *sr)$/;"	f
sqlFixedStringComma	../../lib/sqlList.c	/^void sqlFixedStringComma(char **pS, char *buf, int bufSize)$/;"	f
sqlFloatArray	../../lib/sqlList.c	/^int sqlFloatArray(char *s, float *array, int maxArraySize)$/;"	f
sqlFloatDynamicArray	../../lib/sqlList.c	/^void sqlFloatDynamicArray(char *s, float **retArray, int *retSize)$/;"	f
sqlFloatStaticArray	../../lib/sqlList.c	/^void sqlFloatStaticArray(char *s, float **retArray, int *retSize)$/;"	f
sqlFreeConnCache	../lib/jksql.c	/^void sqlFreeConnCache(struct sqlConnCache **pCache)$/;"	f
sqlFreeConnection	../lib/jksql.c	/^void sqlFreeConnection(struct sqlConnCache *cache, struct sqlConnection **pConn)$/;"	f
sqlFreeResult	../lib/jksql.c	/^void sqlFreeResult(struct sqlResult **pRes)$/;"	f
sqlGetOptQuoteString	../../lib/sqlList.c	/^static char *sqlGetOptQuoteString(char **pS)$/;"	f	file:
sqlGetResult	../lib/jksql.c	/^struct sqlResult *sqlGetResult(struct sqlConnection *sc, char *query)$/;"	f
sqlInitTracking	../lib/jksql.c	/^static void sqlInitTracking()$/;"	f	file:
sqlMaybeMakeTable	../lib/jksql.c	/^boolean sqlMaybeMakeTable(struct sqlConnection *sc, char *table, char *query)$/;"	f
sqlMustGetResult	../lib/jksql.c	/^struct sqlResult *sqlMustGetResult(struct sqlConnection *sc, char *query)$/;"	f
sqlNewConnCache	../lib/jksql.c	/^struct sqlConnCache *sqlNewConnCache(char *database)$/;"	f
sqlNextRow	../lib/jksql.c	/^char **sqlNextRow(struct sqlResult *sr)$/;"	f
sqlOpenConnections	../lib/jksql.c	/^static struct dlList *sqlOpenConnections;$/;"	v	file:
sqlQuickNum	../lib/jksql.c	/^int sqlQuickNum(struct sqlConnection *conn, char *query)$/;"	f
sqlQuickQuery	../lib/jksql.c	/^char *sqlQuickQuery(struct sqlConnection *sc, char *query, char *buf, int bufSize)$/;"	f
sqlRemakeTable	../lib/jksql.c	/^boolean sqlRemakeTable(struct sqlConnection *sc, char *table, char *create)$/;"	f
sqlResult	../lib/jksql.c	/^struct sqlResult$/;"	s	file:
sqlShortArray	../../lib/sqlList.c	/^int sqlShortArray(char *s, short *array, int arraySize)$/;"	f
sqlShortDynamicArray	../../lib/sqlList.c	/^void sqlShortDynamicArray(char *s, short **retArray, int *retSize)$/;"	f
sqlShortStaticArray	../../lib/sqlList.c	/^void sqlShortStaticArray(char *s, short **retArray, int *retSize)$/;"	f
sqlSigned	../../lib/sqlNum.c	/^int sqlSigned(char *s)$/;"	f
sqlSignedArray	../../lib/sqlList.c	/^int sqlSignedArray(char *s, int *array, int arraySize)$/;"	f
sqlSignedComma	../../lib/sqlList.c	/^int sqlSignedComma(char **pS)$/;"	f
sqlSignedDynamicArray	../../lib/sqlList.c	/^void sqlSignedDynamicArray(char *s, int **retArray, int *retSize)$/;"	f
sqlSignedStaticArray	../../lib/sqlList.c	/^void sqlSignedStaticArray(char *s, int **retArray, int *retSize)$/;"	f
sqlStoreResult	../lib/jksql.c	/^struct sqlResult *sqlStoreResult(struct sqlConnection *sc, char *query)$/;"	f
sqlStringArray	../../lib/sqlList.c	/^int sqlStringArray(char *s, char **array, int maxArraySize)$/;"	f
sqlStringComma	../../lib/sqlList.c	/^char *sqlStringComma(char **pS)$/;"	f
sqlStringDynamicArray	../../lib/sqlList.c	/^void sqlStringDynamicArray(char *s, char ***retArray, int *retSize)$/;"	f
sqlStringFreeDynamicArray	../../lib/sqlList.c	/^void sqlStringFreeDynamicArray(char ***pArray)$/;"	f
sqlStringStaticArray	../../lib/sqlList.c	/^void sqlStringStaticArray(char *s, char  ***retArray, int *retSize)$/;"	f
sqlTableExists	../lib/jksql.c	/^boolean sqlTableExists(struct sqlConnection *sc, char *table)$/;"	f
sqlTableSize	../lib/jksql.c	/^int sqlTableSize(struct sqlConnection *conn, char *table)$/;"	f
sqlUbyteArray	../../lib/sqlList.c	/^int sqlUbyteArray(char *s, unsigned char *array, int arraySize)$/;"	f
sqlUbyteDynamicArray	../../lib/sqlList.c	/^void sqlUbyteDynamicArray(char *s, unsigned char **retArray, int *retSize)$/;"	f
sqlUbyteStaticArray	../../lib/sqlList.c	/^void sqlUbyteStaticArray(char *s, unsigned char **retArray, int *retSize)$/;"	f
sqlUnsigned	../../lib/sqlNum.c	/^unsigned sqlUnsigned(char *s)$/;"	f
sqlUnsignedArray	../../lib/sqlList.c	/^int sqlUnsignedArray(char *s, unsigned *array, int arraySize)$/;"	f
sqlUnsignedComma	../../lib/sqlList.c	/^int sqlUnsignedComma(char **pS)$/;"	f
sqlUnsignedDynamicArray	../../lib/sqlList.c	/^void sqlUnsignedDynamicArray(char *s, unsigned **retArray, int *retSize)$/;"	f
sqlUnsignedStaticArray	../../lib/sqlList.c	/^void sqlUnsignedStaticArray(char *s, unsigned **retArray, int *retSize)$/;"	f
sqlUpdate	../lib/jksql.c	/^void sqlUpdate(struct sqlConnection *conn, char *query)$/;"	f
sqlUseOrStore	../lib/jksql.c	/^static struct sqlResult *sqlUseOrStore(struct sqlConnection *sc, $/;"	f	file:
sqlUshortArray	../../lib/sqlList.c	/^int sqlUshortArray(char *s, unsigned short *array, int arraySize)$/;"	f
sqlUshortDynamicArray	../../lib/sqlList.c	/^void sqlUshortDynamicArray(char *s, unsigned short **retArray, int *retSize)$/;"	f
sqlUshortStaticArray	../../lib/sqlList.c	/^void sqlUshortStaticArray(char *s, unsigned short **retArray, int *retSize)$/;"	f
sqlVaWarn	../lib/jksql.c	/^void sqlVaWarn(struct sqlConnection *sc, char *format, va_list args)$/;"	f
sqlWarn	../lib/jksql.c	/^void sqlWarn(struct sqlConnection *sc, char *format, ...)$/;"	f
squeezeHits8	../../lib/crudeali.c	/^void squeezeHits8(struct fastProber *fp, $/;"	f
ssBundle	../../inc/supStitch.h	/^struct ssBundle$/;"	s
ssBundleFree	../../lib/supStitch.c	/^void ssBundleFree(struct ssBundle **pEl)$/;"	f
ssBundleFreeList	../../lib/supStitch.c	/^void ssBundleFreeList(struct ssBundle **pList)$/;"	f
ssDynamicProgram	../../lib/supStitch.c	/^static struct ssNode *ssDynamicProgram(struct ssGraph *graph)$/;"	f	file:
ssEdge	../../lib/supStitch.c	/^struct ssEdge$/;"	s	file:
ssFfItem	../../inc/supStitch.h	/^struct ssFfItem$/;"	s
ssFfItemFree	../../lib/supStitch.c	/^void ssFfItemFree(struct ssFfItem **pEl)$/;"	f
ssFfItemFreeList	../../lib/supStitch.c	/^void ssFfItemFreeList(struct ssFfItem **pList)$/;"	f
ssFindBundles	../../lib/supStitch.c	/^struct ssBundle *ssFindBundles(struct patSpace *ps, struct dnaSeq *cSeq, $/;"	f
ssGraph	../../lib/supStitch.c	/^struct ssGraph$/;"	s	file:
ssGraphFindBest	../../lib/supStitch.c	/^static void ssGraphFindBest(struct ssGraph *graph, struct ffAli **retBestAli, $/;"	f	file:
ssGraphFree	../../lib/supStitch.c	/^static void ssGraphFree(struct ssGraph **pGraph)$/;"	f	file:
ssGraphMake	../../lib/supStitch.c	/^static struct ssGraph *ssGraphMake(struct ffAli *ffList, bioSeq *qSeq,$/;"	f	file:
ssNode	../../lib/supStitch.c	/^struct ssNode$/;"	s	file:
ssStitch	../../lib/supStitch.c	/^int ssStitch(struct ssBundle *bundle, enum ffStringency stringency)$/;"	f
stack	../../inc/xap.h	/^   struct xapStack *stack;			\/* Top of stack of open tags. *\/$/;"	m	struct:xap
stack	../../inc/xp.h	/^    struct xpStack *stack;		\/* Current top of stack. *\/$/;"	m	struct:xp
stackBuf	../../inc/xap.h	/^   struct xapStack stackBuf[128];		\/* Stack buffer. *\/$/;"	m	struct:xap
stackBuf	../../inc/xp.h	/^    struct xpStack stackBuf[64];	\/* Stack buffer and start of stack. *\/$/;"	m	struct:xp
stackBufEnd	../../inc/xp.h	/^    struct xpStack *stackBufEnd;	\/* End of stack buffer. *\/$/;"	m	struct:xp
stackDepth	../../inc/xap.h	/^   int stackDepth;				\/* Number of elements in stack. *\/$/;"	m	struct:xap
stage	../inc/clonePos.h	/^    char stage[2];	\/* F\/D\/P for finished\/draft\/predraft *\/$/;"	m	struct:clonePos
start	../../inc/crudeali.h	/^    int start, end;$/;"	m	struct:crudeAli
start	../../inc/gdf.h	/^    int start;$/;"	m	struct:gdfDataPoint
start	../../inc/genoFind.h	/^    bits32 start,end;	\/* Position within merged sequence. *\/$/;"	m	struct:gfSeqSource
start	../../inc/gff.h	/^    int start;      \/* Start of feature in sequence. Starts with 0, not 1 *\/$/;"	m	struct:gffGroup
start	../../inc/gff.h	/^    int start;      \/* Start of feature in sequence. Starts with 0, not 1 *\/$/;"	m	struct:gffLine
start	../../inc/oldGff.h	/^    long start, end;$/;"	m	struct:gffGene
start	../../inc/oldGff.h	/^    long start, end;$/;"	m	struct:gffSegment
start	../../inc/patSpace.h	/^    int start;                 \/* Start offset within sequence. *\/$/;"	m	struct:patClump
start	../../inc/trans3.h	/^     int start,end;			\/* Start\/end of sequence in a larger context. *\/$/;"	m	struct:trans3
start	../../inc/wormdna.h	/^    int start, end;$/;"	m	struct:wormFeature
start	../../lib/oldGff.c	/^    long start, end;   \/* Offsets into DNA array, end inclusive *\/$/;"	m	struct:gffSegLine
start	../inc/featureBits.h	/^    int start, end;	\/* Start\/end half open zero based. *\/$/;"	m	struct:featureBits
start	../inc/glDbRep.h	/^    unsigned start;	\/* Start position in golden path *\/$/;"	m	struct:gl
start3	../inc/estPair.h	/^    unsigned start3;	\/* Start position of 3' EST in chromosome *\/$/;"	m	struct:estPair
start5	../inc/estPair.h	/^    unsigned start5;	\/* Start position of 5' EST in chromosome *\/$/;"	m	struct:estPair
startBac	../../inc/geneGraph.h	/^    HGID startBac;                   \/* Which target sequence starts in. *\/$/;"	m	struct:geneGraph
startBac	../../inc/hgGene.h	/^    unsigned startBac;	\/* Bac this starts in *\/$/;"	m	struct:hgGene
startBac	../../inc/hgGene.h	/^    unsigned startBac;	\/* Bac this starts in *\/$/;"	m	struct:hgTranscript
startBac	../inc/geneGraph.h	/^    HGID startBac;                   \/* Which target sequence starts in. *\/$/;"	m	struct:geneGraph
startBac	../inc/hgGene.h	/^    unsigned startBac;	\/* Bac this starts in *\/$/;"	m	struct:hgGene
startBac	../inc/hgGene.h	/^    unsigned startBac;	\/* Bac this starts in *\/$/;"	m	struct:hgTranscript
startCookie	../../lib/memalloc.c	/^    int startCookie;$/;"	m	struct:carefulMemBlock
startExon	../../inc/ens.h	/^    struct ensExon *startExon;          \/* Reference to first coding exon. *\/$/;"	m	struct:ensTranscript
startField	../lib/hdb.c	/^    char startField[32];		\/* Name of chromosome start field. *\/$/;"	m	struct:hTableInfo
startGood	../../inc/cda.h	/^    UBYTE startGood, endGood;   \/* Number of bases matching perfectly on end *\/$/;"	m	struct:cdaBlock
startGood	../../inc/fuzzyFind.h	/^    int startGood, endGood; \/* Number that match perfectly on ends. *\/$/;"	m	struct:ffAli
startGoods	../../inc/maDbRep.h	/^    unsigned short *startGoods;	\/* Number of perfect bases at start of block *\/$/;"	m	struct:mrnaAli
startHandler	../../inc/xap.h	/^   void *(*startHandler)(struct xap *xap, char *name, char **atts);	\/* Handler for start tags. *\/$/;"	m	struct:xap
startPos	../../inc/geneGraph.h	/^    int startPos;                       \/* Which target sequence ends in. *\/$/;"	m	struct:geneGraph
startPos	../../inc/hgGene.h	/^    unsigned startPos;	\/* Position within bac where starts *\/$/;"	m	struct:hgGene
startPos	../../inc/hgGene.h	/^    unsigned startPos;	\/* Position within bac where starts *\/$/;"	m	struct:hgTranscript
startPos	../inc/geneGraph.h	/^    int startPos;                       \/* Which target sequence ends in. *\/$/;"	m	struct:geneGraph
startPos	../inc/hgGene.h	/^    unsigned startPos;	\/* Position within bac where starts *\/$/;"	m	struct:hgGene
startPos	../inc/hgGene.h	/^    unsigned startPos;	\/* Position within bac where starts *\/$/;"	m	struct:hgTranscript
startSeq	../../inc/ens.h	/^    int startSeq, endSeq;               \/* Start, end of coding region. *\/$/;"	m	struct:ensTranscript
startSeqQuery	../../lib/gfClientLib.c	/^static void startSeqQuery(int conn, bioSeq *seq, char *type)$/;"	f	file:
startState	../../lib/xensmall.c	607;"	d	file:
startUpdateId	../lib/hgRelate.c	/^static HGID startUpdateId;	\/* First ID in this update. *\/$/;"	v	file:
startUpdateId	../lib/hgap.c	/^static HGID startUpdateId;	\/* First ID in this update. *\/$/;"	v	file:
startsWith	../../lib/common.c	/^boolean startsWith(char *start,char *string)$/;"	f
startsWithShortHumanChromName	../lib/hgFind.c	/^static char *startsWithShortHumanChromName(char *chrom)$/;"	f	file:
stateByteSize	../../lib/xensmall.c	/^    int stateByteSize;$/;"	m	struct:aliMatrix
stateCount	../../lib/xensmall.c	/^    int stateCount;$/;"	m	struct:aliMatrix
stateIx	../../lib/xensmall.c	/^    int stateIx;$/;"	m	struct:aliState
stateSize	../../lib/xensmall.c	/^    int stateSize;$/;"	m	struct:aliMatrix
states	../../lib/xensmall.c	/^    struct aliState *states;$/;"	m	struct:aliMatrix
stdevs	../inc/sage.h	/^    float *stdevs;	\/* Standard deviation of all counts for each experiment *\/$/;"	m	struct:sage
strand	../../inc/cda.h	/^    char strand;                    \/* Strand of chromosome cDNA aligns with + or - *\/$/;"	m	struct:cdaAli
strand	../../inc/crudeali.h	/^    char strand;$/;"	m	struct:crudeAli
strand	../../inc/gdf.h	/^    char strand;$/;"	m	struct:gdfGene
strand	../../inc/gff.h	/^    char strand;    \/* Strand of sequence feature is on. + or - or .*\/$/;"	m	struct:gffLine
strand	../../inc/gff.h	/^    char strand;    \/* Strand of sequence. *\/$/;"	m	struct:gffGroup
strand	../../inc/oldGff.h	/^    char strand;	\/* + or - *\/$/;"	m	struct:gffGene
strand	../../inc/psl.h	/^    char strand[3];	\/* + or - for strand *\/$/;"	m	struct:psl
strand	../../inc/repMask.h	/^    char strand[2];	\/* Query strand (+ or C) *\/$/;"	m	struct:repeatMaskOut
strand	../../lib/oldGff.c	/^    char strand[4];	\/* + or - *\/$/;"	m	struct:gffSegLine
strand	../inc/agpFrag.h	/^    char strand[2];	\/* + or - (orientation of fragment) *\/$/;"	m	struct:agpFrag
strand	../inc/bbRepMask.h	/^    char strand[2];	\/* Query strand (+ or C) *\/$/;"	m	struct:bbRepMask
strand	../inc/bed.h	/^    char strand[2];  \/* + or -.  *\/$/;"	m	struct:bed
strand	../inc/est3.h	/^    char strand[2];	\/* + or - strand *\/$/;"	m	struct:est3
strand	../inc/genePred.h	/^    char strand[2];	\/* + or - for strand *\/$/;"	m	struct:genePred
strand	../inc/genomicDups.h	/^    char strand[2];	\/* Value should be + or - *\/$/;"	m	struct:genomicDups
strand	../inc/glDbRep.h	/^    char strand[2];	\/* + or - for strand *\/$/;"	m	struct:gl
strand	../inc/lfs.h	/^    char strand[2];	\/* Value should be + or - *\/$/;"	m	struct:lfs
strand	../inc/pslWScore.h	/^    char strand[3];	\/* + or - for query strand. For mouse second +\/- for genomic strand *\/$/;"	m	struct:pslWScore
strand	../inc/rmskOut.h	/^    char strand[2];	\/* Relative orientation + or - *\/$/;"	m	struct:rmskOut
strand	../inc/rnaGene.h	/^    char strand[2];	\/* Strand: + or - *\/$/;"	m	struct:rnaGene
strand	../inc/roughAli.h	/^    char strand[2];	\/* + or - *\/$/;"	m	struct:roughAli
strand	../inc/wabAli.h	/^    char strand[2];	\/* + or - relative orientation. *\/$/;"	m	struct:wabAli
string	../../inc/dystring.h	/^    char *string;		\/* Current buffer. *\/$/;"	m	struct:dyString
string	../../inc/kxTok.h	/^    char string[1];  \/* Allocated at run time *\/$/;"	m	struct:kxTok
stringArrayIx	../../lib/common.c	/^int stringArrayIx(char *string, char *array[], int arraySize)$/;"	f
stringIn	../../inc/common.h	307;"	d
stringIx	../../inc/common.h	406;"	d
stringSize	../../inc/dystring.h	/^    int stringSize;		\/* Size of string. *\/$/;"	m	struct:dyString
stripChar	../../lib/common.c	/^void stripChar(char *s, char c)$/;"	f
stsAlias	../inc/stsAlias.h	/^struct stsAlias$/;"	s
stsAliasCommaIn	../lib/stsAlias.c	/^struct stsAlias *stsAliasCommaIn(char **pS, struct stsAlias *ret)$/;"	f
stsAliasCommaOut	../inc/stsAlias.h	47;"	d
stsAliasFree	../lib/stsAlias.c	/^void stsAliasFree(struct stsAlias **pEl)$/;"	f
stsAliasFreeList	../lib/stsAlias.c	/^void stsAliasFreeList(struct stsAlias **pList)$/;"	f
stsAliasLoad	../lib/stsAlias.c	/^struct stsAlias *stsAliasLoad(char **row)$/;"	f
stsAliasLoadAll	../lib/stsAlias.c	/^struct stsAlias *stsAliasLoadAll(char *fileName) $/;"	f
stsAliasOutput	../lib/stsAlias.c	/^void stsAliasOutput(struct stsAlias *el, FILE *f, char sep, char lastSep) $/;"	f
stsAliasStaticLoad	../lib/stsAlias.c	/^void stsAliasStaticLoad(char **row, struct stsAlias *ret)$/;"	f
stsAliasTabOut	../inc/stsAlias.h	44;"	d
stsCount	../inc/fishClones.h	/^    unsigned stsCount;	\/* Number of STS markers associated with this clone *\/$/;"	m	struct:fishClones
stsInfo	../inc/stsInfo.h	/^struct stsInfo$/;"	s
stsInfoCommaIn	../lib/stsInfo.c	/^struct stsInfo *stsInfoCommaIn(char **pS, struct stsInfo *ret)$/;"	f
stsInfoCommaOut	../inc/stsInfo.h	88;"	d
stsInfoFree	../lib/stsInfo.c	/^void stsInfoFree(struct stsInfo **pEl)$/;"	f
stsInfoFreeList	../lib/stsInfo.c	/^void stsInfoFreeList(struct stsInfo **pList)$/;"	f
stsInfoLoad	../lib/stsInfo.c	/^struct stsInfo *stsInfoLoad(char **row)$/;"	f
stsInfoLoadAll	../lib/stsInfo.c	/^struct stsInfo *stsInfoLoadAll(char *fileName) $/;"	f
stsInfoOutput	../lib/stsInfo.c	/^void stsInfoOutput(struct stsInfo *el, FILE *f, char sep, char lastSep) $/;"	f
stsInfoTabOut	../inc/stsInfo.h	85;"	d
stsMap	../inc/stsMap.h	/^struct stsMap$/;"	s
stsMapCommaIn	../lib/stsMap.c	/^struct stsMap *stsMapCommaIn(char **pS, struct stsMap *ret)$/;"	f
stsMapCommaOut	../inc/stsMap.h	70;"	d
stsMapFree	../lib/stsMap.c	/^void stsMapFree(struct stsMap **pEl)$/;"	f
stsMapFreeList	../lib/stsMap.c	/^void stsMapFreeList(struct stsMap **pList)$/;"	f
stsMapFromStsMarker	../lib/stsMap.c	/^void stsMapFromStsMarker(struct stsMarker *oldEl, struct stsMap *el)$/;"	f
stsMapLoad	../lib/stsMap.c	/^struct stsMap *stsMapLoad(char **row)$/;"	f
stsMapLoadAll	../lib/stsMap.c	/^struct stsMap *stsMapLoadAll(char *fileName) $/;"	f
stsMapOutput	../lib/stsMap.c	/^void stsMapOutput(struct stsMap *el, FILE *f, char sep, char lastSep) $/;"	f
stsMapStaticLoad	../lib/stsMap.c	/^void stsMapStaticLoad(char **row, struct stsMap *ret)$/;"	f
stsMapTabOut	../inc/stsMap.h	67;"	d
stsMarker	../inc/stsMarker.h	/^struct stsMarker$/;"	s
stsMarkerCommaIn	../lib/stsMarker.c	/^struct stsMarker *stsMarkerCommaIn(char **pS, struct stsMarker *ret)$/;"	f
stsMarkerCommaOut	../inc/stsMarker.h	63;"	d
stsMarkerFree	../lib/stsMarker.c	/^void stsMarkerFree(struct stsMarker **pEl)$/;"	f
stsMarkerFreeList	../lib/stsMarker.c	/^void stsMarkerFreeList(struct stsMarker **pList)$/;"	f
stsMarkerLoad	../lib/stsMarker.c	/^struct stsMarker *stsMarkerLoad(char **row)$/;"	f
stsMarkerOutput	../lib/stsMarker.c	/^void stsMarkerOutput(struct stsMarker *el, FILE *f, char sep, char lastSep) $/;"	f
stsMarkerStaticLoad	../lib/stsMarker.c	/^void stsMarkerStaticLoad(char **row, struct stsMarker *ret)$/;"	f
stsMarkerTabOut	../inc/stsMarker.h	60;"	d
stsNames	../inc/fishClones.h	/^    char **stsNames;	\/* Names of STS  markers *\/$/;"	m	struct:fishClones
subChar	../../lib/common.c	/^void subChar(char *s, char oldChar, char newChar)$/;"	f
subMatch	../../lib/wildcmp.c	/^static int subMatch(char *str, char *wild)$/;"	f	file:
submitLength	../../inc/unfin.h	/^    int submitLength;  \/* Number of bases in submission. *\/$/;"	m	struct:contigTree
submitOffset	../../inc/hgap.h	/^    int submitOffset;         \/* Position in genBank submission. *\/$/;"	m	struct:hgContig
submitOffset	../../inc/unfin.h	/^    int submitOffset;  \/* Offset relative to parent in genBank submission. *\/$/;"	m	struct:contigTree
submitOffset	../inc/hgap.h	/^    int submitOffset;         \/* Position in genBank submission. *\/$/;"	m	struct:hgContig
swScore	../inc/rmskOut.h	/^    unsigned swScore;	\/* Smith Waterman alignment score *\/$/;"	m	struct:rmskOut
swapBytes	../../lib/common.c	/^void swapBytes(char *a, char *b, int length)$/;"	f
symCount	../../inc/xa.h	/^    int symCount;$/;"	m	struct:xaAli
symCount	../../lib/xenbig.c	/^    int symCount;$/;"	m	struct:contig
symCount	../inc/wabAli.h	/^    unsigned symCount;	\/* Number of symbols in alignment. *\/$/;"	m	struct:wabAli
symHash	../../inc/xp.h	/^    struct hash *symHash;		\/* Hash of &gt; &lt; etc. *\/$/;"	m	struct:xp
t3	../../lib/gfClientLib.c	/^    struct trans3 *t3;	\/* Translated frame or NULL. *\/$/;"	m	struct:gfRange
t3GenoPos	../../lib/gfClientLib.c	/^static int t3GenoPos(char *pt, bioSeq *seq, struct trans3 *t3List, boolean isEnd)$/;"	f	file:
t3Hash	../../inc/genoFind.h	/^    struct hash *t3Hash;	\/* Hash to associate names and frames. *\/$/;"	m	struct:gfSavePslxData
t3List	../../inc/supStitch.h	/^    struct trans3 *t3List;	\/* Sometimes set to three translated frames. *\/$/;"	m	struct:ssBundle
tBaseInsert	../../inc/psl.h	/^    int tBaseInsert;	\/* Number of bases inserted in target *\/$/;"	m	struct:psl
tBaseInsert	../inc/pslWScore.h	/^    int tBaseInsert;	\/* Number of bases inserted in target *\/$/;"	m	struct:pslWScore
tBlockBacs	../../inc/maDbRep.h	/^    unsigned *tBlockBacs;	\/* BAC each block starts in *\/$/;"	m	struct:mrnaAli
tBlockStarts	../../inc/maDbRep.h	/^    unsigned *tBlockStarts;	\/* Position within BAC of each block start *\/$/;"	m	struct:mrnaAli
tContig	../../inc/ens.h	/^    struct contigTree *tContig;    \/* Name of target (genomic) sequence *\/$/;"	m	struct:ensFeature
tDim	../../lib/xensmall.c	/^    int tDim;$/;"	m	struct:aliMatrix
tEnd	../../inc/blastParse.h	/^    int tEnd;                           \/* Target end position. *\/$/;"	m	struct:blastBlock
tEnd	../../inc/ens.h	/^    int tStart, tEnd;              \/* Position in genomic sequence. *\/$/;"	m	struct:ensFeature
tEnd	../../inc/genoFind.h	/^    bits32 tStart, tEnd;	\/* Position in target. *\/$/;"	m	struct:gfClump
tEnd	../../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgAliHit
tEnd	../../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgAlignment
tEnd	../../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgBoundedHit
tEnd	../../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgHit
tEnd	../../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgRange
tEnd	../../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgScoredHit
tEnd	../../inc/psl.h	/^    int tEnd;	\/* Alignment end position in target *\/$/;"	m	struct:psl
tEnd	../../inc/xa.h	/^    int tStart, tEnd;$/;"	m	struct:xaAli
tEnd	../../lib/gfClientLib.c	/^    int tEnd;	\/* End in target *\/$/;"	m	struct:gfRange
tEnd	../../lib/xenbig.c	/^    int tStart, tEnd;$/;"	m	struct:cluster
tEnd	../../lib/xenbig.c	/^    int tStart, tEnd;$/;"	m	struct:contig
tEnd	../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgAliHit
tEnd	../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgAlignment
tEnd	../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgBoundedHit
tEnd	../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgHit
tEnd	../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgRange
tEnd	../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgScoredHit
tEnd	../inc/pslWScore.h	/^    unsigned tEnd;	\/* Alignment end position in target *\/$/;"	m	struct:pslWScore
tEndBac	../../inc/maDbRep.h	/^    unsigned tEndBac;	\/* ID of last genomic BAC in alignment *\/$/;"	m	struct:mrnaAli
tEndOffset	../../lib/xenbig.c	/^    int tOffset, tEndOffset;$/;"	m	struct:cluster
tEndOffset	../../lib/xenbig.c	/^    int tOffset, tEndOffset;$/;"	m	struct:contig
tEndPos	../../inc/maDbRep.h	/^    unsigned tEndPos;	\/* End position within last BAC *\/$/;"	m	struct:mrnaAli
tIsProt	../../inc/genoFind.h	/^    boolean tIsProt;		\/* Target is peptide. *\/$/;"	m	struct:gfSavePslxData
tName	../../inc/psl.h	/^    char *tName;	\/* Target sequence name *\/$/;"	m	struct:psl
tName	../../lib/gfClientLib.c	/^    char *tName;	\/* Target name *\/$/;"	m	struct:gfRange
tName	../inc/pslWScore.h	/^    char *tName;	\/* Target sequence name *\/$/;"	m	struct:pslWScore
tNumInsert	../../inc/psl.h	/^    unsigned tNumInsert;	\/* Number of inserts in target *\/$/;"	m	struct:psl
tNumInsert	../inc/pslWScore.h	/^    unsigned tNumInsert;	\/* Number of inserts in target *\/$/;"	m	struct:pslWScore
tOffset	../../lib/xenbig.c	/^    int tOffset, tEndOffset;$/;"	m	struct:cluster
tOffset	../../lib/xenbig.c	/^    int tOffset, tEndOffset;$/;"	m	struct:contig
tOrientation	../../inc/hgap.h	/^    int tOrientation;	  \/* +1 or -1 orientation. *\/$/;"	m	struct:hgAliHit
tOrientation	../../inc/hgap.h	/^    int tOrientation;	  \/* +1 or -1 orientation. *\/$/;"	m	struct:hgAlignment
tOrientation	../../inc/hgap.h	/^    int tOrientation;	  \/* +1 or -1 orientation. *\/$/;"	m	struct:hgBoundedHit
tOrientation	../../inc/hgap.h	/^    int tOrientation;	  \/* +1 or -1 orientation. *\/$/;"	m	struct:hgHit
tOrientation	../../inc/hgap.h	/^    int tOrientation;	  \/* +1 or -1 orientation. *\/$/;"	m	struct:hgScoredHit
tOrientation	../inc/hgap.h	/^    int tOrientation;	  \/* +1 or -1 orientation. *\/$/;"	m	struct:hgAliHit
tOrientation	../inc/hgap.h	/^    int tOrientation;	  \/* +1 or -1 orientation. *\/$/;"	m	struct:hgAlignment
tOrientation	../inc/hgap.h	/^    int tOrientation;	  \/* +1 or -1 orientation. *\/$/;"	m	struct:hgBoundedHit
tOrientation	../inc/hgap.h	/^    int tOrientation;	  \/* +1 or -1 orientation. *\/$/;"	m	struct:hgHit
tOrientation	../inc/hgap.h	/^    int tOrientation;	  \/* +1 or -1 orientation. *\/$/;"	m	struct:hgScoredHit
tSeq	../../lib/gfClientLib.c	/^    struct dnaSeq *tSeq;	\/* Target sequence. (May be NULL if in .nib.  Not allocated here.) *\/$/;"	m	struct:gfRange
tSize	../../inc/psl.h	/^    unsigned tSize;	\/* Target sequence size *\/$/;"	m	struct:psl
tSize	../inc/pslWScore.h	/^    unsigned tSize;	\/* Target sequence size *\/$/;"	m	struct:pslWScore
tSlipIx	../../lib/xensmall.c	/^    tSlipIx,$/;"	e	file:	enum:matIx
tSlipScore	../../lib/xensmall.c	603;"	d	file:
tSlipScore	../../lib/xensmall.c	805;"	d	file:
tSlipState	../../lib/xensmall.c	634;"	d	file:
tStart	../../inc/blastParse.h	/^    int tStart;                         \/* Target start position. *\/$/;"	m	struct:blastBlock
tStart	../../inc/ens.h	/^    int tStart, tEnd;              \/* Position in genomic sequence. *\/$/;"	m	struct:ensFeature
tStart	../../inc/genoFind.h	/^    bits32 tStart, tEnd;	\/* Position in target. *\/$/;"	m	struct:gfClump
tStart	../../inc/genoFind.h	/^   bits32 tStart;		\/* Where it hits in target. *\/$/;"	m	struct:gfHit
tStart	../../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgAliHit
tStart	../../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgAlignment
tStart	../../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgBoundedHit
tStart	../../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgHit
tStart	../../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgRange
tStart	../../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgScoredHit
tStart	../../inc/psl.h	/^    int tStart;	\/* Alignment start position in target *\/$/;"	m	struct:psl
tStart	../../inc/xa.h	/^    int tStart, tEnd;$/;"	m	struct:xaAli
tStart	../../lib/gfClientLib.c	/^    int tStart;	\/* Start in target *\/$/;"	m	struct:gfRange
tStart	../../lib/xenbig.c	/^    int tStart, tEnd;$/;"	m	struct:cluster
tStart	../../lib/xenbig.c	/^    int tStart, tEnd;$/;"	m	struct:contig
tStart	../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgAliHit
tStart	../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgAlignment
tStart	../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgBoundedHit
tStart	../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgHit
tStart	../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgRange
tStart	../inc/hgap.h	/^    int tStart, tEnd;	  \/* Position in target or only sequence tStart <= x < tEnd *\/$/;"	m	struct:hgScoredHit
tStart	../inc/pslWScore.h	/^    unsigned tStart;	\/* Alignment start position in target *\/$/;"	m	struct:pslWScore
tStartBac	../../inc/maDbRep.h	/^    unsigned tStartBac;	\/* ID of first genomic BAC in alignment *\/$/;"	m	struct:mrnaAli
tStartPos	../../inc/maDbRep.h	/^    unsigned tStartPos;	\/* Start position within first BAC *\/$/;"	m	struct:mrnaAli
tStarts	../../inc/psl.h	/^    unsigned *tStarts;	\/* Start of each block in target. *\/$/;"	m	struct:psl
tStarts	../inc/pslWScore.h	/^    unsigned *tStarts;	\/* Start of each block in target. *\/$/;"	m	struct:pslWScore
tStrand	../../inc/blastParse.h	/^    BYTE tStrand;                       \/* Target strand (+1 or -1) *\/$/;"	m	struct:blastBlock
tStrand	../../inc/xa.h	/^    char tStrand;$/;"	m	struct:xaAli
tStrand	../../lib/xenbig.c	/^    char tStrand;$/;"	m	struct:cluster
tStrand	../../lib/xenbig.c	/^    char tStrand;$/;"	m	struct:contig
tSym	../../inc/blastParse.h	/^    char *tSym;                         \/* Target letters (including '-') *\/$/;"	m	struct:blastBlock
tSym	../../inc/xa.h	/^    char *qSym, *tSym, *hSym;$/;"	m	struct:xaAli
tSym	../../lib/xenbig.c	/^    char *tSym;     \/* Target symbols (nucleotides and insert char) *\/$/;"	m	struct:contig
tSym	../inc/wabAli.h	/^    char *tSym;	\/* Target bases plus '-'s. *\/$/;"	m	struct:wabAli
tTotalSize	../../lib/gfClientLib.c	/^    int tTotalSize;	\/* Size of entire target sequence, not just loaded parts.  Not set until late in the game. *\/$/;"	m	struct:gfRange
table	../../inc/hash.h	/^    struct hashEl **table;$/;"	m	struct:hash
table	../../lib/keys.c	/^    struct keyVal *table; \/* The table itself. *\/$/;"	m	struct:kvt
tableList	../inc/hgFind.h	/^    struct hgPosTable *tableList; \/* List of tables. *\/$/;"	m	struct:hgPositions
tableName	../inc/trackDb.h	/^    char *tableName;	\/* Symbolic ID of Track *\/$/;"	m	struct:trackDb
tableName	../inc/trackTable.h	/^    char *tableName;	\/* Name of table (without any chrN_ if split) *\/$/;"	m	struct:trackTable
tag	../../inc/xp.h	/^    struct dyString *tag;   \/* Name of tag. *\/$/;"	m	struct:xpStack
tags	../inc/sage.h	/^    char **tags;	\/* Tags for this unigene sequence. *\/$/;"	m	struct:sage
tail	../../inc/dlist.h	/^    struct dlNode *tail;$/;"	m	struct:dlList
target	../../inc/genoFind.h	/^    struct gfSeqSource *target;	\/* Target source sequence. *\/$/;"	m	struct:gfClump
target	../../inc/hgap.h	/^    char *target;	  \/* Name of target seq. (Not allocated here.) *\/$/;"	m	struct:hgAliHit
target	../../inc/hgap.h	/^    char *target;	  \/* Name of target seq. (Not allocated here.) *\/$/;"	m	struct:hgAlignment
target	../../inc/hgap.h	/^    char *target;	  \/* Name of target seq. (Not allocated here.) *\/$/;"	m	struct:hgBoundedHit
target	../../inc/hgap.h	/^    char *target;	  \/* Name of target seq. (Not allocated here.) *\/$/;"	m	struct:hgHit
target	../../inc/hgap.h	/^    char *target;	  \/* Name of target seq. (Not allocated here.) *\/$/;"	m	struct:hgScoredHit
target	../../inc/xa.h	/^    char *target;$/;"	m	struct:xaAli
target	../../lib/crudeali.c	/^    struct nt4Seq *target;$/;"	m	struct:crudeGene
target	../../lib/xenbig.c	/^    char *target;$/;"	m	struct:cluster
target	../../lib/xenbig.c	/^    char *target;$/;"	m	struct:contig
target	../../lib/xensmall.c	/^    char *target;    $/;"	m	struct:aliMatrix
target	../inc/hgap.h	/^    char *target;	  \/* Name of target seq. (Not allocated here.) *\/$/;"	m	struct:hgAliHit
target	../inc/hgap.h	/^    char *target;	  \/* Name of target seq. (Not allocated here.) *\/$/;"	m	struct:hgAlignment
target	../inc/hgap.h	/^    char *target;	  \/* Name of target seq. (Not allocated here.) *\/$/;"	m	struct:hgBoundedHit
target	../inc/hgap.h	/^    char *target;	  \/* Name of target seq. (Not allocated here.) *\/$/;"	m	struct:hgHit
target	../inc/hgap.h	/^    char *target;	  \/* Name of target seq. (Not allocated here.) *\/$/;"	m	struct:hgScoredHit
targetClump	../../lib/genoFind.c	/^static void targetClump(struct genoFind *gf, struct gfClump **pClumpList, struct gfClump *clump)$/;"	f	file:
targetEnd	../../lib/crudeali.c	/^    int targetEnd;$/;"	m	struct:crudeExon
targetEnd	../../lib/crudeali.c	/^    int targetEnd;$/;"	m	struct:crudeGene
targetIx	../../lib/xensmall.c	/^    int targetIx;$/;"	m	struct:aliPair
targetName	../../inc/blastParse.h	/^    char *targetName;                   \/* Name of target sequence. *\/$/;"	m	struct:blastGappedAli
targetOffset	../../lib/crudeali.c	/^    int targetOffset;$/;"	m	struct:crudeHit
targetRc	../../inc/genoFind.h	/^    boolean targetRc;		\/* Is target reverse complemented? *\/$/;"	m	struct:gfSavePslxData
targetSize	../../inc/blastParse.h	/^    int targetSize;                     \/* Size of target sequence. *\/$/;"	m	struct:blastGappedAli
targetSize	../../lib/xensmall.c	/^    int targetSize;$/;"	m	struct:aliMatrix
targetStart	../../lib/crudeali.c	/^    int targetStart;$/;"	m	struct:crudeExon
targetStart	../../lib/crudeali.c	/^    int targetStart;$/;"	m	struct:crudeGene
targetSym	../../lib/xensmall.c	/^    char targetSym;$/;"	m	struct:aliPair
tdb	../inc/customTrack.h	/^    struct trackDb *tdb;	\/* TrackDb description of track. *\/$/;"	m	struct:customTrack
tdbDefault	../lib/customTrack.c	/^static struct trackDb *tdbDefault()$/;"	f	file:
tempEntry	../../inc/diGraph.h	/^    struct dgNode *tempEntry;  \/* Way in for breadth first search *\/$/;"	m	struct:dgNode
tempName	../../inc/portable.h	/^struct tempName$/;"	s
templateId	../inc/traceInfo.h	/^    char *templateId;	\/* Name of the template *\/$/;"	m	struct:traceInfo
terminal	../inc/chromInserts.h	/^    struct bigInsert *terminal;   \/* Insert to finish chromosome with or NULL. *\/$/;"	m	struct:chromInserts
test	../../lib/test.c	/^void test()$/;"	f
testData	../lib/customTrack.c	/^static char *testData = $/;"	v	file:
text	../../inc/xap.h	/^   struct dyString *text;	\/* The text section. *\/$/;"	m	struct:xapStack
text	../../inc/xp.h	/^    struct dyString *text;  \/* Contains text if any. *\/$/;"	m	struct:xpStack
tgId	../inc/mcnBreakpoints.h	/^    char *tgId;	\/* MCN Traitgroup ID *\/$/;"	m	struct:mcnBreakpoints
tgTxt	../inc/mcnBreakpoints.h	/^    char *tgTxt;	\/* MCN Traitgroup Name *\/$/;"	m	struct:mcnBreakpoints
theInt	../../lib/gemfont.c	/^    int  theInt;$/;"	m	union:
thickEnd	../inc/bed.h	/^    unsigned thickEnd;   \/* End of where display should be thick (stop codon for genes) *\/$/;"	m	struct:bed
thickStart	../inc/bed.h	/^    unsigned thickStart; \/* Start of where display should be thick (start codon for genes) *\/$/;"	m	struct:bed
thinProtoList	../../lib/fuzzyFind.c	/^void thinProtoList(struct protoGene **pList, int maxToTake)$/;"	f
ti	../inc/traceInfo.h	/^    char *ti;	\/* Trace identifier *\/$/;"	m	struct:traceInfo
tile16	../../lib/crudeali.c	/^    bits32 tile16;$/;"	m	struct:probeTile
tile8	../../lib/crudeali.c	/^    bits16 tile8;$/;"	m	struct:probeTile
tileHashBits	../../lib/crudeali.c	282;"	d	file:
tileHashFunc	../../lib/crudeali.c	285;"	d	file:
tileHashMask	../../lib/crudeali.c	284;"	d	file:
tileHashSize	../../lib/crudeali.c	283;"	d	file:
tileMask	../../inc/genoFind.h	/^    int tileMask;			 \/* 1-s for each N-mer. *\/$/;"	m	struct:genoFind
tileSize	../../inc/genoFind.h	/^    int tileSize;			 \/* Size of each N-mer. *\/$/;"	m	struct:genoFind
tileSpaceSize	../../inc/genoFind.h	/^    int tileSpaceSize;                   \/* Number of N-mer values. *\/$/;"	m	struct:genoFind
tissue	../inc/cgh.h	/^    char *tissue;	\/* Type of tissue cell line derived from (type 2 and type 3) *\/$/;"	m	struct:cgh
tissueDesc	../inc/sageExp.h	/^    char *tissueDesc;	\/* Brief Description of tissues. *\/$/;"	m	struct:sageExp
tissueSupplier	../inc/sageExp.h	/^    char *tissueSupplier;	\/* Who supplied the tissue. *\/$/;"	m	struct:sageExp
tissueType	../inc/sageExp.h	/^    char *tissueType;	\/* Brief Description of cells used. *\/$/;"	m	struct:sageExp
tngChr	../inc/stsInfo.h	/^    char *tngChr;	\/* Chromosome in Stanford TNG map *\/$/;"	m	struct:stsInfo
tngLOD	../inc/stsInfo.h	/^    float tngLOD;	\/* LOD score in Stanford TNG map *\/$/;"	m	struct:stsInfo
tngName	../inc/stsInfo.h	/^    char *tngName;	\/* Name in Stanford TNG map *\/$/;"	m	struct:stsInfo
tngPos	../inc/stsInfo.h	/^    float tngPos;	\/* Position in Stanford TNG map *\/$/;"	m	struct:stsInfo
to	../inc/coordConv.h	/^    struct coordConv *to; \/** placement of old coordConv on new draft genome *\/$/;"	m	struct:coordConvRep
toLowerN	../../lib/common.c	/^void toLowerN(char *s, int n)$/;"	f
toRna	../../lib/dnautil.c	/^void toRna(DNA *dna)$/;"	f
toUpperN	../../lib/common.c	/^void toUpperN(char *s, int n)$/;"	f
tok	../../lib/intExp.c	/^static struct kxTok *tok;$/;"	v	file:
token	../../lib/keys.c	/^static struct kxTok *token;      \/* Next token for parser. *\/$/;"	v	file:
tokenList	../../inc/keys.h	/^    void *tokenList;     \/* Internally struct tok. *\/$/;"	m	struct:keyExp
tolowers	../../lib/common.c	/^void tolowers(char *s)$/;"	f
tooManyBlocks	../../lib/patSpace.c	/^void tooManyBlocks()$/;"	f
topObject	../../inc/xap.h	/^   void *topObject;				\/* Top level object - valid after xapParse. *\/$/;"	m	struct:xap
topType	../../inc/xap.h	/^   char *topType;				\/* Top level type name - valid after xapParse. *\/$/;"	m	struct:xap
topoIx	../../lib/diGraph.c	/^static int topoIx;$/;"	v	file:
topoOrder	../../inc/diGraph.h	/^    int topoOrder;      \/* Topographical order after call to dgTopoSort. *\/$/;"	m	struct:dgNode
totalCount	../../inc/blastParse.h	/^    int totalCount;                     \/* Total number of nucleotides. *\/$/;"	m	struct:blastBlock
totalCount	../inc/sageExp.h	/^    int totalCount;	\/* Sum of all the tag counts for this experiment. *\/$/;"	m	struct:sageExp
totalSeqSize	../../inc/genoFind.h	/^    bits32 totalSeqSize;		 \/* Total size of all sequences. *\/$/;"	m	struct:genoFind
touppers	../../lib/common.c	/^void touppers(char *s)$/;"	f
trId	../inc/mcnBreakpoints.h	/^    char *trId;	\/* MCN Trait ID *\/$/;"	m	struct:mcnBreakpoints
trTxt	../inc/mcnBreakpoints.h	/^    char *trTxt;	\/* MCN Trait name *\/$/;"	m	struct:mcnBreakpoints
traceBack	../../lib/xensmall.c	/^static struct aliPair *traceBack(struct aliMatrix *am, struct aliCell *end)$/;"	f	file:
traceInfo	../inc/traceInfo.h	/^struct traceInfo$/;"	s
traceInfoCommaIn	../lib/traceInfo.c	/^struct traceInfo *traceInfoCommaIn(char **pS, struct traceInfo *ret)$/;"	f
traceInfoCommaOut	../inc/traceInfo.h	47;"	d
traceInfoFree	../lib/traceInfo.c	/^void traceInfoFree(struct traceInfo **pEl)$/;"	f
traceInfoFreeList	../lib/traceInfo.c	/^void traceInfoFreeList(struct traceInfo **pList)$/;"	f
traceInfoLoad	../lib/traceInfo.c	/^struct traceInfo *traceInfoLoad(char **row)$/;"	f
traceInfoLoadAll	../lib/traceInfo.c	/^struct traceInfo *traceInfoLoadAll(char *fileName) $/;"	f
traceInfoOutput	../lib/traceInfo.c	/^void traceInfoOutput(struct traceInfo *el, FILE *f, char sep, char lastSep) $/;"	f
traceInfoStaticLoad	../lib/traceInfo.c	/^void traceInfoStaticLoad(char **row, struct traceInfo *ret)$/;"	f
traceInfoTabOut	../inc/traceInfo.h	44;"	d
trackDb	../inc/trackDb.h	/^struct trackDb$/;"	s
trackDbAddInfo	../lib/trackDbCustom.c	/^void trackDbAddInfo(struct trackDb *bt, $/;"	f
trackDbCmp	../lib/trackDbCustom.c	/^int trackDbCmp(const void *va, const void *vb)$/;"	f
trackDbCommaIn	../lib/trackDb.c	/^struct trackDb *trackDbCommaIn(char **pS, struct trackDb *ret)$/;"	f
trackDbCommaOut	../inc/trackDb.h	62;"	d
trackDbFree	../lib/trackDb.c	/^void trackDbFree(struct trackDb **pEl)$/;"	f
trackDbFreeList	../lib/trackDb.c	/^void trackDbFreeList(struct trackDb **pList)$/;"	f
trackDbFromRa	../lib/trackDbCustom.c	/^struct trackDb *trackDbFromRa(char *raFile)$/;"	f
trackDbLoad	../lib/trackDb.c	/^struct trackDb *trackDbLoad(char **row)$/;"	f
trackDbLoadAll	../lib/trackDb.c	/^struct trackDb *trackDbLoadAll(char *fileName) $/;"	f
trackDbOutput	../lib/trackDb.c	/^void trackDbOutput(struct trackDb *el, FILE *f, char sep, char lastSep) $/;"	f
trackDbPolish	../lib/trackDbCustom.c	/^void trackDbPolish(struct trackDb *bt)$/;"	f
trackDbTabOut	../inc/trackDb.h	59;"	d
trackFromLine	../lib/customTrack.c	/^static struct customTrack *trackFromLine(char *line, int lineIx)$/;"	f	file:
trackTable	../inc/trackTable.h	/^struct trackTable$/;"	s
trackTableCommaIn	../lib/trackTable.c	/^struct trackTable *trackTableCommaIn(char **pS, struct trackTable *ret)$/;"	f
trackTableCommaOut	../inc/trackTable.h	58;"	d
trackTableFree	../lib/trackTable.c	/^void trackTableFree(struct trackTable **pEl)$/;"	f
trackTableFreeList	../lib/trackTable.c	/^void trackTableFreeList(struct trackTable **pList)$/;"	f
trackTableLoad	../lib/trackTable.c	/^struct trackTable *trackTableLoad(char **row)$/;"	f
trackTableLoadAll	../lib/trackTable.c	/^struct trackTable *trackTableLoadAll(char *fileName) $/;"	f
trackTableOutput	../lib/trackTable.c	/^void trackTableOutput(struct trackTable *el, FILE *f, char sep, char lastSep) $/;"	f
trackTableStaticLoad	../lib/trackTable.c	/^void trackTableStaticLoad(char **row, struct trackTable *ret)$/;"	f
trackTableTabOut	../inc/trackTable.h	55;"	d
trackVisibility	../inc/hdb.h	/^enum trackVisibility $/;"	g
trans	../../inc/trans3.h	/^     aaSeq *trans[3];			\/* Translated sequences.  Allocated here*\/$/;"	m	struct:trans3
trans3	../../inc/trans3.h	/^struct trans3$/;"	s
trans3Free	../../lib/trans3.c	/^void trans3Free(struct trans3 **pT3)$/;"	f
trans3FreeList	../../lib/trans3.c	/^void trans3FreeList(struct trans3 **pList)$/;"	f
trans3New	../../lib/trans3.c	/^struct trans3 *trans3New(struct dnaSeq *seq)$/;"	f
trans3Offset	../../lib/gfClientLib.c	/^void trans3Offset(struct trans3 *t3List, AA *aa, int *retOffset, int *retFrame)$/;"	f
trans3Offsets	../../lib/supStitch.c	/^static void trans3Offsets(struct trans3 *t3List, AA *startP, AA *endP,$/;"	f	file:
transId	../inc/knownInfo.h	/^    char *transId;	\/* Transcript id. Genie generated ID. *\/$/;"	m	struct:knownInfo
transId	../inc/knownMore.h	/^    char *transId;	\/* Transcript id. Genie generated ID. *\/$/;"	m	struct:knownMore
transcriptCount	../../inc/hgGene.h	/^    unsigned transcriptCount;	\/* Number of transcripts *\/$/;"	m	struct:hgGene
transcriptCount	../inc/hgGene.h	/^    unsigned transcriptCount;	\/* Number of transcripts *\/$/;"	m	struct:hgGene
transcriptList	../../inc/ens.h	/^    struct ensTranscript *transcriptList; \/* List of ways to transcribe and splice. *\/$/;"	m	struct:ensGene
transcripts	../../inc/hgGene.h	/^    unsigned *transcripts;	\/* Array of transcripts *\/$/;"	m	struct:hgGene
transcripts	../inc/hgGene.h	/^    unsigned *transcripts;	\/* Array of transcripts *\/$/;"	m	struct:hgGene
transitionCost	../../lib/xensmall.c	/^static int transitionCost(double prob)$/;"	f	file:
translateSeq	../../lib/dnaseq.c	/^aaSeq *translateSeq(struct dnaSeq *inSeq, int offset, boolean stop)$/;"	f
traverseGeneGraph	../lib/geneGraph.c	/^void traverseGeneGraph(struct geneGraph *gg, int cStart, int cEnd, GgTransOut output)$/;"	f
trimAlis	../../lib/fuzzyFind.c	/^static struct ffAli *trimAlis(struct ffAli *aliList)$/;"	f	file:
trimBundle	../../lib/supStitch.c	/^static boolean trimBundle(struct ssBundle *bundle, int maxFfCount,$/;"	f	file:
trimScore	../../inc/supStitch.h	/^    int trimScore;              \/* Alignment score during trimming. *\/$/;"	m	struct:ssFfItem
trimSpaces	../../lib/common.c	/^char *trimSpaces(char *s)$/;"	f
tripleCanFollow	../../lib/supStitch.c	/^boolean tripleCanFollow(struct ffAli *a, struct ffAli *b, aaSeq *qSeq, struct trans3 *t3List)$/;"	f
trueName	../inc/stsAlias.h	/^    char *trueName;	\/* Official UCSC name for marker *\/$/;"	m	struct:stsAlias
tvDense	../inc/hdb.h	/^    tvDense=1,        \/* Squish it together. *\/$/;"	e	enum:trackVisibility
tvFull	../inc/hdb.h	/^    tvFull=2        \/* Expand it out. *\/$/;"	e	enum:trackVisibility
tvHide	../inc/hdb.h	/^    tvHide=0, 		\/* Hide it. *\/$/;"	e	enum:trackVisibility
txEnd	../inc/genePred.h	/^    unsigned txEnd;	\/* Transcription end position *\/$/;"	m	struct:genePred
txStart	../inc/genePred.h	/^    unsigned txStart;	\/* Transcription start position *\/$/;"	m	struct:genePred
type	../../inc/ens.h	/^    int type;                      \/* Index into analysis table describing type of feature. *\/$/;"	m	struct:ensFeature
type	../../inc/geneGraph.h	/^    UBYTE type;		\/* vertex type. *\/$/;"	m	struct:ggVertex
type	../../inc/kxTok.h	/^    enum kxTokType type;$/;"	m	struct:kxTok
type	../../lib/keys.c	/^    enum keyExpType type;$/;"	m	struct:exp
type	../inc/agpFrag.h	/^    char type[2];	\/* (P)redraft, (D)raft, (F)inished or (O)ther *\/$/;"	m	struct:agpFrag
type	../inc/agpGap.h	/^    char *type;	\/* contig, clone, fragment, etc. *\/$/;"	m	struct:agpGap
type	../inc/cgh.h	/^    unsigned type;	\/* 1 - overall average, 2 - tissue average, 3 - single tissue *\/$/;"	m	struct:cgh
type	../inc/chromInserts.h	/^    char *type;			\/* 'centromere' 'short_arm' etc. *\/$/;"	m	struct:bigInsert
type	../inc/geneGraph.h	/^    UBYTE type;		\/* vertex type. *\/$/;"	m	struct:ggVertex
type	../inc/rnaGene.h	/^    char *type;	\/* Type - snRNA, rRNA, tRNA, etc. *\/$/;"	m	struct:rnaGene
type	../inc/softPromoter.h	/^    char *type;	\/* TATA+ or TATAless currently *\/$/;"	m	struct:softPromoter
type	../inc/trackDb.h	/^    char *type;	\/* Track type: bed, psl, genePred, etc. *\/$/;"	m	struct:trackDb
typeByte	../../inc/wormdna.h	/^    char typeByte;$/;"	m	struct:wormFeature
typeKnown	../../inc/gff.h	/^    bool typeKnown;		\/* Is 'isGtf' known? *\/$/;"	m	struct:gffFile
typeName	../../inc/ens.h	/^    char *typeName;                \/* Subtype of type really. May be NULL. Not alloced here. *\/ $/;"	m	struct:ensFeature
uMinus	../../lib/intExp.c	/^static int uMinus()$/;"	f	file:
uglyAbort	../../inc/common.h	52;"	d
uglyOut	../../inc/common.h	53;"	d
uglyf	../../inc/common.h	51;"	d
uglyfBreak	../../lib/osunix.c	/^void uglyfBreak()$/;"	f
uglyfBreak	../../lib/oswin9x.c	/^void uglyfBreak()$/;"	f
unN	../../lib/codebias.c	/^static void unN(DNA *dna, int dnaSize)$/;"	f	file:
unalignedUnpackDna	../../lib/nt4.c	/^void unalignedUnpackDna(bits32 *tiles, int start, int size, DNA *unpacked)$/;"	f
underline	../../inc/seqOut.h	/^    bool underline;	\/* Underline? *\/$/;"	m	struct:cfm
uni	../inc/sage.h	/^    int uni;	\/* Number portion of uni-gene identifier, add 'Hs.' for full identifier. *\/$/;"	m	struct:sage
uniqueAlign	../inc/exprBed.h	/^    unsigned uniqueAlign;	\/* 1 if alignment was a global maximum, 0 otherwise *\/$/;"	m	struct:exprBed
unlinkAli	../../lib/fuzzyFind.c	/^void unlinkAli(struct ffAli **pList, struct ffAli *ali)$/;"	f
unpackDna	../../lib/dnautil.c	/^void unpackDna(bits32 *tiles, int tileCount, DNA *out)$/;"	f
unpackLeftSide	../../lib/nt4.c	/^static void unpackLeftSide(bits32 tile, int baseCount, DNA *out)$/;"	f	file:
unpackMidWord	../../lib/nt4.c	/^static void unpackMidWord(bits32 tile, int startBase, int baseCount, DNA *out)$/;"	f	file:
unpackMommy	../../lib/xensmall.c	/^static void unpackMommy(UBYTE mommy, int *retStateIx, int *retQoff, int *retToff)$/;"	f	file:
unpackRightSide	../../lib/nt4.c	/^static void unpackRightSide(bits32 tile, int baseCount, DNA *out)$/;"	f	file:
untranslateRangeList	../../lib/gfClientLib.c	/^void untranslateRangeList(struct gfRange *rangeList, int qFrame, int tFrame, $/;"	f
upOneDirFromFile	../lib/qaSeq.c	/^void upOneDirFromFile(char *path, char dir[256], char name[128], $/;"	f
upPsl	../inc/coordConv.h	/^    struct psl *midPsl,*upPsl,*downPsl; \/** alignments for each of the dnaSeqs *\/$/;"	m	struct:coordConvRep
upPsl	../lib/coordConv.c	/^    struct psl *midPsl,*upPsl,*downPsl;$/;"	m	struct:possibleCoord
upSeq	../inc/coordConv.h	/^    struct dnaSeq *midSeq,*upSeq,*downSeq; \/** 3 in order from 5' to 3' *\/$/;"	m	struct:coordConvRep
upStart	../inc/coordConv.h	/^    unsigned midStart,upStart,downStart; \/** starting position of dnaSeqs in old chrom *\/$/;"	m	struct:coordConvRep
updateActiveClusters	../lib/ggCluster.c	/^static void updateActiveClusters(struct ggMrnaCluster **pActiveClusters, $/;"	f	file:
upstreamQualifier	../lib/featureBits.c	/^static boolean upstreamQualifier(char *qualifier, char *extra, int *retSize)$/;"	f	file:
url	../inc/trackDb.h	/^    char *url;	\/* URL to link to when they click on an item *\/$/;"	m	struct:trackDb
useScore	../inc/trackDb.h	/^    unsigned char useScore;	\/* 1 if use score, 0 if not *\/$/;"	m	struct:trackDb
useScore	../inc/trackTable.h	/^    unsigned char useScore;	\/* 1 if use score, 0 if not *\/$/;"	m	struct:trackTable
used	../../inc/spaceSaver.h	/^    bool *used;                 \/* A flag for each spot used. *\/$/;"	m	struct:spaceRowTracker
used	../../lib/keys.c	/^    int used;             \/* Number of keys used in table. *\/$/;"	m	struct:kvt
userData	../../inc/xp.h	/^    void *userData;			\/* Pointer to user's data structure. *\/$/;"	m	struct:xp
vaErrAbort	../../lib/errabort.c	/^void vaErrAbort(char *format, va_list args)$/;"	f
vaWarn	../../lib/errabort.c	/^void vaWarn(char *format, va_list args)$/;"	f
val	../../inc/cheapcgi.h	/^    char *val;  		\/* Value - also not allocated here. *\/$/;"	m	struct:cgiVar
val	../../inc/common.h	/^    void *val;		\/* A reference to something. *\/$/;"	m	struct:slRef
val	../../inc/diGraph.h	/^    void *val;		\/* Value of edge. *\/$/;"	m	struct:dgEdge
val	../../inc/diGraph.h	/^    void *val;             \/* Value of node. *\/$/;"	m	struct:dgNode
val	../../inc/dlist.h	/^    void *val;$/;"	m	struct:dlNode
val	../../inc/hash.h	/^    void *val;$/;"	m	struct:hashEl
val	../../inc/keys.h	/^    char *val;$/;"	m	struct:keyVal
val	../../inc/spaceSaver.h	/^    void *val;$/;"	m	struct:spaceNode
valToAa	../../lib/dnautil.c	/^AA valToAa[20];$/;"	v
valToCodon	../../lib/dnautil.c	/^DNA *valToCodon(int val)$/;"	f
valToNt	../../lib/dnautil.c	/^DNA valToNt[5];$/;"	v
value	../../inc/cheapcgi.h	/^    int value;$/;"	m	struct:cgiChoice
version	../../inc/blastParse.h	/^    char *version;                      \/* Version of program. *\/$/;"	m	struct:blastFile
version	../inc/coordConv.h	/^    char *version;	\/** Version of Assembly, i.e. hg4, hg5 *\/$/;"	m	struct:coordConv
vertexCount	../../inc/geneGraph.h	/^    int vertexCount;                    \/* Vertex count. *\/$/;"	m	struct:geneGraph
vertexCount	../../inc/geneGraph.h	/^    int vertexCount;             \/* Vertex count. *\/$/;"	m	struct:ggAliInfo
vertexCount	../../lib/dgRange.c	/^    int vertexCount;	         \/* Number of vertices *\/$/;"	m	struct:bfGraph
vertexCount	../inc/geneGraph.h	/^    int vertexCount;                    \/* Vertex count. *\/$/;"	m	struct:geneGraph
vertexCount	../inc/geneGraph.h	/^    int vertexCount;             \/* Vertex count. *\/$/;"	m	struct:ggAliInfo
vertexIx	../lib/ggGraph.c	/^static int vertexIx(struct ggVertex *array, int arraySize, int pos, int type)$/;"	f	file:
vertices	../../inc/geneGraph.h	/^    struct ggVertex *vertices;          \/* Splice sites or soft start\/ends. *\/$/;"	m	struct:geneGraph
vertices	../../inc/geneGraph.h	/^    struct ggVertex *vertices;   \/* Splice sites or soft start\/ends. *\/$/;"	m	struct:ggAliInfo
vertices	../../lib/dgRange.c	/^    struct bfVertex *vertices;   \/* Array of vertices. *\/$/;"	m	struct:bfGraph
vertices	../inc/geneGraph.h	/^    struct ggVertex *vertices;          \/* Splice sites or soft start\/ends. *\/$/;"	m	struct:geneGraph
vertices	../inc/geneGraph.h	/^    struct ggVertex *vertices;   \/* Splice sites or soft start\/ends. *\/$/;"	m	struct:ggAliInfo
visibility	../inc/trackDb.h	/^    unsigned char visibility;	\/* 0=hide, 1=dense, 2=full *\/$/;"	m	struct:trackDb
visibility	../inc/trackTable.h	/^    unsigned char visibility;	\/* 0=hide, 1=dense, 2=full *\/$/;"	m	struct:trackTable
visited	../../inc/diGraph.h	/^    bool visited;       \/* Visit order in depth first traversal. *\/$/;"	m	struct:dgNode
wabAli	../inc/wabAli.h	/^struct wabAli$/;"	s
wabAliCommaIn	../lib/wabAli.c	/^struct wabAli *wabAliCommaIn(char **pS, struct wabAli *ret)$/;"	f
wabAliCommaOut	../inc/wabAli.h	52;"	d
wabAliFree	../lib/wabAli.c	/^void wabAliFree(struct wabAli **pEl)$/;"	f
wabAliFreeList	../lib/wabAli.c	/^void wabAliFreeList(struct wabAli **pList)$/;"	f
wabAliLoad	../lib/wabAli.c	/^struct wabAli *wabAliLoad(char **row)$/;"	f
wabAliOutput	../lib/wabAli.c	/^void wabAliOutput(struct wabAli *el, FILE *f, char sep, char lastSep) $/;"	f
wabAliStaticLoad	../lib/wabAli.c	/^void wabAliStaticLoad(char **row, struct wabAli *ret)$/;"	f
wabAliTabOut	../inc/wabAli.h	49;"	d
wantMem	../../lib/memalloc.c	/^void *wantMem(size_t size)$/;"	f
warn	../../lib/errabort.c	/^void warn(char *format, ...)$/;"	f
warnAboutDupes	../../lib/snofmake.c	/^boolean warnAboutDupes(struct offsetList **array, int size)$/;"	f
warnArray	../../lib/errabort.c	/^static WarnHandler warnArray[maxWarnHandlers] = {defaultVaWarn,};$/;"	v	file:
warnIx	../../lib/errabort.c	/^static int warnIx = 0;$/;"	v	file:
waysIn	../../lib/supStitch.c	/^    struct ssEdge *waysIn;	\/* Edges leading into this node. *\/$/;"	m	struct:ssNode
waysOut	../../lib/dgRange.c	/^   struct bfEdge *waysOut;     \/* Ways out. *\/$/;"	m	struct:bfVertex
weaveAli	../../lib/fuzzyFind.c	/^static struct ffAli *weaveAli(struct ffAli *hitList, $/;"	f	file:
webAbort	../../lib/web.c	/^void webAbort(char* title, char* format, ...)$/;"	f
webAbort	back_hgText.c	/^void webAbort(char* title, char* format, ...)$/;"	f
webEnd	../../lib/web.c	/^void webEnd()$/;"	f
webEnd	back_hgText.c	/^void webEnd()$/;"	f
webHeadAlreadyOutputed	../../lib/web.c	/^boolean webHeadAlreadyOutputed = FALSE;$/;"	v
webHeadAlreadyOutputed	back_hgText.c	/^boolean webHeadAlreadyOutputed = FALSE;$/;"	v
webInTextMode	../../lib/web.c	/^boolean webInTextMode = FALSE;$/;"	v
webInTextMode	back_hgText.c	/^boolean webInTextMode = FALSE;$/;"	v
webNewSection	../../lib/web.c	/^void webNewSection(char* format, ...)$/;"	f
webNewSection	back_hgText.c	/^void webNewSection(char* title)$/;"	f
webStart	../../lib/web.c	/^void webStart(char* format,...)$/;"	f
webStart	back_hgText.c	/^void webStart(char* format,...)$/;"	f
webStartText	../../lib/web.c	/^void webStartText()$/;"	f
webStartText	back_hgText.c	/^void webStartText()$/;"	f
where	back_hgText.c	/^char *where = NULL;		\/* Extra selection info. *\/$/;"	v
where	getFeatDna.c	/^char *where = NULL;		\/* Extra selection info. *\/$/;"	v
where	hgText.c	/^char *where = NULL;		\/* Extra selection info. *\/$/;"	v
whichSeqIn	../../lib/dnaseq.c	/^bioSeq *whichSeqIn(bioSeq **seqs, int seqCount, char *letters)$/;"	f
whiteSpaceChopper	../../lib/common.c	/^char whiteSpaceChopper[] = " \\t\\n\\r";$/;"	v
wiRhChrom	../inc/stsMap.h	/^    char *wiRhChrom;	\/* Chromosome (no chr) from Whitehead RH map or 0 if none *\/$/;"	m	struct:stsMap
wiRhPos	../inc/stsMap.h	/^    float wiRhPos;	\/* Position on wi_rh map *\/$/;"	m	struct:stsMap
wiYacChrom	../inc/stsMap.h	/^    char *wiYacChrom;	\/* Chromosome (no chr) from Whitehead YAC map or 0 if none *\/$/;"	m	struct:stsMap
wiYacChrom	../inc/stsMarker.h	/^    char *wiYacChrom;	\/* Chromosome (no chr) from wi_yac map or 0 if none *\/$/;"	m	struct:stsMarker
wiYacPos	../inc/stsMap.h	/^    float wiYacPos;	\/* Position on wi_yac map *\/$/;"	m	struct:stsMap
wiYacPos	../inc/stsMarker.h	/^    float wiYacPos;	\/* Position on wi_yac map *\/$/;"	m	struct:stsMarker
width	../../inc/memgfx.h	/^    int width, height;$/;"	m	struct:memGfx
wildMatch	../../lib/wildcmp.c	/^boolean wildMatch(char *wildCard, char *string)$/;"	f
winEnd	../../inc/spaceSaver.h	/^    int winStart,winEnd;	\/* Start and end of area we're modeling. *\/$/;"	m	struct:spaceSaver
winStart	../../inc/spaceSaver.h	/^    int winStart,winEnd;	\/* Start and end of area we're modeling. *\/$/;"	m	struct:spaceSaver
wirhChr	../inc/stsInfo.h	/^    char *wirhChr;	\/* Chromosome in WI RH map *\/$/;"	m	struct:stsInfo
wirhLOD	../inc/stsInfo.h	/^    float wirhLOD;	\/* LOD score in WI RH map *\/$/;"	m	struct:stsInfo
wirhName	../inc/stsInfo.h	/^    char *wirhName;	\/* Name in WI RH map *\/$/;"	m	struct:stsInfo
wirhPos	../inc/stsInfo.h	/^    float wirhPos;	\/* Position in WI RH map *\/$/;"	m	struct:stsInfo
wiyacChr	../inc/stsInfo.h	/^    char *wiyacChr;	\/* Chromosome in WI YAC map *\/$/;"	m	struct:stsInfo
wiyacLOD	../inc/stsInfo.h	/^    float wiyacLOD;	\/* LOD score in WI YAC map *\/$/;"	m	struct:stsInfo
wiyacName	../inc/stsInfo.h	/^    char *wiyacName;	\/* Name in WI YAC map *\/$/;"	m	struct:stsInfo
wiyacPos	../inc/stsInfo.h	/^    float wiyacPos;	\/* Position in WI YAC map *\/$/;"	m	struct:stsInfo
wobbleMask	../../lib/crudeali.c	23;"	d	file:
wordLen	../../inc/seqOut.h	/^    int wordLen;	\/* Number of characters between spaces (often 10) *\/$/;"	m	struct:cfm
wormCacheGdf	../../lib/wormdna.c	/^static void wormCacheGdf()$/;"	f	file:
wormCacheSomeGdf	../../lib/wormdna.c	/^static void wormCacheSomeGdf(struct wormGdfCache *cache)$/;"	f	file:
wormCdaAlisInRange	../../lib/wormdna.c	/^struct cdaAli *wormCdaAlisInRange(char *chromId, int start, int end)$/;"	f
wormCdnaCache	../../lib/wormdna.c	/^static void wormCdnaCache()$/;"	f	file:
wormCdnaDir	../../lib/wormdna.c	/^char *wormCdnaDir()$/;"	f
wormCdnaInfo	../../inc/wormdna.h	/^struct wormCdnaInfo $/;"	s
wormCdnaInfo	../../lib/wormdna.c	/^boolean wormCdnaInfo(char *name, struct wormCdnaInfo *retInfo)$/;"	f
wormCdnaIterator	../../inc/wormdna.h	/^struct wormCdnaIterator$/;"	s
wormCdnaSeq	../../lib/wormdna.c	/^boolean wormCdnaSeq(char *name, struct dnaSeq **retDna, struct wormCdnaInfo *retInfo)$/;"	f
wormCdnaUncache	../../lib/wormdna.c	/^void wormCdnaUncache()$/;"	f
wormCdnasInRange	../../lib/wormdna.c	/^struct wormFeature *wormCdnasInRange(char *chromId, int start, int end)$/;"	f
wormChromDir	../../lib/wormdna.c	/^char *wormChromDir()$/;"	f
wormChromForIx	../../lib/wormdna.c	/^char *wormChromForIx(int ix)$/;"	f
wormChromIx	../../lib/wormdna.c	/^int wormChromIx(char *name)$/;"	f
wormChromNames	../../lib/wormdna.c	/^void wormChromNames(char ***retNames, int *retNameCount)$/;"	f
wormChromPart	../../lib/wormdna.c	/^DNA *wormChromPart(char *chromId, int start, int size)$/;"	f
wormChromPartExonsUpper	../../lib/wormdna.c	/^DNA *wormChromPartExonsUpper(char *chromId, int start, int size)$/;"	f
wormChromSize	../../lib/wormdna.c	/^int wormChromSize(char *chrom)$/;"	f
wormClipRangeToChrom	../../lib/wormdna.c	/^void wormClipRangeToChrom(char *chrom, int *pStart, int *pEnd)$/;"	f
wormCosmidsInRange	../../lib/wormdna.c	/^struct wormFeature *wormCosmidsInRange(char *chromId, int start, int end)$/;"	f
wormDnaMatchScores	../../lib/crudeali.c	/^static int wormDnaMatchScores[256][256];$/;"	v	file:
wormFaCommentIntoInfo	../../lib/wormdna.c	/^void wormFaCommentIntoInfo(char *faComment, struct wormCdnaInfo *retInfo)$/;"	f
wormFeature	../../inc/wormdna.h	/^struct wormFeature$/;"	s
wormFeaturesDir	../../lib/wormdna.c	/^char *wormFeaturesDir()$/;"	f
wormFixupOrfName	../../lib/wormdna.c	/^boolean wormFixupOrfName(char *name)$/;"	f
wormFreeCdnaInfo	../../lib/wormdna.c	/^void wormFreeCdnaInfo(struct wormCdnaInfo *ci)$/;"	f
wormFreeNt4Genome	../../lib/wormdna.c	/^void wormFreeNt4Genome(struct nt4Seq ***pNt4Seq)$/;"	f
wormGdfCache	../../inc/wormdna.h	/^struct wormGdfCache$/;"	s
wormGdfGenesInRange	../../lib/wormdna.c	/^struct gdfGene *wormGdfGenesInRange(char *chrom, int start, int end, $/;"	f
wormGeneFirstOrfName	../../lib/wormdna.c	/^char *wormGeneFirstOrfName(char *geneName)$/;"	f
wormGeneForOrf	../../lib/wormdna.c	/^boolean wormGeneForOrf(char *orfName, char *geneNameBuf, int bufSize)$/;"	f
wormGeneRange	../../lib/wormdna.c	/^boolean wormGeneRange(char *name, char **retChrom, char *retStrand, int *retStart, int *retEnd)$/;"	f
wormGeneToOrfNames	../../lib/wormdna.c	/^struct slName *wormGeneToOrfNames(char *name)$/;"	f
wormGenesInRange	../../lib/wormdna.c	/^struct wormFeature *wormGenesInRange(char *chromId, int start, int end)$/;"	f
wormGenieDir	../../lib/wormdna.c	/^char *wormGenieDir()$/;"	f
wormGenieGdfCache	../../lib/wormdna.c	/^struct wormGdfCache wormGenieGdfCache = {&genieDir,NULL,NULL};$/;"	v
wormGetGdfGene	../../lib/wormdna.c	/^struct gdfGene *wormGetGdfGene(char *name)$/;"	f
wormGetGdfGeneList	../../lib/wormdna.c	/^struct gdfGene *wormGetGdfGeneList(char *baseName, int baseNameSize)$/;"	f
wormGetNamelessClusterDna	../../lib/wormdna.c	/^DNA *wormGetNamelessClusterDna(char *name)$/;"	f
wormGetSomeGdfGene	../../lib/wormdna.c	/^struct gdfGene *wormGetSomeGdfGene(char *name, struct wormGdfCache *cache)$/;"	f
wormGetSomeGdfGeneList	../../lib/wormdna.c	/^struct gdfGene *wormGetSomeGdfGeneList(char *baseName, int baseNameSize, struct wormGdfCache *cache)$/;"	f
wormInfoForGene	../../lib/wormdna.c	/^boolean wormInfoForGene(char *orfName, struct wormCdnaInfo *retInfo)$/;"	f
wormIsAltSplicedName	../../lib/wormdna.c	/^boolean wormIsAltSplicedName(char *name)$/;"	f
wormIsChromRange	../../lib/wormdna.c	/^boolean wormIsChromRange(char *in)$/;"	f
wormIsGeneName	../../lib/wormdna.c	/^boolean wormIsGeneName(char *name)$/;"	f
wormIsNamelessCluster	../../lib/wormdna.c	/^boolean wormIsNamelessCluster(char *name)$/;"	f
wormIsOrfName	../../lib/wormdna.c	/^boolean wormIsOrfName(char *in)$/;"	f
wormLoadNt4Genome	../../lib/wormdna.c	/^void wormLoadNt4Genome(struct nt4Seq ***retNt4Seq, int *retNt4Count)$/;"	f
wormOfficialChromName	../../lib/wormdna.c	/^char *wormOfficialChromName(char *name)$/;"	f
wormOpenGoodAli	../../lib/wormdna.c	/^FILE *wormOpenGoodAli()$/;"	f
wormParseChromRange	../../lib/wormdna.c	/^boolean wormParseChromRange(char *in, char **retChromId, int *retStart, int *retEnd)$/;"	f
wormSangerDir	../../lib/wormdna.c	/^char *wormSangerDir()$/;"	f
wormSangerGdfCache	../../lib/wormdna.c	/^struct wormGdfCache wormSangerGdfCache = {&sangerDir,NULL,NULL};$/;"	v
wormSearchAllCdna	../../lib/wormdna.c	/^boolean wormSearchAllCdna(struct wormCdnaIterator **retSi)$/;"	f
wormSomeGenesInRange	../../lib/wormdna.c	/^struct wormFeature *wormSomeGenesInRange(char *chromId, int start, int end, char *gdfDir)$/;"	f
wormUncacheGdf	../../lib/wormdna.c	/^void wormUncacheGdf()$/;"	f
wormUncacheSomeGdf	../../lib/wormdna.c	/^void wormUncacheSomeGdf(struct wormGdfCache *cache)$/;"	f
wormXenoDir	../../lib/wormdna.c	/^char *wormXenoDir()$/;"	f
writeContig	../../lib/xenbig.c	/^static void writeContig(struct contig *contig, FILE *out, $/;"	f	file:
writeOne	../../inc/common.h	440;"	d
writeOut	back_hgText.c	/^void writeOut(FILE *f, char *chrom, int start, int size, char strand, DNA *dna, char *faHeader)$/;"	f
writeOut	getFeatDna.c	/^void writeOut(FILE *f, char *chrom, int start, int size, char strand, DNA *dna, char *faHeader)$/;"	f
writeOut	hgText.c	/^void writeOut(FILE *f, char *chrom, int start, int size, char strand, DNA *dna, char *faHeader)$/;"	f
writeString	../../lib/common.c	/^void writeString(FILE *f, char *s)$/;"	f
write_code	../../lib/gifcomp.c	/^static void write_code(short code)$/;"	f	file:
wss	../../lib/portimpl.c	/^static struct webServerSpecific *wss = NULL;$/;"	v	file:
wssCommandLine	../../lib/servcl.c	/^struct webServerSpecific wssCommandLine =$/;"	v
wssDefault	../../lib/servcis.c	/^struct webServerSpecific wssDefault =$/;"	v
wssLinux	../../lib/servCrunx.c	/^struct webServerSpecific wssLinux =$/;"	v
wssMicrosoftII	../../lib/servmsII.c	/^struct webServerSpecific wssMicrosoftII =$/;"	v
wssMicrosoftPWS	../../lib/servpws.c	/^struct webServerSpecific wssMicrosoftPWS =$/;"	v
xStitch	../../lib/xenbig.c	/^static void xStitch(char *inName, FILE *out, int stitchMinScore, boolean compactOutput, $/;"	f	file:
xaAli	../../inc/xa.h	/^struct xaAli$/;"	s
xaAliCmpTarget	../../lib/xa.c	/^int xaAliCmpTarget(const void *va, const void *vb)$/;"	f
xaAliFree	../../lib/xa.c	/^void xaAliFree(struct xaAli *xa)$/;"	f
xaAliFreeList	../../lib/xa.c	/^void xaAliFreeList(struct xaAli **pXa)$/;"	f
xaAlignSuffix	../../lib/xa.c	/^char *xaAlignSuffix()$/;"	f
xaChromIxSuffix	../../lib/xa.c	/^char *xaChromIxSuffix()$/;"	f
xaIxOpenVerify	../../lib/xa.c	/^FILE *xaIxOpenVerify(char *fileName)$/;"	f
xaOpenVerify	../../lib/xa.c	/^FILE *xaOpenVerify(char *fileName)$/;"	f
xaRdRange	../../lib/xa.c	/^struct xaAli *xaRdRange(FILE *ix, FILE *data, $/;"	f
xaReadNext	../../lib/xa.c	/^struct xaAli *xaReadNext(FILE *f, boolean condensed)$/;"	f
xaReadRange	../../lib/xa.c	/^struct xaAli *xaReadRange(char *rangeIndexFileName, char *dataFileName, $/;"	f
xaoSig	../../inc/sig.h	22;"	d
xap	../../inc/xap.h	/^struct xap$/;"	s
xapEndTag	../../lib/xap.c	/^static void xapEndTag(void *userData, char *name, char *text)$/;"	f	file:
xapError	../../lib/xap.c	/^void xapError(struct xap *xap, char *format, ...)$/;"	f
xapFree	../../lib/xap.c	/^void xapFree(struct xap **pXp)$/;"	f
xapIndent	../../lib/xap.c	/^void xapIndent(int count, FILE *f)$/;"	f
xapNew	../../lib/xap.c	/^struct xap *xapNew(void *(*startHandler)(struct xap *xap, char *name, char **atts),$/;"	f
xapParseAny	../../lib/xap.c	/^void xapParseAny(char *fileName, char *type, $/;"	f
xapParseFile	../../lib/xap.c	/^void xapParseFile(struct xap *xap, char *fileName)$/;"	f
xapRead	../../lib/xap.c	/^static int xapRead(void *userData, char *buf, int bufSize)$/;"	f	file:
xapSkip	../../lib/xap.c	/^void xapSkip(struct xap *xap)$/;"	f
xapStack	../../inc/xap.h	/^struct xapStack$/;"	s
xapStartTag	../../lib/xap.c	/^static void xapStartTag(void *userData, char *name, char **atts)$/;"	f	file:
xapText	../../lib/xap.c	/^static void xapText(void *userData, char *s, int len)$/;"	f	file:
xenAlignBig	../../lib/xenbig.c	/^void xenAlignBig(DNA *query, int qSize, DNA *target, int tSize, FILE *f, boolean forHtml)$/;"	f
xenAlignSmall	../../lib/xensmall.c	/^int xenAlignSmall(DNA *query, int querySize, DNA *target, int targetSize, FILE *f,$/;"	f
xenAlignWorm	../../lib/xenbig.c	/^void xenAlignWorm(DNA *query, int qSize, FILE *f, boolean forHtml)$/;"	f
xenShowAli	../../lib/xenshow.c	/^void xenShowAli(char *qSym, char *tSym, char *hSym, int symCount, FILE *f,$/;"	f
xenStitch	../../lib/xenbig.c	/^void xenStitch(char *inName, FILE *out, int stitchMinScore, boolean compactOutput)$/;"	f
xenStitcher	../../lib/xenbig.c	/^void xenStitcher(char *inName, FILE *out, int stitchMinScore, boolean compactOutput)$/;"	f
xenoDir	../../lib/wormdna.c	/^static char *xenoDir = NULL;$/;"	v	file:
xp	../../inc/xap.h	/^   struct xp *xp;				        \/* Pointer to lower level parser. *\/$/;"	m	struct:xap
xp	../../inc/xp.h	/^struct xp$/;"	s
xpEatComment	../../lib/xp.c	/^static void xpEatComment(struct xp *xp, char commentC)$/;"	f	file:
xpError	../../lib/xp.c	/^void xpError(struct xp *xp, char *format, ...)$/;"	f
xpFileName	../../lib/xp.c	/^char *xpFileName(struct xp *xp)$/;"	f
xpFree	../../lib/xp.c	/^void xpFree(struct xp **pXp)$/;"	f
xpGetChar	../../lib/xp.c	22;"	d	file:
xpLineIx	../../lib/xp.c	/^int xpLineIx(struct xp *xp)$/;"	f
xpLookup	../../lib/xp.c	/^static void xpLookup(struct xp *xp, struct dyString *temp, struct dyString *text)$/;"	f	file:
xpNew	../../lib/xp.c	/^struct xp *xpNew(void *userData, $/;"	f
xpNextBuf	../../lib/xp.c	/^char xpNextBuf(struct xp *xp)$/;"	f
xpParse	../../lib/xp.c	/^boolean xpParse(struct xp *xp)$/;"	f
xpRecurseParse	../../lib/xp.c	/^void xpRecurseParse(struct xp *xp)$/;"	f
xpStack	../../inc/xp.h	/^struct xpStack$/;"	s
xpUnexpectedEof	../../lib/xp.c	/^static void xpUnexpectedEof(struct xp *xp)$/;"	f	file:
xpUngetChar	../../lib/xp.c	26;"	d	file:
zTerm	../../inc/linefile.h	/^    bool zTerm;			\/* Replace '\\n' with zero? *\/$/;"	m	struct:lineFile
zeroBytes	../../lib/common.c	/^void zeroBytes(void *vpt, int count)$/;"	f
