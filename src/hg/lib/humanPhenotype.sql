# humPhen.sql was originally generated by the autoSql program, which also 
# generated humPhen.c and humPhen.h.  This creates the database representation of
# an object which can be loaded and saved from RAM in a fairly 
# automatic way.

#track for human phenotype data from locus specific databases
CREATE TABLE humanPhenotype (
    bin smallint unsigned not null,	# A field to speed indexing
    chrom varchar(255) not null,	# Chromosome
    chromStart int unsigned not null,	# Start position in chrom
    chromEnd int unsigned not null,	# End position in chrom
    name varchar(255) not null,	# HGVS description of mutation.
    dbId varchar(255) not null,	# Db key.ID from source for this variant.
    linkDbs varchar(255) not null,	# Database keys which can link to this variant, comma sep.
    baseChangeType varchar(255) not null,	# insertion, deletion, substitution,duplication,complex,unknown.
    location varchar(255) not null,	# intron, exon, 5'utr, 3'utr, not within known transcription unit.
              #Indices
    KEY `chrom` (`chrom`(12),`bin`),
    KEY `chrom_2` (`chrom`(12),`chromStart`),
    KEY `chrom_3` (`chrom`(12),`chromEnd`),
    KEY `name` (`name`),
    UNIQUE KEY `uniVar` (`chrom`(12),`chromStart`,`chromEnd`,`name`(30),`dbId`(30))
);
#should dbId be moved to a separate table?

#links for human phenotype detail page
CREATE TABLE humPhenLink (
    linkDb varchar(255) not null,	# Database (key) of variants in humanPhenotype table.
    linkDisplayName varchar(255) not null,	# Display name for this link.
    url varchar(255) not null,	# url to substitute ID in for links.
              #Indices
    PRIMARY KEY(linkDb)
);

#aliases for mutations in the human phenotype track
CREATE TABLE humPhenAlias (
    dbId varchar(255) not null,	# ID from humanPhenotype table.
    name varchar(255) not null,	# Another name for the variant.
              #Indices
    KEY(dbId)
);
