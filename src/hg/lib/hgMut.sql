# hgMut.sql was originally generated by the autoSql program, which also 
# generated hgMut.c and hgMut.h.  This creates the database representation of
# an object which can be loaded and saved from RAM in a fairly 
# automatic way.

#track for human mutation data
CREATE TABLE hgMut (
    bin smallint unsigned not null,	# A field to speed indexing
    chrom varchar(255) not null,	# Chromosome
    chromStart int unsigned not null,	# Start position in chrom
    chromEnd int unsigned not null,	# End position in chrom
    name varchar(255) not null,	# HGVS description of mutation.
    mutId varchar(55) not null,	# unique ID for this mutation
    srcId smallint unsigned not null,	# source ID for this mutation
    hasPhenData char(1) not null,	# y or n, does this have phenotype data linked
    baseChangeType enum(
                        'insertion',
                        'deletion',
                        'substitution',
                        'duplication',
                        'complex',
                        'unknown') DEFAULT 'unknown' not null,
    location enum(
                  'intron',
                  'exon',
                  '5'' UTR',
                  '3'' UTR',
                  'not within known transcription unit'),
              #Indices
    INDEX       chrom           (chrom,bin),
    INDEX       chromStart      (chrom,chromStart),
    INDEX       name            (name),
    UNIQUE KEY  univar          (chrom,chromStart,chromEnd,mutId)
);

#sources for human mutation track
CREATE TABLE hgMutSrc (
    srcId smallint unsigned not null,	# key into hgMut table
    src varchar(255) not null,	# name of genome wide source or LSDB
    details varchar(255) not null,	# for LSDB name of actual source DB
              #Indices
    PRIMARY KEY(srcId)
);

#accessions and sources for links
CREATE TABLE hgMutExtLink (
    mutId varchar(55) not null,	# mutation ID
    acc varchar(255) not null,	# accession or ID used by link
    linkId int not null,	# link ID, foreign key into hgMutLink
              #Indices
    KEY(mutId)
);

#links for human mutation detail page
CREATE TABLE hgMutLink (
    linkId int not null,	# ID for this source, links to hgMutRef table.
    linkDisplayName varchar(255) not null,	# Display name for this link.
    url varchar(255) not null,	# url to substitute ID in for links.
              #Indices
    PRIMARY KEY(linkId)
);

#aliases for mutations
CREATE TABLE hgMutAlias (
    mutId varchar(55) not null,	# mutation ID from hgMut table.
    name varchar(255) not null,	# Another name for the mutation.
    nameType varchar(55) not null,	# common, or ?
              #Indices
    INDEX mutId      (mutId),
    INDEX name       (name),
    INDEX commonName (nameType, name)
);

#attributes asssociated with the mutation
CREATE TABLE hgMutAttr (
    mutId varchar(55) not null,	# mutation ID.
    mutAttrClassId int not null,	# id for attribute class or category, foreign key.
    mutAttrNameId int not null,	# id for attribute name, foreign key.
    mutAttrVal varchar(255) not null,	# value for this attribute
              #Indices
    INDEX classAndName (mutAttrClassId,  mutAttrNameId),
    INDEX mutId (mutId)
);

#classes or categories of attributes
CREATE TABLE hgMutAttrClass (
    mutAttrClassId int not null,	# id for attribute class.
    mutAttrClass varchar(255) not null,	# class
    displayOrder int not null,	# order to display the classes in on the detail page.
              #Indices
    PRIMARY KEY(mutAttrClassId)
);

#Names of attributes
CREATE TABLE hgMutAttrName (
    mutAttrNameId int not null,	# id for attribute name.
    mutAttrClassId int not null,	# id for class this name belongs to.
    mutAttrName varchar(255) not null,	# name
              #Indices
    PRIMARY KEY(mutAttrNameId)
);
