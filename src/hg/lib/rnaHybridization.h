/* rnaHybridization.h was originally generated by the autoSql program, which also 
 * generated rnaHybridization.c and rnaHybridization.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef RNAHYBRIDIZATION_H
#define RNAHYBRIDIZATION_H

#define RNAHYBRIDIZATION_NUM_COLS 13

struct rnaHybridization
/* perfect hybridizations on RNA level */
    {
    struct rnaHybridization *next;  /* Next in singly linked list. */
    char *chrom;	/* Reference sequence chromosome or scaffold */
    unsigned chromStart;	/* Start position in chromosome for pattern region */
    unsigned chromEnd;	/* End position in chromosome for pattern region */
    char *name;	/* match name */
    unsigned dummy;	/* dummy field to align with bed 6 structure */
    char strand[2];	/* strand for pattern region */
    char *chromTarget;	/* Reference sequence chromosome for target region */
    unsigned chromStartTarget;	/* Start position in chromosome for target region */
    unsigned chromEndTarget;	/* End position in chromosome for target region */
    char strandTarget[2];	/* strand for target region */
    char *patternSeq;	/* Sequence of pattern region 5'-3' */
    char *targetSeq;	/* Sequence of target region 3'-5' */
    float gcContent;	/* GC content ranging from 0 to 1 */
    };

void rnaHybridizationStaticLoad(char **row, struct rnaHybridization *ret);
/* Load a row from rnaHybridization table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct rnaHybridization *rnaHybridizationLoad(char **row);
/* Load a rnaHybridization from row fetched with select * from rnaHybridization
 * from database.  Dispose of this with rnaHybridizationFree(). */

struct rnaHybridization *rnaHybridizationLoadAll(char *fileName);
/* Load all rnaHybridization from whitespace-separated file.
 * Dispose of this with rnaHybridizationFreeList(). */

struct rnaHybridization *rnaHybridizationLoadAllByChar(char *fileName, char chopper);
/* Load all rnaHybridization from chopper separated file.
 * Dispose of this with rnaHybridizationFreeList(). */

#define rnaHybridizationLoadAllByTab(a) rnaHybridizationLoadAllByChar(a, '\t');
/* Load all rnaHybridization from tab separated file.
 * Dispose of this with rnaHybridizationFreeList(). */

struct rnaHybridization *rnaHybridizationCommaIn(char **pS, struct rnaHybridization *ret);
/* Create a rnaHybridization out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new rnaHybridization */

void rnaHybridizationFree(struct rnaHybridization **pEl);
/* Free a single dynamically allocated rnaHybridization such as created
 * with rnaHybridizationLoad(). */

void rnaHybridizationFreeList(struct rnaHybridization **pList);
/* Free a list of dynamically allocated rnaHybridization's */

void rnaHybridizationOutput(struct rnaHybridization *el, FILE *f, char sep, char lastSep);
/* Print out rnaHybridization.  Separate fields with sep. Follow last field with lastSep. */

#define rnaHybridizationTabOut(el,f) rnaHybridizationOutput(el,f,'\t','\n');
/* Print out rnaHybridization as a line in a tab-separated file. */

#define rnaHybridizationCommaOut(el,f) rnaHybridizationOutput(el,f,',',',');
/* Print out rnaHybridization as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* RNAHYBRIDIZATION_H */

