#!/usr/bin/env python2.7
# condenseMatrix
"""Condense an expression matrix from transcript rows to gene rows"""
import os, sys, collections, argparse

# import the UCSC kent python library
sys.path.append(os.path.join(os.path.dirname(__file__), 'pyLib'))
import common
import tempfile
import subprocess

def parseArgs(args):
    """
    Parse the command line arguments.
    """
    parser= argparse.ArgumentParser(description = __doc__)
    parser.add_argument ("inputFile",
    help = " The input file. ",
    type = argparse.FileType("r"))
    parser.add_argument ("outputFile",
    help = " The output file. ",
    type =argparse.FileType("w"))
    options = parser.parse_args()
    return options

def convertNames(inputFile, intermediateFile, ensembleExonToGene):
    """
    """
    firstLine = True 
    for line in inputFile:
        if firstLine:
            firstLine = False
            intermediateFile.write(line)
            continue 
        splitLine = line.split()
        if (ensembleExonToGene.get(splitLine[0])):
            intermediateFile.write(ensembleExonToGene[splitLine[0]] + "\t"+ "\t".join(splitLine[1:]) + "\n")

def collapseRows(outputFile):
    """
    """
    firstLine = True
    newRow = []
    rowsInBlock = 0
    skip = True
    finalFile = open(".sortedGeneNames","r")
    print ("opened the file succesfully")
    for line in finalFile:
        if skip:
            skip = False
            outputFile.write(line)
            continue 
        splitLine = line.split()
        if firstLine:
            print ("the first line...")
            firstLine = False
            newRow = splitLine 
            rowsInBlock = 1
            continue
        if (splitLine[0]==newRow[0]):
            itemCount = 1
            rowsInBlock += 1
            for item in splitLine[1:]: 
                newRow[itemCount] = float(newRow[itemCount]) + float(splitLine[itemCount])
                itemCount +=1 
        else: 
            itemCount = 1
            for item in newRow[1:]:
                newRow[itemCount] = str(float(newRow[itemCount])/float(rowsInBlock))
                itemCount += 1
            outputFile.write("\t".join(newRow) + "\n")
            newRow = splitLine 
            rowsInBlock = 1 

def main(args):
    """
    Initialized options and calls other functions.
    """
    options = parseArgs(args)
    ensembleExonToGene = common.dictFromTwoTabFile("/cluster/home/ceisenhart/kent/src/hg/cirm/cdw/wrangle/condenseMatrix/ensemble_exon_to_gene.tab", True)
    print (ensembleExonToGene)
    exit()
    ensembleToHugo = common.dictFromTwoTabFile("/cluster/home/ceisenhart/kent/src/hg/cirm/cdw/wrangle/condenseMatrix/ensemble_to_hugo.tab", True)
    firstLine = True 
    intermediateFile = open(".convertedGeneNames","w")
    convertNames(options.inputFile, intermediateFile, ensembleExonToGene)
    intermediateFile.close()
    print ("Done with the first pass...")
   #intermediateFile2 = open(".aVeryStrangeName2","w")
    os.system("sort -k 1 -r .convertedGeneNames > .sortedGeneNames")
    #subprocess.Popen(["sort","k","1", ".aVeryStrangeName"], shell=False, stdout = intermediateFile2)
    #intermediateFile2.close()
    print ("Done sorting")
    collapseRows(options.outputFile)
    os.system("rm .convertedGeneNames")
    os.system("rm .sortedGeneNames") 
    
if __name__ == "__main__" : 
    sys.exit(main(sys.argv))
