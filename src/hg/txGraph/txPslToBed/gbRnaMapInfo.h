/* gbRnaMapInfo.h was originally generated by the autoSql program, which also 
 * generated gbRnaMapInfo.c and gbRnaMapInfo.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef GBRNAMAPINFO_H
#define GBRNAMAPINFO_H

#define GBRNAMAPINFO_NUM_COLS 16

struct gbRnaMapInfo
/* Summary of how a genbank transcript maps.  Most fields show . if FALSE, a shortened version of field name if true, just for better readability. */
    {
    struct gbRnaMapInfo *next;  /* Next in singly linked list. */
    char *chrom;	/* Chromosome of alignment */
    int chromStart;	/* Start of alignment */
    int chromEnd;	/* End of alignment */
    char *accession;	/* Genbank accession */
    char *genbankCds;	/* True if came with a genbank CDS record */
    char *genbankFullCds;	/* True if genbank CDS record showed full length */
    char *intronNudged;	/* True if moved alignment a little to get gt/ag ends */
    char *directionFlipped;	/* True if flipped strand based on splice sites */
    char *mergedSmallGap;	/* True if merged a small gap in alignment into exon */
    char *splitLargeGap;	/* True if split based on a large gap in the alignment */
    char *splitLargGapInCds;	/* True if split large gap in CDS region */
    char *smallGapBustsFrame;	/* True if small gap in alignment breaks frame */
    char *largeGapBustsFrame;	/* True if a large gap in alignment breaks frame */
    char *intronNudgeBustsFrame;	/* True if we broke frame nudging intron */
    char *cdsOutside;	/* True if cds outside of bed */
    char *outputCds;	/* True if output with CDS */
    };

void gbRnaMapInfoStaticLoad(char **row, struct gbRnaMapInfo *ret);
/* Load a row from gbRnaMapInfo table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct gbRnaMapInfo *gbRnaMapInfoLoad(char **row);
/* Load a gbRnaMapInfo from row fetched with select * from gbRnaMapInfo
 * from database.  Dispose of this with gbRnaMapInfoFree(). */

struct gbRnaMapInfo *gbRnaMapInfoLoadAll(char *fileName);
/* Load all gbRnaMapInfo from whitespace-separated file.
 * Dispose of this with gbRnaMapInfoFreeList(). */

struct gbRnaMapInfo *gbRnaMapInfoLoadAllByChar(char *fileName, char chopper);
/* Load all gbRnaMapInfo from chopper separated file.
 * Dispose of this with gbRnaMapInfoFreeList(). */

#define gbRnaMapInfoLoadAllByTab(a) gbRnaMapInfoLoadAllByChar(a, '\t');
/* Load all gbRnaMapInfo from tab separated file.
 * Dispose of this with gbRnaMapInfoFreeList(). */

struct gbRnaMapInfo *gbRnaMapInfoCommaIn(char **pS, struct gbRnaMapInfo *ret);
/* Create a gbRnaMapInfo out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new gbRnaMapInfo */

void gbRnaMapInfoFree(struct gbRnaMapInfo **pEl);
/* Free a single dynamically allocated gbRnaMapInfo such as created
 * with gbRnaMapInfoLoad(). */

void gbRnaMapInfoFreeList(struct gbRnaMapInfo **pList);
/* Free a list of dynamically allocated gbRnaMapInfo's */

void gbRnaMapInfoOutput(struct gbRnaMapInfo *el, FILE *f, char sep, char lastSep);
/* Print out gbRnaMapInfo.  Separate fields with sep. Follow last field with lastSep. */

#define gbRnaMapInfoTabOut(el,f) gbRnaMapInfoOutput(el,f,'\t','\n');
/* Print out gbRnaMapInfo as a line in a tab-separated file. */

#define gbRnaMapInfoCommaOut(el,f) gbRnaMapInfoOutput(el,f,',',',');
/* Print out gbRnaMapInfo as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* GBRNAMAPINFO_H */

