# pushQ.sql was originally generated by the autoSql program, which also 
# generated pushQ.c and pushQ.h.  This creates the database representation of
# an object which can be loaded and saved from RAM in a fairly 
# automatic way.

#Push Queue
CREATE TABLE pushQ (
    qid char(6) not null,	# Queue Id
    pqid char(6) not null,	# Parent Queue Id if split off another
    priority char(1) not null,	# Priority
    rank int unsigned not null,	# Rank for display sort
    qadate char(10) not null,	# QA start date
    newYN char(1) not null,	# new (track)?
    track varchar(255) not null,	# Track
    dbs varchar(255) not null,	# Databases
    tbls longblob not null,	# Tables
    cgis varchar(255) not null,	# CGI(s)
    files varchar(255) not null,	# File(s)
    sizeMB int unsigned not null,	# Size MB
    currLoc char(20) not null,	# Current Location
    makeDocYN char(1) not null,	# MakeDoc verified?
    onlineHelp char(50) not null,	# Online Help
    ndxYN char(1) not null,	# Index verified?
    joinerYN char(1) not null,	# all.joiner verified?
    stat varchar(255) not null,	# Status
    sponsor char(50) not null,	# Sponsor
    reviewer char(50) not null,	# QA Reviewer
    extSource char(50) not null,	# External Source
    openIssues longblob not null,	# Open issues
    notes longblob not null,	# Notes
    reqdate char(10) not null,	# Push-request Date
    pushedYN char(1) not null,	# Push done?
              #Indices
    PRIMARY KEY(qid)
);

#PushQ Users
CREATE TABLE users (
    user char(8) not null,	# User
    password char(34) not null,	# Password
    role char(8) not null,	# Role=admin,dev,qa
    cacheDefeat char(20) not null,	# Random string to defeat caches
    contents longblob not null,	# pushq-cart contents
              #Indices
    PRIMARY KEY(user)
);
