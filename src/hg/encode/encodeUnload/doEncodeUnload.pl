#!/usr/bin/env perl

# encodeUnload.pl - unload ENCODE data submission generated by the
#                       automated submission pipeline
# Reads load.ra for information about what to do

# Writes error or log information to STDOUT
# Returns 0 if unload succeeds.

# DO NOT EDIT the /cluster/bin/scripts copy of this file -- 
# edit the CVS'ed source at: ~/kent/src/hg/encode/encodeUnload/doEncodeUnload.pl
#
# $Id: doEncodeUnload.pl,v 1.1 2008/07/29 22:45:09 larrym Exp $

use warnings;
use strict;

use Getopt::Long;
use File::Temp;
use File::Basename;

use lib "/cluster/bin/scripts";
use Encode;
use HgDb;
use HgAutomate;

use vars qw/$opt_verbose/;

my $debug = 0;

sub usage
{
    print STDERR <<END;
    usage: doEncodeUnload.pl submission_type project_submission_dir
END
    exit(1);
}

sub tableExist
{
    my ($db, $tableName) = @_;
    my $retval = 0;
    my $sth = $db->execute("show tables like ?", $tableName);
    my @row = $sth->fetchrow_array();
    if(@row && $row[0]) {
        $retval = 1 ;
    }
    return $retval;
}

sub dropTable
{
    my ($db, $tableName) = @_;
    $db->execute("drop table $tableName") || die "Couldn't drop table '$tableName'";
}

sub dropTableIfExist
{
    my ($db, $tableName) = @_;
    if(tableExist($db, $tableName)) {
        dropTable($db, $tableName);
    }
}

sub genericUnload
{
    my ($assembly, $db, $tableName) = @_;
    dropTableIfExist($db, $tableName);
}

sub unloadWig
{
    my ($assembly, $db, $tableName) = @_;
    dropTableIfExist($db, $tableName);

    # remove symlink
    my $file = "/gbdb/$assembly/wib/$tableName.wib";
    if(-e $file) {
        print STDERR "removing wib '$file'\n" if($debug);
        if(system("rm -f $file")) {
            die "unexpected error removing symlink $file";
        }
    }
}
 
############################################################################
# Main

# Change dir to submission directory obtained from command-line

GetOptions("verbose=i") || usage();
$opt_verbose = 1 if (!defined $opt_verbose);
if(@ARGV != 2) {
    usage();
}

my $submitType = $ARGV[0];	# currently not used
my $submitDir = $ARGV[1];

my $encInstance = dirname($submitDir);
my $encProject = basename($submitDir);

if($encInstance =~ /(_.*)/) {
    $encInstance = $1;
}

chdir($submitDir) || die "Couldn't chdir to '$submitDir'";

my $unloadRa = 'out/unload.ra';
if(!(-e $unloadRa)) {
  exit(0);
}

HgAutomate::verbose(1, "Unloading project in directory $submitDir\n");

# Unload resources listed in unload.ra
my %ra = RAFile::readRaFile($unloadRa, 'tablename');
my $db;
for my $key (keys %ra) {
    my $h = $ra{$key};
    my $tablenameExt = $h->{tablename} . "${encInstance}_$encProject";
    if($debug == 2) {
        print STDERR "keyword: $key\n";
        for my $field (qw(tablename type tableType assembly files tablenameExt)) {
            if($h->{$field}) {
                print STDERR "$field: " . $h->{$field} . "\n";
            }
        }
        print STDERR "\n";
    }

    my $assembly = $h->{assembly};
    if(!defined($db)) {
        $db = HgDb->new(DB => $assembly);
    }

    if($h->{type} eq "genePred" || $h->{type} =~ /^bed/) {
        genericUnload($assembly, $db, $tablenameExt);
    } elsif ($h->{type} eq "wig") {
        unloadWig($assembly, $db, $tablenameExt);
    } else {
        die "ERROR: unknown type: $h->{type} in load.ra\n";
    }
}

exit(0);
