#!/usr/bin/ruby -w

# encodeLoad.rb - load ENCODE data submission generated by the
#                       automated submission pipeline
# Reads load.ra for information about what to do

# Writes error or log information to STDOUT
# Returns 0 if load succeeds.

# DO NOT EDIT the /cluster/bin/scripts copy of this file -- 
# edit the CVS'ed source at:
# $Header: /projects/compbio/cvsroot/kent/src/hg/encode/encodeLoad/doEncodeLoad.rb,v 1.1 2008/01/10 03:07:39 galt Exp $

# Global constants

# Global variables
$opt_verbose = 1
$loadRa = 'load.ra'
$submitDir = ""
$submitType = ""

def usage 
    puts "usage: encodeLoad.rb submission_type project_submission_dir\n"
    exit 1
end

def verbose(level, string)
  if level <= $opt_verbose
    STDERR.puts string
  end
end



def loadWig 
    #my ($file) = @_;
    #my $err = system (
    #    "head -10 $file | $loaderPath/wigEncode stdin /dev/null /dev/null >validateWig.out 2>&1");
    if ($err) 
        STDERR.print "ERROR: File '\$file\' failed wiggle validation.\n"
        #open(ERR, "validateWig.out") || die "\n";
        #my @err = <ERR>;
        die "@err\n";
    else 
        print "Passed\n";
    end
end

def loadBed 
    #my ($file, $type) = @_;
    #my $err = system (
        #"head -10 $file | egrep -v '^track|browser' | $loaderPath/hgLoadBed -noLoad hg18 testTable stdin >validateBed.out 2>&1");
    if ($err) 
        STDERR.print "ERROR: File '\$file\' failed bed validation.\n";
        #open(ERR, "validateBed.out") || die "\n";
        #my @err = <ERR>;
        die "@err\n";
    else
        print "Passed\n";
    end
end

############################################################################
# Misc subroutines

def readRaFile 
    # Read records from a .ra file into a hash of hashes and return it.
    #my ($file, $type) = @_;
    #open(RA, $file) || die "ERROR: Can't open RA file \'$fieldConfigFile\'\n";
    #my @lines = <RA>;
    #my %ra = ();
    #my $raKey = undef;
    #foreach my $line (@lines) {
    #}
    #close(RA);
    #return %ra;
end


############################################################################
# Main

# Change dir to submission directory obtained from command-line

if ARGV.length != 2
  usage
end


$submitType = ARGV[0]	# currently not used
$submitDir = ARGV[1]

verbose 1, "Loading submission in directory \'#{$submitDir}\'\n"
Dir.chdir $submitDir


# Load files listed in load.ra

f = File.open($loadRa)
f.readlines.each do |line|
line.chomp!
STDERR.puts "#{line}\n"
end
f.close

exit 0

