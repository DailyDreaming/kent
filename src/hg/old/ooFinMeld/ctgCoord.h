/* ctgCoord.h was originally generated by the autoSql program, which also 
 * generated ctgCoord.c and ctgCoord.sql.  This header links the database and the RAM 
 * representation of objects. */

#ifndef CTGCOORD_H
#define CTGCOORD_H

struct ctgCoord
/* RAM representation of record in ctg_coord file */
    {
    struct ctgCoord *next;  /* Next in singly linked list. */
    char *ctgName;	/* Name of contig */
    char *ctgId;	/* Another unique name for contig */
    int start;	/* Start position of clone in contig */
    int end;	/* End position - 1 of clone in contig */
    char strand[3];	/* +1 or -1 */
    char phase[2];	/* Seems to be universally 'F' */
    char *clone;	/* Clone name (accession.version) */
    int gi;	/* Genbank GI of clone */
    };

void ctgCoordStaticLoad(char **row, struct ctgCoord *ret);
/* Load a row from ctgCoord table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct ctgCoord *ctgCoordLoad(char **row);
/* Load a ctgCoord from row fetched with select * from ctgCoord
 * from database.  Dispose of this with ctgCoordFree(). */

struct ctgCoord *ctgCoordCommaIn(char **pS, struct ctgCoord *ret);
/* Create a ctgCoord out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new ctgCoord */

void ctgCoordFree(struct ctgCoord **pEl);
/* Free a single dynamically allocated ctgCoord such as created
 * with ctgCoordLoad(). */

void ctgCoordFreeList(struct ctgCoord **pList);
/* Free a list of dynamically allocated ctgCoord's */

void ctgCoordOutput(struct ctgCoord *el, FILE *f, char sep, char lastSep);
/* Print out ctgCoord.  Separate fields with sep. Follow last field with lastSep. */

#define ctgCoordTabOut(el,f) ctgCoordOutput(el,f,'\t','\n');
/* Print out ctgCoord as a line in a tab-separated file. */

#define ctgCoordCommaOut(el,f) ctgCoordOutput(el,f,',',',');
/* Print out ctgCoord as a comma separated list including final comma. */

#endif /* CTGCOORD_H */

