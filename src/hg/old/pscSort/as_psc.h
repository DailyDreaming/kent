/* as_psc.h was originally generated by the autoSql program, which also 
 * generated as_psc.c and as_psc.sql.  This header links the database and the RAM 
 * representation of objects. */

#ifndef AS_PSC_H
#define AS_PSC_H

struct psc
/* mRNA alignment basic info */
    {
    struct psc *next;  /* Next in singly linked list. */
    unsigned score;	/* Matches minus mismatches */
    char qAcc[13];	/* mRNA accession */
    unsigned qStart;	/* Start of alignment in mRNA */
    unsigned qEnd;	/* End of alignment in mRNA */
    unsigned qSize;	/* Total mRNA size */
    char tAcc[13];	/* Genomic accession */
    unsigned tStart;	/* Start of alignment in genomic */
    unsigned tEnd;	/* End of alignment in genomic */
    unsigned tSize;	/* Total genomic size */
    unsigned blockCount;	/* Number of blocks in alignment */
    unsigned *blockSizes;	/* Size of each block. */
    unsigned *qBlockStarts;	/* Start of each block in mRNA */
    unsigned *tBlockStarts;	/* Start of each block in genomic */
    };

struct psc *pscLoad(char **row);
/* Load a psc from row fetched with select * from psc
 * from database.  Dispose of this with pscFree(). */

struct psc *pscCommaIn(char **pS, struct psc *ret);
/* Create a psc out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new psc */

void pscFree(struct psc **pEl);
/* Free a single dynamically allocated psc such as created
 * with pscLoad(). */

void pscFreeList(struct psc **pList);
/* Free a list of dynamically allocated psc's */

void pscOutput(struct psc *el, FILE *f, char sep, char lastSep);
/* Print out psc.  Separate fields with sep. Follow last field with lastSep. */

#define pscTabOut(el,f) pscOutput(el,f,'\t','\n');
/* Print out psc as a line in a tab-separated file. */

#define pscCommaOut(el,f) pscOutput(el,f,',',',');
/* Print out psc as a comma separated list including final comma. */

#endif /* AS_PSC_H */

