/* chromGraph.h was originally generated by the autoSql program, which also 
 * generated chromGraph.c and chromGraph.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef CHROMGRAPH_H
#define CHROMGRAPH_H

#ifndef TRACKDB_H
#include "trackDb.h"
#endif

#ifndef CART_H
#include "cart.h"
#endif

#define CHROMGRAPH_NUM_COLS 3

struct chromGraph
/* A graph over a chromosome - best used for low resolution graphs */
    {
    struct chromGraph *next;  /* Next in singly linked list. */
    char *chrom;	/* Chromosome */
    int chromStart;	/* Start coordinate */
    double val;	/* Value at coordinate */
    };

void chromGraphStaticLoad(char **row, struct chromGraph *ret);
/* Load a row from chromGraph table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct chromGraph *chromGraphLoad(char **row);
/* Load a chromGraph from row fetched with select * from chromGraph
 * from database.  Dispose of this with chromGraphFree(). */

struct chromGraph *chromGraphLoadAll(char *fileName);
/* Load all chromGraph from whitespace-separated file.
 * Dispose of this with chromGraphFreeList(). */

struct chromGraph *chromGraphLoadAllByChar(char *fileName, char chopper);
/* Load all chromGraph from chopper separated file.
 * Dispose of this with chromGraphFreeList(). */

#define chromGraphLoadAllByTab(a) chromGraphLoadAllByChar(a, '\t');
/* Load all chromGraph from tab separated file.
 * Dispose of this with chromGraphFreeList(). */

struct chromGraph *chromGraphCommaIn(char **pS, struct chromGraph *ret);
/* Create a chromGraph out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new chromGraph */

void chromGraphFree(struct chromGraph **pEl);
/* Free a single dynamically allocated chromGraph such as created
 * with chromGraphLoad(). */

void chromGraphFreeList(struct chromGraph **pList);
/* Free a list of dynamically allocated chromGraph's */

void chromGraphOutput(struct chromGraph *el, FILE *f, char sep, char lastSep);
/* Print out chromGraph.  Separate fields with sep. Follow last field with lastSep. */

#define chromGraphTabOut(el,f) chromGraphOutput(el,f,'\t','\n');
/* Print out chromGraph as a line in a tab-separated file. */

#define chromGraphCommaOut(el,f) chromGraphOutput(el,f,',',',');
/* Print out chromGraph as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

int chromGraphCmp(const void *va, const void *vb);
/* Compare to sort based on query chromStart. */

struct chromGraphSettings
/* Settings */
    {
    int maxGapToFill;		/* Maximum gap to fill with line */
    double minVal, maxVal;	/* Max/min data range */
    int linesAtCount;		/* Number of horizontal labeling lines */
    double *linesAt;		/* Data values to label with horizontal line */
    int minPixels;		/* Minimum allowed pixels. */
    int pixels;			/* Actual pixels. */
    int maxPixels;		/* Maximum allowed pixels. */
    };

struct chromGraphSettings *chromGraphSettingsGet(char *trackName,
	struct sqlConnection *conn, struct trackDb *tdb, struct cart *cart);
/* Get settings for chromGraph track.  If you pass in all NULLs
 * you'll get a reasonable default. */

#define chromGraphVarNameMaxSize 512

void chromGraphVarName(char *track, char *var, 
	char output[chromGraphVarNameMaxSize]);
/* Fill in output with name of cart variable. */

void chromGraphDataRange(char *trackName, struct sqlConnection *conn,
	double *retMin, double *retMax);
/* Get min/max values observed from metaChromGraph table */
	

#endif /* CHROMGRAPH_H */

