/* cutters.h was originally generated by the autoSql program, which also 
 * generated cutters.c and cutters.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef CUTTERS_H
#define CUTTERS_H

#ifndef DNASEQ_H
#include "dnaseq.h"
#endif

#ifndef JKSQL_H
#include "jksql.h"
#endif

#define CUTTERS_NUM_COLS 14

struct cutters
/* Restriction Enzymes */
    {
    struct cutters *next;  /* Next in singly linked list. */
    char *name;	/* Name of Enzyme */
    unsigned size;	/* Size of recognition sequence */
    unsigned matchSize;	/* size without N's */
    char *seq;	/* Recognition sequence */
    unsigned cut;	/* Cut site on the plus strand */
    int overhang;	/* Overhang */
    unsigned char palindromic;	/* 1 if it's panlidromic, 0 if not. */
    unsigned char semicolon;	/* 1 if it's from a REBASE record that has a semicolon in front, 0 if not. */
    unsigned numSciz;	/* Number of isoscizomers */
    char **scizs;	/* Names of isosizomers */
    unsigned numCompanies;	/* Number of companies selling this enzyme */
    char *companies;	/* Company letters */
    unsigned numRefs;	/* Number of references */
    unsigned *refs;	/* Reference numbers */
    };

struct cutters *cuttersLoad(char **row);
/* Load a cutters from row fetched with select * from cutters
 * from database.  Dispose of this with cuttersFree(). */

struct cutters *cuttersLoadAll(char *fileName);
/* Load all cutters from whitespace-separated file.
 * Dispose of this with cuttersFreeList(). */

struct cutters *cuttersLoadAllByChar(char *fileName, char chopper);
/* Load all cutters from chopper separated file.
 * Dispose of this with cuttersFreeList(). */

#define cuttersLoadAllByTab(a) cuttersLoadAllByChar(a, '\t');
/* Load all cutters from tab separated file.
 * Dispose of this with cuttersFreeList(). */

struct cutters *cuttersLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all cutters from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with cuttersFreeList(). */

void cuttersSaveToDb(struct sqlConnection *conn, struct cutters *el, char *tableName, int updateSize);
/* Save cutters as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use cuttersSaveToDbEscaped() */

void cuttersSaveToDbEscaped(struct sqlConnection *conn, struct cutters *el, char *tableName, int updateSize);
/* Save cutters as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than cuttersSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct cutters *cuttersCommaIn(char **pS, struct cutters *ret);
/* Create a cutters out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new cutters */

void cuttersFree(struct cutters **pEl);
/* Free a single dynamically allocated cutters such as created
 * with cuttersLoad(). */

void cuttersFreeList(struct cutters **pList);
/* Free a list of dynamically allocated cutters's */

void cuttersOutput(struct cutters *el, FILE *f, char sep, char lastSep);
/* Print out cutters.  Separate fields with sep. Follow last field with lastSep. */

#define cuttersTabOut(el,f) cuttersOutput(el,f,'\t','\n');
/* Print out cutters as a line in a tab-separated file. */

#define cuttersCommaOut(el,f) cuttersOutput(el,f,',',',');
/* Print out cutters as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

struct cutters *readGcg(char *gcgFile);
/* Parse a GCG file and load it into cutters format. */

#endif /* CUTTERS_H */

