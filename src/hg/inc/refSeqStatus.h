/* refSeqStatus.h was originally generated by the autoSql program, which also 
 * generated refSeqStatus.c and refSeqStatus.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef REFSEQSTATUS_H
#define REFSEQSTATUS_H

struct refSeqStatus
/* RefSeq Gene Status. */
    {
    struct refSeqStatus *next;  /* Next in singly linked list. */
    char *mrnaAcc;	/* RefSeq gene accession name */
    char *status;	/* Status (Reviewed, Provisional, Predicted) */
    };

void refSeqStatusStaticLoad(char **row, struct refSeqStatus *ret);
/* Load a row from refSeqStatus table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct refSeqStatus *refSeqStatusLoad(char **row);
/* Load a refSeqStatus from row fetched with select * from refSeqStatus
 * from database.  Dispose of this with refSeqStatusFree(). */

struct refSeqStatus *refSeqStatusLoadAll(char *fileName);
/* Load all refSeqStatus from a tab-separated file.
 * Dispose of this with refSeqStatusFreeList(). */

struct refSeqStatus *refSeqStatusLoadWhere(struct sqlConnection *conn, char *table, char *where);
/* Load all refSeqStatus from table that satisfy where clause. The
 * where clause may be NULL in which case whole table is loaded
 * Dispose of this with refSeqStatusFreeList(). */

struct refSeqStatus *refSeqStatusCommaIn(char **pS, struct refSeqStatus *ret);
/* Create a refSeqStatus out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new refSeqStatus */

void refSeqStatusFree(struct refSeqStatus **pEl);
/* Free a single dynamically allocated refSeqStatus such as created
 * with refSeqStatusLoad(). */

void refSeqStatusFreeList(struct refSeqStatus **pList);
/* Free a list of dynamically allocated refSeqStatus's */

void refSeqStatusOutput(struct refSeqStatus *el, FILE *f, char sep, char lastSep);
/* Print out refSeqStatus.  Separate fields with sep. Follow last field with lastSep. */

#define refSeqStatusTabOut(el,f) refSeqStatusOutput(el,f,'\t','\n');
/* Print out refSeqStatus as a line in a tab-separated file. */

#define refSeqStatusCommaOut(el,f) refSeqStatusOutput(el,f,',',',');
/* Print out refSeqStatus as a comma separated list including final comma. */

#endif /* REFSEQSTATUS_H */

