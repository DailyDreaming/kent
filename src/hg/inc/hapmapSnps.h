/* hapmapSnps.h was originally generated by the autoSql program, which also 
 * generated hapmapSnps.c and hapmapSnps.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef HAPMAPSNPS_H
#define HAPMAPSNPS_H

#ifndef JKSQL_H
#include "jksql.h"
#endif

#define HAPMAPSNP_NUM_COLS 17

struct hapmapSnp
/* HapMap primate alleles and population specific derived allele frequencies */
    {
    struct hapmapSnp *next;  /* Next in singly linked list. */
    char *chrom;	/* Chromosome */
    unsigned chromStart;	/* Start position in chrom */
    unsigned chromEnd;	/* End position in chrom */
    char *name;	/* Reference SNP identifier or Affy SNP name */
    unsigned score;	/* Not used */
    char strand[2];	/* Which DNA strand contains the observed alleles */
    char hReference[2];	/* Human reference base */
    char hOther[2];	/* Human other base */
    char cBase[2];	/* chimp base */
    char rBase[2];	/* rhesus base */
    unsigned cQual;	/* chimp quality score */
    unsigned rQual;	/* rhesus quality score */
    float ceu;	/* Derived allele frequency for the CEU population */
    float chb;	/* Derived allele frequency for the CHB population */
    float jpt;	/* Derived allele frequency for the JPT population */
    float jptchb;	/* Derived allele frequency for the JPT+CHB population */
    float yri;	/* Derived allele frequency for the YRI population */
    };

void hapmapSnpStaticLoad(char **row, struct hapmapSnp *ret);
/* Load a row from hapmapSnp table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct hapmapSnp *hapmapSnpLoad(char **row);
/* Load a hapmapSnp from row fetched with select * from hapmapSnp
 * from database.  Dispose of this with hapmapSnpFree(). */

struct hapmapSnp *hapmapSnpLoadAll(char *fileName);
/* Load all hapmapSnp from whitespace-separated file.
 * Dispose of this with hapmapSnpFreeList(). */

struct hapmapSnp *hapmapSnpLoadAllByChar(char *fileName, char chopper);
/* Load all hapmapSnp from chopper separated file.
 * Dispose of this with hapmapSnpFreeList(). */

#define hapmapSnpLoadAllByTab(a) hapmapSnpLoadAllByChar(a, '\t');
/* Load all hapmapSnp from tab separated file.
 * Dispose of this with hapmapSnpFreeList(). */

struct hapmapSnp *hapmapSnpLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all hapmapSnp from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with hapmapSnpFreeList(). */

void hapmapSnpSaveToDb(struct sqlConnection *conn, struct hapmapSnp *el, char *tableName, int updateSize);
/* Save hapmapSnp as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use hapmapSnpSaveToDbEscaped() */

void hapmapSnpSaveToDbEscaped(struct sqlConnection *conn, struct hapmapSnp *el, char *tableName, int updateSize);
/* Save hapmapSnp as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than hapmapSnpSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct hapmapSnp *hapmapSnpCommaIn(char **pS, struct hapmapSnp *ret);
/* Create a hapmapSnp out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new hapmapSnp */

void hapmapSnpFree(struct hapmapSnp **pEl);
/* Free a single dynamically allocated hapmapSnp such as created
 * with hapmapSnpLoad(). */

void hapmapSnpFreeList(struct hapmapSnp **pList);
/* Free a list of dynamically allocated hapmapSnp's */

void hapmapSnpOutput(struct hapmapSnp *el, FILE *f, char sep, char lastSep);
/* Print out hapmapSnp.  Separate fields with sep. Follow last field with lastSep. */

#define hapmapSnpTabOut(el,f) hapmapSnpOutput(el,f,'\t','\n');
/* Print out hapmapSnp as a line in a tab-separated file. */

#define hapmapSnpCommaOut(el,f) hapmapSnpOutput(el,f,',',',');
/* Print out hapmapSnp as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* HAPMAPSNPS_H */

