/* hapmapSnps.h was originally generated by the autoSql program, which also 
 * generated hapmapSnps.c and hapmapSnps.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef HAPMAPSNPS_H
#define HAPMAPSNPS_H

#ifndef JKSQL_H
#include "jksql.h"
#endif

#define HAPMAPSNPS_NUM_COLS 27

struct hapmapSnps
/* HapMap allele counts by population and derived alleles */
    {
    struct hapmapSnps *next;  /* Next in singly linked list. */
    char *chrom;	/* Chromosome */
    unsigned chromStart;	/* Start position in chrom (0 based) */
    unsigned chromEnd;	/* End position in chrom (1 based) */
    char *name;	/* Reference SNP identifier from dbSnp */
    unsigned score;	/* Not used */
    char strand[2];	/* Which genomic strand contains the observed alleles */
    char hReference[2];	/* Reference allele for human */
    char hOther[2];	/* Other allele for human */
    char cState[2];	/* Chimp state */
    char rState[2];	/* Rhesus state */
    unsigned cQual;	/* chimp quality score */
    unsigned rQual;	/* rhesus quality score */
    unsigned rYri;	/* Reference allele count for the YRI population */
    unsigned rCeu;	/* Reference allele count for the CEU population */
    unsigned rChb;	/* Reference allele count for the CHB population */
    unsigned rJpt;	/* Reference allele count for the JPT population */
    unsigned rJptChb;	/* Reference allele count for the JPT+CHB population */
    unsigned oYri;	/* Other allele count for the YRI population */
    unsigned oCeu;	/* Other allele count for the CEU population */
    unsigned oChb;	/* Other allele count for the CHB population */
    unsigned oJpt;	/* Other allele count for the JPT population */
    unsigned oJptChb;	/* Other allele count for the JPT+CHB population */
    unsigned nYri;	/* Sample Size for the YRI population */
    unsigned nCeu;	/* Sample Size for the CEU population */
    unsigned nChb;	/* Sample Size for the CHB population */
    unsigned nJpt;	/* Sample Size for the JPT population */
    unsigned nJptChb;	/* Sample Size for the JPT+CHB population */
    };

void hapmapSnpsStaticLoad(char **row, struct hapmapSnps *ret);
/* Load a row from hapmapSnps table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct hapmapSnps *hapmapSnpsLoad(char **row);
/* Load a hapmapSnps from row fetched with select * from hapmapSnps
 * from database.  Dispose of this with hapmapSnpsFree(). */

struct hapmapSnps *hapmapSnpsLoadAll(char *fileName);
/* Load all hapmapSnps from whitespace-separated file.
 * Dispose of this with hapmapSnpsFreeList(). */

struct hapmapSnps *hapmapSnpsLoadAllByChar(char *fileName, char chopper);
/* Load all hapmapSnps from chopper separated file.
 * Dispose of this with hapmapSnpsFreeList(). */

#define hapmapSnpsLoadAllByTab(a) hapmapSnpsLoadAllByChar(a, '\t');
/* Load all hapmapSnps from tab separated file.
 * Dispose of this with hapmapSnpsFreeList(). */

struct hapmapSnps *hapmapSnpsLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all hapmapSnps from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with hapmapSnpsFreeList(). */

void hapmapSnpsSaveToDb(struct sqlConnection *conn, struct hapmapSnps *el, char *tableName, int updateSize);
/* Save hapmapSnps as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use hapmapSnpsSaveToDbEscaped() */

void hapmapSnpsSaveToDbEscaped(struct sqlConnection *conn, struct hapmapSnps *el, char *tableName, int updateSize);
/* Save hapmapSnps as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than hapmapSnpsSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct hapmapSnps *hapmapSnpsCommaIn(char **pS, struct hapmapSnps *ret);
/* Create a hapmapSnps out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new hapmapSnps */

void hapmapSnpsFree(struct hapmapSnps **pEl);
/* Free a single dynamically allocated hapmapSnps such as created
 * with hapmapSnpsLoad(). */

void hapmapSnpsFreeList(struct hapmapSnps **pList);
/* Free a list of dynamically allocated hapmapSnps's */

void hapmapSnpsOutput(struct hapmapSnps *el, FILE *f, char sep, char lastSep);
/* Print out hapmapSnps.  Separate fields with sep. Follow last field with lastSep. */

#define hapmapSnpsTabOut(el,f) hapmapSnpsOutput(el,f,'\t','\n');
/* Print out hapmapSnps as a line in a tab-separated file. */

#define hapmapSnpsCommaOut(el,f) hapmapSnpsOutput(el,f,',',',');
/* Print out hapmapSnps as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* HAPMAPSNPS_H */

