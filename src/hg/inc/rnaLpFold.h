/* rnaLpFold.h was originally generated by the autoSql program, which also 
 * generated rnaLpFold.c and rnaLpFold.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef RNALPFOLD_H
#define RNALPFOLD_H

#ifndef JKSQL_H
#include "jksql.h"
#endif

#define RNALPFOLD_NUM_COLS 5

struct rnaLpFold
/* RNA Lp Fold -- Local Partition Function Fold */
    {
    struct rnaLpFold *next;  /* Next in singly linked list. */
    char *chrom;	/* Reference sequence chromosome or scaffold */
    unsigned chromStart;	/* chromStart for reference marker */
    unsigned chromEnd;	/* chromEnd for last marker in list */
    unsigned score;	/* Number of positions with LpFold values */
    char *colorIndex;	/* Lp Fold values encoded as indexes in a color array */
    };

void rnaLpFoldStaticLoad(char **row, struct rnaLpFold *ret);
/* Load a row from rnaLpFold table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct rnaLpFold *rnaLpFoldLoad(char **row);
/* Load a rnaLpFold from row fetched with select * from rnaLpFold
 * from database.  Dispose of this with rnaLpFoldFree(). */

struct rnaLpFold *rnaLpFoldLoadAll(char *fileName);
/* Load all rnaLpFold from whitespace-separated file.
 * Dispose of this with rnaLpFoldFreeList(). */

struct rnaLpFold *rnaLpFoldLoadAllByChar(char *fileName, char chopper);
/* Load all rnaLpFold from chopper separated file.
 * Dispose of this with rnaLpFoldFreeList(). */

#define rnaLpFoldLoadAllByTab(a) rnaLpFoldLoadAllByChar(a, '\t');
/* Load all rnaLpFold from tab separated file.
 * Dispose of this with rnaLpFoldFreeList(). */

struct rnaLpFold *rnaLpFoldLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all rnaLpFold from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with rnaLpFoldFreeList(). */

void rnaLpFoldSaveToDb(struct sqlConnection *conn, struct rnaLpFold *el, char *tableName, int updateSize);
/* Save rnaLpFold as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use rnaLpFoldSaveToDbEscaped() */

void rnaLpFoldSaveToDbEscaped(struct sqlConnection *conn, struct rnaLpFold *el, char *tableName, int updateSize);
/* Save rnaLpFold as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than rnaLpFoldSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct rnaLpFold *rnaLpFoldCommaIn(char **pS, struct rnaLpFold *ret);
/* Create a rnaLpFold out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new rnaLpFold */

void rnaLpFoldFree(struct rnaLpFold **pEl);
/* Free a single dynamically allocated rnaLpFold such as created
 * with rnaLpFoldLoad(). */

void rnaLpFoldFreeList(struct rnaLpFold **pList);
/* Free a list of dynamically allocated rnaLpFold's */

void rnaLpFoldOutput(struct rnaLpFold *el, FILE *f, char sep, char lastSep);
/* Print out rnaLpFold.  Separate fields with sep. Follow last field with lastSep. */

#define rnaLpFoldTabOut(el,f) rnaLpFoldOutput(el,f,'\t','\n');
/* Print out rnaLpFold as a line in a tab-separated file. */

#define rnaLpFoldCommaOut(el,f) rnaLpFoldOutput(el,f,',',',');
/* Print out rnaLpFold as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* RNALPFOLD_H */

