/* netGap.h was originally generated by the autoSql program, which also 
 * generated netGap.c and netGap.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef NETGAP_H
#define NETGAP_H

struct netGap
/* gap portion of net file */
    {
    struct netGap *next;  /* Next in singly linked list. */
    char *chrom;	/* gap on Chrom */
    unsigned level;	/* Level of alignment */
    unsigned chromStart;	/* Start of gap */
    unsigned chromEnd;	/* End of gap */
    };

void netGapStaticLoad(char **row, struct netGap *ret);
/* Load a row from netGap table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct netGap *netGapLoad(char **row);
/* Load a netGap from row fetched with select * from netGap
 * from database.  Dispose of this with netGapFree(). */

struct netGap *netGapLoadAll(char *fileName);
/* Load all netGap from a tab-separated file.
 * Dispose of this with netGapFreeList(). */

struct netGap *netGapLoadWhere(struct sqlConnection *conn, char *table, char *where);
/* Load all netGap from table that satisfy where clause. The
 * where clause may be NULL in which case whole table is loaded
 * Dispose of this with netGapFreeList(). */

struct netGap *netGapCommaIn(char **pS, struct netGap *ret);
/* Create a netGap out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new netGap */

void netGapFree(struct netGap **pEl);
/* Free a single dynamically allocated netGap such as created
 * with netGapLoad(). */

void netGapFreeList(struct netGap **pList);
/* Free a list of dynamically allocated netGap's */

void netGapOutput(struct netGap *el, FILE *f, char sep, char lastSep);
/* Print out netGap.  Separate fields with sep. Follow last field with lastSep. */

#define netGapTabOut(el,f) netGapOutput(el,f,'\t','\n');
/* Print out netGap as a line in a tab-separated file. */

#define netGapCommaOut(el,f) netGapOutput(el,f,',',',');
/* Print out netGap as a comma separated list including final comma. */

#endif /* NETGAP_H */

