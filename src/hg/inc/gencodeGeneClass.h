/* gencodeGeneClass.h was originally generated by the autoSql program, which also 
 * generated gencodeGeneClass.c and gencodeGeneClass.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef GENCODEGENECLASS_H
#define GENCODEGENECLASS_H

#ifndef JKSQL_H
#include "jksql.h"
#endif

#define GENCODEGENECLASS_NUM_COLS 2

struct gencodeGeneClass
/* Class for Gencode genes */
    {
    struct gencodeGeneClass *next;  /* Next in singly linked list. */
    char *name;	/* Transcript ID for Gencode gene */
    char *class;	/* Class of gene.  enum('Antisense', 'Antisense_val', 'Artifact', 'Known', 'Novel_CDS', 'Novel_transcript', 'Novel_transcript_val', 'Putative', 'Putative_val', 'TEC', 'Processed_pseudogene', 'Unprocessed_pseudogene', 'Pseudogene_fragment', 'Undefined') */
    };

void gencodeGeneClassStaticLoad(char **row, struct gencodeGeneClass *ret);
/* Load a row from gencodeGeneClass table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct gencodeGeneClass *gencodeGeneClassLoad(char **row);
/* Load a gencodeGeneClass from row fetched with select * from gencodeGeneClass
 * from database.  Dispose of this with gencodeGeneClassFree(). */

struct gencodeGeneClass *gencodeGeneClassLoadAll(char *fileName);
/* Load all gencodeGeneClass from whitespace-separated file.
 * Dispose of this with gencodeGeneClassFreeList(). */

struct gencodeGeneClass *gencodeGeneClassLoadAllByChar(char *fileName, char chopper);
/* Load all gencodeGeneClass from chopper separated file.
 * Dispose of this with gencodeGeneClassFreeList(). */

#define gencodeGeneClassLoadAllByTab(a) gencodeGeneClassLoadAllByChar(a, '\t');
/* Load all gencodeGeneClass from tab separated file.
 * Dispose of this with gencodeGeneClassFreeList(). */

struct gencodeGeneClass *gencodeGeneClassLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all gencodeGeneClass from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with gencodeGeneClassFreeList(). */

void gencodeGeneClassSaveToDb(struct sqlConnection *conn, struct gencodeGeneClass *el, char *tableName, int updateSize);
/* Save gencodeGeneClass as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use gencodeGeneClassSaveToDbEscaped() */

void gencodeGeneClassSaveToDbEscaped(struct sqlConnection *conn, struct gencodeGeneClass *el, char *tableName, int updateSize);
/* Save gencodeGeneClass as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than gencodeGeneClassSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct gencodeGeneClass *gencodeGeneClassCommaIn(char **pS, struct gencodeGeneClass *ret);
/* Create a gencodeGeneClass out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new gencodeGeneClass */

void gencodeGeneClassFree(struct gencodeGeneClass **pEl);
/* Free a single dynamically allocated gencodeGeneClass such as created
 * with gencodeGeneClassLoad(). */

void gencodeGeneClassFreeList(struct gencodeGeneClass **pList);
/* Free a list of dynamically allocated gencodeGeneClass's */

void gencodeGeneClassOutput(struct gencodeGeneClass *el, FILE *f, char sep, char lastSep);
/* Print out gencodeGeneClass.  Separate fields with sep. Follow last field with lastSep. */

#define gencodeGeneClassTabOut(el,f) gencodeGeneClassOutput(el,f,'\t','\n');
/* Print out gencodeGeneClass as a line in a tab-separated file. */

#define gencodeGeneClassCommaOut(el,f) gencodeGeneClassOutput(el,f,',',',');
/* Print out gencodeGeneClass as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* GENCODEGENECLASS_H */

