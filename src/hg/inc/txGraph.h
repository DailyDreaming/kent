/* txGraph.h was originally generated by the autoSql program, which also 
 * generated txGraph.c and txGraph.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef TXGRAPH_H
#define TXGRAPH_H

#define TXGRAPH_NUM_COLS 18

struct txGraph
/* A transcription graph. Includes alt-splicing info. */
    {
    struct txGraph *next;  /* Next in singly linked list. */
    char *tName;	/* name of target sequence, often a chrom. */
    int tStart;	/* First bac touched by graph. */
    int tEnd;	/* Start position in first bac. */
    char *name;	/* Human readable name. */
    unsigned id;	/* Unique ID. */
    char strand[3];	/* + or - strand. */
    unsigned vertexCount;	/* Number of vertices in graph. */
    unsigned char *vTypes;	/* Type for each vertex. */
    int *vPositions;	/* Position in target for each vertex. */
    unsigned edgeCount;	/* Number of edges in graph. */
    int *edgeStarts;	/* Array with start vertex of edges. */
    int *edgeEnds;	/* Array with end vertex of edges. */
    struct txEvList *evidence;	/* array of evidence tables containing references to mRNAs that support a particular edge. */
    int *edgeTypes;	/* Type for each edge, ggExon, ggIntron, etc. */
    int mrnaRefCount;	/* Number of supporting mRNAs. */
    char **mrnaRefs;	/* Ids of mrnas supporting this. */
    int *mrnaTissues;	/* Ids of tissues that mrnas come from, indexes into tissue table */
    int *mrnaLibs;	/* Ids of libraries that mrnas come from, indexes into library table */
    };

struct txGraph *txGraphLoad(char **row);
/* Load a txGraph from row fetched with select * from txGraph
 * from database.  Dispose of this with txGraphFree(). */

struct txGraph *txGraphLoadAll(char *fileName);
/* Load all txGraph from whitespace-separated file.
 * Dispose of this with txGraphFreeList(). */

struct txGraph *txGraphLoadAllByChar(char *fileName, char chopper);
/* Load all txGraph from chopper separated file.
 * Dispose of this with txGraphFreeList(). */

#define txGraphLoadAllByTab(a) txGraphLoadAllByChar(a, '\t');
/* Load all txGraph from tab separated file.
 * Dispose of this with txGraphFreeList(). */

struct txGraph *txGraphCommaIn(char **pS, struct txGraph *ret);
/* Create a txGraph out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new txGraph */

void txGraphFree(struct txGraph **pEl);
/* Free a single dynamically allocated txGraph such as created
 * with txGraphLoad(). */

void txGraphFreeList(struct txGraph **pList);
/* Free a list of dynamically allocated txGraph's */

void txGraphOutput(struct txGraph *el, FILE *f, char sep, char lastSep);
/* Print out txGraph.  Separate fields with sep. Follow last field with lastSep. */

#define txGraphTabOut(el,f) txGraphOutput(el,f,'\t','\n');
/* Print out txGraph as a line in a tab-separated file. */

#define txGraphCommaOut(el,f) txGraphOutput(el,f,',',',');
/* Print out txGraph as a comma separated list including final comma. */

#define TXEVLIST_NUM_COLS 2

struct txEvList
/* List of mRNA/ests supporting a given edge */
    {
    struct txEvList *next;  /* Next in singly linked list. */
    int evCount;	/* number of ests evidence */
    struct txEvidence *evList;	/* ids of mrna evidence, indexes into altGraphx->mrnaRefs */
    };

struct txEvList *txEvListCommaIn(char **pS, struct txEvList *ret);
/* Create a txEvList out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new txEvList */

void txEvListFree(struct txEvList **pEl);
/* Free a single dynamically allocated txEvList such as created
 * with txEvListLoad(). */

void txEvListFreeList(struct txEvList **pList);
/* Free a list of dynamically allocated txEvList's */

void txEvListOutput(struct txEvList *el, FILE *f, char sep, char lastSep);
/* Print out txEvList.  Separate fields with sep. Follow last field with lastSep. */

#define txEvListTabOut(el,f) txEvListOutput(el,f,'\t','\n');
/* Print out txEvList as a line in a tab-separated file. */

#define txEvListCommaOut(el,f) txEvListOutput(el,f,',',',');
/* Print out txEvList as a comma separated list including final comma. */

#define TXEVIDENCE_NUM_COLS 3

struct txEvidence
/* Information on evidence for an edge. */
    {
    struct txEvidence *next;  /* Next in singly linked list. */
    int mrnaId;	/* Id (index) in mRNA list */
    int start;	/* Start position */
    int end;	/* End position */
    };

struct txEvidence *txEvidenceCommaIn(char **pS, struct txEvidence *ret);
/* Create a txEvidence out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new txEvidence */

void txEvidenceFree(struct txEvidence **pEl);
/* Free a single dynamically allocated txEvidence such as created
 * with txEvidenceLoad(). */

void txEvidenceFreeList(struct txEvidence **pList);
/* Free a list of dynamically allocated txEvidence's */

void txEvidenceOutput(struct txEvidence *el, FILE *f, char sep, char lastSep);
/* Print out txEvidence.  Separate fields with sep. Follow last field with lastSep. */

#define txEvidenceTabOut(el,f) txEvidenceOutput(el,f,'\t','\n');
/* Print out txEvidence as a line in a tab-separated file. */

#define txEvidenceCommaOut(el,f) txEvidenceOutput(el,f,',',',');
/* Print out txEvidence as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* TXGRAPH_H */

