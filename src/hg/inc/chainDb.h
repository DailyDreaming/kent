/* chain.h was originally generated by the autoSql program, which also 
 * generated chain.c and chain.sql.  This header links the database and
 * the RAM representation of objects. 
 *
 * Note that this was built after the 'chainBlock' routine, which
 * was developed around a flat .chain file which is structured
 * fairly differently than the database table.   However this
 * module does refer to the same chain structure as is in chainBlock.*/

#ifndef CHAIN_H
#define CHAIN_H

#ifndef CHAINBLOCK_H
#include "chainBlock.h"
#endif

void chainStaticLoad(char **row, struct chain *ret);
/* Load a row from chain table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct chain *chainLoad(char **row);
/* Load a chain from row fetched with select * from chain
 * from database.  Dispose of this with chainFree(). */

struct chain *chainLoadAll(char *fileName);
/* Load all chain from a tab-separated file.
 * Dispose of this with chainFreeList(). */

struct chain *chainCommaIn(char **pS, struct chain *ret);
/* Create a chain out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new chain */

void chainFree(struct chain **pEl);
/* Free a single dynamically allocated chain such as created
 * with chainLoad(). */

void chainFreeList(struct chain **pList);
/* Free a list of dynamically allocated chain's */

void chainOutput(struct chain *el, FILE *f, char sep, char lastSep);
/* Print out chain.  Separate fields with sep. Follow last field with lastSep. */

#define chainTabOut(el,f) chainOutput(el,f,'\t','\n');
/* Print out chain as a line in a tab-separated file. */

#define chainCommaOut(el,f) chainOutput(el,f,',',',');
/* Print out chain as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* CHAIN_H */

