/* humPhen.h was originally generated by the autoSql program, which also 
 * generated humPhen.c and humPhen.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef HUMPHEN_H
#define HUMPHEN_H

#ifndef JKSQL_H
#include "jksql.h"
#endif

#define HUMANPHENOTYPELSDB_NUM_COLS 9

struct humanPhenotypeLSDB
/* subtrack for human phenotype data from locus specific databases */
    {
    struct humanPhenotypeLSDB *next;  /* Next in singly linked list. */
    unsigned short bin;	/* A field to speed indexing */
    char *chrom;	/* Chromosome */
    unsigned chromStart;	/* Start position in chrom */
    unsigned chromEnd;	/* End position in chrom */
    char *name;	/* HGVS description of mutation. */
    char *dbId;	/* Db ID list (comma sep.) matching keys below */
    char *linkDbs;	/* Database keys which can link to this variant, comma sep. */
    char *baseChangeType;	/* enum('insertion', 'deletion', 'substitution','duplication','complex','unknown'). */
    char *location;	/* enum('intron', 'exon', '5'' UTR', '3'' UTR', 'not within known transcription unit'). */
    };

void humanPhenotypeLSDBStaticLoad(char **row, struct humanPhenotypeLSDB *ret);
/* Load a row from humanPhenotypeLSDB table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct humanPhenotypeLSDB *humanPhenotypeLSDBLoad(char **row);
/* Load a humanPhenotypeLSDB from row fetched with select * from humanPhenotypeLSDB
 * from database.  Dispose of this with humanPhenotypeLSDBFree(). */

struct humanPhenotypeLSDB *humanPhenotypeLSDBLoadAll(char *fileName);
/* Load all humanPhenotypeLSDB from whitespace-separated file.
 * Dispose of this with humanPhenotypeLSDBFreeList(). */

struct humanPhenotypeLSDB *humanPhenotypeLSDBLoadAllByChar(char *fileName, char chopper);
/* Load all humanPhenotypeLSDB from chopper separated file.
 * Dispose of this with humanPhenotypeLSDBFreeList(). */

#define humanPhenotypeLSDBLoadAllByTab(a) humanPhenotypeLSDBLoadAllByChar(a, '\t');
/* Load all humanPhenotypeLSDB from tab separated file.
 * Dispose of this with humanPhenotypeLSDBFreeList(). */

struct humanPhenotypeLSDB *humanPhenotypeLSDBLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all humanPhenotypeLSDB from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with humanPhenotypeLSDBFreeList(). */

void humanPhenotypeLSDBSaveToDb(struct sqlConnection *conn, struct humanPhenotypeLSDB *el, char *tableName, int updateSize);
/* Save humanPhenotypeLSDB as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use humanPhenotypeLSDBSaveToDbEscaped() */

void humanPhenotypeLSDBSaveToDbEscaped(struct sqlConnection *conn, struct humanPhenotypeLSDB *el, char *tableName, int updateSize);
/* Save humanPhenotypeLSDB as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than humanPhenotypeLSDBSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct humanPhenotypeLSDB *humanPhenotypeLSDBCommaIn(char **pS, struct humanPhenotypeLSDB *ret);
/* Create a humanPhenotypeLSDB out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new humanPhenotypeLSDB */

void humanPhenotypeLSDBFree(struct humanPhenotypeLSDB **pEl);
/* Free a single dynamically allocated humanPhenotypeLSDB such as created
 * with humanPhenotypeLSDBLoad(). */

void humanPhenotypeLSDBFreeList(struct humanPhenotypeLSDB **pList);
/* Free a list of dynamically allocated humanPhenotypeLSDB's */

void humanPhenotypeLSDBOutput(struct humanPhenotypeLSDB *el, FILE *f, char sep, char lastSep);
/* Print out humanPhenotypeLSDB.  Separate fields with sep. Follow last field with lastSep. */

#define humanPhenotypeLSDBTabOut(el,f) humanPhenotypeLSDBOutput(el,f,'\t','\n');
/* Print out humanPhenotypeLSDB as a line in a tab-separated file. */

#define humanPhenotypeLSDBCommaOut(el,f) humanPhenotypeLSDBOutput(el,f,',',',');
/* Print out humanPhenotypeLSDB as a comma separated list including final comma. */

#define HUMANPHENOTYPESP_NUM_COLS 9

struct humanPhenotypeSP
/* subtrack for human phenotype data from Swiss-Prot */
    {
    struct humanPhenotypeSP *next;  /* Next in singly linked list. */
    unsigned short bin;	/* A field to speed indexing */
    char *chrom;	/* Chromosome */
    unsigned chromStart;	/* Start position in chrom */
    unsigned chromEnd;	/* End position in chrom */
    char *name;	/* HGVS description of mutation. */
    char *dbId;	/* Db ID list (comma sep.) matching keys below */
    char *linkDbs;	/* Database keys which can link to this variant, comma sep. */
    char *baseChangeType;	/* enum('insertion', 'deletion', 'substitution','duplication','complex','unknown'). */
    char *location;	/* enum('intron', 'exon', '5'' UTR', '3'' UTR', 'not within known transcription unit'). */
    };

void humanPhenotypeSPStaticLoad(char **row, struct humanPhenotypeSP *ret);
/* Load a row from humanPhenotypeSP table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct humanPhenotypeSP *humanPhenotypeSPLoad(char **row);
/* Load a humanPhenotypeSP from row fetched with select * from humanPhenotypeSP
 * from database.  Dispose of this with humanPhenotypeSPFree(). */

struct humanPhenotypeSP *humanPhenotypeSPLoadAll(char *fileName);
/* Load all humanPhenotypeSP from whitespace-separated file.
 * Dispose of this with humanPhenotypeSPFreeList(). */

struct humanPhenotypeSP *humanPhenotypeSPLoadAllByChar(char *fileName, char chopper);
/* Load all humanPhenotypeSP from chopper separated file.
 * Dispose of this with humanPhenotypeSPFreeList(). */

#define humanPhenotypeSPLoadAllByTab(a) humanPhenotypeSPLoadAllByChar(a, '\t');
/* Load all humanPhenotypeSP from tab separated file.
 * Dispose of this with humanPhenotypeSPFreeList(). */

struct humanPhenotypeSP *humanPhenotypeSPLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all humanPhenotypeSP from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with humanPhenotypeSPFreeList(). */

void humanPhenotypeSPSaveToDb(struct sqlConnection *conn, struct humanPhenotypeSP *el, char *tableName, int updateSize);
/* Save humanPhenotypeSP as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use humanPhenotypeSPSaveToDbEscaped() */

void humanPhenotypeSPSaveToDbEscaped(struct sqlConnection *conn, struct humanPhenotypeSP *el, char *tableName, int updateSize);
/* Save humanPhenotypeSP as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than humanPhenotypeSPSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct humanPhenotypeSP *humanPhenotypeSPCommaIn(char **pS, struct humanPhenotypeSP *ret);
/* Create a humanPhenotypeSP out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new humanPhenotypeSP */

void humanPhenotypeSPFree(struct humanPhenotypeSP **pEl);
/* Free a single dynamically allocated humanPhenotypeSP such as created
 * with humanPhenotypeSPLoad(). */

void humanPhenotypeSPFreeList(struct humanPhenotypeSP **pList);
/* Free a list of dynamically allocated humanPhenotypeSP's */

void humanPhenotypeSPOutput(struct humanPhenotypeSP *el, FILE *f, char sep, char lastSep);
/* Print out humanPhenotypeSP.  Separate fields with sep. Follow last field with lastSep. */

#define humanPhenotypeSPTabOut(el,f) humanPhenotypeSPOutput(el,f,'\t','\n');
/* Print out humanPhenotypeSP as a line in a tab-separated file. */

#define humanPhenotypeSPCommaOut(el,f) humanPhenotypeSPOutput(el,f,',',',');
/* Print out humanPhenotypeSP as a comma separated list including final comma. */

#define HUMPHENLINK_NUM_COLS 3

struct humPhenLink
/* links for human phenotype detail page */
    {
    struct humPhenLink *next;  /* Next in singly linked list. */
    char *linkDb;	/* Database (key) of variants in humanPhenotype table. */
    char *linkDisplayName;	/* Display name for this link. */
    char *url;	/* url to substitute ID in for links. */
    };

void humPhenLinkStaticLoad(char **row, struct humPhenLink *ret);
/* Load a row from humPhenLink table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct humPhenLink *humPhenLinkLoad(char **row);
/* Load a humPhenLink from row fetched with select * from humPhenLink
 * from database.  Dispose of this with humPhenLinkFree(). */

struct humPhenLink *humPhenLinkLoadAll(char *fileName);
/* Load all humPhenLink from whitespace-separated file.
 * Dispose of this with humPhenLinkFreeList(). */

struct humPhenLink *humPhenLinkLoadAllByChar(char *fileName, char chopper);
/* Load all humPhenLink from chopper separated file.
 * Dispose of this with humPhenLinkFreeList(). */

#define humPhenLinkLoadAllByTab(a) humPhenLinkLoadAllByChar(a, '\t');
/* Load all humPhenLink from tab separated file.
 * Dispose of this with humPhenLinkFreeList(). */

struct humPhenLink *humPhenLinkLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all humPhenLink from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with humPhenLinkFreeList(). */

void humPhenLinkSaveToDb(struct sqlConnection *conn, struct humPhenLink *el, char *tableName, int updateSize);
/* Save humPhenLink as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use humPhenLinkSaveToDbEscaped() */

void humPhenLinkSaveToDbEscaped(struct sqlConnection *conn, struct humPhenLink *el, char *tableName, int updateSize);
/* Save humPhenLink as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than humPhenLinkSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct humPhenLink *humPhenLinkCommaIn(char **pS, struct humPhenLink *ret);
/* Create a humPhenLink out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new humPhenLink */

void humPhenLinkFree(struct humPhenLink **pEl);
/* Free a single dynamically allocated humPhenLink such as created
 * with humPhenLinkLoad(). */

void humPhenLinkFreeList(struct humPhenLink **pList);
/* Free a list of dynamically allocated humPhenLink's */

void humPhenLinkOutput(struct humPhenLink *el, FILE *f, char sep, char lastSep);
/* Print out humPhenLink.  Separate fields with sep. Follow last field with lastSep. */

#define humPhenLinkTabOut(el,f) humPhenLinkOutput(el,f,'\t','\n');
/* Print out humPhenLink as a line in a tab-separated file. */

#define humPhenLinkCommaOut(el,f) humPhenLinkOutput(el,f,',',',');
/* Print out humPhenLink as a comma separated list including final comma. */

#define HUMPHENALIAS_NUM_COLS 2

struct humPhenAlias
/* aliases for mutations in the human phenotype track */
    {
    struct humPhenAlias *next;  /* Next in singly linked list. */
    char *dbId;	/* first db ID from humanPhenotype table. */
    char *name;	/* Another name for the variant. */
    };

void humPhenAliasStaticLoad(char **row, struct humPhenAlias *ret);
/* Load a row from humPhenAlias table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct humPhenAlias *humPhenAliasLoad(char **row);
/* Load a humPhenAlias from row fetched with select * from humPhenAlias
 * from database.  Dispose of this with humPhenAliasFree(). */

struct humPhenAlias *humPhenAliasLoadAll(char *fileName);
/* Load all humPhenAlias from whitespace-separated file.
 * Dispose of this with humPhenAliasFreeList(). */

struct humPhenAlias *humPhenAliasLoadAllByChar(char *fileName, char chopper);
/* Load all humPhenAlias from chopper separated file.
 * Dispose of this with humPhenAliasFreeList(). */

#define humPhenAliasLoadAllByTab(a) humPhenAliasLoadAllByChar(a, '\t');
/* Load all humPhenAlias from tab separated file.
 * Dispose of this with humPhenAliasFreeList(). */

struct humPhenAlias *humPhenAliasLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all humPhenAlias from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with humPhenAliasFreeList(). */

void humPhenAliasSaveToDb(struct sqlConnection *conn, struct humPhenAlias *el, char *tableName, int updateSize);
/* Save humPhenAlias as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use humPhenAliasSaveToDbEscaped() */

void humPhenAliasSaveToDbEscaped(struct sqlConnection *conn, struct humPhenAlias *el, char *tableName, int updateSize);
/* Save humPhenAlias as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than humPhenAliasSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct humPhenAlias *humPhenAliasCommaIn(char **pS, struct humPhenAlias *ret);
/* Create a humPhenAlias out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new humPhenAlias */

void humPhenAliasFree(struct humPhenAlias **pEl);
/* Free a single dynamically allocated humPhenAlias such as created
 * with humPhenAliasLoad(). */

void humPhenAliasFreeList(struct humPhenAlias **pList);
/* Free a list of dynamically allocated humPhenAlias's */

void humPhenAliasOutput(struct humPhenAlias *el, FILE *f, char sep, char lastSep);
/* Print out humPhenAlias.  Separate fields with sep. Follow last field with lastSep. */

#define humPhenAliasTabOut(el,f) humPhenAliasOutput(el,f,'\t','\n');
/* Print out humPhenAlias as a line in a tab-separated file. */

#define humPhenAliasCommaOut(el,f) humPhenAliasOutput(el,f,',',',');
/* Print out humPhenAlias as a comma separated list including final comma. */

#define HUMPHENETHNIC_NUM_COLS 2

struct humPhenEthnic
/* ethnic background or nationality for mutations in the human phenotype track */
    {
    struct humPhenEthnic *next;  /* Next in singly linked list. */
    char *dbId;	/* first db ID from humanPhenotype table. */
    char *ethnic;	/* ethnicity or nationality for the variant. */
    };

void humPhenEthnicStaticLoad(char **row, struct humPhenEthnic *ret);
/* Load a row from humPhenEthnic table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct humPhenEthnic *humPhenEthnicLoad(char **row);
/* Load a humPhenEthnic from row fetched with select * from humPhenEthnic
 * from database.  Dispose of this with humPhenEthnicFree(). */

struct humPhenEthnic *humPhenEthnicLoadAll(char *fileName);
/* Load all humPhenEthnic from whitespace-separated file.
 * Dispose of this with humPhenEthnicFreeList(). */

struct humPhenEthnic *humPhenEthnicLoadAllByChar(char *fileName, char chopper);
/* Load all humPhenEthnic from chopper separated file.
 * Dispose of this with humPhenEthnicFreeList(). */

#define humPhenEthnicLoadAllByTab(a) humPhenEthnicLoadAllByChar(a, '\t');
/* Load all humPhenEthnic from tab separated file.
 * Dispose of this with humPhenEthnicFreeList(). */

struct humPhenEthnic *humPhenEthnicLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all humPhenEthnic from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with humPhenEthnicFreeList(). */

void humPhenEthnicSaveToDb(struct sqlConnection *conn, struct humPhenEthnic *el, char *tableName, int updateSize);
/* Save humPhenEthnic as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use humPhenEthnicSaveToDbEscaped() */

void humPhenEthnicSaveToDbEscaped(struct sqlConnection *conn, struct humPhenEthnic *el, char *tableName, int updateSize);
/* Save humPhenEthnic as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than humPhenEthnicSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct humPhenEthnic *humPhenEthnicCommaIn(char **pS, struct humPhenEthnic *ret);
/* Create a humPhenEthnic out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new humPhenEthnic */

void humPhenEthnicFree(struct humPhenEthnic **pEl);
/* Free a single dynamically allocated humPhenEthnic such as created
 * with humPhenEthnicLoad(). */

void humPhenEthnicFreeList(struct humPhenEthnic **pList);
/* Free a list of dynamically allocated humPhenEthnic's */

void humPhenEthnicOutput(struct humPhenEthnic *el, FILE *f, char sep, char lastSep);
/* Print out humPhenEthnic.  Separate fields with sep. Follow last field with lastSep. */

#define humPhenEthnicTabOut(el,f) humPhenEthnicOutput(el,f,'\t','\n');
/* Print out humPhenEthnic as a line in a tab-separated file. */

#define humPhenEthnicCommaOut(el,f) humPhenEthnicOutput(el,f,',',',');
/* Print out humPhenEthnic as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* HUMPHEN_H */

