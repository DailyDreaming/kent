/* humPhen.h was originally generated by the autoSql program, which also 
 * generated humPhen.c and humPhen.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef HUMPHEN_H
#define HUMPHEN_H

#ifndef JKSQL_H
#include "jksql.h"
#endif

#define HUMANPHENOTYPE_NUM_COLS 9

struct humanPhenotype
/* track for human phenotype data from locus specific databases */
    {
    struct humanPhenotype *next;  /* Next in singly linked list. */
    unsigned short bin;	/* A field to speed indexing */
    char *chrom;	/* Chromosome */
    unsigned chromStart;	/* Start position in chrom */
    unsigned chromEnd;	/* End position in chrom */
    char *name;	/* HGVS description of mutation. */
    char *dbId;	/* Db key.ID from source for this variant. */
    char *linkDbs;	/* Database keys which can link to this variant, comma sep. */
    char *baseChangeType;	/* insertion, deletion, substitution,duplication,complex,unknown. */
    char *location;	/* intron, exon, 5'utr, 3'utr, not within known transcription unit. */
    };

void humanPhenotypeStaticLoad(char **row, struct humanPhenotype *ret);
/* Load a row from humanPhenotype table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct humanPhenotype *humanPhenotypeLoad(char **row);
/* Load a humanPhenotype from row fetched with select * from humanPhenotype
 * from database.  Dispose of this with humanPhenotypeFree(). */

struct humanPhenotype *humanPhenotypeLoadAll(char *fileName);
/* Load all humanPhenotype from whitespace-separated file.
 * Dispose of this with humanPhenotypeFreeList(). */

struct humanPhenotype *humanPhenotypeLoadAllByChar(char *fileName, char chopper);
/* Load all humanPhenotype from chopper separated file.
 * Dispose of this with humanPhenotypeFreeList(). */

#define humanPhenotypeLoadAllByTab(a) humanPhenotypeLoadAllByChar(a, '\t');
/* Load all humanPhenotype from tab separated file.
 * Dispose of this with humanPhenotypeFreeList(). */

struct humanPhenotype *humanPhenotypeLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all humanPhenotype from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with humanPhenotypeFreeList(). */

void humanPhenotypeSaveToDb(struct sqlConnection *conn, struct humanPhenotype *el, char *tableName, int updateSize);
/* Save humanPhenotype as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use humanPhenotypeSaveToDbEscaped() */

void humanPhenotypeSaveToDbEscaped(struct sqlConnection *conn, struct humanPhenotype *el, char *tableName, int updateSize);
/* Save humanPhenotype as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than humanPhenotypeSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct humanPhenotype *humanPhenotypeCommaIn(char **pS, struct humanPhenotype *ret);
/* Create a humanPhenotype out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new humanPhenotype */

void humanPhenotypeFree(struct humanPhenotype **pEl);
/* Free a single dynamically allocated humanPhenotype such as created
 * with humanPhenotypeLoad(). */

void humanPhenotypeFreeList(struct humanPhenotype **pList);
/* Free a list of dynamically allocated humanPhenotype's */

void humanPhenotypeOutput(struct humanPhenotype *el, FILE *f, char sep, char lastSep);
/* Print out humanPhenotype.  Separate fields with sep. Follow last field with lastSep. */

#define humanPhenotypeTabOut(el,f) humanPhenotypeOutput(el,f,'\t','\n');
/* Print out humanPhenotype as a line in a tab-separated file. */

#define humanPhenotypeCommaOut(el,f) humanPhenotypeOutput(el,f,',',',');
/* Print out humanPhenotype as a comma separated list including final comma. */

#define HUMPHENLINK_NUM_COLS 3

struct humPhenLink
/* links for human phenotype detail page */
    {
    struct humPhenLink *next;  /* Next in singly linked list. */
    char *linkDb;	/* Database (key) of variants in humanPhenotype table. */
    char *linkDisplayName;	/* Display name for this link. */
    char *url;	/* url to substitute ID in for links. */
    };

void humPhenLinkStaticLoad(char **row, struct humPhenLink *ret);
/* Load a row from humPhenLink table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct humPhenLink *humPhenLinkLoad(char **row);
/* Load a humPhenLink from row fetched with select * from humPhenLink
 * from database.  Dispose of this with humPhenLinkFree(). */

struct humPhenLink *humPhenLinkLoadAll(char *fileName);
/* Load all humPhenLink from whitespace-separated file.
 * Dispose of this with humPhenLinkFreeList(). */

struct humPhenLink *humPhenLinkLoadAllByChar(char *fileName, char chopper);
/* Load all humPhenLink from chopper separated file.
 * Dispose of this with humPhenLinkFreeList(). */

#define humPhenLinkLoadAllByTab(a) humPhenLinkLoadAllByChar(a, '\t');
/* Load all humPhenLink from tab separated file.
 * Dispose of this with humPhenLinkFreeList(). */

struct humPhenLink *humPhenLinkLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all humPhenLink from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with humPhenLinkFreeList(). */

void humPhenLinkSaveToDb(struct sqlConnection *conn, struct humPhenLink *el, char *tableName, int updateSize);
/* Save humPhenLink as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use humPhenLinkSaveToDbEscaped() */

void humPhenLinkSaveToDbEscaped(struct sqlConnection *conn, struct humPhenLink *el, char *tableName, int updateSize);
/* Save humPhenLink as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than humPhenLinkSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct humPhenLink *humPhenLinkCommaIn(char **pS, struct humPhenLink *ret);
/* Create a humPhenLink out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new humPhenLink */

void humPhenLinkFree(struct humPhenLink **pEl);
/* Free a single dynamically allocated humPhenLink such as created
 * with humPhenLinkLoad(). */

void humPhenLinkFreeList(struct humPhenLink **pList);
/* Free a list of dynamically allocated humPhenLink's */

void humPhenLinkOutput(struct humPhenLink *el, FILE *f, char sep, char lastSep);
/* Print out humPhenLink.  Separate fields with sep. Follow last field with lastSep. */

#define humPhenLinkTabOut(el,f) humPhenLinkOutput(el,f,'\t','\n');
/* Print out humPhenLink as a line in a tab-separated file. */

#define humPhenLinkCommaOut(el,f) humPhenLinkOutput(el,f,',',',');
/* Print out humPhenLink as a comma separated list including final comma. */

#define HUMPHENALIAS_NUM_COLS 2

struct humPhenAlias
/* aliases for mutations in the human phenotype track */
    {
    struct humPhenAlias *next;  /* Next in singly linked list. */
    char *dbId;	/* ID from humanPhenotype table. */
    char *name;	/* Another name for the variant. */
    };

void humPhenAliasStaticLoad(char **row, struct humPhenAlias *ret);
/* Load a row from humPhenAlias table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct humPhenAlias *humPhenAliasLoad(char **row);
/* Load a humPhenAlias from row fetched with select * from humPhenAlias
 * from database.  Dispose of this with humPhenAliasFree(). */

struct humPhenAlias *humPhenAliasLoadAll(char *fileName);
/* Load all humPhenAlias from whitespace-separated file.
 * Dispose of this with humPhenAliasFreeList(). */

struct humPhenAlias *humPhenAliasLoadAllByChar(char *fileName, char chopper);
/* Load all humPhenAlias from chopper separated file.
 * Dispose of this with humPhenAliasFreeList(). */

#define humPhenAliasLoadAllByTab(a) humPhenAliasLoadAllByChar(a, '\t');
/* Load all humPhenAlias from tab separated file.
 * Dispose of this with humPhenAliasFreeList(). */

struct humPhenAlias *humPhenAliasLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all humPhenAlias from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with humPhenAliasFreeList(). */

void humPhenAliasSaveToDb(struct sqlConnection *conn, struct humPhenAlias *el, char *tableName, int updateSize);
/* Save humPhenAlias as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use humPhenAliasSaveToDbEscaped() */

void humPhenAliasSaveToDbEscaped(struct sqlConnection *conn, struct humPhenAlias *el, char *tableName, int updateSize);
/* Save humPhenAlias as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than humPhenAliasSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct humPhenAlias *humPhenAliasCommaIn(char **pS, struct humPhenAlias *ret);
/* Create a humPhenAlias out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new humPhenAlias */

void humPhenAliasFree(struct humPhenAlias **pEl);
/* Free a single dynamically allocated humPhenAlias such as created
 * with humPhenAliasLoad(). */

void humPhenAliasFreeList(struct humPhenAlias **pList);
/* Free a list of dynamically allocated humPhenAlias's */

void humPhenAliasOutput(struct humPhenAlias *el, FILE *f, char sep, char lastSep);
/* Print out humPhenAlias.  Separate fields with sep. Follow last field with lastSep. */

#define humPhenAliasTabOut(el,f) humPhenAliasOutput(el,f,'\t','\n');
/* Print out humPhenAlias as a line in a tab-separated file. */

#define humPhenAliasCommaOut(el,f) humPhenAliasOutput(el,f,',',',');
/* Print out humPhenAlias as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* HUMPHEN_H */

