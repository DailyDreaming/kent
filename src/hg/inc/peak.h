/* peak.h was originally generated by the autoSql program, which also 
 * generated peak.c and peak.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef PEAK_H
#define PEAK_H

#include "jksql.h"
#define PEAK_NUM_COLS 6

struct peak
/* Peaks format (BED 3+) */
    {
    struct peak *next;  /* Next in singly linked list. */
    char *chrom;	/* Reference sequence chromosome or scaffold */
    unsigned chromStart;	/* Start position in chromosome */
    unsigned chromEnd;	/* End position in chromosome */
    float signalValue;	/* Measurement of average enrichment for the region */
    float pValue;	/* Statistical significance of signal value (-log10) */
    int peak;	/* Point-source called for this peak; 0-based offset from chromStart (use -1 if no point-source called) */
    };

void peakStaticLoad(char **row, struct peak *ret);
/* Load a row from peak table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct peak *peakLoad(char **row);
/* Load a peak from row fetched with select * from peak
 * from database.  Dispose of this with peakFree(). */

struct peak *peakLoadAll(char *fileName);
/* Load all peak from whitespace-separated file.
 * Dispose of this with peakFreeList(). */

struct peak *peakLoadAllByChar(char *fileName, char chopper);
/* Load all peak from chopper separated file.
 * Dispose of this with peakFreeList(). */

#define peakLoadAllByTab(a) peakLoadAllByChar(a, '\t');
/* Load all peak from tab separated file.
 * Dispose of this with peakFreeList(). */

struct peak *peakLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all peak from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with peakFreeList(). */

void peakSaveToDb(struct sqlConnection *conn, struct peak *el, char *tableName, int updateSize);
/* Save peak as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use peakSaveToDbEscaped() */

void peakSaveToDbEscaped(struct sqlConnection *conn, struct peak *el, char *tableName, int updateSize);
/* Save peak as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than peakSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct peak *peakCommaIn(char **pS, struct peak *ret);
/* Create a peak out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new peak */

void peakFree(struct peak **pEl);
/* Free a single dynamically allocated peak such as created
 * with peakLoad(). */

void peakFreeList(struct peak **pList);
/* Free a list of dynamically allocated peak's */

void peakOutput(struct peak *el, FILE *f, char sep, char lastSep);
/* Print out peak.  Separate fields with sep. Follow last field with lastSep. */

#define peakTabOut(el,f) peakOutput(el,f,'\t','\n');
/* Print out peak as a line in a tab-separated file. */

#define peakCommaOut(el,f) peakOutput(el,f,',',',');
/* Print out peak as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* PEAK_H */

