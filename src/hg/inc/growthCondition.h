/* growthCondition.h was originally generated by the autoSql program, which also 
 * generated growthCondition.c and growthCondition.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef GROWTHCONDITION_H
#define GROWTHCONDITION_H

#define GROWTHCONDITIONS_NUM_COLS 3

struct growthConditions
/* Conditions under which cells are grown */
    {
    struct growthConditions *next;  /* Next in singly linked list. */
    char *name;	/* Symbolic name of growth condition */
    char *shortLabel;	/* Short description of growth condition */
    char *longLabel;	/* Longer description of growth condition */
    };

void growthConditionsStaticLoad(char **row, struct growthConditions *ret);
/* Load a row from growthConditions table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct growthConditions *growthConditionsLoad(char **row);
/* Load a growthConditions from row fetched with select * from growthConditions
 * from database.  Dispose of this with growthConditionsFree(). */

struct growthConditions *growthConditionsLoadAll(char *fileName);
/* Load all growthConditions from whitespace-separated file.
 * Dispose of this with growthConditionsFreeList(). */

struct growthConditions *growthConditionsLoadAllByChar(char *fileName, char chopper);
/* Load all growthConditions from chopper separated file.
 * Dispose of this with growthConditionsFreeList(). */

#define growthConditionsLoadAllByTab(a) growthConditionsLoadAllByChar(a, '\t');
/* Load all growthConditions from tab separated file.
 * Dispose of this with growthConditionsFreeList(). */

struct growthConditions *growthConditionsCommaIn(char **pS, struct growthConditions *ret);
/* Create a growthConditions out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new growthConditions */

void growthConditionsFree(struct growthConditions **pEl);
/* Free a single dynamically allocated growthConditions such as created
 * with growthConditionsLoad(). */

void growthConditionsFreeList(struct growthConditions **pList);
/* Free a list of dynamically allocated growthConditions's */

void growthConditionsOutput(struct growthConditions *el, FILE *f, char sep, char lastSep);
/* Print out growthConditions.  Separate fields with sep. Follow last field with lastSep. */

#define growthConditionsTabOut(el,f) growthConditionsOutput(el,f,'\t','\n');
/* Print out growthConditions as a line in a tab-separated file. */

#define growthConditionsCommaOut(el,f) growthConditionsOutput(el,f,',',',');
/* Print out growthConditions as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* GROWTHCONDITION_H */

