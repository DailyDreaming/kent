/* genePredName.h was originally generated by the autoSql program, which also 
 * generated genePredName.c and genePredName.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef GENEPREDNAME_H
#define GENEPREDNAME_H

#ifndef JKSQL_H
#include "jksql.h"
#endif

#define GENEPREDNAME_NUM_COLS 11

struct genePredName
/* A gene prediction. */
    {
    struct genePredName *next;  /* Next in singly linked list. */
    char *geneName;	/* Name of gene */
    char *name;	/* Name of gene */
    char *chrom;	/* Chromosome name */
    char strand[2];	/* + or - for strand */
    unsigned txStart;	/* Transcription start position */
    unsigned txEnd;	/* Transcription end position */
    unsigned cdsStart;	/* Coding region start */
    unsigned cdsEnd;	/* Coding region end */
    unsigned exonCount;	/* Number of exons */
    unsigned *exonStarts;	/* Exon start positions */
    unsigned *exonEnds;	/* Exon end positions */
    };

struct genePredName *genePredNameLoad(char **row);
/* Load a genePredName from row fetched with select * from genePredName
 * from database.  Dispose of this with genePredNameFree(). */

struct genePredName *genePredNameLoadAll(char *fileName);
/* Load all genePredName from whitespace-separated file.
 * Dispose of this with genePredNameFreeList(). */

struct genePredName *genePredNameLoadAllByChar(char *fileName, char chopper);
/* Load all genePredName from chopper separated file.
 * Dispose of this with genePredNameFreeList(). */

#define genePredNameLoadAllByTab(a) genePredNameLoadAllByChar(a, '\t');
/* Load all genePredName from tab separated file.
 * Dispose of this with genePredNameFreeList(). */

struct genePredName *genePredNameLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all genePredName from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with genePredNameFreeList(). */

void genePredNameSaveToDb(struct sqlConnection *conn, struct genePredName *el, char *tableName, int updateSize);
/* Save genePredName as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use genePredNameSaveToDbEscaped() */

void genePredNameSaveToDbEscaped(struct sqlConnection *conn, struct genePredName *el, char *tableName, int updateSize);
/* Save genePredName as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than genePredNameSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct genePredName *genePredNameCommaIn(char **pS, struct genePredName *ret);
/* Create a genePredName out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new genePredName */

void genePredNameFree(struct genePredName **pEl);
/* Free a single dynamically allocated genePredName such as created
 * with genePredNameLoad(). */

void genePredNameFreeList(struct genePredName **pList);
/* Free a list of dynamically allocated genePredName's */

void genePredNameOutput(struct genePredName *el, FILE *f, char sep, char lastSep);
/* Print out genePredName.  Separate fields with sep. Follow last field with lastSep. */

#define genePredNameTabOut(el,f) genePredNameOutput(el,f,'\t','\n');
/* Print out genePredName as a line in a tab-separated file. */

#define genePredNameCommaOut(el,f) genePredNameOutput(el,f,',',',');
/* Print out genePredName as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* GENEPREDNAME_H */

