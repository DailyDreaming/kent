/* browserTable.h was originally generated by the autoSql program, which also 
 * generated browserTable.c and browserTable.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef BROWSERTABLE_H
#define BROWSERTABLE_H

struct browserTable
/* List of tables to be displayed in browser. Read by brower each hit. */
    {
    struct browserTable *next;  /* Next in singly linked list. */
    char tableName[65];	/* Name of table in database to be queried. */
    char longLabel[129];	/* Long name to be displayed in center browser window. */
    char shortLabel[33];	/* Short name to be displaed on left of browser window. */
    char mapName[33];	/* Return name to associate on map. */
    char *version;	/* Versioning information about table. */
    char trackType[33];	/* Initially just 'bed' and 'psl' supported. */
    unsigned short visibility;	/* tvHide=0, tvDense=1 or tvFull=2. */
    unsigned short colorR;	/* red of main color. */
    unsigned short colorG;	/* green of main color. */
    unsigned short colorB;	/* blue of main color. */
    unsigned short altColorR;	/* red of alternate color. */
    unsigned short altColorG;	/* green of alternate color. */
    unsigned short altColorB;	/* blue of alternate color. */
    unsigned short private;	/* True(1) if private, false(0) otherwise. */
    unsigned short useScore;	/* If True(1) use score information in table, only shades of gray color supported. */
    unsigned short isSplit;	/* True(1) if table is split over different chromosomes. i.e. chrN_est */
    int priority;	/* Priority to load tracks in, i.e. order to load tracks in. */
    char *credit;	/* Who to credit/blame for information in table. */
    char *url;	/* Link to more information about track. */
    char *other;	/* Other track specific associated information. */
    };

void browserTableStaticLoad(char **row, struct browserTable *ret);
/* Load a row from browserTable table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct browserTable *browserTableLoad(char **row);
/* Load a browserTable from row fetched with select * from browserTable
 * from database.  Dispose of this with browserTableFree(). */

struct browserTable *browserTableLoadAll(char *fileName);
/* Load all browserTable from a tab-separated file.
 * Dispose of this with browserTableFreeList(). */

struct browserTable *browserTableCommaIn(char **pS, struct browserTable *ret);
/* Create a browserTable out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new browserTable */

void browserTableFree(struct browserTable **pEl);
/* Free a single dynamically allocated browserTable such as created
 * with browserTableLoad(). */

void browserTableFreeList(struct browserTable **pList);
/* Free a list of dynamically allocated browserTable's */

void browserTableOutput(struct browserTable *el, FILE *f, char sep, char lastSep);
/* Print out browserTable.  Separate fields with sep. Follow last field with lastSep. */

#define browserTableTabOut(el,f) browserTableOutput(el,f,'\t','\n');
/* Print out browserTable as a line in a tab-separated file. */

#define browserTableCommaOut(el,f) browserTableOutput(el,f,',',',');
/* Print out browserTable as a comma separated list including final comma. */

#endif /* BROWSERTABLE_H */

