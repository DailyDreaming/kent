/* encodeExp.h was originally generated by the autoSql program, which also 
 * generated encodeExp.c and encodeExp.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef ENCODEEXP_H
#define ENCODEEXP_H

#include "jksql.h"
#define ENCODEEXP_NUM_COLS 7

struct encodeExp
/* ENCODE experiments */
    {
    struct encodeExp *next;  /* Next in singly linked list. */
    int ix;	/* auto-increment ID */
    char *organism;	/* human | mouse */
    char *accession;	/* wgEncodeE[H|M]00000N */
    char *lab;	/* lab name from ENCODE cv.ra */
    char *dataType;	/* dataType from ENCODE cv.ra */
    char *cellType;	/* cellType from ENCODE cv.ra */
    char *vars;	/* typeOfTerm=term list of experiment-defining variables */
    };

void encodeExpStaticLoad(char **row, struct encodeExp *ret);
/* Load a row from encodeExp table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct encodeExp *encodeExpLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all encodeExp from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with encodeExpFreeList(). */

void encodeExpSaveToDb(struct sqlConnection *conn, struct encodeExp *el, char *tableName, int updateSize);
/* Save encodeExp as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use encodeExpSaveToDbEscaped() */

void encodeExpSaveToDbEscaped(struct sqlConnection *conn, struct encodeExp *el, char *tableName, int updateSize);
/* Save encodeExp as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than encodeExpSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct encodeExp *encodeExpLoad(char **row);
/* Load a encodeExp from row fetched with select * from encodeExp
 * from database.  Dispose of this with encodeExpFree(). */

struct encodeExp *encodeExpLoadAll(char *fileName);
/* Load all encodeExp from whitespace-separated file.
 * Dispose of this with encodeExpFreeList(). */

struct encodeExp *encodeExpLoadAllByChar(char *fileName, char chopper);
/* Load all encodeExp from chopper separated file.
 * Dispose of this with encodeExpFreeList(). */

#define encodeExpLoadAllByTab(a) encodeExpLoadAllByChar(a, '\t');
/* Load all encodeExp from tab separated file.
 * Dispose of this with encodeExpFreeList(). */

struct encodeExp *encodeExpCommaIn(char **pS, struct encodeExp *ret);
/* Create a encodeExp out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new encodeExp */

void encodeExpFree(struct encodeExp **pEl);
/* Free a single dynamically allocated encodeExp such as created
 * with encodeExpLoad(). */

void encodeExpFreeList(struct encodeExp **pList);
/* Free a list of dynamically allocated encodeExp's */

void encodeExpOutput(struct encodeExp *el, FILE *f, char sep, char lastSep);
/* Print out encodeExp.  Separate fields with sep. Follow last field with lastSep. */

#define encodeExpTabOut(el,f) encodeExpOutput(el,f,'\t','\n');
/* Print out encodeExp as a line in a tab-separated file. */

#define encodeExpCommaOut(el,f) encodeExpOutput(el,f,',',',');
/* Print out encodeExp as a comma separated list including final comma. */

void encodeExpJsonOutput(struct encodeExp *el, FILE *f);
/* Print out encodeExp in JSON format. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#define ENCODE_EXP_TABLE        "encodeExp"
#define ENCODE_EXP_DATABASE     "hgFixed"
#define ENCODE_EXP_ACC_PREFIX   "wgEncodeE"

void encodeExpTableCreate(struct sqlConnection *conn, char *tableName);
/* Create an encodeExp table */

struct encodeExp *encodeExpFromRa(struct hash *ra);
/* Load an encodeExp from a Ra */

struct hash *encodeExpToRa(struct encodeExp *el);
/* Create a .ra from an encodeExp */

void encodeExpSave(struct sqlConnection *conn, struct encodeExp *el, char *tableName);
/* Save encodeExp as a row to the table specified by tableName. Update accession using
 * index assigned with autoincrement */

#endif /* ENCODEEXP_H */



