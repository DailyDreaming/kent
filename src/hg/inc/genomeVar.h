/* genomeVar.h was originally generated by the autoSql program, which also 
 * generated genomeVar.c and genomeVar.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef GENOMEVAR_H
#define GENOMEVAR_H

#ifndef JKSQL_H
#include "jksql.h"
#endif

#define GENOMEVAR_NUM_COLS 10

struct genomeVar
/* track for mutation data */
    {
    struct genomeVar *next;  /* Next in singly linked list. */
    char *chrom;	/* Chromosome */
    unsigned chromStart;	/* Start position in chrom */
    unsigned chromEnd;	/* End position in chrom */
    char *name;	/* Official nomenclature description of mutation. */
    char *mutId;	/* unique ID for this mutation */
    unsigned short srcId;	/* source ID for this mutation */
    char *baseChangeType;	/* enum('insertion', 'deletion', 'substitution','duplication','complex','unknown'). */
    char *location;	/* enum('intron', 'exon', '5'' UTR', '3'' UTR', 'not within known transcription unit'). */
    unsigned char coordinateAccuracy;	/* 0=estimated, 1=definite, others? */
    unsigned short bin; /* A field to speed indexing */
    };

void genomeVarStaticLoad(char **row, struct genomeVar *ret);
/* Load a row from genomeVar table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct genomeVar *genomeVarLoad(char **row);
/* Load a genomeVar from row fetched with select * from genomeVar
 * from database.  Dispose of this with genomeVarFree(). */

struct genomeVar *genomeVarLoadAll(char *fileName);
/* Load all genomeVar from whitespace-separated file.
 * Dispose of this with genomeVarFreeList(). */

struct genomeVar *genomeVarLoadAllByChar(char *fileName, char chopper);
/* Load all genomeVar from chopper separated file.
 * Dispose of this with genomeVarFreeList(). */

#define genomeVarLoadAllByTab(a) genomeVarLoadAllByChar(a, '\t');
/* Load all genomeVar from tab separated file.
 * Dispose of this with genomeVarFreeList(). */

struct genomeVar *genomeVarLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all genomeVar from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with genomeVarFreeList(). */

void genomeVarSaveToDb(struct sqlConnection *conn, struct genomeVar *el, char *tableName, int updateSize);
/* Save genomeVar as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use genomeVarSaveToDbEscaped() */

void genomeVarSaveToDbEscaped(struct sqlConnection *conn, struct genomeVar *el, char *tableName, int updateSize);
/* Save genomeVar as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than genomeVarSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct genomeVar *genomeVarCommaIn(char **pS, struct genomeVar *ret);
/* Create a genomeVar out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new genomeVar */

void genomeVarFree(struct genomeVar **pEl);
/* Free a single dynamically allocated genomeVar such as created
 * with genomeVarLoad(). */

void genomeVarFreeList(struct genomeVar **pList);
/* Free a list of dynamically allocated genomeVar's */

void genomeVarOutput(struct genomeVar *el, FILE *f, char sep, char lastSep);
/* Print out genomeVar.  Separate fields with sep. Follow last field with lastSep. */

#define genomeVarTabOut(el,f) genomeVarOutput(el,f,'\t','\n');
/* Print out genomeVar as a line in a tab-separated file. */

#define genomeVarCommaOut(el,f) genomeVarOutput(el,f,',',',');
/* Print out genomeVar as a comma separated list including final comma. */

#define GENOMEVARSRC_NUM_COLS 4

struct genomeVarSrc
/* sources for mutation track */
    {
    struct genomeVarSrc *next;  /* Next in singly linked list. */
    unsigned short srcId;	/* key into genomeVar table */
    char *src;	/* name of genome wide source or LSDB */
    char *lsdb;	/* for LSDB name of actual source DB */
    char *lsdbAbrev;	/* for LSDB abreviation of source name */
    };

void genomeVarSrcStaticLoad(char **row, struct genomeVarSrc *ret);
/* Load a row from genomeVarSrc table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct genomeVarSrc *genomeVarSrcLoad(char **row);
/* Load a genomeVarSrc from row fetched with select * from genomeVarSrc
 * from database.  Dispose of this with genomeVarSrcFree(). */

struct genomeVarSrc *genomeVarSrcLoadAll(char *fileName);
/* Load all genomeVarSrc from whitespace-separated file.
 * Dispose of this with genomeVarSrcFreeList(). */

struct genomeVarSrc *genomeVarSrcLoadAllByChar(char *fileName, char chopper);
/* Load all genomeVarSrc from chopper separated file.
 * Dispose of this with genomeVarSrcFreeList(). */

#define genomeVarSrcLoadAllByTab(a) genomeVarSrcLoadAllByChar(a, '\t');
/* Load all genomeVarSrc from tab separated file.
 * Dispose of this with genomeVarSrcFreeList(). */

struct genomeVarSrc *genomeVarSrcLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all genomeVarSrc from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with genomeVarSrcFreeList(). */

void genomeVarSrcSaveToDb(struct sqlConnection *conn, struct genomeVarSrc *el, char *tableName, int updateSize);
/* Save genomeVarSrc as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use genomeVarSrcSaveToDbEscaped() */

void genomeVarSrcSaveToDbEscaped(struct sqlConnection *conn, struct genomeVarSrc *el, char *tableName, int updateSize);
/* Save genomeVarSrc as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than genomeVarSrcSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct genomeVarSrc *genomeVarSrcCommaIn(char **pS, struct genomeVarSrc *ret);
/* Create a genomeVarSrc out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new genomeVarSrc */

void genomeVarSrcFree(struct genomeVarSrc **pEl);
/* Free a single dynamically allocated genomeVarSrc such as created
 * with genomeVarSrcLoad(). */

void genomeVarSrcFreeList(struct genomeVarSrc **pList);
/* Free a list of dynamically allocated genomeVarSrc's */

void genomeVarSrcOutput(struct genomeVarSrc *el, FILE *f, char sep, char lastSep);
/* Print out genomeVarSrc.  Separate fields with sep. Follow last field with lastSep. */

#define genomeVarSrcTabOut(el,f) genomeVarSrcOutput(el,f,'\t','\n');
/* Print out genomeVarSrc as a line in a tab-separated file. */

#define genomeVarSrcCommaOut(el,f) genomeVarSrcOutput(el,f,',',',');
/* Print out genomeVarSrc as a comma separated list including final comma. */

#define GENOMEVARALIAS_NUM_COLS 3

struct genomeVarAlias
/* aliases for mutations */
    {
    struct genomeVarAlias *next;  /* Next in singly linked list. */
    char *mutId;	/* mutation ID from genomeVar table. */
    char *name;	/* Another name for the mutation. */
    char *nameType;	/* common, or ? */
    };

void genomeVarAliasStaticLoad(char **row, struct genomeVarAlias *ret);
/* Load a row from genomeVarAlias table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct genomeVarAlias *genomeVarAliasLoad(char **row);
/* Load a genomeVarAlias from row fetched with select * from genomeVarAlias
 * from database.  Dispose of this with genomeVarAliasFree(). */

struct genomeVarAlias *genomeVarAliasLoadAll(char *fileName);
/* Load all genomeVarAlias from whitespace-separated file.
 * Dispose of this with genomeVarAliasFreeList(). */

struct genomeVarAlias *genomeVarAliasLoadAllByChar(char *fileName, char chopper);
/* Load all genomeVarAlias from chopper separated file.
 * Dispose of this with genomeVarAliasFreeList(). */

#define genomeVarAliasLoadAllByTab(a) genomeVarAliasLoadAllByChar(a, '\t');
/* Load all genomeVarAlias from tab separated file.
 * Dispose of this with genomeVarAliasFreeList(). */

struct genomeVarAlias *genomeVarAliasLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all genomeVarAlias from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with genomeVarAliasFreeList(). */

void genomeVarAliasSaveToDb(struct sqlConnection *conn, struct genomeVarAlias *el, char *tableName, int updateSize);
/* Save genomeVarAlias as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use genomeVarAliasSaveToDbEscaped() */

void genomeVarAliasSaveToDbEscaped(struct sqlConnection *conn, struct genomeVarAlias *el, char *tableName, int updateSize);
/* Save genomeVarAlias as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than genomeVarAliasSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct genomeVarAlias *genomeVarAliasCommaIn(char **pS, struct genomeVarAlias *ret);
/* Create a genomeVarAlias out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new genomeVarAlias */

void genomeVarAliasFree(struct genomeVarAlias **pEl);
/* Free a single dynamically allocated genomeVarAlias such as created
 * with genomeVarAliasLoad(). */

void genomeVarAliasFreeList(struct genomeVarAlias **pList);
/* Free a list of dynamically allocated genomeVarAlias's */

void genomeVarAliasOutput(struct genomeVarAlias *el, FILE *f, char sep, char lastSep);
/* Print out genomeVarAlias.  Separate fields with sep. Follow last field with lastSep. */

#define genomeVarAliasTabOut(el,f) genomeVarAliasOutput(el,f,'\t','\n');
/* Print out genomeVarAlias as a line in a tab-separated file. */

#define genomeVarAliasCommaOut(el,f) genomeVarAliasOutput(el,f,',',',');
/* Print out genomeVarAlias as a comma separated list including final comma. */

#define GENOMEVARATTR_NUM_COLS 4

struct genomeVarAttr
/* attributes asssociated with the mutation */
    {
    struct genomeVarAttr *next;  /* Next in singly linked list. */
    char *mutId;	/* mutation ID. */
    char *attrKey;	/* attribute name. */
    char *linkId;	/* id for links from this attribute. */
    char *attrVal;	/* value for this attribute */
    };

void genomeVarAttrStaticLoad(char **row, struct genomeVarAttr *ret);
/* Load a row from genomeVarAttr table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct genomeVarAttr *genomeVarAttrLoad(char **row);
/* Load a genomeVarAttr from row fetched with select * from genomeVarAttr
 * from database.  Dispose of this with genomeVarAttrFree(). */

struct genomeVarAttr *genomeVarAttrLoadAll(char *fileName);
/* Load all genomeVarAttr from whitespace-separated file.
 * Dispose of this with genomeVarAttrFreeList(). */

struct genomeVarAttr *genomeVarAttrLoadAllByChar(char *fileName, char chopper);
/* Load all genomeVarAttr from chopper separated file.
 * Dispose of this with genomeVarAttrFreeList(). */

#define genomeVarAttrLoadAllByTab(a) genomeVarAttrLoadAllByChar(a, '\t');
/* Load all genomeVarAttr from tab separated file.
 * Dispose of this with genomeVarAttrFreeList(). */

struct genomeVarAttr *genomeVarAttrLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all genomeVarAttr from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with genomeVarAttrFreeList(). */

void genomeVarAttrSaveToDb(struct sqlConnection *conn, struct genomeVarAttr *el, char *tableName, int updateSize);
/* Save genomeVarAttr as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use genomeVarAttrSaveToDbEscaped() */

void genomeVarAttrSaveToDbEscaped(struct sqlConnection *conn, struct genomeVarAttr *el, char *tableName, int updateSize);
/* Save genomeVarAttr as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than genomeVarAttrSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct genomeVarAttr *genomeVarAttrCommaIn(char **pS, struct genomeVarAttr *ret);
/* Create a genomeVarAttr out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new genomeVarAttr */

void genomeVarAttrFree(struct genomeVarAttr **pEl);
/* Free a single dynamically allocated genomeVarAttr such as created
 * with genomeVarAttrLoad(). */

void genomeVarAttrFreeList(struct genomeVarAttr **pList);
/* Free a list of dynamically allocated genomeVarAttr's */

void genomeVarAttrOutput(struct genomeVarAttr *el, FILE *f, char sep, char lastSep);
/* Print out genomeVarAttr.  Separate fields with sep. Follow last field with lastSep. */

#define genomeVarAttrTabOut(el,f) genomeVarAttrOutput(el,f,'\t','\n');
/* Print out genomeVarAttr as a line in a tab-separated file. */

#define genomeVarAttrCommaOut(el,f) genomeVarAttrOutput(el,f,',',',');
/* Print out genomeVarAttr as a comma separated list including final comma. */

#define GENOMEVARATTRLINK_NUM_COLS 4

struct genomeVarAttrLink
/* links internal or external tied to this attribute */
    {
    struct genomeVarAttrLink *next;  /* Next in singly linked list. */
    char *linkId;	/* id for attribute link. */
    char *raKey;	/* key into .ra file on how to do link. */
    char *acc;	/* accession or id used by link. */
    char *displayVal;	/* value to display if different from acc. */
    };

void genomeVarAttrLinkStaticLoad(char **row, struct genomeVarAttrLink *ret);
/* Load a row from genomeVarAttrLink table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct genomeVarAttrLink *genomeVarAttrLinkLoad(char **row);
/* Load a genomeVarAttrLink from row fetched with select * from genomeVarAttrLink
 * from database.  Dispose of this with genomeVarAttrLinkFree(). */

struct genomeVarAttrLink *genomeVarAttrLinkLoadAll(char *fileName);
/* Load all genomeVarAttrLink from whitespace-separated file.
 * Dispose of this with genomeVarAttrLinkFreeList(). */

struct genomeVarAttrLink *genomeVarAttrLinkLoadAllByChar(char *fileName, char chopper);
/* Load all genomeVarAttrLink from chopper separated file.
 * Dispose of this with genomeVarAttrLinkFreeList(). */

#define genomeVarAttrLinkLoadAllByTab(a) genomeVarAttrLinkLoadAllByChar(a, '\t');
/* Load all genomeVarAttrLink from tab separated file.
 * Dispose of this with genomeVarAttrLinkFreeList(). */

struct genomeVarAttrLink *genomeVarAttrLinkLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all genomeVarAttrLink from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with genomeVarAttrLinkFreeList(). */

void genomeVarAttrLinkSaveToDb(struct sqlConnection *conn, struct genomeVarAttrLink *el, char *tableName, int updateSize);
/* Save genomeVarAttrLink as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Note that strings must be escaped to allow insertion into the database.
 * For example "autosql's features include" --> "autosql\'s features include" 
 * If worried about this use genomeVarAttrLinkSaveToDbEscaped() */

void genomeVarAttrLinkSaveToDbEscaped(struct sqlConnection *conn, struct genomeVarAttrLink *el, char *tableName, int updateSize);
/* Save genomeVarAttrLink as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size.
 * of a string that would contain the entire query. Automatically 
 * escapes all simple strings (not arrays of string) but may be slower than genomeVarAttrLinkSaveToDb().
 * For example automatically copies and converts: 
 * "autosql's features include" --> "autosql\'s features include" 
 * before inserting into database. */ 

struct genomeVarAttrLink *genomeVarAttrLinkCommaIn(char **pS, struct genomeVarAttrLink *ret);
/* Create a genomeVarAttrLink out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new genomeVarAttrLink */

void genomeVarAttrLinkFree(struct genomeVarAttrLink **pEl);
/* Free a single dynamically allocated genomeVarAttrLink such as created
 * with genomeVarAttrLinkLoad(). */

void genomeVarAttrLinkFreeList(struct genomeVarAttrLink **pList);
/* Free a list of dynamically allocated genomeVarAttrLink's */

void genomeVarAttrLinkOutput(struct genomeVarAttrLink *el, FILE *f, char sep, char lastSep);
/* Print out genomeVarAttrLink.  Separate fields with sep. Follow last field with lastSep. */

#define genomeVarAttrLinkTabOut(el,f) genomeVarAttrLinkOutput(el,f,'\t','\n');
/* Print out genomeVarAttrLink as a line in a tab-separated file. */

#define genomeVarAttrLinkCommaOut(el,f) genomeVarAttrLinkOutput(el,f,',',',');
/* Print out genomeVarAttrLink as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* GENOMEVAR_H */

