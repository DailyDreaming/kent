/* snp.h was originally generated by the autoSql program, which also 
 * generated snp.c and snp.sql.  This header links the database and the RAM 
 * representation of objects. */

#ifndef SNP_H
#define SNP_H

struct snp
/* Single nucleotide polymorphisms */
    {
    struct snp *next;    /* Next in singly linked list. */
    char *chrom;         /* Human chromosome or FPC contig */
    unsigned chromStart; /* Start position in chromosome */
    unsigned chromEnd;   /* End position in chromosome */
    char *name;          /* Name of SNP */
    };

void snpStaticLoad(char **row, struct snp *ret);
/* Load a row from snp table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct snp *snpLoad(char **row);
/* Load a snp from row fetched with select * from snp
 * from database.  Dispose of this with snpFree(). */

struct snp *snpCommaIn(char **pS, struct snp *ret);
/* Create a snp out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new snp */

void snpFree(struct snp **pEl);
/* Free a single dynamically allocated snp such as created
 * with snpLoad(). */

void snpFreeList(struct snp **pList);
/* Free a list of dynamically allocated snp's */

void snpOutput(struct snp *el, FILE *f, char sep, char lastSep);
/* Print out snp.  Separate fields with sep. Follow last field with lastSep. */

#define snpTabOut(el,f) snpOutput(el,f,'\t','\n');
/* Print out snp as a line in a tab-separated file. */

#define snpCommaOut(el,f) snpOutput(el,f,',',',');
/* Print out snp as a comma separated list including final comma. */

#endif /* SNP_H */

