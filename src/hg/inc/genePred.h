/* genePred.h was originally generated by the autoSql program, which also 
 * generated genePred.c and genePred.sql.  This header links the database and the RAM 
 * representation of objects. */

#ifndef GENEPRED_H
#define GENEPRED_H

#ifndef GFF_H
#include "gff.h"
#endif
struct psl;

struct genePred
/* A gene prediction. */
    {
    struct genePred *next;  /* Next in singly linked list. */
    char *name;	/* Name of gene */
    char *chrom;	/* Chromosome name */
    char strand[2];	/* + or - for strand */
    unsigned txStart;	/* Transcription start position */
    unsigned txEnd;	/* Transcription end position */
    unsigned cdsStart;	/* Coding region start */
    unsigned cdsEnd;	/* Coding region end */
    unsigned exonCount;	/* Number of exons */
    unsigned *exonStarts;	/* Exon start positions */
    unsigned *exonEnds;	/* Exon end positions */
    };

#define GENEPRED_NUM_COLS 10  /* number of columns in a genePred */

struct genePred *genePredLoad(char **row);
/* Load a genePred from row fetched with select * from genePred
 * from database.  Dispose of this with genePredFree(). */

struct genePred *genePredCommaIn(char **pS, struct genePred *ret);
/* Create a genePred out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new genePred */

void genePredFree(struct genePred **pEl);
/* Free a single dynamically allocated genePred such as created
 * with genePredLoad(). */

void genePredFreeList(struct genePred **pList);
/* Free a list of dynamically allocated genePred's */

void genePredOutput(struct genePred *el, FILE *f, char sep, char lastSep);
/* Print out genePred.  Separate fields with sep. Follow last field with lastSep. */

#define genePredTabOut(el,f) genePredOutput(el,f,'\t','\n');
/* Print out genePred as a line in a tab-separated file. */

#define genePredCommaOut(el,f) genePredOutput(el,f,',',',');
/* Print out genePred as a comma separated list including final comma. */

/* ---------  Start of hand generated code. ---------------------------- */

struct genePred *genePredLoadAll(char *fileName);
/* Load all genePred from a tab-separated file.
 * Dispose of this with genePredFreeList(). */

int genePredCmp(const void *va, const void *vb);
/* Compare to sort based on chromosome, txStart. */

struct genePred *genePredFromGroupedGff(struct gffFile *gff, struct gffGroup *group, 
	char *name, char *exonSelectWord);
/* Convert gff->groupList to genePred list.   Only put lines where feature type  matches
 * exonSelectWord into the gene.  (If exonSelectWord is NULL, all go in) */

struct genePred *genePredFromPsl(struct psl *psl, int cdsStart, int cdsEnd,
                                 int insertMergeSize);
/* Convert a PSL of an RNA alignment to a genePred, converting a genbank CDS
 * specification string to genomic coordinates. Small inserts, no more
 * than insertMergeSize, will be dropped and the blocks merged.  CDS start or
 * end of -1 creates without CDS annotation*/

char* genePredGetCreateSql(char* table, unsigned options);
/* Get SQL required to create a genePred table.  No options defined yet,
 * specify 0. */

struct genePred *getOverlappingGene(struct genePred **list,  char *table, char *chrom, int cStart, int cEnd, int *retOverlap);
/* read all genes from a table find the gene with the biggest overlap. 
   Cache the list of genes to so we only read it once */

int genePredBases(struct genePred *gp);
/* count coding and utr bases in a gene prediction */
#endif /* GENEPRED_H */

