/* ccdsKgMap.h was originally generated by the autoSql program, which also 
 * generated ccdsKgMap.c and ccdsKgMap.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef CCDSKGMAP_H
#define CCDSKGMAP_H

#define CCDSKGMAP_NUM_COLS 3

struct ccdsKgMap
/* mapping between CCDS ids and known genes ids */
    {
    struct ccdsKgMap *next;     /* Next in singly linked list. */
    char *ccdsId;               /* CCDS id with version  */
    char *kgId;                 /* UCSC Known Gene ID */
    float cdsSimilarity;        /* CDS similarity by genomic overlap */
    };

void ccdsKgMapStaticLoad(char **row, struct ccdsKgMap *ret);
/* Load a row from ccdsKgMap table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct ccdsKgMap *ccdsKgMapLoad(char **row);
/* Load a ccdsKgMap from row fetched with select * from ccdsKgMap
 * from database.  Dispose of this with ccdsKgMapFree(). */

struct ccdsKgMap *ccdsKgMapLoadAll(char *fileName);
/* Load all ccdsKgMap from whitespace-separated file.
 * Dispose of this with ccdsKgMapFreeList(). */

struct ccdsKgMap *ccdsKgMapLoadAllByChar(char *fileName, char chopper);
/* Load all ccdsKgMap from chopper separated file.
 * Dispose of this with ccdsKgMapFreeList(). */

#define ccdsKgMapLoadAllByTab(a) ccdsKgMapLoadAllByChar(a, '\t');
/* Load all ccdsKgMap from tab separated file.
 * Dispose of this with ccdsKgMapFreeList(). */

struct ccdsKgMap *ccdsKgMapCommaIn(char **pS, struct ccdsKgMap *ret);
/* Create a ccdsKgMap out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new ccdsKgMap */

void ccdsKgMapFree(struct ccdsKgMap **pEl);
/* Free a single dynamically allocated ccdsKgMap such as created
 * with ccdsKgMapLoad(). */

void ccdsKgMapFreeList(struct ccdsKgMap **pList);
/* Free a list of dynamically allocated ccdsKgMap's */

void ccdsKgMapOutput(struct ccdsKgMap *el, FILE *f, char sep, char lastSep);
/* Print out ccdsKgMap.  Separate fields with sep. Follow last field with lastSep. */

#define ccdsKgMapTabOut(el,f) ccdsKgMapOutput(el,f,'\t','\n');
/* Print out ccdsKgMap as a line in a tab-separated file. */

#define ccdsKgMapCommaOut(el,f) ccdsKgMapOutput(el,f,',',',');
/* Print out ccdsKgMap as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

char *ccdsKgMapGetCreateSql(char *table);
/* Get sql command to create ccdsKgMap table. Result should be freed. */

char *ccdsKgMapGetCreateSql(char *table);
/* Get sql command to create ccdsKgMap table. Result should be freed. */

struct ccdsKgMap *ccdsKgMapSelectByCcds(struct sqlConnection *conn, char *ccdsId,
                                        float minSimilarity);
/* select ccdsKgMap records by refseq accession and minimum CDS similarity. */

struct ccdsKgMap *ccdsKgMapSelectByKG(struct sqlConnection *conn, char *kgId,
                                      float minSimilarity);
/* select ccdsKgMap records by known gene id and minimum CDS similarity. */

int ccdsKgMapSimilarityCmp(const void *va, const void *vb);
/* compare based on descending similarity */

int ccdsKgMapKgIdCmp(const void *va, const void *vb);
/* compare based on kg id */

#endif /* CCDSKGMAP_H */

