/* txEdgeOrtho.h was originally generated by the autoSql program, which also 
 * generated txEdgeOrtho.c and txEdgeOrtho.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef TXEDGEORTHO_H
#define TXEDGEORTHO_H

#define TXEDGEBED_NUM_COLS 19

enum txEdgeBedType
    {
    txEdgeBedExon = 0,
    txEdgeBedIntron = 1,
    };
struct txEdgeBed
/* A transcription edge with additional orthology information. */
    {
    struct txEdgeBed *next;  /* Next in singly linked list. */
    char *chrom;	/* Chromosome or contig name */
    int chromStart;	/* Start position, zero-based */
    int chromEnd;	/* End position, non-inclusive */
    char *name;	/* Name of txGraph in other organism */
    int score;	/* Parts per thousand of edge that align */
    char strand[2];	/* Strand - either plus or minus */
    char startType[2];	/* [ or ( for hard or soft */
    enum txEdgeBedType type;	/* edge type */
    char endType[2];	/* ] or ) for hard or soft */
    char *mappedChrom;	/* Chromosome in other organism */
    int mappedStart;	/* ChromStart mapped to other organism */
    int mappedEnd;	/* ChromEnd mapped to other organism */
    char *txGraph;	/* Transcription graph name in this organism */
    int overlapScore;	/* Parts per thousand of mapped/ortho overlap */
    char orthoStrand[2];	/* Strand of orthologous txGraph */
    char orthoStartType[2];	/* Is orthologous start hard/soft? */
    char orthoEndType[2];	/* Is orthologous end hard/soft? */
    int orthoStart;	/* Start of orthologous edge (based on RNA in other species) */
    int orthoEnd;	/* End of orthologous edge (based on RNA in other species) */
    };

void txEdgeBedStaticLoad(char **row, struct txEdgeBed *ret);
/* Load a row from txEdgeBed table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct txEdgeBed *txEdgeBedLoad(char **row);
/* Load a txEdgeBed from row fetched with select * from txEdgeBed
 * from database.  Dispose of this with txEdgeBedFree(). */

struct txEdgeBed *txEdgeBedLoadAll(char *fileName);
/* Load all txEdgeBed from whitespace-separated file.
 * Dispose of this with txEdgeBedFreeList(). */

struct txEdgeBed *txEdgeBedLoadAllByChar(char *fileName, char chopper);
/* Load all txEdgeBed from chopper separated file.
 * Dispose of this with txEdgeBedFreeList(). */

#define txEdgeBedLoadAllByTab(a) txEdgeBedLoadAllByChar(a, '\t');
/* Load all txEdgeBed from tab separated file.
 * Dispose of this with txEdgeBedFreeList(). */

struct txEdgeBed *txEdgeBedCommaIn(char **pS, struct txEdgeBed *ret);
/* Create a txEdgeBed out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new txEdgeBed */

void txEdgeBedFree(struct txEdgeBed **pEl);
/* Free a single dynamically allocated txEdgeBed such as created
 * with txEdgeBedLoad(). */

void txEdgeBedFreeList(struct txEdgeBed **pList);
/* Free a list of dynamically allocated txEdgeBed's */

void txEdgeBedOutput(struct txEdgeBed *el, FILE *f, char sep, char lastSep);
/* Print out txEdgeBed.  Separate fields with sep. Follow last field with lastSep. */

#define txEdgeBedTabOut(el,f) txEdgeBedOutput(el,f,'\t','\n');
/* Print out txEdgeBed as a line in a tab-separated file. */

#define txEdgeBedCommaOut(el,f) txEdgeBedOutput(el,f,',',',');
/* Print out txEdgeBed as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* TXEDGEORTHO_H */

