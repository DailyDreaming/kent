/* plasPairs.h was originally generated by the autoSql program, which also 
 * generated plasPairs.c and plasPairs.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef PLASPAIRS_H
#define PLASPAIRS_H

struct plasPairs
/* Standard plasPairs table to show the pairs info */
    {
    struct plasPairs *next;  /* Next in singly linked list. */
    char *cName;	/* pairs cluster name */
    char *chrom;	/* Human chromosome  */
    char *acc1;	/* one end of the plasend paired-reads */
    unsigned acc1Start;	/* Start position of clone in chromosome */
    unsigned acc1End;	/* End position of clone in chromosome */
    char *acc1Orien;	/* read orientation. */
    char *acc2;	/* the other end. */
    unsigned acc2Start;	/* Start position of clone in chromosome */
    unsigned acc2End;	/* End position of clone in chromosome */
    char *acc2Orien;	/* read orientation. */
    };

void plasPairsStaticLoad(char **row, struct plasPairs *ret);
/* Load a row from plasPairs table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct plasPairs *plasPairsLoad(char **row);
/* Load a plasPairs from row fetched with select * from plasPairs
 * from database.  Dispose of this with plasPairsFree(). */

struct plasPairs *plasPairsLoadAll(char *fileName);
/* Load all plasPairs from a tab-separated file.
 * Dispose of this with plasPairsFreeList(). */

struct plasPairs *plasPairsLoadWhere(struct sqlConnection *conn, char *table, char *where);
/* Load all plasPairs from table that satisfy where clause. The
 * where clause may be NULL in which case whole table is loaded
 * Dispose of this with plasPairsFreeList(). */

struct plasPairs *plasPairsCommaIn(char **pS, struct plasPairs *ret);
/* Create a plasPairs out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new plasPairs */

void plasPairsFree(struct plasPairs **pEl);
/* Free a single dynamically allocated plasPairs such as created
 * with plasPairsLoad(). */

void plasPairsFreeList(struct plasPairs **pList);
/* Free a list of dynamically allocated plasPairs's */

void plasPairsOutput(struct plasPairs *el, FILE *f, char sep, char lastSep);
/* Print out plasPairs.  Separate fields with sep. Follow last field with lastSep. */

#define plasPairsTabOut(el,f) plasPairsOutput(el,f,'\t','\n');
/* Print out plasPairs as a line in a tab-separated file. */

#define plasPairsCommaOut(el,f) plasPairsOutput(el,f,',',',');
/* Print out plasPairs as a comma separated list including final comma. */

#endif /* PLASPAIRS_H */

