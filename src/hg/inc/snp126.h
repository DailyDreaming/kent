/* snp126.h was originally generated by the autoSql program, which also 
 * generated snp126.c and snp126.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef SNP126_H
#define SNP126_H

#define SNP126_NUM_COLS 17

struct snp126
/* Polymorphism data from dbSnp database or genotyping arrays */
    {
    struct snp126 *next;  /* Next in singly linked list. */
    char *chrom;	/* Reference sequence chromosome or scaffold */
    unsigned chromStart;	/* Start position in chrom */
    unsigned chromEnd;	/* End position in chrom */
    char *name;	/* Reference SNP identifier or Affy SNP name */
    unsigned score;	/* Not used */
    char *strand;	/* Which DNA strand contains the observed alleles */
    char *refNCBI;	/* Reference genomic from dbSNP */
    char *refUCSC;	/* Reference genomic from nib lookup */
    char *observed;	/* The sequences of the observed alleles from rs-fasta files */
    char *molType;	/* Sample type from exemplar ss */
    char *class;	/* The class of variant (simple, insertion, deletion, range, etc.) */
    char *valid;	/* The validation status of the SNP */
    float avHet;	/* The average heterozygosity from all observations */
    float avHetSE;	/* The Standard Error for the average heterozygosity */
    char *func;	/* The functional category of the SNP (coding-synon, coding-nonsynon, intron, etc.) */
    char *locType;	/* How the variant affects the reference sequence */
    unsigned weight;	/* The quality of the alignment */
    };

void snp126StaticLoad(char **row, struct snp126 *ret);
/* Load a row from snp126 table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct snp126 *snp126Load(char **row);
/* Load a snp126 from row fetched with select * from snp126
 * from database.  Dispose of this with snp126Free(). */

struct snp126 *snp126LoadAll(char *fileName);
/* Load all snp126 from whitespace-separated file.
 * Dispose of this with snp126FreeList(). */

struct snp126 *snp126LoadAllByChar(char *fileName, char chopper);
/* Load all snp126 from chopper separated file.
 * Dispose of this with snp126FreeList(). */

#define snp126LoadAllByTab(a) snp126LoadAllByChar(a, '\t');
/* Load all snp126 from tab separated file.
 * Dispose of this with snp126FreeList(). */

struct snp126 *snp126CommaIn(char **pS, struct snp126 *ret);
/* Create a snp126 out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new snp126 */

void snp126Free(struct snp126 **pEl);
/* Free a single dynamically allocated snp126 such as created
 * with snp126Load(). */

void snp126FreeList(struct snp126 **pList);
/* Free a list of dynamically allocated snp126's */

void snp126Output(struct snp126 *el, FILE *f, char sep, char lastSep);
/* Print out snp126.  Separate fields with sep. Follow last field with lastSep. */

#define snp126TabOut(el,f) snp126Output(el,f,'\t','\n');
/* Print out snp126 as a line in a tab-separated file. */

#define snp126CommaOut(el,f) snp126Output(el,f,',',',');
/* Print out snp126 as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */


void snp126TableCreate(struct sqlConnection *conn, char *tableName);
/* create a snp126 table */

int snp126Cmp(const void *va, const void *vb);

#endif /* SNP126_H */

