/* psLayHit.h was originally generated by the autoSql program, which also 
 * generated psLayHit.c and psLayHit.sql.  This header links the database and the RAM 
 * representation of objects. */

#ifndef PSLAYHIT_H
#define PSLAYHIT_H

struct psLayHit
/* Summary info about a patSpace alignment */
    {
    struct psLayHit *next;  /* Next in singly linked list. */
    unsigned match;	/* Number of bases that match that aren't repeats */
    unsigned misMatch;	/* Number of bases that don't match */
    unsigned repMatch;	/* Number of bases that match but are part of repeats */
    unsigned nCount;	/* Number of 'N' bases */
    unsigned qNumInsert;	/* Number of inserts in query */
    unsigned qBaseInsert;	/* Number of bases inserted in query */
    unsigned tNumInsert;	/* Number of inserts in target */
    unsigned tBaseInsert;	/* Number of bases inserted in target */
    char strand[2];	/* + or - for strand */
    char *qName;	/* Query sequence name */
    unsigned qSize;	/* Query sequence size */
    unsigned qStart;	/* Alignment start position in query */
    unsigned qEnd;	/* Alignment end position in query */
    char *tName;	/* Target sequence name */
    unsigned tSize;	/* Target sequence size */
    unsigned tStart;	/* Alignment start position in target */
    unsigned tEnd;	/* Alignment end position in target */
    unsigned blockCount;	/* Number of blocks in alignment */
    unsigned *blockSizes;	/* Size of each block */
    unsigned *qStarts;	/* Start of each block in query. */
    unsigned *tStarts;	/* Start of each block in target. */
    };

struct psLayHit *psLayHitLoad(char **row);
/* Load a psLayHit from row fetched with select * from psLayHit
 * from database.  Dispose of this with psLayHitFree(). */

struct psLayHit *psLayHitCommaIn(char **pS, struct psLayHit *ret);
/* Create a psLayHit out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new psLayHit */

void psLayHitFree(struct psLayHit **pEl);
/* Free a single dynamically allocated psLayHit such as created
 * with psLayHitLoad(). */

void psLayHitFreeList(struct psLayHit **pList);
/* Free a list of dynamically allocated psLayHit's */

void psLayHitOutput(struct psLayHit *el, FILE *f, char sep, char lastSep);
/* Print out psLayHit.  Separate fields with sep. Follow last field with lastSep. */

#define psLayHitTabOut(el,f) psLayHitOutput(el,f,'\t','\n');
/* Print out psLayHit as a line in a tab-separated file. */

#define psLayHitCommaOut(el,f) psLayHitOutput(el,f,',',',');
/* Print out psLayHit as a comma separated list including final comma. */

#endif /* PSLAYHIT_H */

