#!/usr/bin/env python2.7
import sys
import argparse
import time

from ucscgenomics.qa import qaUtils
from ucscgenomics.qa.tables import factory
from ucscgenomics.qa.tables import reporter
from ucscgenomics.qa.tables import summary
from ucscgenomics.qa.encode import tableCheck

def parseCommandLine():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='Validates tables and records table statistics',
        epilog="""
The following tests are run:
  positionalTblCheck
  checkTblCoords
  genePredCheck
  pslCheck
  checks for the existence of table descriptions
  (checks for shortLabels and longLabels that are too long)
  checks for underscores in table names
  featureBits
  (joinerCheck) - not yet implemented
  countPerChrom

  creates 3 files:  outFile.summary, outFile.log, outFile.chrom
        """)
    parser.add_argument('db', help='the database to check')
    parser.add_argument('tableList', help='a file listing the tables to check')
    parser.add_argument('outFile', help='base name for results files')
    return parser.parse_args()

def getTableListFromFile():
    with open(args.tableList, "r") as f:
        raw = f.readlines()
    return [name.strip() for name in raw]

delimiterLine = "==============================================="
def runTests():
    """Runs validate() and statistics() methods on each table. Writes log output."""
    reporter.writeTimestamp()
    reporter.writeBlankLine()
    for table in tableList:
        reporter.writeLine(delimiterLine)
        reporter.writeLine(args.db + "." + table +":\n")
        table = factory.tableQaFactory(args.db, table, reporter, sumTable)
        table.validate()
        table.statistics()
    reporter.writeLine(delimiterLine)
    reporter.writeLine("Tests complete:")
    reporter.writeTimestamp()

def writeSummaryFile():
    sumFile.write(sumTable.tabSeparated())

def runChromCounts():
    chromFile.write(time.asctime() + "\n")
    chromFile.write("Database: " + args.db + "\n\n")
    tableSet = set(tableList)
    output, tablecounts = tableCheck.countPerChrom(args.db, tableSet)
    for line in output:
        chromFile.write(line + "\n")

args = parseCommandLine()
tableList = getTableListFromFile()
qaUtils.checkTablesExist(args.db, tableList)

logFile = open(args.outFile + ".log", "w")
chromFile = open(args.outFile + ".chroms", "w")
sumFile = open(args.outFile + ".summary", "w")
reporter = reporter.Reporter(logFile)
sumTable = summary.SumTable()

runTests()
runChromCounts()
writeSummaryFile()

logFile.close()
sumFile.close()
chromFile.close()
