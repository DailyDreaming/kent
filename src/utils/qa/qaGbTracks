#!/usr/bin/env python2.7
import sys
import argparse
import time

from ucscGb.qa import qaUtils
from ucscGb.qa.tables import factory
from ucscGb.qa.tables import reporter
from ucscGb.qa.tables import summary
from ucscGb.qa.encode import tableCheck

def parseCommandLine():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='Validates tables and records table statistics',
        epilog="""
The following tests are run:
  checks for underscores in table names
  checks for the existence of table descriptions
  checks shortLabel and longLabel length
  positionalTblCheck
  checkTblCoords
  genePredCheck
  pslCheck
  featureBits
  (a version of) countPerChrom

  creates 3 files:  outFile.summary, outFile.log, outFile.chrom
        """)
    parser.add_argument('db', help='the database to check')
    parser.add_argument('-s, --single', help ='tableList is the name of a single table',
                        action="store_true", dest="single")
    parser.add_argument('tableList', help=
                        'a file listing the tables to check, or the name of a single table')
    parser.add_argument('outFile', help='base name to give results files')
    return parser.parse_args()

def getTableList():
    if args.single:
        return [args.tableList]
    else:
        with open(args.tableList, "r") as f:
            raw = f.readlines()
        return [name.strip() for name in raw]

delimiterLine = "==============================================="
def runTests():
    """Runs validate() and statistics() methods on each table. Writes log output."""
    reporter.writeTimestamp()
    reporter.writeBlankLine()
    for table in tableList:
        reporter.writeLine(delimiterLine)
        reporter.writeLine(args.db + "." + table +":\n")
        table = factory.tableQaFactory(args.db, table, reporter, sumTable)
        table.validate()
        table.statistics()
    reporter.writeLine(delimiterLine)
    reporter.writeLine("Tests complete:")
    reporter.writeTimestamp()

def writeSummaryFile():
    sumFile.write(sumTable.tabSeparated())

def runChromCounts():
    chromFile.write(time.asctime() + "\n")
    chromFile.write("Database: " + args.db + "\n\n")
    tableSet = set(tableList)
    output, tablecounts = tableCheck.countPerChrom(args.db, tableSet)
    for line in output:
        chromFile.write(line + "\n")

args = parseCommandLine()
tableList = getTableList()
qaUtils.checkTablesExist(args.db, tableList)

logFile = open(args.outFile + ".log", "w")
chromFile = open(args.outFile + ".chroms", "w")
sumFile = open(args.outFile + ".summary", "w")
reporter = reporter.Reporter(logFile)
sumTable = summary.SumTable()

runTests()
runChromCounts()
writeSummaryFile()

logFile.close()
sumFile.close()
chromFile.close()
