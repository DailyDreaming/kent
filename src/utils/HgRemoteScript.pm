#
# HgRemoteScript: object for writing a script file and executing it on another
#                 machine using ssh.
#
# DO NOT EDIT the /cluster/bin/scripts copy of this file --
# edit ~/kent/src/utils/HgRemoteScript.pm instead.

# $Id: HgRemoteScript.pm,v 1.1 2006/06/26 19:01:03 angie Exp $
package HgRemoteScript;

use warnings;
use strict;
use FindBin qw($Bin);
use lib "$Bin";
use HgAutomate;
use Carp;
use vars qw(@ISA @EXPORT_OK);
use Exporter;

@ISA = qw(Exporter);
@EXPORT_OK = qw( new add execute );

sub new {
  # Create and return an HgRemoteScript object.  $configFile is optional.
  my ($class, $scriptFile, $runHost, $runDir, $purpose, $configFile) = @_;
  confess "Too few arguments" if (! defined $purpose);
  confess "Too many arguments" if (scalar(@_) > 6);
  my $this = {};
  $this->{'fileName'} = $scriptFile;
  $this->{'runHost'} = $runHost;
  $this->{'fh'} = &HgAutomate::mustOpen(">$scriptFile");
  $this->{'hasBeenExecuted'} = 0;
  my $fh = $this->{'fh'};
  print $fh <<_EOF_
#!/bin/csh -efx
# This script was automatically generated by $0
_EOF_
  ;
  if ($configFile) {
    print $fh "# from $configFile\n";
  }
  $purpose =~ s/^([^#])/# $1/;
  $purpose =~ s/\n([^#])/\n# $1/g;
  $purpose =~ s/\n$//;
  print $fh <<_EOF_
# It is to be executed on $runHost in $runDir .
$purpose
# This script will fail if any of its commands fail.

cd $runDir

_EOF_
  ;
  bless $this, $class;
}

sub add {
  # Add text to the script (must not be called after execute).
  my $this = shift;
  if ($this->{'hasBeenExecuted'}) {
    confess "Cannot be called after execute.";
  }
  my $fh = $this->{'fh'};
  print $fh @_;
}

sub execute {
  # Close the script file, chmod, and run it on the intended host.
  my $this = shift;
  $this->{'hasBeenExecuted'} = 1;
  close($this->{'fh'});
  &HgAutomate::run("chmod a+x $this->{fileName}");
  &HgAutomate::run("ssh -x $this->{runHost} nice $this->{fileName}");
}

# perl packages need to end by returning a positive value:
1;
